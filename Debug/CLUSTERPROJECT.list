
CLUSTERPROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ef4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08005000  08005000  00015000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051f0  080051f0  00020440  2**0
                  CONTENTS
  4 .ARM          00000000  080051f0  080051f0  00020440  2**0
                  CONTENTS
  5 .preinit_array 00000000  080051f0  080051f0  00020440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051f0  080051f0  000151f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051f4  080051f4  000151f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000440  20000000  080051f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000998  20000440  08005638  00020440  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000dd8  08005638  00020dd8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020440  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020469  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e8e3  00000000  00000000  000204ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002002  00000000  00000000  0002ed8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000eb8  00000000  00000000  00030d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b91  00000000  00000000  00031c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017497  00000000  00000000  000327e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001042c  00000000  00000000  00049c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a822  00000000  00000000  0005a0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ee0  00000000  00000000  000e48c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  000e87a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000440 	.word	0x20000440
 8000128:	00000000 	.word	0x00000000
 800012c:	08004fe8 	.word	0x08004fe8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000444 	.word	0x20000444
 8000148:	08004fe8 	.word	0x08004fe8

0800014c <Lcd_cmd>:
//extern enum alp{A=1,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,W,X,Y,Z};
uint8_t lcd_temp_ram[8][128];
uint8_t lcd_temp_ram_1[8][128];

void Lcd_cmd(uint8_t cmd)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	GPIOB->BRR|=lcd_adr_Pin;  //Address(RESET);
 8000156:	4b13      	ldr	r3, [pc, #76]	; (80001a4 <Lcd_cmd+0x58>)
 8000158:	695b      	ldr	r3, [r3, #20]
 800015a:	4a12      	ldr	r2, [pc, #72]	; (80001a4 <Lcd_cmd+0x58>)
 800015c:	f043 0301 	orr.w	r3, r3, #1
 8000160:	6153      	str	r3, [r2, #20]
	GPIOB->BRR|=lcd_chip_sel_Pin;  //CS_1(RESET);
 8000162:	4b10      	ldr	r3, [pc, #64]	; (80001a4 <Lcd_cmd+0x58>)
 8000164:	695b      	ldr	r3, [r3, #20]
 8000166:	4a0f      	ldr	r2, [pc, #60]	; (80001a4 <Lcd_cmd+0x58>)
 8000168:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800016c:	6153      	str	r3, [r2, #20]
	parllel_transmit(cmd&0xFF);
 800016e:	79fb      	ldrb	r3, [r7, #7]
 8000170:	4618      	mov	r0, r3
 8000172:	f001 f957 	bl	8001424 <parllel_transmit>
	GPIOB->ODR|=LCD_RD_Pin;
 8000176:	4b0b      	ldr	r3, [pc, #44]	; (80001a4 <Lcd_cmd+0x58>)
 8000178:	68db      	ldr	r3, [r3, #12]
 800017a:	4a0a      	ldr	r2, [pc, #40]	; (80001a4 <Lcd_cmd+0x58>)
 800017c:	f043 0302 	orr.w	r3, r3, #2
 8000180:	60d3      	str	r3, [r2, #12]
	GPIOB->BRR|=LCD_RD_Pin;
 8000182:	4b08      	ldr	r3, [pc, #32]	; (80001a4 <Lcd_cmd+0x58>)
 8000184:	695b      	ldr	r3, [r3, #20]
 8000186:	4a07      	ldr	r2, [pc, #28]	; (80001a4 <Lcd_cmd+0x58>)
 8000188:	f043 0302 	orr.w	r3, r3, #2
 800018c:	6153      	str	r3, [r2, #20]
	GPIOB->ODR|=lcd_chip_sel_Pin;   //CS_1(SET);
 800018e:	4b05      	ldr	r3, [pc, #20]	; (80001a4 <Lcd_cmd+0x58>)
 8000190:	68db      	ldr	r3, [r3, #12]
 8000192:	4a04      	ldr	r2, [pc, #16]	; (80001a4 <Lcd_cmd+0x58>)
 8000194:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000198:	60d3      	str	r3, [r2, #12]
}
 800019a:	bf00      	nop
 800019c:	3708      	adds	r7, #8
 800019e:	46bd      	mov	sp, r7
 80001a0:	bd80      	pop	{r7, pc}
 80001a2:	bf00      	nop
 80001a4:	40010c00 	.word	0x40010c00

080001a8 <lcd_print_ram_1>:

void lcd_print_ram_1()
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b082      	sub	sp, #8
 80001ac:	af00      	add	r7, sp, #0
	for(int y_axsis=0;y_axsis<=7;y_axsis++)
 80001ae:	2300      	movs	r3, #0
 80001b0:	607b      	str	r3, [r7, #4]
 80001b2:	e03f      	b.n	8000234 <lcd_print_ram_1+0x8c>
	{
		Lcd_cmd(y_axsis+0xB0);
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	b2db      	uxtb	r3, r3
 80001b8:	3b50      	subs	r3, #80	; 0x50
 80001ba:	b2db      	uxtb	r3, r3
 80001bc:	4618      	mov	r0, r3
 80001be:	f7ff ffc5 	bl	800014c <Lcd_cmd>
		for(int x_axsis=0;x_axsis<=127;x_axsis++)
 80001c2:	2300      	movs	r3, #0
 80001c4:	603b      	str	r3, [r7, #0]
 80001c6:	e02f      	b.n	8000228 <lcd_print_ram_1+0x80>
		{
			lcd_x_axis(x_axsis);
 80001c8:	683b      	ldr	r3, [r7, #0]
 80001ca:	b2db      	uxtb	r3, r3
 80001cc:	4618      	mov	r0, r3
 80001ce:	f000 f87f 	bl	80002d0 <lcd_x_axis>
			GPIOB->ODR|=lcd_adr_Pin;  //Address(RESET);
 80001d2:	4b1c      	ldr	r3, [pc, #112]	; (8000244 <lcd_print_ram_1+0x9c>)
 80001d4:	68db      	ldr	r3, [r3, #12]
 80001d6:	4a1b      	ldr	r2, [pc, #108]	; (8000244 <lcd_print_ram_1+0x9c>)
 80001d8:	f043 0301 	orr.w	r3, r3, #1
 80001dc:	60d3      	str	r3, [r2, #12]
			GPIOB->ODR|=LCD_RD_Pin;
 80001de:	4b19      	ldr	r3, [pc, #100]	; (8000244 <lcd_print_ram_1+0x9c>)
 80001e0:	68db      	ldr	r3, [r3, #12]
 80001e2:	4a18      	ldr	r2, [pc, #96]	; (8000244 <lcd_print_ram_1+0x9c>)
 80001e4:	f043 0302 	orr.w	r3, r3, #2
 80001e8:	60d3      	str	r3, [r2, #12]
			GPIOB->BRR|=lcd_chip_sel_Pin;  //CS_1(RESET);
 80001ea:	4b16      	ldr	r3, [pc, #88]	; (8000244 <lcd_print_ram_1+0x9c>)
 80001ec:	695b      	ldr	r3, [r3, #20]
 80001ee:	4a15      	ldr	r2, [pc, #84]	; (8000244 <lcd_print_ram_1+0x9c>)
 80001f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001f4:	6153      	str	r3, [r2, #20]
			parllel_transmit( (lcd_temp_ram_1[y_axsis][x_axsis])& 0XFF);
 80001f6:	4a14      	ldr	r2, [pc, #80]	; (8000248 <lcd_print_ram_1+0xa0>)
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	01db      	lsls	r3, r3, #7
 80001fc:	441a      	add	r2, r3
 80001fe:	683b      	ldr	r3, [r7, #0]
 8000200:	4413      	add	r3, r2
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	4618      	mov	r0, r3
 8000206:	f001 f90d 	bl	8001424 <parllel_transmit>
			GPIOB->ODR|=lcd_chip_sel_Pin;
 800020a:	4b0e      	ldr	r3, [pc, #56]	; (8000244 <lcd_print_ram_1+0x9c>)
 800020c:	68db      	ldr	r3, [r3, #12]
 800020e:	4a0d      	ldr	r2, [pc, #52]	; (8000244 <lcd_print_ram_1+0x9c>)
 8000210:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000214:	60d3      	str	r3, [r2, #12]
			GPIOB->BRR|=LCD_RD_Pin;//CS_1(SET);
 8000216:	4b0b      	ldr	r3, [pc, #44]	; (8000244 <lcd_print_ram_1+0x9c>)
 8000218:	695b      	ldr	r3, [r3, #20]
 800021a:	4a0a      	ldr	r2, [pc, #40]	; (8000244 <lcd_print_ram_1+0x9c>)
 800021c:	f043 0302 	orr.w	r3, r3, #2
 8000220:	6153      	str	r3, [r2, #20]
		for(int x_axsis=0;x_axsis<=127;x_axsis++)
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	3301      	adds	r3, #1
 8000226:	603b      	str	r3, [r7, #0]
 8000228:	683b      	ldr	r3, [r7, #0]
 800022a:	2b7f      	cmp	r3, #127	; 0x7f
 800022c:	ddcc      	ble.n	80001c8 <lcd_print_ram_1+0x20>
	for(int y_axsis=0;y_axsis<=7;y_axsis++)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	3301      	adds	r3, #1
 8000232:	607b      	str	r3, [r7, #4]
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	2b07      	cmp	r3, #7
 8000238:	ddbc      	ble.n	80001b4 <lcd_print_ram_1+0xc>
		}
	}
}
 800023a:	bf00      	nop
 800023c:	bf00      	nop
 800023e:	3708      	adds	r7, #8
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}
 8000244:	40010c00 	.word	0x40010c00
 8000248:	2000085c 	.word	0x2000085c

0800024c <lcd_init>:

void lcd_init(){
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
	GPIOB->BRR|=lcd_chip_sel_Pin;	 				//HAL_GPIO_WritePin(GPIOA,  CS_1_Pin,RESET);// low the cs pin to listen the controller
 8000250:	4b1e      	ldr	r3, [pc, #120]	; (80002cc <lcd_init+0x80>)
 8000252:	695b      	ldr	r3, [r3, #20]
 8000254:	4a1d      	ldr	r2, [pc, #116]	; (80002cc <lcd_init+0x80>)
 8000256:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800025a:	6153      	str	r3, [r2, #20]
	HAL_GPIO_WritePin(GPIOB, lcd_reset_Pin,RESET); // low reset button
 800025c:	2200      	movs	r2, #0
 800025e:	2104      	movs	r1, #4
 8000260:	481a      	ldr	r0, [pc, #104]	; (80002cc <lcd_init+0x80>)
 8000262:	f002 ffe9 	bl	8003238 <HAL_GPIO_WritePin>
	HAL_Delay(500); // wait for 500ms
 8000266:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800026a:	f001 feef 	bl	800204c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, lcd_reset_Pin,SET); // high the reset button for initial reset
 800026e:	2201      	movs	r2, #1
 8000270:	2104      	movs	r1, #4
 8000272:	4816      	ldr	r0, [pc, #88]	; (80002cc <lcd_init+0x80>)
 8000274:	f002 ffe0 	bl	8003238 <HAL_GPIO_WritePin>

	  // LCD bias select
	  Lcd_cmd(CMD_SET_BIAS_9);
 8000278:	20a2      	movs	r0, #162	; 0xa2
 800027a:	f7ff ff67 	bl	800014c <Lcd_cmd>
	  // ADC select
	  Lcd_cmd(CMD_SET_ADC_NORMAL);
 800027e:	20a0      	movs	r0, #160	; 0xa0
 8000280:	f7ff ff64 	bl	800014c <Lcd_cmd>
	  // SHL select
	  Lcd_cmd(CMD_SET_COM_NORMAL);
 8000284:	20c0      	movs	r0, #192	; 0xc0
 8000286:	f7ff ff61 	bl	800014c <Lcd_cmd>
	  // Initial display line
	  Lcd_cmd(CMD_SET_DISP_START_LINE);
 800028a:	2040      	movs	r0, #64	; 0x40
 800028c:	f7ff ff5e 	bl	800014c <Lcd_cmd>

	  // turn on voltage converter (VC=1, VR=0, VF=0)
	  Lcd_cmd(CMD_SET_POWER_CONTROL | 0x4);
 8000290:	202c      	movs	r0, #44	; 0x2c
 8000292:	f7ff ff5b 	bl	800014c <Lcd_cmd>
	  // wait for 50% rising
	  HAL_Delay(50);
 8000296:	2032      	movs	r0, #50	; 0x32
 8000298:	f001 fed8 	bl	800204c <HAL_Delay>

	  // turn on voltage regulator (VC=1, VR=1, VF=0)
	  Lcd_cmd(CMD_SET_POWER_CONTROL | 0x6);
 800029c:	202e      	movs	r0, #46	; 0x2e
 800029e:	f7ff ff55 	bl	800014c <Lcd_cmd>
	  // wait >=50ms
	  HAL_Delay(50);
 80002a2:	2032      	movs	r0, #50	; 0x32
 80002a4:	f001 fed2 	bl	800204c <HAL_Delay>

	  // turn on voltage follower (VC=1, VR=1, VF=1)
	  Lcd_cmd(CMD_SET_POWER_CONTROL | 0x7);
 80002a8:	202f      	movs	r0, #47	; 0x2f
 80002aa:	f7ff ff4f 	bl	800014c <Lcd_cmd>
	  // wait
	  HAL_Delay(50);
 80002ae:	2032      	movs	r0, #50	; 0x32
 80002b0:	f001 fecc 	bl	800204c <HAL_Delay>

	  // set lcd operating voltage (regulator resistor, ref voltage resistor)
	  Lcd_cmd(CMD_SET_RESISTOR_RATIO | 0x4);
 80002b4:	2024      	movs	r0, #36	; 0x24
 80002b6:	f7ff ff49 	bl	800014c <Lcd_cmd>
	  // set column address
	  // write display data

	  // set up a bounding box for screen updates

	  Lcd_cmd(0xAF);    //Display on
 80002ba:	20af      	movs	r0, #175	; 0xaf
 80002bc:	f7ff ff46 	bl	800014c <Lcd_cmd>
	  Lcd_cmd(0XA4);
 80002c0:	20a4      	movs	r0, #164	; 0xa4
 80002c2:	f7ff ff43 	bl	800014c <Lcd_cmd>
	}
 80002c6:	bf00      	nop
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	40010c00 	.word	0x40010c00

080002d0 <lcd_x_axis>:

void lcd_x_axis(uint8_t value){
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	4603      	mov	r3, r0
 80002d8:	71fb      	strb	r3, [r7, #7]

    Lcd_cmd(0x10|((value&0xF0)>>4));//Setting  y-address  Msb
 80002da:	79fb      	ldrb	r3, [r7, #7]
 80002dc:	091b      	lsrs	r3, r3, #4
 80002de:	b2db      	uxtb	r3, r3
 80002e0:	f043 0310 	orr.w	r3, r3, #16
 80002e4:	b2db      	uxtb	r3, r3
 80002e6:	4618      	mov	r0, r3
 80002e8:	f7ff ff30 	bl	800014c <Lcd_cmd>
    Lcd_cmd(value&0x0F); //Setting  y-address  Lsb
 80002ec:	79fb      	ldrb	r3, [r7, #7]
 80002ee:	f003 030f 	and.w	r3, r3, #15
 80002f2:	b2db      	uxtb	r3, r3
 80002f4:	4618      	mov	r0, r3
 80002f6:	f7ff ff29 	bl	800014c <Lcd_cmd>
}
 80002fa:	bf00      	nop
 80002fc:	3708      	adds	r7, #8
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
	...

08000304 <lcd_invert_process>:

void lcd_invert_process()
{
 8000304:	b480      	push	{r7}
 8000306:	b085      	sub	sp, #20
 8000308:	af00      	add	r7, sp, #0
	for(int y_axsis=0;y_axsis<=7;y_axsis++){
 800030a:	2300      	movs	r3, #0
 800030c:	60fb      	str	r3, [r7, #12]
 800030e:	e01f      	b.n	8000350 <lcd_invert_process+0x4c>
			uint8_t temp_x_axsis=0;
 8000310:	2300      	movs	r3, #0
 8000312:	72fb      	strb	r3, [r7, #11]
			for(int x_axsis=127;x_axsis>=0;x_axsis--)
 8000314:	237f      	movs	r3, #127	; 0x7f
 8000316:	607b      	str	r3, [r7, #4]
 8000318:	e014      	b.n	8000344 <lcd_invert_process+0x40>
			{
				lcd_temp_ram_1[y_axsis][temp_x_axsis++]=(lcd_temp_ram[y_axsis][x_axsis]);
 800031a:	7afb      	ldrb	r3, [r7, #11]
 800031c:	1c5a      	adds	r2, r3, #1
 800031e:	72fa      	strb	r2, [r7, #11]
 8000320:	4618      	mov	r0, r3
 8000322:	4a10      	ldr	r2, [pc, #64]	; (8000364 <lcd_invert_process+0x60>)
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	01db      	lsls	r3, r3, #7
 8000328:	441a      	add	r2, r3
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	4413      	add	r3, r2
 800032e:	7819      	ldrb	r1, [r3, #0]
 8000330:	4a0d      	ldr	r2, [pc, #52]	; (8000368 <lcd_invert_process+0x64>)
 8000332:	68fb      	ldr	r3, [r7, #12]
 8000334:	01db      	lsls	r3, r3, #7
 8000336:	4413      	add	r3, r2
 8000338:	4403      	add	r3, r0
 800033a:	460a      	mov	r2, r1
 800033c:	701a      	strb	r2, [r3, #0]
			for(int x_axsis=127;x_axsis>=0;x_axsis--)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	3b01      	subs	r3, #1
 8000342:	607b      	str	r3, [r7, #4]
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	2b00      	cmp	r3, #0
 8000348:	dae7      	bge.n	800031a <lcd_invert_process+0x16>
	for(int y_axsis=0;y_axsis<=7;y_axsis++){
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	3301      	adds	r3, #1
 800034e:	60fb      	str	r3, [r7, #12]
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	2b07      	cmp	r3, #7
 8000354:	dddc      	ble.n	8000310 <lcd_invert_process+0xc>
			}
		}
}
 8000356:	bf00      	nop
 8000358:	bf00      	nop
 800035a:	3714      	adds	r7, #20
 800035c:	46bd      	mov	sp, r7
 800035e:	bc80      	pop	{r7}
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	2000045c 	.word	0x2000045c
 8000368:	2000085c 	.word	0x2000085c

0800036c <lcd_print_char>:
}

uint8_t print_value_int=0;

void lcd_print_char(uint8_t y_axis_start, uint8_t x_axis_start, char* print_value)//(x_axis_start, y_axis_start, icon_width, icon_height, *print_value
{
 800036c:	b590      	push	{r4, r7, lr}
 800036e:	b085      	sub	sp, #20
 8000370:	af00      	add	r7, sp, #0
 8000372:	4603      	mov	r3, r0
 8000374:	603a      	str	r2, [r7, #0]
 8000376:	71fb      	strb	r3, [r7, #7]
 8000378:	460b      	mov	r3, r1
 800037a:	71bb      	strb	r3, [r7, #6]
	uint8_t space=1;
 800037c:	2301      	movs	r3, #1
 800037e:	73fb      	strb	r3, [r7, #15]
	Lcd_cmd((0xB0|(y_axis_start)));
 8000380:	79fb      	ldrb	r3, [r7, #7]
 8000382:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8000386:	b2db      	uxtb	r3, r3
 8000388:	4618      	mov	r0, r3
 800038a:	f7ff fedf 	bl	800014c <Lcd_cmd>
	lcd_x_axis(x_axis_start);
 800038e:	79bb      	ldrb	r3, [r7, #6]
 8000390:	4618      	mov	r0, r3
 8000392:	f7ff ff9d 	bl	80002d0 <lcd_x_axis>
	while(*print_value)
 8000396:	e0ad      	b.n	80004f4 <lcd_print_char+0x188>
	{
	 for(int temp1=0;temp1<5;temp1++)
 8000398:	2300      	movs	r3, #0
 800039a:	60bb      	str	r3, [r7, #8]
 800039c:	e096      	b.n	80004cc <lcd_print_char+0x160>
			{
			 if((*print_value>=65)&&(*print_value<=90))
 800039e:	683b      	ldr	r3, [r7, #0]
 80003a0:	781b      	ldrb	r3, [r3, #0]
 80003a2:	2b40      	cmp	r3, #64	; 0x40
 80003a4:	d91e      	bls.n	80003e4 <lcd_print_char+0x78>
 80003a6:	683b      	ldr	r3, [r7, #0]
 80003a8:	781b      	ldrb	r3, [r3, #0]
 80003aa:	2b5a      	cmp	r3, #90	; 0x5a
 80003ac:	d81a      	bhi.n	80003e4 <lcd_print_char+0x78>
				{
				 print_value_int=*print_value;
 80003ae:	683b      	ldr	r3, [r7, #0]
 80003b0:	781a      	ldrb	r2, [r3, #0]
 80003b2:	4b55      	ldr	r3, [pc, #340]	; (8000508 <lcd_print_char+0x19c>)
 80003b4:	701a      	strb	r2, [r3, #0]
				// lcd_print(alphabet[print_value_int-65][temp1]);
				 lcd_print_convert(y_axis_start, x_axis_start++, (alphabet[print_value_int-65][temp1]));
 80003b6:	79f8      	ldrb	r0, [r7, #7]
 80003b8:	79bb      	ldrb	r3, [r7, #6]
 80003ba:	1c5a      	adds	r2, r3, #1
 80003bc:	71ba      	strb	r2, [r7, #6]
 80003be:	461c      	mov	r4, r3
 80003c0:	4b51      	ldr	r3, [pc, #324]	; (8000508 <lcd_print_char+0x19c>)
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80003c8:	4950      	ldr	r1, [pc, #320]	; (800050c <lcd_print_char+0x1a0>)
 80003ca:	4613      	mov	r3, r2
 80003cc:	009b      	lsls	r3, r3, #2
 80003ce:	4413      	add	r3, r2
 80003d0:	18ca      	adds	r2, r1, r3
 80003d2:	68bb      	ldr	r3, [r7, #8]
 80003d4:	4413      	add	r3, r2
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	461a      	mov	r2, r3
 80003da:	4621      	mov	r1, r4
 80003dc:	f000 f93a 	bl	8000654 <lcd_print_convert>
				 space=1;
 80003e0:	2301      	movs	r3, #1
 80003e2:	73fb      	strb	r3, [r7, #15]
				}

			 if((*print_value>=97)&&(*print_value<=124))
 80003e4:	683b      	ldr	r3, [r7, #0]
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	2b60      	cmp	r3, #96	; 0x60
 80003ea:	d91e      	bls.n	800042a <lcd_print_char+0xbe>
 80003ec:	683b      	ldr	r3, [r7, #0]
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	2b7c      	cmp	r3, #124	; 0x7c
 80003f2:	d81a      	bhi.n	800042a <lcd_print_char+0xbe>
				{
				 print_value_int=*print_value;
 80003f4:	683b      	ldr	r3, [r7, #0]
 80003f6:	781a      	ldrb	r2, [r3, #0]
 80003f8:	4b43      	ldr	r3, [pc, #268]	; (8000508 <lcd_print_char+0x19c>)
 80003fa:	701a      	strb	r2, [r3, #0]
				 //lcd_print(alphabet[print_value_int-71][temp1]);

				 lcd_print_convert(y_axis_start,x_axis_start++, (alphabet[print_value_int-71][temp1]));
 80003fc:	79f8      	ldrb	r0, [r7, #7]
 80003fe:	79bb      	ldrb	r3, [r7, #6]
 8000400:	1c5a      	adds	r2, r3, #1
 8000402:	71ba      	strb	r2, [r7, #6]
 8000404:	461c      	mov	r4, r3
 8000406:	4b40      	ldr	r3, [pc, #256]	; (8000508 <lcd_print_char+0x19c>)
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	f1a3 0247 	sub.w	r2, r3, #71	; 0x47
 800040e:	493f      	ldr	r1, [pc, #252]	; (800050c <lcd_print_char+0x1a0>)
 8000410:	4613      	mov	r3, r2
 8000412:	009b      	lsls	r3, r3, #2
 8000414:	4413      	add	r3, r2
 8000416:	18ca      	adds	r2, r1, r3
 8000418:	68bb      	ldr	r3, [r7, #8]
 800041a:	4413      	add	r3, r2
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	461a      	mov	r2, r3
 8000420:	4621      	mov	r1, r4
 8000422:	f000 f917 	bl	8000654 <lcd_print_convert>
				 space=0;
 8000426:	2300      	movs	r3, #0
 8000428:	73fb      	strb	r3, [r7, #15]
				}

			 if((*print_value>=48)&&(*print_value<=57))
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	2b2f      	cmp	r3, #47	; 0x2f
 8000430:	d91f      	bls.n	8000472 <lcd_print_char+0x106>
 8000432:	683b      	ldr	r3, [r7, #0]
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	2b39      	cmp	r3, #57	; 0x39
 8000438:	d81b      	bhi.n	8000472 <lcd_print_char+0x106>
				{
				 print_value_int=*print_value;
 800043a:	683b      	ldr	r3, [r7, #0]
 800043c:	781a      	ldrb	r2, [r3, #0]
 800043e:	4b32      	ldr	r3, [pc, #200]	; (8000508 <lcd_print_char+0x19c>)
 8000440:	701a      	strb	r2, [r3, #0]
				 //lcd_print(digit[print_value_int-48][temp1]);

				 lcd_print_convert(y_axis_start, x_axis_start++, (digit[print_value_int-48][temp1]));
 8000442:	79f8      	ldrb	r0, [r7, #7]
 8000444:	79bb      	ldrb	r3, [r7, #6]
 8000446:	1c5a      	adds	r2, r3, #1
 8000448:	71ba      	strb	r2, [r7, #6]
 800044a:	461c      	mov	r4, r3
 800044c:	4b2e      	ldr	r3, [pc, #184]	; (8000508 <lcd_print_char+0x19c>)
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000454:	492e      	ldr	r1, [pc, #184]	; (8000510 <lcd_print_char+0x1a4>)
 8000456:	4613      	mov	r3, r2
 8000458:	005b      	lsls	r3, r3, #1
 800045a:	4413      	add	r3, r2
 800045c:	005b      	lsls	r3, r3, #1
 800045e:	18ca      	adds	r2, r1, r3
 8000460:	68bb      	ldr	r3, [r7, #8]
 8000462:	4413      	add	r3, r2
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	461a      	mov	r2, r3
 8000468:	4621      	mov	r1, r4
 800046a:	f000 f8f3 	bl	8000654 <lcd_print_convert>
				 space=1;
 800046e:	2301      	movs	r3, #1
 8000470:	73fb      	strb	r3, [r7, #15]
				}
			 if(*print_value==46)
 8000472:	683b      	ldr	r3, [r7, #0]
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	2b2e      	cmp	r3, #46	; 0x2e
 8000478:	d108      	bne.n	800048c <lcd_print_char+0x120>
				 {
				 // lcd_print(0x00);
				  lcd_print_convert(y_axis_start, x_axis_start++, 0x40 );
 800047a:	79f8      	ldrb	r0, [r7, #7]
 800047c:	79bb      	ldrb	r3, [r7, #6]
 800047e:	1c5a      	adds	r2, r3, #1
 8000480:	71ba      	strb	r2, [r7, #6]
 8000482:	2240      	movs	r2, #64	; 0x40
 8000484:	4619      	mov	r1, r3
 8000486:	f000 f8e5 	bl	8000654 <lcd_print_convert>
				  break;
 800048a:	e023      	b.n	80004d4 <lcd_print_char+0x168>
				 }
			 if(*print_value==32)
 800048c:	683b      	ldr	r3, [r7, #0]
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	2b20      	cmp	r3, #32
 8000492:	d108      	bne.n	80004a6 <lcd_print_char+0x13a>
				 {
				 // lcd_print(0x00);
				  lcd_print_convert(y_axis_start, x_axis_start++, 0x00 );
 8000494:	79f8      	ldrb	r0, [r7, #7]
 8000496:	79bb      	ldrb	r3, [r7, #6]
 8000498:	1c5a      	adds	r2, r3, #1
 800049a:	71ba      	strb	r2, [r7, #6]
 800049c:	2200      	movs	r2, #0
 800049e:	4619      	mov	r1, r3
 80004a0:	f000 f8d8 	bl	8000654 <lcd_print_convert>
				  break;
 80004a4:	e016      	b.n	80004d4 <lcd_print_char+0x168>
				 }

			 if(*print_value==37)
 80004a6:	683b      	ldr	r3, [r7, #0]
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b25      	cmp	r3, #37	; 0x25
 80004ac:	d10b      	bne.n	80004c6 <lcd_print_char+0x15a>
			 {
				 lcd_print_convert(y_axis_start, x_axis_start++,persentage[temp1]);
 80004ae:	79f8      	ldrb	r0, [r7, #7]
 80004b0:	79bb      	ldrb	r3, [r7, #6]
 80004b2:	1c5a      	adds	r2, r3, #1
 80004b4:	71ba      	strb	r2, [r7, #6]
 80004b6:	4619      	mov	r1, r3
 80004b8:	4a16      	ldr	r2, [pc, #88]	; (8000514 <lcd_print_char+0x1a8>)
 80004ba:	68bb      	ldr	r3, [r7, #8]
 80004bc:	4413      	add	r3, r2
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	461a      	mov	r2, r3
 80004c2:	f000 f8c7 	bl	8000654 <lcd_print_convert>
	 for(int temp1=0;temp1<5;temp1++)
 80004c6:	68bb      	ldr	r3, [r7, #8]
 80004c8:	3301      	adds	r3, #1
 80004ca:	60bb      	str	r3, [r7, #8]
 80004cc:	68bb      	ldr	r3, [r7, #8]
 80004ce:	2b04      	cmp	r3, #4
 80004d0:	f77f af65 	ble.w	800039e <lcd_print_char+0x32>
			 }
		 }
	 print_value++;
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	3301      	adds	r3, #1
 80004d8:	603b      	str	r3, [r7, #0]
	 //lcd_print(0x00);
	 if(space)
 80004da:	7bfb      	ldrb	r3, [r7, #15]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d009      	beq.n	80004f4 <lcd_print_char+0x188>
	 {
		 lcd_print_convert(y_axis_start, x_axis_start++, 0x00 );
 80004e0:	79f8      	ldrb	r0, [r7, #7]
 80004e2:	79bb      	ldrb	r3, [r7, #6]
 80004e4:	1c5a      	adds	r2, r3, #1
 80004e6:	71ba      	strb	r2, [r7, #6]
 80004e8:	2200      	movs	r2, #0
 80004ea:	4619      	mov	r1, r3
 80004ec:	f000 f8b2 	bl	8000654 <lcd_print_convert>
		 space=0;
 80004f0:	2300      	movs	r3, #0
 80004f2:	73fb      	strb	r3, [r7, #15]
	while(*print_value)
 80004f4:	683b      	ldr	r3, [r7, #0]
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	f47f af4d 	bne.w	8000398 <lcd_print_char+0x2c>
	 }
	}
}
 80004fe:	bf00      	nop
 8000500:	bf00      	nop
 8000502:	3714      	adds	r7, #20
 8000504:	46bd      	mov	sp, r7
 8000506:	bd90      	pop	{r4, r7, pc}
 8000508:	20000c5c 	.word	0x20000c5c
 800050c:	08005090 	.word	0x08005090
 8000510:	08005054 	.word	0x08005054
 8000514:	0800504c 	.word	0x0800504c

08000518 <lcd_clear>:
void lcd_clear(uint8_t y_axsis,uint8_t x_axsis, uint8_t count)
{
 8000518:	b480      	push	{r7}
 800051a:	b085      	sub	sp, #20
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	71fb      	strb	r3, [r7, #7]
 8000522:	460b      	mov	r3, r1
 8000524:	71bb      	strb	r3, [r7, #6]
 8000526:	4613      	mov	r3, r2
 8000528:	717b      	strb	r3, [r7, #5]
	for(uint8_t x_axis_start=0;x_axis_start<=count;x_axis_start++)
 800052a:	2300      	movs	r3, #0
 800052c:	73fb      	strb	r3, [r7, #15]
 800052e:	e00d      	b.n	800054c <lcd_clear+0x34>
	{
		lcd_temp_ram[y_axsis][x_axsis++]=0x00;
 8000530:	79fa      	ldrb	r2, [r7, #7]
 8000532:	79bb      	ldrb	r3, [r7, #6]
 8000534:	1c59      	adds	r1, r3, #1
 8000536:	71b9      	strb	r1, [r7, #6]
 8000538:	4618      	mov	r0, r3
 800053a:	4909      	ldr	r1, [pc, #36]	; (8000560 <lcd_clear+0x48>)
 800053c:	01d3      	lsls	r3, r2, #7
 800053e:	440b      	add	r3, r1
 8000540:	4403      	add	r3, r0
 8000542:	2200      	movs	r2, #0
 8000544:	701a      	strb	r2, [r3, #0]
	for(uint8_t x_axis_start=0;x_axis_start<=count;x_axis_start++)
 8000546:	7bfb      	ldrb	r3, [r7, #15]
 8000548:	3301      	adds	r3, #1
 800054a:	73fb      	strb	r3, [r7, #15]
 800054c:	7bfa      	ldrb	r2, [r7, #15]
 800054e:	797b      	ldrb	r3, [r7, #5]
 8000550:	429a      	cmp	r2, r3
 8000552:	d9ed      	bls.n	8000530 <lcd_clear+0x18>
	}
}
 8000554:	bf00      	nop
 8000556:	bf00      	nop
 8000558:	3714      	adds	r7, #20
 800055a:	46bd      	mov	sp, r7
 800055c:	bc80      	pop	{r7}
 800055e:	4770      	bx	lr
 8000560:	2000045c 	.word	0x2000045c

08000564 <lcd_print_digit_wos>:
void lcd_print_digit_wos(uint8_t y_axis_start, uint8_t x_axis_start,uint8_t print_value)//(x_axis_start, y_axis_start, icon_width, icon_height, *print_value
{
 8000564:	b590      	push	{r4, r7, lr}
 8000566:	b085      	sub	sp, #20
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	71fb      	strb	r3, [r7, #7]
 800056e:	460b      	mov	r3, r1
 8000570:	71bb      	strb	r3, [r7, #6]
 8000572:	4613      	mov	r3, r2
 8000574:	717b      	strb	r3, [r7, #5]
	Lcd_cmd((0xB0|(y_axis_start)));
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800057c:	b2db      	uxtb	r3, r3
 800057e:	4618      	mov	r0, r3
 8000580:	f7ff fde4 	bl	800014c <Lcd_cmd>
	lcd_x_axis(x_axis_start);
 8000584:	79bb      	ldrb	r3, [r7, #6]
 8000586:	4618      	mov	r0, r3
 8000588:	f7ff fea2 	bl	80002d0 <lcd_x_axis>
	for(int temp1=0;temp1<5;temp1++)
 800058c:	2300      	movs	r3, #0
 800058e:	60fb      	str	r3, [r7, #12]
 8000590:	e015      	b.n	80005be <lcd_print_digit_wos+0x5a>
	{
		//lcd_print(digit[currentDigit][temp1]);
		lcd_print_convert(y_axis_start, x_axis_start++, digit[print_value][temp1]);
 8000592:	79f8      	ldrb	r0, [r7, #7]
 8000594:	79bb      	ldrb	r3, [r7, #6]
 8000596:	1c5a      	adds	r2, r3, #1
 8000598:	71ba      	strb	r2, [r7, #6]
 800059a:	461c      	mov	r4, r3
 800059c:	797a      	ldrb	r2, [r7, #5]
 800059e:	490f      	ldr	r1, [pc, #60]	; (80005dc <lcd_print_digit_wos+0x78>)
 80005a0:	4613      	mov	r3, r2
 80005a2:	005b      	lsls	r3, r3, #1
 80005a4:	4413      	add	r3, r2
 80005a6:	005b      	lsls	r3, r3, #1
 80005a8:	18ca      	adds	r2, r1, r3
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	4413      	add	r3, r2
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	461a      	mov	r2, r3
 80005b2:	4621      	mov	r1, r4
 80005b4:	f000 f84e 	bl	8000654 <lcd_print_convert>
	for(int temp1=0;temp1<5;temp1++)
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	3301      	adds	r3, #1
 80005bc:	60fb      	str	r3, [r7, #12]
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	2b04      	cmp	r3, #4
 80005c2:	dde6      	ble.n	8000592 <lcd_print_digit_wos+0x2e>
	}
	lcd_print_convert(y_axis_start, x_axis_start++, 0X00);
 80005c4:	79f8      	ldrb	r0, [r7, #7]
 80005c6:	79bb      	ldrb	r3, [r7, #6]
 80005c8:	1c5a      	adds	r2, r3, #1
 80005ca:	71ba      	strb	r2, [r7, #6]
 80005cc:	2200      	movs	r2, #0
 80005ce:	4619      	mov	r1, r3
 80005d0:	f000 f840 	bl	8000654 <lcd_print_convert>
}
 80005d4:	bf00      	nop
 80005d6:	3714      	adds	r7, #20
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd90      	pop	{r4, r7, pc}
 80005dc:	08005054 	.word	0x08005054

080005e0 <lcd_into>:
}
uint8_t print_value_int=0;
}

void lcd_into()
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
	uint16_t temp=0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	80fb      	strh	r3, [r7, #6]
	for(uint8_t y_axsis=0;y_axsis<=7;y_axsis++)
 80005ea:	2300      	movs	r3, #0
 80005ec:	717b      	strb	r3, [r7, #5]
 80005ee:	e017      	b.n	8000620 <lcd_into+0x40>
		{
			for(uint8_t x_axsis=0;x_axsis<=127;x_axsis++)
 80005f0:	2300      	movs	r3, #0
 80005f2:	713b      	strb	r3, [r7, #4]
 80005f4:	e00d      	b.n	8000612 <lcd_into+0x32>
			{
				lcd_print_convert(y_axsis,x_axsis,intro1[temp++]);
 80005f6:	7978      	ldrb	r0, [r7, #5]
 80005f8:	7939      	ldrb	r1, [r7, #4]
 80005fa:	88fb      	ldrh	r3, [r7, #6]
 80005fc:	1c5a      	adds	r2, r3, #1
 80005fe:	80fa      	strh	r2, [r7, #6]
 8000600:	461a      	mov	r2, r3
 8000602:	4b13      	ldr	r3, [pc, #76]	; (8000650 <lcd_into+0x70>)
 8000604:	5c9b      	ldrb	r3, [r3, r2]
 8000606:	461a      	mov	r2, r3
 8000608:	f000 f824 	bl	8000654 <lcd_print_convert>
			for(uint8_t x_axsis=0;x_axsis<=127;x_axsis++)
 800060c:	793b      	ldrb	r3, [r7, #4]
 800060e:	3301      	adds	r3, #1
 8000610:	713b      	strb	r3, [r7, #4]
 8000612:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000616:	2b00      	cmp	r3, #0
 8000618:	daed      	bge.n	80005f6 <lcd_into+0x16>
	for(uint8_t y_axsis=0;y_axsis<=7;y_axsis++)
 800061a:	797b      	ldrb	r3, [r7, #5]
 800061c:	3301      	adds	r3, #1
 800061e:	717b      	strb	r3, [r7, #5]
 8000620:	797b      	ldrb	r3, [r7, #5]
 8000622:	2b07      	cmp	r3, #7
 8000624:	d9e4      	bls.n	80005f0 <lcd_into+0x10>
			}
		}
	 Lcd_cmd(0xA2);// ADC select
 8000626:	20a2      	movs	r0, #162	; 0xa2
 8000628:	f7ff fd90 	bl	800014c <Lcd_cmd>
	 Lcd_cmd(0xA0);// SHL select
 800062c:	20a0      	movs	r0, #160	; 0xa0
 800062e:	f7ff fd8d 	bl	800014c <Lcd_cmd>
	 Lcd_cmd(0xC0);// Initial display line
 8000632:	20c0      	movs	r0, #192	; 0xc0
 8000634:	f7ff fd8a 	bl	800014c <Lcd_cmd>
	 Lcd_cmd(0x40);
 8000638:	2040      	movs	r0, #64	; 0x40
 800063a:	f7ff fd87 	bl	800014c <Lcd_cmd>
	 lcd_invert_process();
 800063e:	f7ff fe61 	bl	8000304 <lcd_invert_process>
	 lcd_print_ram_1();
 8000642:	f7ff fdb1 	bl	80001a8 <lcd_print_ram_1>
}
 8000646:	bf00      	nop
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20000000 	.word	0x20000000

08000654 <lcd_print_convert>:


void lcd_print_convert(uint8_t y_axsis,uint8_t x_axsis,uint8_t data)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
 800065e:	460b      	mov	r3, r1
 8000660:	71bb      	strb	r3, [r7, #6]
 8000662:	4613      	mov	r3, r2
 8000664:	717b      	strb	r3, [r7, #5]
	lcd_temp_ram[y_axsis][x_axsis]=data;
 8000666:	79fa      	ldrb	r2, [r7, #7]
 8000668:	79bb      	ldrb	r3, [r7, #6]
 800066a:	4905      	ldr	r1, [pc, #20]	; (8000680 <lcd_print_convert+0x2c>)
 800066c:	01d2      	lsls	r2, r2, #7
 800066e:	440a      	add	r2, r1
 8000670:	4413      	add	r3, r2
 8000672:	797a      	ldrb	r2, [r7, #5]
 8000674:	701a      	strb	r2, [r3, #0]
}
 8000676:	bf00      	nop
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr
 8000680:	2000045c 	.word	0x2000045c

08000684 <merge>:
 * Data will be splitting and merging  based on the requirement and stored in a corresponding variable
 * It likely disassembles larger data units into smaller parts or combines smaller parts to form larger data entities.s
 */

void merge(uint32_t Id)
{
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
switch(Id)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4a78      	ldr	r2, [pc, #480]	; (8000870 <merge+0x1ec>)
 8000690:	4293      	cmp	r3, r2
 8000692:	f000 8421 	beq.w	8000ed8 <merge+0x854>
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4a75      	ldr	r2, [pc, #468]	; (8000870 <merge+0x1ec>)
 800069a:	4293      	cmp	r3, r2
 800069c:	f200 86b4 	bhi.w	8001408 <merge+0xd84>
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	4a74      	ldr	r2, [pc, #464]	; (8000874 <merge+0x1f0>)
 80006a4:	4293      	cmp	r3, r2
 80006a6:	f000 819d 	beq.w	80009e4 <merge+0x360>
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4a71      	ldr	r2, [pc, #452]	; (8000874 <merge+0x1f0>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	f200 86aa 	bhi.w	8001408 <merge+0xd84>
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4a70      	ldr	r2, [pc, #448]	; (8000878 <merge+0x1f4>)
 80006b8:	4293      	cmp	r3, r2
 80006ba:	f000 8171 	beq.w	80009a0 <merge+0x31c>
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4a6d      	ldr	r2, [pc, #436]	; (8000878 <merge+0x1f4>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	f200 86a0 	bhi.w	8001408 <merge+0xd84>
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	4a6c      	ldr	r2, [pc, #432]	; (800087c <merge+0x1f8>)
 80006cc:	4293      	cmp	r3, r2
 80006ce:	f000 869d 	beq.w	800140c <merge+0xd88>
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4a69      	ldr	r2, [pc, #420]	; (800087c <merge+0x1f8>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	f200 8696 	bhi.w	8001408 <merge+0xd84>
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4a68      	ldr	r2, [pc, #416]	; (8000880 <merge+0x1fc>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	f000 80df 	beq.w	80008a4 <merge+0x220>
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	4a65      	ldr	r2, [pc, #404]	; (8000880 <merge+0x1fc>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	f200 868c 	bhi.w	8001408 <merge+0xd84>
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	4a64      	ldr	r2, [pc, #400]	; (8000884 <merge+0x200>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	f000 8096 	beq.w	8000826 <merge+0x1a2>
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4a61      	ldr	r2, [pc, #388]	; (8000884 <merge+0x200>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	f200 8682 	bhi.w	8001408 <merge+0xd84>
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4a60      	ldr	r2, [pc, #384]	; (8000888 <merge+0x204>)
 8000708:	4293      	cmp	r3, r2
 800070a:	d07a      	beq.n	8000802 <merge+0x17e>
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	4a5e      	ldr	r2, [pc, #376]	; (8000888 <merge+0x204>)
 8000710:	4293      	cmp	r3, r2
 8000712:	f200 8679 	bhi.w	8001408 <merge+0xd84>
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	4a5c      	ldr	r2, [pc, #368]	; (800088c <merge+0x208>)
 800071a:	4293      	cmp	r3, r2
 800071c:	d04f      	beq.n	80007be <merge+0x13a>
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4a5a      	ldr	r2, [pc, #360]	; (800088c <merge+0x208>)
 8000722:	4293      	cmp	r3, r2
 8000724:	f200 8670 	bhi.w	8001408 <merge+0xd84>
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	4a59      	ldr	r2, [pc, #356]	; (8000890 <merge+0x20c>)
 800072c:	4293      	cmp	r3, r2
 800072e:	d010      	beq.n	8000752 <merge+0xce>
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	4a57      	ldr	r2, [pc, #348]	; (8000890 <merge+0x20c>)
 8000734:	4293      	cmp	r3, r2
 8000736:	f200 8667 	bhi.w	8001408 <merge+0xd84>
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4a55      	ldr	r2, [pc, #340]	; (8000894 <merge+0x210>)
 800073e:	4293      	cmp	r3, r2
 8000740:	f000 8652 	beq.w	80013e8 <merge+0xd64>
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	4a54      	ldr	r2, [pc, #336]	; (8000898 <merge+0x214>)
 8000748:	4293      	cmp	r3, r2
 800074a:	f000 863f 	beq.w	80013cc <merge+0xd48>
	             BMS.Battery_capacity = (((Received_Data[2]<<8)|Received_Data[3])/1000);//The battery rated capacity in Ah eg(58 Ah)
	             break;

default:

	break;
 800074e:	f000 be5b 	b.w	8001408 <merge+0xd84>
				 BMS.Cumulative_Total_Voltage = (Received_Data[0]<<8)|Received_Data[1];//Cumulative total voltage of BMS
 8000752:	4b52      	ldr	r3, [pc, #328]	; (800089c <merge+0x218>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	021b      	lsls	r3, r3, #8
 8000758:	b21a      	sxth	r2, r3
 800075a:	4b50      	ldr	r3, [pc, #320]	; (800089c <merge+0x218>)
 800075c:	785b      	ldrb	r3, [r3, #1]
 800075e:	b21b      	sxth	r3, r3
 8000760:	4313      	orrs	r3, r2
 8000762:	b21b      	sxth	r3, r3
 8000764:	b29a      	uxth	r2, r3
 8000766:	4b4e      	ldr	r3, [pc, #312]	; (80008a0 <merge+0x21c>)
 8000768:	801a      	strh	r2, [r3, #0]
				 BMS.Gather_Total_Voltage = (Received_Data[2]<<8)|Received_Data[3];//Gather total voltage of BMS
 800076a:	4b4c      	ldr	r3, [pc, #304]	; (800089c <merge+0x218>)
 800076c:	789b      	ldrb	r3, [r3, #2]
 800076e:	021b      	lsls	r3, r3, #8
 8000770:	b21a      	sxth	r2, r3
 8000772:	4b4a      	ldr	r3, [pc, #296]	; (800089c <merge+0x218>)
 8000774:	78db      	ldrb	r3, [r3, #3]
 8000776:	b21b      	sxth	r3, r3
 8000778:	4313      	orrs	r3, r2
 800077a:	b21b      	sxth	r3, r3
 800077c:	b29a      	uxth	r2, r3
 800077e:	4b48      	ldr	r3, [pc, #288]	; (80008a0 <merge+0x21c>)
 8000780:	805a      	strh	r2, [r3, #2]
				 BMS.Current = ((Received_Data[4]<<8)|Received_Data[5])-30000;//Total Current of BMS
 8000782:	4b46      	ldr	r3, [pc, #280]	; (800089c <merge+0x218>)
 8000784:	791b      	ldrb	r3, [r3, #4]
 8000786:	021b      	lsls	r3, r3, #8
 8000788:	b21a      	sxth	r2, r3
 800078a:	4b44      	ldr	r3, [pc, #272]	; (800089c <merge+0x218>)
 800078c:	795b      	ldrb	r3, [r3, #5]
 800078e:	b21b      	sxth	r3, r3
 8000790:	4313      	orrs	r3, r2
 8000792:	b21b      	sxth	r3, r3
 8000794:	b29b      	uxth	r3, r3
 8000796:	f5a3 43ea 	sub.w	r3, r3, #29952	; 0x7500
 800079a:	3b30      	subs	r3, #48	; 0x30
 800079c:	b29a      	uxth	r2, r3
 800079e:	4b40      	ldr	r3, [pc, #256]	; (80008a0 <merge+0x21c>)
 80007a0:	809a      	strh	r2, [r3, #4]
				 BMS.SOC = (Received_Data[6]<<8)|Received_Data[7];//state of charge of BMS
 80007a2:	4b3e      	ldr	r3, [pc, #248]	; (800089c <merge+0x218>)
 80007a4:	799b      	ldrb	r3, [r3, #6]
 80007a6:	021b      	lsls	r3, r3, #8
 80007a8:	b21a      	sxth	r2, r3
 80007aa:	4b3c      	ldr	r3, [pc, #240]	; (800089c <merge+0x218>)
 80007ac:	79db      	ldrb	r3, [r3, #7]
 80007ae:	b21b      	sxth	r3, r3
 80007b0:	4313      	orrs	r3, r2
 80007b2:	b21b      	sxth	r3, r3
 80007b4:	b29a      	uxth	r2, r3
 80007b6:	4b3a      	ldr	r3, [pc, #232]	; (80008a0 <merge+0x21c>)
 80007b8:	811a      	strh	r2, [r3, #8]
                 break;
 80007ba:	f000 be28 	b.w	800140e <merge+0xd8a>
                 BMS.Max_Cell_Voltage = (Received_Data[0]<<8)|Received_Data[1];//Maximum Voltage value among all the cells
 80007be:	4b37      	ldr	r3, [pc, #220]	; (800089c <merge+0x218>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	021b      	lsls	r3, r3, #8
 80007c4:	b21a      	sxth	r2, r3
 80007c6:	4b35      	ldr	r3, [pc, #212]	; (800089c <merge+0x218>)
 80007c8:	785b      	ldrb	r3, [r3, #1]
 80007ca:	b21b      	sxth	r3, r3
 80007cc:	4313      	orrs	r3, r2
 80007ce:	b21b      	sxth	r3, r3
 80007d0:	b29a      	uxth	r2, r3
 80007d2:	4b33      	ldr	r3, [pc, #204]	; (80008a0 <merge+0x21c>)
 80007d4:	815a      	strh	r2, [r3, #10]
			     BMS.Max_Cell_Voltage_No = Received_Data[2];//Maximum voltage cell number among all the cells
 80007d6:	4b31      	ldr	r3, [pc, #196]	; (800089c <merge+0x218>)
 80007d8:	789a      	ldrb	r2, [r3, #2]
 80007da:	4b31      	ldr	r3, [pc, #196]	; (80008a0 <merge+0x21c>)
 80007dc:	731a      	strb	r2, [r3, #12]
			     BMS.Min_Cell_Voltage = (Received_Data[3]<<8)|Received_Data[4];//Minimum voltage value among all the cells
 80007de:	4b2f      	ldr	r3, [pc, #188]	; (800089c <merge+0x218>)
 80007e0:	78db      	ldrb	r3, [r3, #3]
 80007e2:	021b      	lsls	r3, r3, #8
 80007e4:	b21a      	sxth	r2, r3
 80007e6:	4b2d      	ldr	r3, [pc, #180]	; (800089c <merge+0x218>)
 80007e8:	791b      	ldrb	r3, [r3, #4]
 80007ea:	b21b      	sxth	r3, r3
 80007ec:	4313      	orrs	r3, r2
 80007ee:	b21b      	sxth	r3, r3
 80007f0:	b29a      	uxth	r2, r3
 80007f2:	4b2b      	ldr	r3, [pc, #172]	; (80008a0 <merge+0x21c>)
 80007f4:	81da      	strh	r2, [r3, #14]
			     BMS.Min_Cell_Voltage_No =  Received_Data[5];//Minimum voltage cell number among all the cells
 80007f6:	4b29      	ldr	r3, [pc, #164]	; (800089c <merge+0x218>)
 80007f8:	795a      	ldrb	r2, [r3, #5]
 80007fa:	4b29      	ldr	r3, [pc, #164]	; (80008a0 <merge+0x21c>)
 80007fc:	741a      	strb	r2, [r3, #16]
			     break;
 80007fe:	f000 be06 	b.w	800140e <merge+0xd8a>
                 BMS.Max_Temp = (Received_Data[0]);//Maximum temperature sensor value among all the sensor
 8000802:	4b26      	ldr	r3, [pc, #152]	; (800089c <merge+0x218>)
 8000804:	781a      	ldrb	r2, [r3, #0]
 8000806:	4b26      	ldr	r3, [pc, #152]	; (80008a0 <merge+0x21c>)
 8000808:	745a      	strb	r2, [r3, #17]
			     BMS.Max_Temp_Sensor_No = Received_Data[1];//Number of the sensor that has the highest temperature value among the sensors
 800080a:	4b24      	ldr	r3, [pc, #144]	; (800089c <merge+0x218>)
 800080c:	785a      	ldrb	r2, [r3, #1]
 800080e:	4b24      	ldr	r3, [pc, #144]	; (80008a0 <merge+0x21c>)
 8000810:	749a      	strb	r2, [r3, #18]
		         BMS.Min_Temp = (Received_Data[2]);//Minimum temperature value among all the sensors
 8000812:	4b22      	ldr	r3, [pc, #136]	; (800089c <merge+0x218>)
 8000814:	789a      	ldrb	r2, [r3, #2]
 8000816:	4b22      	ldr	r3, [pc, #136]	; (80008a0 <merge+0x21c>)
 8000818:	74da      	strb	r2, [r3, #19]
		         BMS.Min_Temp_Sensor_No = Received_Data[3];//Number of the sensor that has the lowest temperature value among the sensors
 800081a:	4b20      	ldr	r3, [pc, #128]	; (800089c <merge+0x218>)
 800081c:	78da      	ldrb	r2, [r3, #3]
 800081e:	4b20      	ldr	r3, [pc, #128]	; (80008a0 <merge+0x21c>)
 8000820:	751a      	strb	r2, [r3, #20]
                 break;
 8000822:	f000 bdf4 	b.w	800140e <merge+0xd8a>
                 BMS.Charger_State = Received_Data[0];//0:stationary 1:charge 2:discharge
 8000826:	4b1d      	ldr	r3, [pc, #116]	; (800089c <merge+0x218>)
 8000828:	781a      	ldrb	r2, [r3, #0]
 800082a:	4b1d      	ldr	r3, [pc, #116]	; (80008a0 <merge+0x21c>)
 800082c:	755a      	strb	r2, [r3, #21]
 		  	     BMS.Charge_MOS_State= Received_Data[1];//0:stationary 1:charge 2:discharge
 800082e:	4b1b      	ldr	r3, [pc, #108]	; (800089c <merge+0x218>)
 8000830:	785a      	ldrb	r2, [r3, #1]
 8000832:	4b1b      	ldr	r3, [pc, #108]	; (80008a0 <merge+0x21c>)
 8000834:	759a      	strb	r2, [r3, #22]
 		  	     BMS.Discharge_MOS_State= Received_Data[2];//0:stationary 1:charge 2:discharge
 8000836:	4b19      	ldr	r3, [pc, #100]	; (800089c <merge+0x218>)
 8000838:	789a      	ldrb	r2, [r3, #2]
 800083a:	4b19      	ldr	r3, [pc, #100]	; (80008a0 <merge+0x21c>)
 800083c:	75da      	strb	r2, [r3, #23]
 		  		 BMS.BMS_Life = Received_Data[3];//Count of charge-discharge cycles
 800083e:	4b17      	ldr	r3, [pc, #92]	; (800089c <merge+0x218>)
 8000840:	78da      	ldrb	r2, [r3, #3]
 8000842:	4b17      	ldr	r3, [pc, #92]	; (80008a0 <merge+0x21c>)
 8000844:	761a      	strb	r2, [r3, #24]
 		  	     BMS.Capacity = Received_Data[4]|(Received_Data[5]<<8)|(Received_Data[6]<<16)|(Received_Data[7]<<24);//Remaining capacity of BMS
 8000846:	4b15      	ldr	r3, [pc, #84]	; (800089c <merge+0x218>)
 8000848:	791b      	ldrb	r3, [r3, #4]
 800084a:	461a      	mov	r2, r3
 800084c:	4b13      	ldr	r3, [pc, #76]	; (800089c <merge+0x218>)
 800084e:	795b      	ldrb	r3, [r3, #5]
 8000850:	021b      	lsls	r3, r3, #8
 8000852:	431a      	orrs	r2, r3
 8000854:	4b11      	ldr	r3, [pc, #68]	; (800089c <merge+0x218>)
 8000856:	799b      	ldrb	r3, [r3, #6]
 8000858:	041b      	lsls	r3, r3, #16
 800085a:	431a      	orrs	r2, r3
 800085c:	4b0f      	ldr	r3, [pc, #60]	; (800089c <merge+0x218>)
 800085e:	79db      	ldrb	r3, [r3, #7]
 8000860:	061b      	lsls	r3, r3, #24
 8000862:	4313      	orrs	r3, r2
 8000864:	461a      	mov	r2, r3
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <merge+0x21c>)
 8000868:	61da      	str	r2, [r3, #28]
                 break;
 800086a:	f000 bdd0 	b.w	800140e <merge+0xd8a>
 800086e:	bf00      	nop
 8000870:	18984001 	.word	0x18984001
 8000874:	18974001 	.word	0x18974001
 8000878:	18964001 	.word	0x18964001
 800087c:	18954001 	.word	0x18954001
 8000880:	18944001 	.word	0x18944001
 8000884:	18934001 	.word	0x18934001
 8000888:	18924001 	.word	0x18924001
 800088c:	18914001 	.word	0x18914001
 8000890:	18904001 	.word	0x18904001
 8000894:	18504001 	.word	0x18504001
 8000898:	18524001 	.word	0x18524001
 800089c:	20000c60 	.word	0x20000c60
 80008a0:	20000c68 	.word	0x20000c68
	             BMS.No_Of_Battery = Received_Data[0];//Total number cells connected in BMS
 80008a4:	4b4d      	ldr	r3, [pc, #308]	; (80009dc <merge+0x358>)
 80008a6:	781a      	ldrb	r2, [r3, #0]
 80008a8:	4b4d      	ldr	r3, [pc, #308]	; (80009e0 <merge+0x35c>)
 80008aa:	f883 2020 	strb.w	r2, [r3, #32]
 			     BMS.No_Of_Temp_Sensor = Received_Data[1];//Total Number of temperature sensor connected in BMS
 80008ae:	4b4b      	ldr	r3, [pc, #300]	; (80009dc <merge+0x358>)
 80008b0:	785a      	ldrb	r2, [r3, #1]
 80008b2:	4b4b      	ldr	r3, [pc, #300]	; (80009e0 <merge+0x35c>)
 80008b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 			     BMS.Charger_Status = Received_Data[2];//0:disconnect,1:connect
 80008b8:	4b48      	ldr	r3, [pc, #288]	; (80009dc <merge+0x358>)
 80008ba:	789a      	ldrb	r2, [r3, #2]
 80008bc:	4b48      	ldr	r3, [pc, #288]	; (80009e0 <merge+0x35c>)
 80008be:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 			     BMS.Load_Status = Received_Data[3];//0:disconnect,1:connect
 80008c2:	4b46      	ldr	r3, [pc, #280]	; (80009dc <merge+0x358>)
 80008c4:	78da      	ldrb	r2, [r3, #3]
 80008c6:	4b46      	ldr	r3, [pc, #280]	; (80009e0 <merge+0x35c>)
 80008c8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 			     BMS.DI1state = (Received_Data[4] & 0X01)>>0;
 80008cc:	4b43      	ldr	r3, [pc, #268]	; (80009dc <merge+0x358>)
 80008ce:	791b      	ldrb	r3, [r3, #4]
 80008d0:	f003 0301 	and.w	r3, r3, #1
 80008d4:	b2d9      	uxtb	r1, r3
 80008d6:	4a42      	ldr	r2, [pc, #264]	; (80009e0 <merge+0x35c>)
 80008d8:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80008dc:	f361 0300 	bfi	r3, r1, #0, #1
 80008e0:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 			     BMS.DI2state = (Received_Data[4] & 0X02)>>1;
 80008e4:	4b3d      	ldr	r3, [pc, #244]	; (80009dc <merge+0x358>)
 80008e6:	791b      	ldrb	r3, [r3, #4]
 80008e8:	105b      	asrs	r3, r3, #1
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	b2d9      	uxtb	r1, r3
 80008f0:	4a3b      	ldr	r2, [pc, #236]	; (80009e0 <merge+0x35c>)
 80008f2:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80008f6:	f361 0341 	bfi	r3, r1, #1, #1
 80008fa:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 		         BMS.DI3state = (Received_Data[4] & 0X04)>>2;
 80008fe:	4b37      	ldr	r3, [pc, #220]	; (80009dc <merge+0x358>)
 8000900:	791b      	ldrb	r3, [r3, #4]
 8000902:	109b      	asrs	r3, r3, #2
 8000904:	f003 0301 	and.w	r3, r3, #1
 8000908:	b2d9      	uxtb	r1, r3
 800090a:	4a35      	ldr	r2, [pc, #212]	; (80009e0 <merge+0x35c>)
 800090c:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8000910:	f361 0382 	bfi	r3, r1, #2, #1
 8000914:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 			     BMS.DI4state = (Received_Data[4] & 0X08)>>3;
 8000918:	4b30      	ldr	r3, [pc, #192]	; (80009dc <merge+0x358>)
 800091a:	791b      	ldrb	r3, [r3, #4]
 800091c:	10db      	asrs	r3, r3, #3
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	b2d9      	uxtb	r1, r3
 8000924:	4a2e      	ldr	r2, [pc, #184]	; (80009e0 <merge+0x35c>)
 8000926:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 800092a:	f361 03c3 	bfi	r3, r1, #3, #1
 800092e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 			     BMS.DO1state = (Received_Data[4] & 0X10)>>4;
 8000932:	4b2a      	ldr	r3, [pc, #168]	; (80009dc <merge+0x358>)
 8000934:	791b      	ldrb	r3, [r3, #4]
 8000936:	111b      	asrs	r3, r3, #4
 8000938:	f003 0301 	and.w	r3, r3, #1
 800093c:	b2d9      	uxtb	r1, r3
 800093e:	4a28      	ldr	r2, [pc, #160]	; (80009e0 <merge+0x35c>)
 8000940:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8000944:	f361 1304 	bfi	r3, r1, #4, #1
 8000948:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 			     BMS.DO2state = (Received_Data[4] & 0X20)>>5;
 800094c:	4b23      	ldr	r3, [pc, #140]	; (80009dc <merge+0x358>)
 800094e:	791b      	ldrb	r3, [r3, #4]
 8000950:	115b      	asrs	r3, r3, #5
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	b2d9      	uxtb	r1, r3
 8000958:	4a21      	ldr	r2, [pc, #132]	; (80009e0 <merge+0x35c>)
 800095a:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 800095e:	f361 1345 	bfi	r3, r1, #5, #1
 8000962:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 			     BMS.DO3state = (Received_Data[4] & 0X40)>>6;
 8000966:	4b1d      	ldr	r3, [pc, #116]	; (80009dc <merge+0x358>)
 8000968:	791b      	ldrb	r3, [r3, #4]
 800096a:	119b      	asrs	r3, r3, #6
 800096c:	f003 0301 	and.w	r3, r3, #1
 8000970:	b2d9      	uxtb	r1, r3
 8000972:	4a1b      	ldr	r2, [pc, #108]	; (80009e0 <merge+0x35c>)
 8000974:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8000978:	f361 1386 	bfi	r3, r1, #6, #1
 800097c:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 			     BMS.DO4state = (Received_Data[4] & 0X80)>>7;
 8000980:	4b16      	ldr	r3, [pc, #88]	; (80009dc <merge+0x358>)
 8000982:	791b      	ldrb	r3, [r3, #4]
 8000984:	09db      	lsrs	r3, r3, #7
 8000986:	b2db      	uxtb	r3, r3
 8000988:	f003 0301 	and.w	r3, r3, #1
 800098c:	b2d9      	uxtb	r1, r3
 800098e:	4a14      	ldr	r2, [pc, #80]	; (80009e0 <merge+0x35c>)
 8000990:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8000994:	f361 13c7 	bfi	r3, r1, #7, #1
 8000998:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
                 break;
 800099c:	f000 bd37 	b.w	800140e <merge+0xd8a>
	             BMS.Temp_Sensor1 = (Received_Data[1])-40;//1st temperature sensor value
 80009a0:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <merge+0x358>)
 80009a2:	785b      	ldrb	r3, [r3, #1]
 80009a4:	3b28      	subs	r3, #40	; 0x28
 80009a6:	b2da      	uxtb	r2, r3
 80009a8:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <merge+0x35c>)
 80009aa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	 			 BMS.Temp_Sensor2 = (Received_Data[2])-40;//2nd temperature sensor value
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <merge+0x358>)
 80009b0:	789b      	ldrb	r3, [r3, #2]
 80009b2:	3b28      	subs	r3, #40	; 0x28
 80009b4:	b2da      	uxtb	r2, r3
 80009b6:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <merge+0x35c>)
 80009b8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	 			 BMS.Temp_Sensor3 = (Received_Data[3])-40;//3rd temperature sensor value
 80009bc:	4b07      	ldr	r3, [pc, #28]	; (80009dc <merge+0x358>)
 80009be:	78db      	ldrb	r3, [r3, #3]
 80009c0:	3b28      	subs	r3, #40	; 0x28
 80009c2:	b2da      	uxtb	r2, r3
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <merge+0x35c>)
 80009c6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	 			 BMS.Temp_Sensor4 = (Received_Data[4])-40;//4th temperature sensor value
 80009ca:	4b04      	ldr	r3, [pc, #16]	; (80009dc <merge+0x358>)
 80009cc:	791b      	ldrb	r3, [r3, #4]
 80009ce:	3b28      	subs	r3, #40	; 0x28
 80009d0:	b2da      	uxtb	r2, r3
 80009d2:	4b03      	ldr	r3, [pc, #12]	; (80009e0 <merge+0x35c>)
 80009d4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	 			 break;
 80009d8:	f000 bd19 	b.w	800140e <merge+0xd8a>
 80009dc:	20000c60 	.word	0x20000c60
 80009e0:	20000c68 	.word	0x20000c68
	             BMS.Cell1_Balance_State = (Received_Data[0] & 0x01)>>0;//0： Closed,1： Open
 80009e4:	4bc0      	ldr	r3, [pc, #768]	; (8000ce8 <merge+0x664>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	f003 0301 	and.w	r3, r3, #1
 80009ec:	b2d9      	uxtb	r1, r3
 80009ee:	4abf      	ldr	r2, [pc, #764]	; (8000cec <merge+0x668>)
 80009f0:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 80009f4:	f361 0300 	bfi	r3, r1, #0, #1
 80009f8:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	 		     BMS.Cell2_Balance_State = (Received_Data[0] & 0x02)>>1;
 80009fc:	4bba      	ldr	r3, [pc, #744]	; (8000ce8 <merge+0x664>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	105b      	asrs	r3, r3, #1
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	b2d9      	uxtb	r1, r3
 8000a08:	4ab8      	ldr	r2, [pc, #736]	; (8000cec <merge+0x668>)
 8000a0a:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 8000a0e:	f361 0341 	bfi	r3, r1, #1, #1
 8000a12:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	 			 BMS.Cell3_Balance_State = (Received_Data[0] & 0x04)>>2;
 8000a16:	4bb4      	ldr	r3, [pc, #720]	; (8000ce8 <merge+0x664>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	109b      	asrs	r3, r3, #2
 8000a1c:	f003 0301 	and.w	r3, r3, #1
 8000a20:	b2d9      	uxtb	r1, r3
 8000a22:	4ab2      	ldr	r2, [pc, #712]	; (8000cec <merge+0x668>)
 8000a24:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 8000a28:	f361 0382 	bfi	r3, r1, #2, #1
 8000a2c:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	 			 BMS.Cell4_Balance_State = (Received_Data[0] & 0x08)>>3;
 8000a30:	4bad      	ldr	r3, [pc, #692]	; (8000ce8 <merge+0x664>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	10db      	asrs	r3, r3, #3
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	b2d9      	uxtb	r1, r3
 8000a3c:	4aab      	ldr	r2, [pc, #684]	; (8000cec <merge+0x668>)
 8000a3e:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 8000a42:	f361 03c3 	bfi	r3, r1, #3, #1
 8000a46:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	 			 BMS.Cell5_Balance_State = (Received_Data[0] & 0x10)>>4;
 8000a4a:	4ba7      	ldr	r3, [pc, #668]	; (8000ce8 <merge+0x664>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	111b      	asrs	r3, r3, #4
 8000a50:	f003 0301 	and.w	r3, r3, #1
 8000a54:	b2d9      	uxtb	r1, r3
 8000a56:	4aa5      	ldr	r2, [pc, #660]	; (8000cec <merge+0x668>)
 8000a58:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 8000a5c:	f361 1304 	bfi	r3, r1, #4, #1
 8000a60:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	 			 BMS.Cell6_Balance_State = (Received_Data[0] & 0x20)>>5;
 8000a64:	4ba0      	ldr	r3, [pc, #640]	; (8000ce8 <merge+0x664>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	115b      	asrs	r3, r3, #5
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	b2d9      	uxtb	r1, r3
 8000a70:	4a9e      	ldr	r2, [pc, #632]	; (8000cec <merge+0x668>)
 8000a72:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 8000a76:	f361 1345 	bfi	r3, r1, #5, #1
 8000a7a:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	 			 BMS.Cell7_Balance_State = (Received_Data[0] & 0x40)>>6;
 8000a7e:	4b9a      	ldr	r3, [pc, #616]	; (8000ce8 <merge+0x664>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	119b      	asrs	r3, r3, #6
 8000a84:	f003 0301 	and.w	r3, r3, #1
 8000a88:	b2d9      	uxtb	r1, r3
 8000a8a:	4a98      	ldr	r2, [pc, #608]	; (8000cec <merge+0x668>)
 8000a8c:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 8000a90:	f361 1386 	bfi	r3, r1, #6, #1
 8000a94:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	 			 BMS.Cell8_Balance_State = (Received_Data[0] & 0x80)>>7;
 8000a98:	4b93      	ldr	r3, [pc, #588]	; (8000ce8 <merge+0x664>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	09db      	lsrs	r3, r3, #7
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	f003 0301 	and.w	r3, r3, #1
 8000aa4:	b2d9      	uxtb	r1, r3
 8000aa6:	4a91      	ldr	r2, [pc, #580]	; (8000cec <merge+0x668>)
 8000aa8:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 8000aac:	f361 13c7 	bfi	r3, r1, #7, #1
 8000ab0:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	 			 BMS.Cell9_Balance_State = (Received_Data[1] & 0x01)>>0;
 8000ab4:	4b8c      	ldr	r3, [pc, #560]	; (8000ce8 <merge+0x664>)
 8000ab6:	785b      	ldrb	r3, [r3, #1]
 8000ab8:	f003 0301 	and.w	r3, r3, #1
 8000abc:	b2d9      	uxtb	r1, r3
 8000abe:	4a8b      	ldr	r2, [pc, #556]	; (8000cec <merge+0x668>)
 8000ac0:	f892 302f 	ldrb.w	r3, [r2, #47]	; 0x2f
 8000ac4:	f361 0300 	bfi	r3, r1, #0, #1
 8000ac8:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
	 			 BMS.Cell10_Balance_State = (Received_Data[1] & 0x02)>>1;
 8000acc:	4b86      	ldr	r3, [pc, #536]	; (8000ce8 <merge+0x664>)
 8000ace:	785b      	ldrb	r3, [r3, #1]
 8000ad0:	105b      	asrs	r3, r3, #1
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	b2d9      	uxtb	r1, r3
 8000ad8:	4a84      	ldr	r2, [pc, #528]	; (8000cec <merge+0x668>)
 8000ada:	f892 302f 	ldrb.w	r3, [r2, #47]	; 0x2f
 8000ade:	f361 0341 	bfi	r3, r1, #1, #1
 8000ae2:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
	 			 BMS.Cell11_Balance_State = (Received_Data[1] & 0x04)>>2;
 8000ae6:	4b80      	ldr	r3, [pc, #512]	; (8000ce8 <merge+0x664>)
 8000ae8:	785b      	ldrb	r3, [r3, #1]
 8000aea:	109b      	asrs	r3, r3, #2
 8000aec:	f003 0301 	and.w	r3, r3, #1
 8000af0:	b2d9      	uxtb	r1, r3
 8000af2:	4a7e      	ldr	r2, [pc, #504]	; (8000cec <merge+0x668>)
 8000af4:	f892 302f 	ldrb.w	r3, [r2, #47]	; 0x2f
 8000af8:	f361 0382 	bfi	r3, r1, #2, #1
 8000afc:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
	 			 BMS.Cell12_Balance_State = (Received_Data[1] & 0x08)>>3;
 8000b00:	4b79      	ldr	r3, [pc, #484]	; (8000ce8 <merge+0x664>)
 8000b02:	785b      	ldrb	r3, [r3, #1]
 8000b04:	10db      	asrs	r3, r3, #3
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	b2d9      	uxtb	r1, r3
 8000b0c:	4a77      	ldr	r2, [pc, #476]	; (8000cec <merge+0x668>)
 8000b0e:	f892 302f 	ldrb.w	r3, [r2, #47]	; 0x2f
 8000b12:	f361 03c3 	bfi	r3, r1, #3, #1
 8000b16:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
	 			 BMS.Cell13_Balance_State = (Received_Data[1] & 0x10)>>4;
 8000b1a:	4b73      	ldr	r3, [pc, #460]	; (8000ce8 <merge+0x664>)
 8000b1c:	785b      	ldrb	r3, [r3, #1]
 8000b1e:	111b      	asrs	r3, r3, #4
 8000b20:	f003 0301 	and.w	r3, r3, #1
 8000b24:	b2d9      	uxtb	r1, r3
 8000b26:	4a71      	ldr	r2, [pc, #452]	; (8000cec <merge+0x668>)
 8000b28:	f892 302f 	ldrb.w	r3, [r2, #47]	; 0x2f
 8000b2c:	f361 1304 	bfi	r3, r1, #4, #1
 8000b30:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
	 			 BMS.Cell14_Balance_State = (Received_Data[1] & 0x20)>>5;
 8000b34:	4b6c      	ldr	r3, [pc, #432]	; (8000ce8 <merge+0x664>)
 8000b36:	785b      	ldrb	r3, [r3, #1]
 8000b38:	115b      	asrs	r3, r3, #5
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	b2d9      	uxtb	r1, r3
 8000b40:	4a6a      	ldr	r2, [pc, #424]	; (8000cec <merge+0x668>)
 8000b42:	f892 302f 	ldrb.w	r3, [r2, #47]	; 0x2f
 8000b46:	f361 1345 	bfi	r3, r1, #5, #1
 8000b4a:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
	 			 BMS.Cell15_Balance_State = (Received_Data[1] & 0x40)>>6;
 8000b4e:	4b66      	ldr	r3, [pc, #408]	; (8000ce8 <merge+0x664>)
 8000b50:	785b      	ldrb	r3, [r3, #1]
 8000b52:	119b      	asrs	r3, r3, #6
 8000b54:	f003 0301 	and.w	r3, r3, #1
 8000b58:	b2d9      	uxtb	r1, r3
 8000b5a:	4a64      	ldr	r2, [pc, #400]	; (8000cec <merge+0x668>)
 8000b5c:	f892 302f 	ldrb.w	r3, [r2, #47]	; 0x2f
 8000b60:	f361 1386 	bfi	r3, r1, #6, #1
 8000b64:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
	 			 BMS.Cell16_Balance_State = (Received_Data[1] & 0x80)>>7;
 8000b68:	4b5f      	ldr	r3, [pc, #380]	; (8000ce8 <merge+0x664>)
 8000b6a:	785b      	ldrb	r3, [r3, #1]
 8000b6c:	09db      	lsrs	r3, r3, #7
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	f003 0301 	and.w	r3, r3, #1
 8000b74:	b2d9      	uxtb	r1, r3
 8000b76:	4a5d      	ldr	r2, [pc, #372]	; (8000cec <merge+0x668>)
 8000b78:	f892 302f 	ldrb.w	r3, [r2, #47]	; 0x2f
 8000b7c:	f361 13c7 	bfi	r3, r1, #7, #1
 8000b80:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
	 			 BMS.Cell17_Balance_State = (Received_Data[2] & 0x01)>>0;
 8000b84:	4b58      	ldr	r3, [pc, #352]	; (8000ce8 <merge+0x664>)
 8000b86:	789b      	ldrb	r3, [r3, #2]
 8000b88:	f003 0301 	and.w	r3, r3, #1
 8000b8c:	b2d9      	uxtb	r1, r3
 8000b8e:	4a57      	ldr	r2, [pc, #348]	; (8000cec <merge+0x668>)
 8000b90:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8000b94:	f361 0300 	bfi	r3, r1, #0, #1
 8000b98:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
	 			 BMS.Cell18_Balance_State = (Received_Data[2] & 0x02)>>1;
 8000b9c:	4b52      	ldr	r3, [pc, #328]	; (8000ce8 <merge+0x664>)
 8000b9e:	789b      	ldrb	r3, [r3, #2]
 8000ba0:	105b      	asrs	r3, r3, #1
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	b2d9      	uxtb	r1, r3
 8000ba8:	4a50      	ldr	r2, [pc, #320]	; (8000cec <merge+0x668>)
 8000baa:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8000bae:	f361 0341 	bfi	r3, r1, #1, #1
 8000bb2:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
	 			 BMS.Cell19_Balance_State = (Received_Data[2] & 0x04)>>2;
 8000bb6:	4b4c      	ldr	r3, [pc, #304]	; (8000ce8 <merge+0x664>)
 8000bb8:	789b      	ldrb	r3, [r3, #2]
 8000bba:	109b      	asrs	r3, r3, #2
 8000bbc:	f003 0301 	and.w	r3, r3, #1
 8000bc0:	b2d9      	uxtb	r1, r3
 8000bc2:	4a4a      	ldr	r2, [pc, #296]	; (8000cec <merge+0x668>)
 8000bc4:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8000bc8:	f361 0382 	bfi	r3, r1, #2, #1
 8000bcc:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
	 			 BMS.Cell20_Balance_State = (Received_Data[2] & 0x08)>>3;
 8000bd0:	4b45      	ldr	r3, [pc, #276]	; (8000ce8 <merge+0x664>)
 8000bd2:	789b      	ldrb	r3, [r3, #2]
 8000bd4:	10db      	asrs	r3, r3, #3
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	b2d9      	uxtb	r1, r3
 8000bdc:	4a43      	ldr	r2, [pc, #268]	; (8000cec <merge+0x668>)
 8000bde:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8000be2:	f361 03c3 	bfi	r3, r1, #3, #1
 8000be6:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
	 			 BMS.Cell21_Balance_State = (Received_Data[2] & 0x10)>>4;
 8000bea:	4b3f      	ldr	r3, [pc, #252]	; (8000ce8 <merge+0x664>)
 8000bec:	789b      	ldrb	r3, [r3, #2]
 8000bee:	111b      	asrs	r3, r3, #4
 8000bf0:	f003 0301 	and.w	r3, r3, #1
 8000bf4:	b2d9      	uxtb	r1, r3
 8000bf6:	4a3d      	ldr	r2, [pc, #244]	; (8000cec <merge+0x668>)
 8000bf8:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8000bfc:	f361 1304 	bfi	r3, r1, #4, #1
 8000c00:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
	 			 BMS.Cell22_Balance_State = (Received_Data[2] & 0x20)>>5;
 8000c04:	4b38      	ldr	r3, [pc, #224]	; (8000ce8 <merge+0x664>)
 8000c06:	789b      	ldrb	r3, [r3, #2]
 8000c08:	115b      	asrs	r3, r3, #5
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	b2d9      	uxtb	r1, r3
 8000c10:	4a36      	ldr	r2, [pc, #216]	; (8000cec <merge+0x668>)
 8000c12:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8000c16:	f361 1345 	bfi	r3, r1, #5, #1
 8000c1a:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
	 			 BMS.Cell23_Balance_State = (Received_Data[2] & 0x40)>>6;
 8000c1e:	4b32      	ldr	r3, [pc, #200]	; (8000ce8 <merge+0x664>)
 8000c20:	789b      	ldrb	r3, [r3, #2]
 8000c22:	119b      	asrs	r3, r3, #6
 8000c24:	f003 0301 	and.w	r3, r3, #1
 8000c28:	b2d9      	uxtb	r1, r3
 8000c2a:	4a30      	ldr	r2, [pc, #192]	; (8000cec <merge+0x668>)
 8000c2c:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8000c30:	f361 1386 	bfi	r3, r1, #6, #1
 8000c34:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
	 			 BMS.Cell24_Balance_State = (Received_Data[2] & 0x80)>>7;
 8000c38:	4b2b      	ldr	r3, [pc, #172]	; (8000ce8 <merge+0x664>)
 8000c3a:	789b      	ldrb	r3, [r3, #2]
 8000c3c:	09db      	lsrs	r3, r3, #7
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	f003 0301 	and.w	r3, r3, #1
 8000c44:	b2d9      	uxtb	r1, r3
 8000c46:	4a29      	ldr	r2, [pc, #164]	; (8000cec <merge+0x668>)
 8000c48:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8000c4c:	f361 13c7 	bfi	r3, r1, #7, #1
 8000c50:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
	 			 BMS.Cell25_Balance_State = (Received_Data[3] & 0x01)>>0;
 8000c54:	4b24      	ldr	r3, [pc, #144]	; (8000ce8 <merge+0x664>)
 8000c56:	78db      	ldrb	r3, [r3, #3]
 8000c58:	f003 0301 	and.w	r3, r3, #1
 8000c5c:	b2d9      	uxtb	r1, r3
 8000c5e:	4a23      	ldr	r2, [pc, #140]	; (8000cec <merge+0x668>)
 8000c60:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8000c64:	f361 0300 	bfi	r3, r1, #0, #1
 8000c68:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
	 			 BMS.Cell26_Balance_State = (Received_Data[3] & 0x02)>>1;
 8000c6c:	4b1e      	ldr	r3, [pc, #120]	; (8000ce8 <merge+0x664>)
 8000c6e:	78db      	ldrb	r3, [r3, #3]
 8000c70:	105b      	asrs	r3, r3, #1
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	b2d9      	uxtb	r1, r3
 8000c78:	4a1c      	ldr	r2, [pc, #112]	; (8000cec <merge+0x668>)
 8000c7a:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8000c7e:	f361 0341 	bfi	r3, r1, #1, #1
 8000c82:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
	 			 BMS.Cell27_Balance_State = (Received_Data[3] & 0x04)>>2;
 8000c86:	4b18      	ldr	r3, [pc, #96]	; (8000ce8 <merge+0x664>)
 8000c88:	78db      	ldrb	r3, [r3, #3]
 8000c8a:	109b      	asrs	r3, r3, #2
 8000c8c:	f003 0301 	and.w	r3, r3, #1
 8000c90:	b2d9      	uxtb	r1, r3
 8000c92:	4a16      	ldr	r2, [pc, #88]	; (8000cec <merge+0x668>)
 8000c94:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8000c98:	f361 0382 	bfi	r3, r1, #2, #1
 8000c9c:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
	 			 BMS.Cell28_Balance_State = (Received_Data[3] & 0x08)>>3;
 8000ca0:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <merge+0x664>)
 8000ca2:	78db      	ldrb	r3, [r3, #3]
 8000ca4:	10db      	asrs	r3, r3, #3
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	b2d9      	uxtb	r1, r3
 8000cac:	4a0f      	ldr	r2, [pc, #60]	; (8000cec <merge+0x668>)
 8000cae:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8000cb2:	f361 03c3 	bfi	r3, r1, #3, #1
 8000cb6:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
	 			 BMS.Cell29_Balance_State = (Received_Data[3] & 0x10)>>4;
 8000cba:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <merge+0x664>)
 8000cbc:	78db      	ldrb	r3, [r3, #3]
 8000cbe:	111b      	asrs	r3, r3, #4
 8000cc0:	f003 0301 	and.w	r3, r3, #1
 8000cc4:	b2d9      	uxtb	r1, r3
 8000cc6:	4a09      	ldr	r2, [pc, #36]	; (8000cec <merge+0x668>)
 8000cc8:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8000ccc:	f361 1304 	bfi	r3, r1, #4, #1
 8000cd0:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
	 			 BMS.Cell30_Balance_State = (Received_Data[3] & 0x20)>>5;
 8000cd4:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <merge+0x664>)
 8000cd6:	78db      	ldrb	r3, [r3, #3]
 8000cd8:	115b      	asrs	r3, r3, #5
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	b2d9      	uxtb	r1, r3
 8000ce0:	4a02      	ldr	r2, [pc, #8]	; (8000cec <merge+0x668>)
 8000ce2:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8000ce6:	e003      	b.n	8000cf0 <merge+0x66c>
 8000ce8:	20000c60 	.word	0x20000c60
 8000cec:	20000c68 	.word	0x20000c68
 8000cf0:	f361 1345 	bfi	r3, r1, #5, #1
 8000cf4:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
	 			 BMS.Cell31_Balance_State = (Received_Data[3] & 0x40)>>6;
 8000cf8:	4b75      	ldr	r3, [pc, #468]	; (8000ed0 <merge+0x84c>)
 8000cfa:	78db      	ldrb	r3, [r3, #3]
 8000cfc:	119b      	asrs	r3, r3, #6
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	b2d9      	uxtb	r1, r3
 8000d04:	4a73      	ldr	r2, [pc, #460]	; (8000ed4 <merge+0x850>)
 8000d06:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8000d0a:	f361 1386 	bfi	r3, r1, #6, #1
 8000d0e:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
	 			 BMS.Cell32_Balance_State = (Received_Data[3] & 0x80)>>7;
 8000d12:	4b6f      	ldr	r3, [pc, #444]	; (8000ed0 <merge+0x84c>)
 8000d14:	78db      	ldrb	r3, [r3, #3]
 8000d16:	09db      	lsrs	r3, r3, #7
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	b2d9      	uxtb	r1, r3
 8000d20:	4a6c      	ldr	r2, [pc, #432]	; (8000ed4 <merge+0x850>)
 8000d22:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8000d26:	f361 13c7 	bfi	r3, r1, #7, #1
 8000d2a:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
	 			 BMS.Cell33_Balance_State = (Received_Data[4] & 0x01)>>0;
 8000d2e:	4b68      	ldr	r3, [pc, #416]	; (8000ed0 <merge+0x84c>)
 8000d30:	791b      	ldrb	r3, [r3, #4]
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	b2d9      	uxtb	r1, r3
 8000d38:	4a66      	ldr	r2, [pc, #408]	; (8000ed4 <merge+0x850>)
 8000d3a:	f892 3032 	ldrb.w	r3, [r2, #50]	; 0x32
 8000d3e:	f361 0300 	bfi	r3, r1, #0, #1
 8000d42:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
	 			 BMS.Cell34_Balance_State = (Received_Data[4] & 0x02)>>1;
 8000d46:	4b62      	ldr	r3, [pc, #392]	; (8000ed0 <merge+0x84c>)
 8000d48:	791b      	ldrb	r3, [r3, #4]
 8000d4a:	105b      	asrs	r3, r3, #1
 8000d4c:	f003 0301 	and.w	r3, r3, #1
 8000d50:	b2d9      	uxtb	r1, r3
 8000d52:	4a60      	ldr	r2, [pc, #384]	; (8000ed4 <merge+0x850>)
 8000d54:	f892 3032 	ldrb.w	r3, [r2, #50]	; 0x32
 8000d58:	f361 0341 	bfi	r3, r1, #1, #1
 8000d5c:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
	 			 BMS.Cell35_Balance_State = (Received_Data[4] & 0x04)>>2;
 8000d60:	4b5b      	ldr	r3, [pc, #364]	; (8000ed0 <merge+0x84c>)
 8000d62:	791b      	ldrb	r3, [r3, #4]
 8000d64:	109b      	asrs	r3, r3, #2
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	b2d9      	uxtb	r1, r3
 8000d6c:	4a59      	ldr	r2, [pc, #356]	; (8000ed4 <merge+0x850>)
 8000d6e:	f892 3032 	ldrb.w	r3, [r2, #50]	; 0x32
 8000d72:	f361 0382 	bfi	r3, r1, #2, #1
 8000d76:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
	 			 BMS.Cell36_Balance_State = (Received_Data[4] & 0x08)>>3;
 8000d7a:	4b55      	ldr	r3, [pc, #340]	; (8000ed0 <merge+0x84c>)
 8000d7c:	791b      	ldrb	r3, [r3, #4]
 8000d7e:	10db      	asrs	r3, r3, #3
 8000d80:	f003 0301 	and.w	r3, r3, #1
 8000d84:	b2d9      	uxtb	r1, r3
 8000d86:	4a53      	ldr	r2, [pc, #332]	; (8000ed4 <merge+0x850>)
 8000d88:	f892 3032 	ldrb.w	r3, [r2, #50]	; 0x32
 8000d8c:	f361 03c3 	bfi	r3, r1, #3, #1
 8000d90:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
	 			 BMS.Cell37_Balance_State = (Received_Data[4] & 0x10)>>4;
 8000d94:	4b4e      	ldr	r3, [pc, #312]	; (8000ed0 <merge+0x84c>)
 8000d96:	791b      	ldrb	r3, [r3, #4]
 8000d98:	111b      	asrs	r3, r3, #4
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	b2d9      	uxtb	r1, r3
 8000da0:	4a4c      	ldr	r2, [pc, #304]	; (8000ed4 <merge+0x850>)
 8000da2:	f892 3032 	ldrb.w	r3, [r2, #50]	; 0x32
 8000da6:	f361 1304 	bfi	r3, r1, #4, #1
 8000daa:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
	 			 BMS.Cell38_Balance_State = (Received_Data[4] & 0x20)>>5;
 8000dae:	4b48      	ldr	r3, [pc, #288]	; (8000ed0 <merge+0x84c>)
 8000db0:	791b      	ldrb	r3, [r3, #4]
 8000db2:	115b      	asrs	r3, r3, #5
 8000db4:	f003 0301 	and.w	r3, r3, #1
 8000db8:	b2d9      	uxtb	r1, r3
 8000dba:	4a46      	ldr	r2, [pc, #280]	; (8000ed4 <merge+0x850>)
 8000dbc:	f892 3032 	ldrb.w	r3, [r2, #50]	; 0x32
 8000dc0:	f361 1345 	bfi	r3, r1, #5, #1
 8000dc4:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
	 			 BMS.Cell39_Balance_State = (Received_Data[4] & 0x40)>>6;
 8000dc8:	4b41      	ldr	r3, [pc, #260]	; (8000ed0 <merge+0x84c>)
 8000dca:	791b      	ldrb	r3, [r3, #4]
 8000dcc:	119b      	asrs	r3, r3, #6
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	b2d9      	uxtb	r1, r3
 8000dd4:	4a3f      	ldr	r2, [pc, #252]	; (8000ed4 <merge+0x850>)
 8000dd6:	f892 3032 	ldrb.w	r3, [r2, #50]	; 0x32
 8000dda:	f361 1386 	bfi	r3, r1, #6, #1
 8000dde:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
	 			 BMS.Cell40_Balance_State = (Received_Data[4] & 0x80)>>7;
 8000de2:	4b3b      	ldr	r3, [pc, #236]	; (8000ed0 <merge+0x84c>)
 8000de4:	791b      	ldrb	r3, [r3, #4]
 8000de6:	09db      	lsrs	r3, r3, #7
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	b2d9      	uxtb	r1, r3
 8000df0:	4a38      	ldr	r2, [pc, #224]	; (8000ed4 <merge+0x850>)
 8000df2:	f892 3032 	ldrb.w	r3, [r2, #50]	; 0x32
 8000df6:	f361 13c7 	bfi	r3, r1, #7, #1
 8000dfa:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
	 			 BMS.Cell41_Balance_State = (Received_Data[5] & 0x01)>>0;
 8000dfe:	4b34      	ldr	r3, [pc, #208]	; (8000ed0 <merge+0x84c>)
 8000e00:	795b      	ldrb	r3, [r3, #5]
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	b2d9      	uxtb	r1, r3
 8000e08:	4a32      	ldr	r2, [pc, #200]	; (8000ed4 <merge+0x850>)
 8000e0a:	f892 3033 	ldrb.w	r3, [r2, #51]	; 0x33
 8000e0e:	f361 0300 	bfi	r3, r1, #0, #1
 8000e12:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
	 			 BMS.Cell42_Balance_State = (Received_Data[5] & 0x02)>>1;
 8000e16:	4b2e      	ldr	r3, [pc, #184]	; (8000ed0 <merge+0x84c>)
 8000e18:	795b      	ldrb	r3, [r3, #5]
 8000e1a:	105b      	asrs	r3, r3, #1
 8000e1c:	f003 0301 	and.w	r3, r3, #1
 8000e20:	b2d9      	uxtb	r1, r3
 8000e22:	4a2c      	ldr	r2, [pc, #176]	; (8000ed4 <merge+0x850>)
 8000e24:	f892 3033 	ldrb.w	r3, [r2, #51]	; 0x33
 8000e28:	f361 0341 	bfi	r3, r1, #1, #1
 8000e2c:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
	 			 BMS.Cell43_Balance_State = (Received_Data[5] & 0x04)>>2;
 8000e30:	4b27      	ldr	r3, [pc, #156]	; (8000ed0 <merge+0x84c>)
 8000e32:	795b      	ldrb	r3, [r3, #5]
 8000e34:	109b      	asrs	r3, r3, #2
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	b2d9      	uxtb	r1, r3
 8000e3c:	4a25      	ldr	r2, [pc, #148]	; (8000ed4 <merge+0x850>)
 8000e3e:	f892 3033 	ldrb.w	r3, [r2, #51]	; 0x33
 8000e42:	f361 0382 	bfi	r3, r1, #2, #1
 8000e46:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
	 			 BMS.Cell44_Balance_State = (Received_Data[5] & 0x08)>>3;
 8000e4a:	4b21      	ldr	r3, [pc, #132]	; (8000ed0 <merge+0x84c>)
 8000e4c:	795b      	ldrb	r3, [r3, #5]
 8000e4e:	10db      	asrs	r3, r3, #3
 8000e50:	f003 0301 	and.w	r3, r3, #1
 8000e54:	b2d9      	uxtb	r1, r3
 8000e56:	4a1f      	ldr	r2, [pc, #124]	; (8000ed4 <merge+0x850>)
 8000e58:	f892 3033 	ldrb.w	r3, [r2, #51]	; 0x33
 8000e5c:	f361 03c3 	bfi	r3, r1, #3, #1
 8000e60:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
	 			 BMS.Cell45_Balance_State = (Received_Data[5] & 0x10)>>4;
 8000e64:	4b1a      	ldr	r3, [pc, #104]	; (8000ed0 <merge+0x84c>)
 8000e66:	795b      	ldrb	r3, [r3, #5]
 8000e68:	111b      	asrs	r3, r3, #4
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	b2d9      	uxtb	r1, r3
 8000e70:	4a18      	ldr	r2, [pc, #96]	; (8000ed4 <merge+0x850>)
 8000e72:	f892 3033 	ldrb.w	r3, [r2, #51]	; 0x33
 8000e76:	f361 1304 	bfi	r3, r1, #4, #1
 8000e7a:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
	 			 BMS.Cell46_Balance_State = (Received_Data[5] & 0x20)>>5;
 8000e7e:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <merge+0x84c>)
 8000e80:	795b      	ldrb	r3, [r3, #5]
 8000e82:	115b      	asrs	r3, r3, #5
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	b2d9      	uxtb	r1, r3
 8000e8a:	4a12      	ldr	r2, [pc, #72]	; (8000ed4 <merge+0x850>)
 8000e8c:	f892 3033 	ldrb.w	r3, [r2, #51]	; 0x33
 8000e90:	f361 1345 	bfi	r3, r1, #5, #1
 8000e94:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
	 			 BMS.Cell47_Balance_State = (Received_Data[5] & 0x40)>>6;
 8000e98:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <merge+0x84c>)
 8000e9a:	795b      	ldrb	r3, [r3, #5]
 8000e9c:	119b      	asrs	r3, r3, #6
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	b2d9      	uxtb	r1, r3
 8000ea4:	4a0b      	ldr	r2, [pc, #44]	; (8000ed4 <merge+0x850>)
 8000ea6:	f892 3033 	ldrb.w	r3, [r2, #51]	; 0x33
 8000eaa:	f361 1386 	bfi	r3, r1, #6, #1
 8000eae:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
	 			 BMS.Cell48_Balance_State = (Received_Data[5] & 0x80)>>7;
 8000eb2:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <merge+0x84c>)
 8000eb4:	795b      	ldrb	r3, [r3, #5]
 8000eb6:	09db      	lsrs	r3, r3, #7
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	b2d9      	uxtb	r1, r3
 8000ec0:	4a04      	ldr	r2, [pc, #16]	; (8000ed4 <merge+0x850>)
 8000ec2:	f892 3033 	ldrb.w	r3, [r2, #51]	; 0x33
 8000ec6:	f361 13c7 	bfi	r3, r1, #7, #1
 8000eca:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
	 			 break;
 8000ece:	e29e      	b.n	800140e <merge+0xd8a>
 8000ed0:	20000c60 	.word	0x20000c60
 8000ed4:	20000c68 	.word	0x20000c68
	             BMS.Cell_Volt_High_Level_1 = (Received_Data[0] & 0x01)>>0;//0:No error,1:Error
 8000ed8:	4bc0      	ldr	r3, [pc, #768]	; (80011dc <merge+0xb58>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	f003 0301 	and.w	r3, r3, #1
 8000ee0:	b2d9      	uxtb	r1, r3
 8000ee2:	4abf      	ldr	r2, [pc, #764]	; (80011e0 <merge+0xb5c>)
 8000ee4:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8000ee8:	f361 0300 	bfi	r3, r1, #0, #1
 8000eec:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
	 		     BMS.Cell_Volt_High_Level_2 = (Received_Data[0] & 0x02)>>1;
 8000ef0:	4bba      	ldr	r3, [pc, #744]	; (80011dc <merge+0xb58>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	105b      	asrs	r3, r3, #1
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	b2d9      	uxtb	r1, r3
 8000efc:	4ab8      	ldr	r2, [pc, #736]	; (80011e0 <merge+0xb5c>)
 8000efe:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8000f02:	f361 0341 	bfi	r3, r1, #1, #1
 8000f06:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
	 	         BMS.Cell_Volt_Low_Level_1 = (Received_Data[0] & 0x04)>>2;
 8000f0a:	4bb4      	ldr	r3, [pc, #720]	; (80011dc <merge+0xb58>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	109b      	asrs	r3, r3, #2
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	b2d9      	uxtb	r1, r3
 8000f16:	4ab2      	ldr	r2, [pc, #712]	; (80011e0 <merge+0xb5c>)
 8000f18:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8000f1c:	f361 0382 	bfi	r3, r1, #2, #1
 8000f20:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
	 		     BMS.Cell_Volt_Low_Level_2 = (Received_Data[0] & 0x08)>>3;
 8000f24:	4bad      	ldr	r3, [pc, #692]	; (80011dc <merge+0xb58>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	10db      	asrs	r3, r3, #3
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	b2d9      	uxtb	r1, r3
 8000f30:	4aab      	ldr	r2, [pc, #684]	; (80011e0 <merge+0xb5c>)
 8000f32:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8000f36:	f361 03c3 	bfi	r3, r1, #3, #1
 8000f3a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
	 		     BMS.Sum_Volt_High_Level_1 = (Received_Data[0] & 0x10)>>4;
 8000f3e:	4ba7      	ldr	r3, [pc, #668]	; (80011dc <merge+0xb58>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	111b      	asrs	r3, r3, #4
 8000f44:	f003 0301 	and.w	r3, r3, #1
 8000f48:	b2d9      	uxtb	r1, r3
 8000f4a:	4aa5      	ldr	r2, [pc, #660]	; (80011e0 <merge+0xb5c>)
 8000f4c:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8000f50:	f361 1304 	bfi	r3, r1, #4, #1
 8000f54:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
	 			 BMS.Sum_Volt_High_Level_2 = (Received_Data[0] & 0x20)>>5;
 8000f58:	4ba0      	ldr	r3, [pc, #640]	; (80011dc <merge+0xb58>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	115b      	asrs	r3, r3, #5
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	b2d9      	uxtb	r1, r3
 8000f64:	4a9e      	ldr	r2, [pc, #632]	; (80011e0 <merge+0xb5c>)
 8000f66:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8000f6a:	f361 1345 	bfi	r3, r1, #5, #1
 8000f6e:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
	 			 BMS.Sum_Volt_Low_Level_1 = (Received_Data[0] & 0x40)>>6;
 8000f72:	4b9a      	ldr	r3, [pc, #616]	; (80011dc <merge+0xb58>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	119b      	asrs	r3, r3, #6
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	b2d9      	uxtb	r1, r3
 8000f7e:	4a98      	ldr	r2, [pc, #608]	; (80011e0 <merge+0xb5c>)
 8000f80:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8000f84:	f361 1386 	bfi	r3, r1, #6, #1
 8000f88:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
	 			 BMS.Sum_Volt_Low_Level_2 = (Received_Data[0] & 0x80)>>7;
 8000f8c:	4b93      	ldr	r3, [pc, #588]	; (80011dc <merge+0xb58>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	09db      	lsrs	r3, r3, #7
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	f003 0301 	and.w	r3, r3, #1
 8000f98:	b2d9      	uxtb	r1, r3
 8000f9a:	4a91      	ldr	r2, [pc, #580]	; (80011e0 <merge+0xb5c>)
 8000f9c:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8000fa0:	f361 13c7 	bfi	r3, r1, #7, #1
 8000fa4:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
	 			 BMS.Chg_Temp_High_Level_1 = (Received_Data[1] & 0x01)>>0;
 8000fa8:	4b8c      	ldr	r3, [pc, #560]	; (80011dc <merge+0xb58>)
 8000faa:	785b      	ldrb	r3, [r3, #1]
 8000fac:	f003 0301 	and.w	r3, r3, #1
 8000fb0:	b2d9      	uxtb	r1, r3
 8000fb2:	4a8b      	ldr	r2, [pc, #556]	; (80011e0 <merge+0xb5c>)
 8000fb4:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8000fb8:	f361 0300 	bfi	r3, r1, #0, #1
 8000fbc:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
	 			 BMS.Chg_Temp_High_Level_2 = (Received_Data[1] & 0x02)>>1;
 8000fc0:	4b86      	ldr	r3, [pc, #536]	; (80011dc <merge+0xb58>)
 8000fc2:	785b      	ldrb	r3, [r3, #1]
 8000fc4:	105b      	asrs	r3, r3, #1
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	b2d9      	uxtb	r1, r3
 8000fcc:	4a84      	ldr	r2, [pc, #528]	; (80011e0 <merge+0xb5c>)
 8000fce:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8000fd2:	f361 0341 	bfi	r3, r1, #1, #1
 8000fd6:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
	 		     BMS.Chg_Temp_Low_Level_1 = (Received_Data[1] & 0x04)>>2;
 8000fda:	4b80      	ldr	r3, [pc, #512]	; (80011dc <merge+0xb58>)
 8000fdc:	785b      	ldrb	r3, [r3, #1]
 8000fde:	109b      	asrs	r3, r3, #2
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	b2d9      	uxtb	r1, r3
 8000fe6:	4a7e      	ldr	r2, [pc, #504]	; (80011e0 <merge+0xb5c>)
 8000fe8:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8000fec:	f361 0382 	bfi	r3, r1, #2, #1
 8000ff0:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
	 		     BMS.Chg_Temp_Low_Level_2 = (Received_Data[1] & 0x08)>>3;
 8000ff4:	4b79      	ldr	r3, [pc, #484]	; (80011dc <merge+0xb58>)
 8000ff6:	785b      	ldrb	r3, [r3, #1]
 8000ff8:	10db      	asrs	r3, r3, #3
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	b2d9      	uxtb	r1, r3
 8001000:	4a77      	ldr	r2, [pc, #476]	; (80011e0 <merge+0xb5c>)
 8001002:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8001006:	f361 03c3 	bfi	r3, r1, #3, #1
 800100a:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
	 		     BMS.Dischg_Temp_High_Level_1 = (Received_Data[1] & 0x10)>>4;
 800100e:	4b73      	ldr	r3, [pc, #460]	; (80011dc <merge+0xb58>)
 8001010:	785b      	ldrb	r3, [r3, #1]
 8001012:	111b      	asrs	r3, r3, #4
 8001014:	f003 0301 	and.w	r3, r3, #1
 8001018:	b2d9      	uxtb	r1, r3
 800101a:	4a71      	ldr	r2, [pc, #452]	; (80011e0 <merge+0xb5c>)
 800101c:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8001020:	f361 1304 	bfi	r3, r1, #4, #1
 8001024:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
	 			 BMS.Dischg_Temp_High_Level_2 = (Received_Data[1] & 0x20)>>5;
 8001028:	4b6c      	ldr	r3, [pc, #432]	; (80011dc <merge+0xb58>)
 800102a:	785b      	ldrb	r3, [r3, #1]
 800102c:	115b      	asrs	r3, r3, #5
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	b2d9      	uxtb	r1, r3
 8001034:	4a6a      	ldr	r2, [pc, #424]	; (80011e0 <merge+0xb5c>)
 8001036:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 800103a:	f361 1345 	bfi	r3, r1, #5, #1
 800103e:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
	 			 BMS.Dischg_Temp_Low_Level_1 = (Received_Data[1] & 0x40)>>6;
 8001042:	4b66      	ldr	r3, [pc, #408]	; (80011dc <merge+0xb58>)
 8001044:	785b      	ldrb	r3, [r3, #1]
 8001046:	119b      	asrs	r3, r3, #6
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	b2d9      	uxtb	r1, r3
 800104e:	4a64      	ldr	r2, [pc, #400]	; (80011e0 <merge+0xb5c>)
 8001050:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8001054:	f361 1386 	bfi	r3, r1, #6, #1
 8001058:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
	 			 BMS.Dischg_Temp_Low_Level_2 = (Received_Data[1] & 0x80)>>7;
 800105c:	4b5f      	ldr	r3, [pc, #380]	; (80011dc <merge+0xb58>)
 800105e:	785b      	ldrb	r3, [r3, #1]
 8001060:	09db      	lsrs	r3, r3, #7
 8001062:	b2db      	uxtb	r3, r3
 8001064:	f003 0301 	and.w	r3, r3, #1
 8001068:	b2d9      	uxtb	r1, r3
 800106a:	4a5d      	ldr	r2, [pc, #372]	; (80011e0 <merge+0xb5c>)
 800106c:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8001070:	f361 13c7 	bfi	r3, r1, #7, #1
 8001074:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
	 			 BMS.Chg_Overcurrent_Level_1 = (Received_Data[2] & 0x01)>>0;
 8001078:	4b58      	ldr	r3, [pc, #352]	; (80011dc <merge+0xb58>)
 800107a:	789b      	ldrb	r3, [r3, #2]
 800107c:	f003 0301 	and.w	r3, r3, #1
 8001080:	b2d9      	uxtb	r1, r3
 8001082:	4a57      	ldr	r2, [pc, #348]	; (80011e0 <merge+0xb5c>)
 8001084:	f892 3036 	ldrb.w	r3, [r2, #54]	; 0x36
 8001088:	f361 0300 	bfi	r3, r1, #0, #1
 800108c:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36
	 		     BMS.Chg_Overcurrent_Level_2 = (Received_Data[2] & 0x02)>>1;
 8001090:	4b52      	ldr	r3, [pc, #328]	; (80011dc <merge+0xb58>)
 8001092:	789b      	ldrb	r3, [r3, #2]
 8001094:	105b      	asrs	r3, r3, #1
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	b2d9      	uxtb	r1, r3
 800109c:	4a50      	ldr	r2, [pc, #320]	; (80011e0 <merge+0xb5c>)
 800109e:	f892 3036 	ldrb.w	r3, [r2, #54]	; 0x36
 80010a2:	f361 0341 	bfi	r3, r1, #1, #1
 80010a6:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36
	 			 BMS.Dischg_Overcurrent_Level_1 = (Received_Data[2] & 0x04)>>2;
 80010aa:	4b4c      	ldr	r3, [pc, #304]	; (80011dc <merge+0xb58>)
 80010ac:	789b      	ldrb	r3, [r3, #2]
 80010ae:	109b      	asrs	r3, r3, #2
 80010b0:	f003 0301 	and.w	r3, r3, #1
 80010b4:	b2d9      	uxtb	r1, r3
 80010b6:	4a4a      	ldr	r2, [pc, #296]	; (80011e0 <merge+0xb5c>)
 80010b8:	f892 3036 	ldrb.w	r3, [r2, #54]	; 0x36
 80010bc:	f361 0382 	bfi	r3, r1, #2, #1
 80010c0:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36
	 			 BMS.Dischg_Overcurrent_Level_2 = (Received_Data[2] & 0x08)>>3;
 80010c4:	4b45      	ldr	r3, [pc, #276]	; (80011dc <merge+0xb58>)
 80010c6:	789b      	ldrb	r3, [r3, #2]
 80010c8:	10db      	asrs	r3, r3, #3
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	b2d9      	uxtb	r1, r3
 80010d0:	4a43      	ldr	r2, [pc, #268]	; (80011e0 <merge+0xb5c>)
 80010d2:	f892 3036 	ldrb.w	r3, [r2, #54]	; 0x36
 80010d6:	f361 03c3 	bfi	r3, r1, #3, #1
 80010da:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36
	 		     BMS.SOC_High_Level_1 = (Received_Data[2] & 0x10)>>4;
 80010de:	4b3f      	ldr	r3, [pc, #252]	; (80011dc <merge+0xb58>)
 80010e0:	789b      	ldrb	r3, [r3, #2]
 80010e2:	111b      	asrs	r3, r3, #4
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	b2d9      	uxtb	r1, r3
 80010ea:	4a3d      	ldr	r2, [pc, #244]	; (80011e0 <merge+0xb5c>)
 80010ec:	f892 3036 	ldrb.w	r3, [r2, #54]	; 0x36
 80010f0:	f361 1304 	bfi	r3, r1, #4, #1
 80010f4:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36
	 		     BMS.SOC_High_Level_2 = (Received_Data[2] & 0x20)>>5;
 80010f8:	4b38      	ldr	r3, [pc, #224]	; (80011dc <merge+0xb58>)
 80010fa:	789b      	ldrb	r3, [r3, #2]
 80010fc:	115b      	asrs	r3, r3, #5
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	b2d9      	uxtb	r1, r3
 8001104:	4a36      	ldr	r2, [pc, #216]	; (80011e0 <merge+0xb5c>)
 8001106:	f892 3036 	ldrb.w	r3, [r2, #54]	; 0x36
 800110a:	f361 1345 	bfi	r3, r1, #5, #1
 800110e:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36
	 		     BMS.SOC_Low_Level_1 = (Received_Data[2] & 0x40)>>6;
 8001112:	4b32      	ldr	r3, [pc, #200]	; (80011dc <merge+0xb58>)
 8001114:	789b      	ldrb	r3, [r3, #2]
 8001116:	119b      	asrs	r3, r3, #6
 8001118:	f003 0301 	and.w	r3, r3, #1
 800111c:	b2d9      	uxtb	r1, r3
 800111e:	4a30      	ldr	r2, [pc, #192]	; (80011e0 <merge+0xb5c>)
 8001120:	f892 3036 	ldrb.w	r3, [r2, #54]	; 0x36
 8001124:	f361 1386 	bfi	r3, r1, #6, #1
 8001128:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36
	 			 BMS.SOC_Low_Level_2 = (Received_Data[2] & 0x80)>>7;
 800112c:	4b2b      	ldr	r3, [pc, #172]	; (80011dc <merge+0xb58>)
 800112e:	789b      	ldrb	r3, [r3, #2]
 8001130:	09db      	lsrs	r3, r3, #7
 8001132:	b2db      	uxtb	r3, r3
 8001134:	f003 0301 	and.w	r3, r3, #1
 8001138:	b2d9      	uxtb	r1, r3
 800113a:	4a29      	ldr	r2, [pc, #164]	; (80011e0 <merge+0xb5c>)
 800113c:	f892 3036 	ldrb.w	r3, [r2, #54]	; 0x36
 8001140:	f361 13c7 	bfi	r3, r1, #7, #1
 8001144:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36
	 			 BMS.Diff_Volt_Level_1 = (Received_Data[3] & 0x01)>>0;
 8001148:	4b24      	ldr	r3, [pc, #144]	; (80011dc <merge+0xb58>)
 800114a:	78db      	ldrb	r3, [r3, #3]
 800114c:	f003 0301 	and.w	r3, r3, #1
 8001150:	b2d9      	uxtb	r1, r3
 8001152:	4a23      	ldr	r2, [pc, #140]	; (80011e0 <merge+0xb5c>)
 8001154:	f892 3037 	ldrb.w	r3, [r2, #55]	; 0x37
 8001158:	f361 0300 	bfi	r3, r1, #0, #1
 800115c:	f882 3037 	strb.w	r3, [r2, #55]	; 0x37
	 			 BMS.Diff_Volt_Level_2 = (Received_Data[3] & 0x02)>>1;
 8001160:	4b1e      	ldr	r3, [pc, #120]	; (80011dc <merge+0xb58>)
 8001162:	78db      	ldrb	r3, [r3, #3]
 8001164:	105b      	asrs	r3, r3, #1
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	b2d9      	uxtb	r1, r3
 800116c:	4a1c      	ldr	r2, [pc, #112]	; (80011e0 <merge+0xb5c>)
 800116e:	f892 3037 	ldrb.w	r3, [r2, #55]	; 0x37
 8001172:	f361 0341 	bfi	r3, r1, #1, #1
 8001176:	f882 3037 	strb.w	r3, [r2, #55]	; 0x37
	 			 BMS.Diff_Temp_Level_1 = (Received_Data[3] & 0x04)>>2;
 800117a:	4b18      	ldr	r3, [pc, #96]	; (80011dc <merge+0xb58>)
 800117c:	78db      	ldrb	r3, [r3, #3]
 800117e:	109b      	asrs	r3, r3, #2
 8001180:	f003 0301 	and.w	r3, r3, #1
 8001184:	b2d9      	uxtb	r1, r3
 8001186:	4a16      	ldr	r2, [pc, #88]	; (80011e0 <merge+0xb5c>)
 8001188:	f892 3037 	ldrb.w	r3, [r2, #55]	; 0x37
 800118c:	f361 0382 	bfi	r3, r1, #2, #1
 8001190:	f882 3037 	strb.w	r3, [r2, #55]	; 0x37
	 			 BMS.Diff_Temp_Level_2 = (Received_Data[3] & 0x08)>>3;
 8001194:	4b11      	ldr	r3, [pc, #68]	; (80011dc <merge+0xb58>)
 8001196:	78db      	ldrb	r3, [r3, #3]
 8001198:	10db      	asrs	r3, r3, #3
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	b2d9      	uxtb	r1, r3
 80011a0:	4a0f      	ldr	r2, [pc, #60]	; (80011e0 <merge+0xb5c>)
 80011a2:	f892 3037 	ldrb.w	r3, [r2, #55]	; 0x37
 80011a6:	f361 03c3 	bfi	r3, r1, #3, #1
 80011aa:	f882 3037 	strb.w	r3, [r2, #55]	; 0x37
	 			 BMS.Chg_MOS_Temp_High_Alarm = (Received_Data[4] & 0x01)>>0;//Alarm condition related to a high temperature in the charging MOSFET
 80011ae:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <merge+0xb58>)
 80011b0:	791b      	ldrb	r3, [r3, #4]
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	b2d9      	uxtb	r1, r3
 80011b8:	4a09      	ldr	r2, [pc, #36]	; (80011e0 <merge+0xb5c>)
 80011ba:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 80011be:	f361 0300 	bfi	r3, r1, #0, #1
 80011c2:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	 			 BMS.Dischg_MOS_Temp_High_Alarm = (Received_Data[4] & 0x02)>>1;//Alarm condition related to a high temperature in the discharging MOSFET
 80011c6:	4b05      	ldr	r3, [pc, #20]	; (80011dc <merge+0xb58>)
 80011c8:	791b      	ldrb	r3, [r3, #4]
 80011ca:	105b      	asrs	r3, r3, #1
 80011cc:	f003 0301 	and.w	r3, r3, #1
 80011d0:	b2d9      	uxtb	r1, r3
 80011d2:	4a03      	ldr	r2, [pc, #12]	; (80011e0 <merge+0xb5c>)
 80011d4:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 80011d8:	e004      	b.n	80011e4 <merge+0xb60>
 80011da:	bf00      	nop
 80011dc:	20000c60 	.word	0x20000c60
 80011e0:	20000c68 	.word	0x20000c68
 80011e4:	f361 0341 	bfi	r3, r1, #1, #1
 80011e8:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	 		     BMS.Chg_MOS_Temp_Sensor_Err = (Received_Data[4] & 0x04)>>2;//Error related to the temperature sensor(s) monitoring the charging MOSFET
 80011ec:	4b8a      	ldr	r3, [pc, #552]	; (8001418 <merge+0xd94>)
 80011ee:	791b      	ldrb	r3, [r3, #4]
 80011f0:	109b      	asrs	r3, r3, #2
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	b2d9      	uxtb	r1, r3
 80011f8:	4a88      	ldr	r2, [pc, #544]	; (800141c <merge+0xd98>)
 80011fa:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 80011fe:	f361 0382 	bfi	r3, r1, #2, #1
 8001202:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	 			 BMS.Dischg_MOS_Temp_Sensor_Err = (Received_Data[4] & 0x08)>>3;//Error related to the temperature sensor(s) monitoring the discharging MOSFET
 8001206:	4b84      	ldr	r3, [pc, #528]	; (8001418 <merge+0xd94>)
 8001208:	791b      	ldrb	r3, [r3, #4]
 800120a:	10db      	asrs	r3, r3, #3
 800120c:	f003 0301 	and.w	r3, r3, #1
 8001210:	b2d9      	uxtb	r1, r3
 8001212:	4a82      	ldr	r2, [pc, #520]	; (800141c <merge+0xd98>)
 8001214:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8001218:	f361 03c3 	bfi	r3, r1, #3, #1
 800121c:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	 			 BMS.Chg_MOS_Adhesion_Err = (Received_Data[4] & 0x10)>>4;//Fault condition associated with the adhesion or attachment of components related to the Charging MOSFET
 8001220:	4b7d      	ldr	r3, [pc, #500]	; (8001418 <merge+0xd94>)
 8001222:	791b      	ldrb	r3, [r3, #4]
 8001224:	111b      	asrs	r3, r3, #4
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	b2d9      	uxtb	r1, r3
 800122c:	4a7b      	ldr	r2, [pc, #492]	; (800141c <merge+0xd98>)
 800122e:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8001232:	f361 1304 	bfi	r3, r1, #4, #1
 8001236:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	 			 BMS.Dischg_MOS_Adhesion_Err = (Received_Data[4] & 0x20)>>5;//Fault condition associated with the adhesion or attachment of components related to the discharging MOSFET
 800123a:	4b77      	ldr	r3, [pc, #476]	; (8001418 <merge+0xd94>)
 800123c:	791b      	ldrb	r3, [r3, #4]
 800123e:	115b      	asrs	r3, r3, #5
 8001240:	f003 0301 	and.w	r3, r3, #1
 8001244:	b2d9      	uxtb	r1, r3
 8001246:	4a75      	ldr	r2, [pc, #468]	; (800141c <merge+0xd98>)
 8001248:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 800124c:	f361 1345 	bfi	r3, r1, #5, #1
 8001250:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	 		     BMS.Chg_MOS_Open_Circuit_Err = (Received_Data[4] & 0x40)>>6;//Error condition associated with an open circuit or an open-circuit fault detected in the Charging MOSFET
 8001254:	4b70      	ldr	r3, [pc, #448]	; (8001418 <merge+0xd94>)
 8001256:	791b      	ldrb	r3, [r3, #4]
 8001258:	119b      	asrs	r3, r3, #6
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	b2d9      	uxtb	r1, r3
 8001260:	4a6e      	ldr	r2, [pc, #440]	; (800141c <merge+0xd98>)
 8001262:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8001266:	f361 1386 	bfi	r3, r1, #6, #1
 800126a:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	 			 BMS.Discrg_MOS_Open_Circuit_Err = (Received_Data[4] & 0x80)>>7;//Error condition associated with an open circuit or an open-circuit fault detected in the discharging MOSFET
 800126e:	4b6a      	ldr	r3, [pc, #424]	; (8001418 <merge+0xd94>)
 8001270:	791b      	ldrb	r3, [r3, #4]
 8001272:	09db      	lsrs	r3, r3, #7
 8001274:	b2db      	uxtb	r3, r3
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	b2d9      	uxtb	r1, r3
 800127c:	4a67      	ldr	r2, [pc, #412]	; (800141c <merge+0xd98>)
 800127e:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8001282:	f361 13c7 	bfi	r3, r1, #7, #1
 8001286:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	 			 BMS.AFE_Collect_Chip_Err = (Received_Data[5] & 0x01)>>0;//Error condition associated with the Analog Front-End (AFE) chip or circuitry responsible for collecting and processing analog signals from various sensors or measurement points within the battery system
 800128a:	4b63      	ldr	r3, [pc, #396]	; (8001418 <merge+0xd94>)
 800128c:	795b      	ldrb	r3, [r3, #5]
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	b2d9      	uxtb	r1, r3
 8001294:	4a61      	ldr	r2, [pc, #388]	; (800141c <merge+0xd98>)
 8001296:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
 800129a:	f361 0300 	bfi	r3, r1, #0, #1
 800129e:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
	 			 BMS.Voltage_Collect_Dropped = (Received_Data[5] & 0x02)>>1;//Alert, condition, or indication within the BMS that detects a significant and sudden drop in the collected voltage readings from sensors
 80012a2:	4b5d      	ldr	r3, [pc, #372]	; (8001418 <merge+0xd94>)
 80012a4:	795b      	ldrb	r3, [r3, #5]
 80012a6:	105b      	asrs	r3, r3, #1
 80012a8:	f003 0301 	and.w	r3, r3, #1
 80012ac:	b2d9      	uxtb	r1, r3
 80012ae:	4a5b      	ldr	r2, [pc, #364]	; (800141c <merge+0xd98>)
 80012b0:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
 80012b4:	f361 0341 	bfi	r3, r1, #1, #1
 80012b8:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
	 			 BMS.Cell_Temp_Sensor_Err = (Received_Data[5] & 0x04)>>2;//Error or fault condition associated with temperature sensors
 80012bc:	4b56      	ldr	r3, [pc, #344]	; (8001418 <merge+0xd94>)
 80012be:	795b      	ldrb	r3, [r3, #5]
 80012c0:	109b      	asrs	r3, r3, #2
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	b2d9      	uxtb	r1, r3
 80012c8:	4a54      	ldr	r2, [pc, #336]	; (800141c <merge+0xd98>)
 80012ca:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
 80012ce:	f361 0382 	bfi	r3, r1, #2, #1
 80012d2:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
	 			 BMS.EEPROM_Err = (Received_Data[5] & 0x08)>>3;//Error condition or fault related to the Electrically Erasable Programmable Read-Only Memory (EEPROM) used within the BMS circuitry or microcontroller.
 80012d6:	4b50      	ldr	r3, [pc, #320]	; (8001418 <merge+0xd94>)
 80012d8:	795b      	ldrb	r3, [r3, #5]
 80012da:	10db      	asrs	r3, r3, #3
 80012dc:	f003 0301 	and.w	r3, r3, #1
 80012e0:	b2d9      	uxtb	r1, r3
 80012e2:	4a4e      	ldr	r2, [pc, #312]	; (800141c <merge+0xd98>)
 80012e4:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
 80012e8:	f361 03c3 	bfi	r3, r1, #3, #1
 80012ec:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
	 			 BMS.RTC_Err = (Received_Data[5] & 0x10)>>4;//Error condition related to the Real-Time Clock (RTC) component or module within the BMS.
 80012f0:	4b49      	ldr	r3, [pc, #292]	; (8001418 <merge+0xd94>)
 80012f2:	795b      	ldrb	r3, [r3, #5]
 80012f4:	111b      	asrs	r3, r3, #4
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	b2d9      	uxtb	r1, r3
 80012fc:	4a47      	ldr	r2, [pc, #284]	; (800141c <merge+0xd98>)
 80012fe:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
 8001302:	f361 1304 	bfi	r3, r1, #4, #1
 8001306:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
	 			 BMS.Precharge_Failure = (Received_Data[5] & 0x20)>>5;//fault where the precharging process within the battery system has encountered
 800130a:	4b43      	ldr	r3, [pc, #268]	; (8001418 <merge+0xd94>)
 800130c:	795b      	ldrb	r3, [r3, #5]
 800130e:	115b      	asrs	r3, r3, #5
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	b2d9      	uxtb	r1, r3
 8001316:	4a41      	ldr	r2, [pc, #260]	; (800141c <merge+0xd98>)
 8001318:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
 800131c:	f361 1345 	bfi	r3, r1, #5, #1
 8001320:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
	 			 BMS.Communication_Failure = (Received_Data[5] & 0x40)>>6;//disruptions in communication between various components, modules, or external devices within the battery system.
 8001324:	4b3c      	ldr	r3, [pc, #240]	; (8001418 <merge+0xd94>)
 8001326:	795b      	ldrb	r3, [r3, #5]
 8001328:	119b      	asrs	r3, r3, #6
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	b2d9      	uxtb	r1, r3
 8001330:	4a3a      	ldr	r2, [pc, #232]	; (800141c <merge+0xd98>)
 8001332:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
 8001336:	f361 1386 	bfi	r3, r1, #6, #1
 800133a:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
	 			 BMS.Internal_Communication_Failure = (Received_Data[5] & 0x80)>>7;//disruptions in the internal communication between various components, modules, or subsystems within the BMS itself.
 800133e:	4b36      	ldr	r3, [pc, #216]	; (8001418 <merge+0xd94>)
 8001340:	795b      	ldrb	r3, [r3, #5]
 8001342:	09db      	lsrs	r3, r3, #7
 8001344:	b2db      	uxtb	r3, r3
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	b2d9      	uxtb	r1, r3
 800134c:	4a33      	ldr	r2, [pc, #204]	; (800141c <merge+0xd98>)
 800134e:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
 8001352:	f361 13c7 	bfi	r3, r1, #7, #1
 8001356:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
	 			 BMS.Current_Module_Fault = (Received_Data[6] & 0x01)>>0;//Fault condition related to the current measurement module within the BMS.
 800135a:	4b2f      	ldr	r3, [pc, #188]	; (8001418 <merge+0xd94>)
 800135c:	799b      	ldrb	r3, [r3, #6]
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	b2d9      	uxtb	r1, r3
 8001364:	4a2d      	ldr	r2, [pc, #180]	; (800141c <merge+0xd98>)
 8001366:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
 800136a:	f361 0300 	bfi	r3, r1, #0, #1
 800136e:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
	 			 BMS.Sum_Voltage_Detect_Fault = (Received_Data[6] & 0x02)>>1;//Fault condition related to the detection or measurement of the total sum voltage across the battery cells or modules within the system.
 8001372:	4b29      	ldr	r3, [pc, #164]	; (8001418 <merge+0xd94>)
 8001374:	799b      	ldrb	r3, [r3, #6]
 8001376:	105b      	asrs	r3, r3, #1
 8001378:	f003 0301 	and.w	r3, r3, #1
 800137c:	b2d9      	uxtb	r1, r3
 800137e:	4a27      	ldr	r2, [pc, #156]	; (800141c <merge+0xd98>)
 8001380:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
 8001384:	f361 0341 	bfi	r3, r1, #1, #1
 8001388:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
	 			 BMS.Short_Circuit_Protect_Fault = (Received_Data[6] & 0x04)>>2;//fault condition related to the protective mechanisms within the BMS that are designed to detect and respond to short-circuit events occurring within the battery system.
 800138c:	4b22      	ldr	r3, [pc, #136]	; (8001418 <merge+0xd94>)
 800138e:	799b      	ldrb	r3, [r3, #6]
 8001390:	109b      	asrs	r3, r3, #2
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	b2d9      	uxtb	r1, r3
 8001398:	4a20      	ldr	r2, [pc, #128]	; (800141c <merge+0xd98>)
 800139a:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
 800139e:	f361 0382 	bfi	r3, r1, #2, #1
 80013a2:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
	 			 BMS.Low_Volt_Forbidden_Chg_Fault = (Received_Data[6] & 0x08)>>3;// fault condition where charging is forbidden due to low voltage detected in the battery cells or pack, preventing the charging process from initiating or continuing.
 80013a6:	4b1c      	ldr	r3, [pc, #112]	; (8001418 <merge+0xd94>)
 80013a8:	799b      	ldrb	r3, [r3, #6]
 80013aa:	10db      	asrs	r3, r3, #3
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	b2d9      	uxtb	r1, r3
 80013b2:	4a1a      	ldr	r2, [pc, #104]	; (800141c <merge+0xd98>)
 80013b4:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
 80013b8:	f361 03c3 	bfi	r3, r1, #3, #1
 80013bc:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
	 			 BMS.Faultcode = Received_Data[7];//Fault code that represents an error, fault, or abnormal condition detected by the BMS
 80013c0:	4b15      	ldr	r3, [pc, #84]	; (8001418 <merge+0xd94>)
 80013c2:	79da      	ldrb	r2, [r3, #7]
 80013c4:	4b15      	ldr	r3, [pc, #84]	; (800141c <merge+0xd98>)
 80013c6:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	 			 break;
 80013ca:	e020      	b.n	800140e <merge+0xd8a>
	             BMS.Cumulative_Charge = ((Received_Data[1]<<16)|(Received_Data[2]<<8)|(Received_Data[3]));//The total amount of charge that has been delivered or supplied to a battery
 80013cc:	4b12      	ldr	r3, [pc, #72]	; (8001418 <merge+0xd94>)
 80013ce:	785b      	ldrb	r3, [r3, #1]
 80013d0:	041a      	lsls	r2, r3, #16
 80013d2:	4b11      	ldr	r3, [pc, #68]	; (8001418 <merge+0xd94>)
 80013d4:	789b      	ldrb	r3, [r3, #2]
 80013d6:	021b      	lsls	r3, r3, #8
 80013d8:	4313      	orrs	r3, r2
 80013da:	4a0f      	ldr	r2, [pc, #60]	; (8001418 <merge+0xd94>)
 80013dc:	78d2      	ldrb	r2, [r2, #3]
 80013de:	4313      	orrs	r3, r2
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b0e      	ldr	r3, [pc, #56]	; (800141c <merge+0xd98>)
 80013e4:	63da      	str	r2, [r3, #60]	; 0x3c
	             break;
 80013e6:	e012      	b.n	800140e <merge+0xd8a>
	             BMS.Battery_capacity = (((Received_Data[2]<<8)|Received_Data[3])/1000);//The battery rated capacity in Ah eg(58 Ah)
 80013e8:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <merge+0xd94>)
 80013ea:	789b      	ldrb	r3, [r3, #2]
 80013ec:	021b      	lsls	r3, r3, #8
 80013ee:	4a0a      	ldr	r2, [pc, #40]	; (8001418 <merge+0xd94>)
 80013f0:	78d2      	ldrb	r2, [r2, #3]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	4a0a      	ldr	r2, [pc, #40]	; (8001420 <merge+0xd9c>)
 80013f6:	fb82 1203 	smull	r1, r2, r2, r3
 80013fa:	1192      	asrs	r2, r2, #6
 80013fc:	17db      	asrs	r3, r3, #31
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	b29a      	uxth	r2, r3
 8001402:	4b06      	ldr	r3, [pc, #24]	; (800141c <merge+0xd98>)
 8001404:	80da      	strh	r2, [r3, #6]
	             break;
 8001406:	e002      	b.n	800140e <merge+0xd8a>
	break;
 8001408:	bf00      	nop
 800140a:	e000      	b.n	800140e <merge+0xd8a>
	             break;
 800140c:	bf00      	nop

 }
 }
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr
 8001418:	20000c60 	.word	0x20000c60
 800141c:	20000c68 	.word	0x20000c68
 8001420:	10624dd3 	.word	0x10624dd3

08001424 <parllel_transmit>:
// * for Receiving response from BMS according to the Identifier request
// * Transmit data should be given to the mailbox
// */

void parllel_transmit(uint8_t data)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	71fb      	strb	r3, [r7, #7]
//	HAL_GPIO_WritePin(GPIOA, LCD_D3_Pin,((data & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET));
//	HAL_GPIO_WritePin(GPIOA, LCD_D4_Pin,((data & 0x10) ? GPIO_PIN_SET : GPIO_PIN_RESET));
//	HAL_GPIO_WritePin(GPIOA, LCD_D5_Pin,((data & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET));
//	HAL_GPIO_WritePin(GPIOA, LCD_D6_Pin,((data & 0x40) ? GPIO_PIN_SET : GPIO_PIN_RESET));
//	HAL_GPIO_WritePin(GPIOA, LCD_D7_Pin,((data & 0x80) ? GPIO_PIN_SET : GPIO_PIN_RESET));
	GPIOA->ODR=0X00|data;
 800142e:	4a04      	ldr	r2, [pc, #16]	; (8001440 <parllel_transmit+0x1c>)
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	60d3      	str	r3, [r2, #12]
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	40010800 	.word	0x40010800

08001444 <Merge>:
/*
 * This function is used to merging data which is read from EEPROM
 * Merging individual byte of data and stored in a Structure
 */
void Merge()
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
	 Range.Odometer_Value= (Odo_Read[2] << 16) | (Odo_Read[1] << 8) | Odo_Read[0];
 8001448:	4b08      	ldr	r3, [pc, #32]	; (800146c <Merge+0x28>)
 800144a:	789b      	ldrb	r3, [r3, #2]
 800144c:	041a      	lsls	r2, r3, #16
 800144e:	4b07      	ldr	r3, [pc, #28]	; (800146c <Merge+0x28>)
 8001450:	785b      	ldrb	r3, [r3, #1]
 8001452:	021b      	lsls	r3, r3, #8
 8001454:	4313      	orrs	r3, r2
 8001456:	4a05      	ldr	r2, [pc, #20]	; (800146c <Merge+0x28>)
 8001458:	7812      	ldrb	r2, [r2, #0]
 800145a:	4313      	orrs	r3, r2
 800145c:	461a      	mov	r2, r3
 800145e:	4b04      	ldr	r3, [pc, #16]	; (8001470 <Merge+0x2c>)
 8001460:	601a      	str	r2, [r3, #0]
}
 8001462:	bf00      	nop
 8001464:	46bd      	mov	sp, r7
 8001466:	bc80      	pop	{r7}
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	20000d8c 	.word	0x20000d8c
 8001470:	20000d90 	.word	0x20000d90

08001474 <I2C_Read_ODO>:
   EEPROM_Read(0x20, Odo_Read, sizeof(Odo_Read));// Read odo-meter data
   Merge();
}

void I2C_Read_ODO()
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
	EEPROM_Read(0x20, Odo_Read, sizeof(Odo_Read));
 8001478:	2203      	movs	r2, #3
 800147a:	4904      	ldr	r1, [pc, #16]	; (800148c <I2C_Read_ODO+0x18>)
 800147c:	2020      	movs	r0, #32
 800147e:	f000 f821 	bl	80014c4 <EEPROM_Read>
	Merge();
 8001482:	f7ff ffdf 	bl	8001444 <Merge>
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20000d8c 	.word	0x20000d8c

08001490 <Calib_Read>:
	calib_write[1]= (calib_value>>8) & 0xFF;
	EEPROM_Write(0x30, calib_write, sizeof(calib_write));
}

void Calib_Read()
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
	EEPROM_Read(0x30, calib_read, sizeof(calib_read));
 8001494:	2204      	movs	r2, #4
 8001496:	4909      	ldr	r1, [pc, #36]	; (80014bc <Calib_Read+0x2c>)
 8001498:	2030      	movs	r0, #48	; 0x30
 800149a:	f000 f813 	bl	80014c4 <EEPROM_Read>
	calib_reg=(calib_read[1] << 8) | calib_read[0];
 800149e:	4b07      	ldr	r3, [pc, #28]	; (80014bc <Calib_Read+0x2c>)
 80014a0:	885b      	ldrh	r3, [r3, #2]
 80014a2:	021b      	lsls	r3, r3, #8
 80014a4:	b21a      	sxth	r2, r3
 80014a6:	4b05      	ldr	r3, [pc, #20]	; (80014bc <Calib_Read+0x2c>)
 80014a8:	881b      	ldrh	r3, [r3, #0]
 80014aa:	b21b      	sxth	r3, r3
 80014ac:	4313      	orrs	r3, r2
 80014ae:	b21b      	sxth	r3, r3
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	4b03      	ldr	r3, [pc, #12]	; (80014c0 <Calib_Read+0x30>)
 80014b4:	801a      	strh	r2, [r3, #0]
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000d98 	.word	0x20000d98
 80014c0:	20000402 	.word	0x20000402

080014c4 <EEPROM_Read>:
 * This function contains Target device address,Internal Memory address
 * Size of internal memory address,Data Buffer for storing read data,
 * Size Amount of data to be read and Timeout Timeout duration
 */
void EEPROM_Read(uint16_t address, uint8_t* data, uint16_t size)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af04      	add	r7, sp, #16
 80014ca:	4603      	mov	r3, r0
 80014cc:	6039      	str	r1, [r7, #0]
 80014ce:	80fb      	strh	r3, [r7, #6]
 80014d0:	4613      	mov	r3, r2
 80014d2:	80bb      	strh	r3, [r7, #4]
  HAL_I2C_Mem_Read(&hi2c1, EEPROM_DEV_ADD, address, I2C_MEMADD_SIZE_8BIT, data, size, HAL_MAX_DELAY);
 80014d4:	88fa      	ldrh	r2, [r7, #6]
 80014d6:	f04f 33ff 	mov.w	r3, #4294967295
 80014da:	9302      	str	r3, [sp, #8]
 80014dc:	88bb      	ldrh	r3, [r7, #4]
 80014de:	9301      	str	r3, [sp, #4]
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	9300      	str	r3, [sp, #0]
 80014e4:	2301      	movs	r3, #1
 80014e6:	21a0      	movs	r1, #160	; 0xa0
 80014e8:	4804      	ldr	r0, [pc, #16]	; (80014fc <EEPROM_Read+0x38>)
 80014ea:	f002 f819 	bl	8003520 <HAL_I2C_Mem_Read>
  HAL_Delay(5); // Delay for EEPROM read operation
 80014ee:	2005      	movs	r0, #5
 80014f0:	f000 fdac 	bl	800204c <HAL_Delay>
}
 80014f4:	bf00      	nop
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000cd0 	.word	0x20000cd0

08001500 <BMS_CAN>:
	 HAL_GPIO_WritePin(GPIOB, check_led_Pin, SET);
	 HAL_Delay(50);
}

void BMS_CAN()//Transmitter function
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
	for(Tx_count=0; Tx_count<11; Tx_count++)
 8001504:	4b1a      	ldr	r3, [pc, #104]	; (8001570 <BMS_CAN+0x70>)
 8001506:	2200      	movs	r2, #0
 8001508:	701a      	strb	r2, [r3, #0]
 800150a:	e027      	b.n	800155c <BMS_CAN+0x5c>
	  {
		TxHeader.ExtId = BMS_ID[Tx_count]; // Extended Identifier
 800150c:	4b18      	ldr	r3, [pc, #96]	; (8001570 <BMS_CAN+0x70>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	461a      	mov	r2, r3
 8001512:	4b18      	ldr	r3, [pc, #96]	; (8001574 <BMS_CAN+0x74>)
 8001514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001518:	4a17      	ldr	r2, [pc, #92]	; (8001578 <BMS_CAN+0x78>)
 800151a:	6053      	str	r3, [r2, #4]
		TxHeader.IDE = CAN_ID_EXT; // Identifier Extension
 800151c:	4b16      	ldr	r3, [pc, #88]	; (8001578 <BMS_CAN+0x78>)
 800151e:	2204      	movs	r2, #4
 8001520:	609a      	str	r2, [r3, #8]
		TxHeader.RTR = CAN_RTR_DATA;// Remote Transmission Request bit, here send data frame
 8001522:	4b15      	ldr	r3, [pc, #84]	; (8001578 <BMS_CAN+0x78>)
 8001524:	2200      	movs	r2, #0
 8001526:	60da      	str	r2, [r3, #12]
		TxHeader.DLC = 8;//Data length code
 8001528:	4b13      	ldr	r3, [pc, #76]	; (8001578 <BMS_CAN+0x78>)
 800152a:	2208      	movs	r2, #8
 800152c:	611a      	str	r2, [r3, #16]
		Transmit_Data[0]=0x00;//Data
 800152e:	4b13      	ldr	r3, [pc, #76]	; (800157c <BMS_CAN+0x7c>)
 8001530:	2200      	movs	r2, #0
 8001532:	701a      	strb	r2, [r3, #0]
	   if(HAL_CAN_AddTxMessage(&hcan, &TxHeader, &Transmit_Data[0], &TxMailBox) != HAL_OK)//Adding data to the mailbox for transmitting
 8001534:	4b12      	ldr	r3, [pc, #72]	; (8001580 <BMS_CAN+0x80>)
 8001536:	4a11      	ldr	r2, [pc, #68]	; (800157c <BMS_CAN+0x7c>)
 8001538:	490f      	ldr	r1, [pc, #60]	; (8001578 <BMS_CAN+0x78>)
 800153a:	4812      	ldr	r0, [pc, #72]	; (8001584 <BMS_CAN+0x84>)
 800153c:	f000 ffb2 	bl	80024a4 <HAL_CAN_AddTxMessage>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <BMS_CAN+0x4a>
		  {
		   Error_Handler();
 8001546:	f000 fbaf 	bl	8001ca8 <Error_Handler>
		  }
	  HAL_Delay(25);
 800154a:	2019      	movs	r0, #25
 800154c:	f000 fd7e 	bl	800204c <HAL_Delay>
	for(Tx_count=0; Tx_count<11; Tx_count++)
 8001550:	4b07      	ldr	r3, [pc, #28]	; (8001570 <BMS_CAN+0x70>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	3301      	adds	r3, #1
 8001556:	b2da      	uxtb	r2, r3
 8001558:	4b05      	ldr	r3, [pc, #20]	; (8001570 <BMS_CAN+0x70>)
 800155a:	701a      	strb	r2, [r3, #0]
 800155c:	4b04      	ldr	r3, [pc, #16]	; (8001570 <BMS_CAN+0x70>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b0a      	cmp	r3, #10
 8001562:	d9d3      	bls.n	800150c <BMS_CAN+0xc>
	  }
	Tx_count=0;
 8001564:	4b02      	ldr	r3, [pc, #8]	; (8001570 <BMS_CAN+0x70>)
 8001566:	2200      	movs	r2, #0
 8001568:	701a      	strb	r2, [r3, #0]
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000d70 	.word	0x20000d70
 8001574:	20000408 	.word	0x20000408
 8001578:	20000d9c 	.word	0x20000d9c
 800157c:	20000d74 	.word	0x20000d74
 8001580:	20000d7c 	.word	0x20000d7c
 8001584:	20000ca8 	.word	0x20000ca8

08001588 <lcd_into1>:
	lcd_print_digit_wos(7, 12,third);
	lcd_print_char(7, 18, "km");
}

void lcd_into1()
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
	lcd_print_char(1, 96, "BCC");
 800158e:	4a77      	ldr	r2, [pc, #476]	; (800176c <lcd_into1+0x1e4>)
 8001590:	2160      	movs	r1, #96	; 0x60
 8001592:	2001      	movs	r0, #1
 8001594:	f7fe feea 	bl	800036c <lcd_print_char>
	lcd_print_digit_wos(2, 93, (BMS.Cumulative_Charge/BMS.Battery_capacity)/1000);
 8001598:	4b75      	ldr	r3, [pc, #468]	; (8001770 <lcd_into1+0x1e8>)
 800159a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800159c:	4a74      	ldr	r2, [pc, #464]	; (8001770 <lcd_into1+0x1e8>)
 800159e:	88d2      	ldrh	r2, [r2, #6]
 80015a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80015a4:	4a73      	ldr	r2, [pc, #460]	; (8001774 <lcd_into1+0x1ec>)
 80015a6:	fba2 2303 	umull	r2, r3, r2, r3
 80015aa:	099b      	lsrs	r3, r3, #6
 80015ac:	461a      	mov	r2, r3
 80015ae:	215d      	movs	r1, #93	; 0x5d
 80015b0:	2002      	movs	r0, #2
 80015b2:	f7fe ffd7 	bl	8000564 <lcd_print_digit_wos>
	lcd_print_digit_wos(2, 99, ((BMS.Cumulative_Charge/BMS.Battery_capacity)%1000)/100);
 80015b6:	4b6e      	ldr	r3, [pc, #440]	; (8001770 <lcd_into1+0x1e8>)
 80015b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ba:	4a6d      	ldr	r2, [pc, #436]	; (8001770 <lcd_into1+0x1e8>)
 80015bc:	88d2      	ldrh	r2, [r2, #6]
 80015be:	fbb3 f2f2 	udiv	r2, r3, r2
 80015c2:	4b6c      	ldr	r3, [pc, #432]	; (8001774 <lcd_into1+0x1ec>)
 80015c4:	fba3 1302 	umull	r1, r3, r3, r2
 80015c8:	099b      	lsrs	r3, r3, #6
 80015ca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80015ce:	fb01 f303 	mul.w	r3, r1, r3
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	4a68      	ldr	r2, [pc, #416]	; (8001778 <lcd_into1+0x1f0>)
 80015d6:	fba2 2303 	umull	r2, r3, r2, r3
 80015da:	095b      	lsrs	r3, r3, #5
 80015dc:	461a      	mov	r2, r3
 80015de:	2163      	movs	r1, #99	; 0x63
 80015e0:	2002      	movs	r0, #2
 80015e2:	f7fe ffbf 	bl	8000564 <lcd_print_digit_wos>
	lcd_print_digit_wos(2, 105, ((((BMS.Cumulative_Charge/BMS.Battery_capacity)%1000)%100)/10));
 80015e6:	4b62      	ldr	r3, [pc, #392]	; (8001770 <lcd_into1+0x1e8>)
 80015e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ea:	4a61      	ldr	r2, [pc, #388]	; (8001770 <lcd_into1+0x1e8>)
 80015ec:	88d2      	ldrh	r2, [r2, #6]
 80015ee:	fbb3 f2f2 	udiv	r2, r3, r2
 80015f2:	4b60      	ldr	r3, [pc, #384]	; (8001774 <lcd_into1+0x1ec>)
 80015f4:	fba3 1302 	umull	r1, r3, r3, r2
 80015f8:	099b      	lsrs	r3, r3, #6
 80015fa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80015fe:	fb01 f303 	mul.w	r3, r1, r3
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	4a5c      	ldr	r2, [pc, #368]	; (8001778 <lcd_into1+0x1f0>)
 8001606:	fba2 1203 	umull	r1, r2, r2, r3
 800160a:	0952      	lsrs	r2, r2, #5
 800160c:	2164      	movs	r1, #100	; 0x64
 800160e:	fb01 f202 	mul.w	r2, r1, r2
 8001612:	1a9a      	subs	r2, r3, r2
 8001614:	4b59      	ldr	r3, [pc, #356]	; (800177c <lcd_into1+0x1f4>)
 8001616:	fba3 2302 	umull	r2, r3, r3, r2
 800161a:	08db      	lsrs	r3, r3, #3
 800161c:	461a      	mov	r2, r3
 800161e:	2169      	movs	r1, #105	; 0x69
 8001620:	2002      	movs	r0, #2
 8001622:	f7fe ff9f 	bl	8000564 <lcd_print_digit_wos>
	lcd_print_digit_wos(2, 111, ((((BMS.Cumulative_Charge/BMS.Battery_capacity)%1000)%100)%10));
 8001626:	4b52      	ldr	r3, [pc, #328]	; (8001770 <lcd_into1+0x1e8>)
 8001628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800162a:	4a51      	ldr	r2, [pc, #324]	; (8001770 <lcd_into1+0x1e8>)
 800162c:	88d2      	ldrh	r2, [r2, #6]
 800162e:	fbb3 f2f2 	udiv	r2, r3, r2
 8001632:	4b50      	ldr	r3, [pc, #320]	; (8001774 <lcd_into1+0x1ec>)
 8001634:	fba3 1302 	umull	r1, r3, r3, r2
 8001638:	099b      	lsrs	r3, r3, #6
 800163a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800163e:	fb01 f303 	mul.w	r3, r1, r3
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	4a4c      	ldr	r2, [pc, #304]	; (8001778 <lcd_into1+0x1f0>)
 8001646:	fba2 1203 	umull	r1, r2, r2, r3
 800164a:	0952      	lsrs	r2, r2, #5
 800164c:	2164      	movs	r1, #100	; 0x64
 800164e:	fb01 f202 	mul.w	r2, r1, r2
 8001652:	1a9a      	subs	r2, r3, r2
 8001654:	4b49      	ldr	r3, [pc, #292]	; (800177c <lcd_into1+0x1f4>)
 8001656:	fba3 1302 	umull	r1, r3, r3, r2
 800165a:	08d9      	lsrs	r1, r3, #3
 800165c:	460b      	mov	r3, r1
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	440b      	add	r3, r1
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	1ad1      	subs	r1, r2, r3
 8001666:	460a      	mov	r2, r1
 8001668:	216f      	movs	r1, #111	; 0x6f
 800166a:	2002      	movs	r0, #2
 800166c:	f7fe ff7a 	bl	8000564 <lcd_print_digit_wos>

	lcd_print_char(1, 12, "YOU SAVED");
 8001670:	4a43      	ldr	r2, [pc, #268]	; (8001780 <lcd_into1+0x1f8>)
 8001672:	210c      	movs	r1, #12
 8001674:	2001      	movs	r0, #1
 8001676:	f7fe fe79 	bl	800036c <lcd_print_char>
	lcd_print_char(2, 17, "Rs");
 800167a:	4a42      	ldr	r2, [pc, #264]	; (8001784 <lcd_into1+0x1fc>)
 800167c:	2111      	movs	r1, #17
 800167e:	2002      	movs	r0, #2
 8001680:	f7fe fe74 	bl	800036c <lcd_print_char>


	lcd_print_digit_wos(2, 29, (Range.Odometer_Value*2)/1000);
 8001684:	4b40      	ldr	r3, [pc, #256]	; (8001788 <lcd_into1+0x200>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	4a3a      	ldr	r2, [pc, #232]	; (8001774 <lcd_into1+0x1ec>)
 800168c:	fba2 2303 	umull	r2, r3, r2, r3
 8001690:	099b      	lsrs	r3, r3, #6
 8001692:	461a      	mov	r2, r3
 8001694:	211d      	movs	r1, #29
 8001696:	2002      	movs	r0, #2
 8001698:	f7fe ff64 	bl	8000564 <lcd_print_digit_wos>
	lcd_print_digit_wos(2, 35, ((Range.Odometer_Value*2)%1000)/100);
 800169c:	4b3a      	ldr	r3, [pc, #232]	; (8001788 <lcd_into1+0x200>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	005a      	lsls	r2, r3, #1
 80016a2:	4b34      	ldr	r3, [pc, #208]	; (8001774 <lcd_into1+0x1ec>)
 80016a4:	fba3 1302 	umull	r1, r3, r3, r2
 80016a8:	099b      	lsrs	r3, r3, #6
 80016aa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016ae:	fb01 f303 	mul.w	r3, r1, r3
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	4a30      	ldr	r2, [pc, #192]	; (8001778 <lcd_into1+0x1f0>)
 80016b6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ba:	095b      	lsrs	r3, r3, #5
 80016bc:	461a      	mov	r2, r3
 80016be:	2123      	movs	r1, #35	; 0x23
 80016c0:	2002      	movs	r0, #2
 80016c2:	f7fe ff4f 	bl	8000564 <lcd_print_digit_wos>
	lcd_print_digit_wos(2, 41, ((((Range.Odometer_Value*2)%1000)%100)/10));
 80016c6:	4b30      	ldr	r3, [pc, #192]	; (8001788 <lcd_into1+0x200>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	005a      	lsls	r2, r3, #1
 80016cc:	4b29      	ldr	r3, [pc, #164]	; (8001774 <lcd_into1+0x1ec>)
 80016ce:	fba3 1302 	umull	r1, r3, r3, r2
 80016d2:	099b      	lsrs	r3, r3, #6
 80016d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016d8:	fb01 f303 	mul.w	r3, r1, r3
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	4a26      	ldr	r2, [pc, #152]	; (8001778 <lcd_into1+0x1f0>)
 80016e0:	fba2 1203 	umull	r1, r2, r2, r3
 80016e4:	0952      	lsrs	r2, r2, #5
 80016e6:	2164      	movs	r1, #100	; 0x64
 80016e8:	fb01 f202 	mul.w	r2, r1, r2
 80016ec:	1a9a      	subs	r2, r3, r2
 80016ee:	4b23      	ldr	r3, [pc, #140]	; (800177c <lcd_into1+0x1f4>)
 80016f0:	fba3 2302 	umull	r2, r3, r3, r2
 80016f4:	08db      	lsrs	r3, r3, #3
 80016f6:	461a      	mov	r2, r3
 80016f8:	2129      	movs	r1, #41	; 0x29
 80016fa:	2002      	movs	r0, #2
 80016fc:	f7fe ff32 	bl	8000564 <lcd_print_digit_wos>
	lcd_print_digit_wos(2, 47, ((((Range.Odometer_Value*2)%1000)%100)%10));
 8001700:	4b21      	ldr	r3, [pc, #132]	; (8001788 <lcd_into1+0x200>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	005a      	lsls	r2, r3, #1
 8001706:	4b1b      	ldr	r3, [pc, #108]	; (8001774 <lcd_into1+0x1ec>)
 8001708:	fba3 1302 	umull	r1, r3, r3, r2
 800170c:	099b      	lsrs	r3, r3, #6
 800170e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001712:	fb01 f303 	mul.w	r3, r1, r3
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	4a17      	ldr	r2, [pc, #92]	; (8001778 <lcd_into1+0x1f0>)
 800171a:	fba2 1203 	umull	r1, r2, r2, r3
 800171e:	0952      	lsrs	r2, r2, #5
 8001720:	2164      	movs	r1, #100	; 0x64
 8001722:	fb01 f202 	mul.w	r2, r1, r2
 8001726:	1a9a      	subs	r2, r3, r2
 8001728:	4b14      	ldr	r3, [pc, #80]	; (800177c <lcd_into1+0x1f4>)
 800172a:	fba3 1302 	umull	r1, r3, r3, r2
 800172e:	08d9      	lsrs	r1, r3, #3
 8001730:	460b      	mov	r3, r1
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	440b      	add	r3, r1
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	1ad1      	subs	r1, r2, r3
 800173a:	460a      	mov	r2, r1
 800173c:	212f      	movs	r1, #47	; 0x2f
 800173e:	2002      	movs	r0, #2
 8001740:	f7fe ff10 	bl	8000564 <lcd_print_digit_wos>

	lcd_print_char(5, 40, "PLEASE   WEAR");
 8001744:	4a11      	ldr	r2, [pc, #68]	; (800178c <lcd_into1+0x204>)
 8001746:	2128      	movs	r1, #40	; 0x28
 8001748:	2005      	movs	r0, #5
 800174a:	f7fe fe0f 	bl	800036c <lcd_print_char>
	lcd_print_char(6, 52, "HELMET");
 800174e:	4a10      	ldr	r2, [pc, #64]	; (8001790 <lcd_into1+0x208>)
 8001750:	2134      	movs	r1, #52	; 0x34
 8001752:	2006      	movs	r0, #6
 8001754:	f7fe fe0a 	bl	800036c <lcd_print_char>
	uint16_t temp=0;
 8001758:	2300      	movs	r3, #0
 800175a:	80fb      	strh	r3, [r7, #6]
//			for(uint8_t x_axsis=0;x_axsis<=29;x_axsis++)
//			{
//				lcd_print_convert(y_axsis+4,x_axsis+5,helmet_icon[temp++]);
//			}
//		}
	 lcd_invert_process();
 800175c:	f7fe fdd2 	bl	8000304 <lcd_invert_process>
	 lcd_print_ram_1();
 8001760:	f7fe fd22 	bl	80001a8 <lcd_print_ram_1>
}
 8001764:	bf00      	nop
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	08005018 	.word	0x08005018
 8001770:	20000c68 	.word	0x20000c68
 8001774:	10624dd3 	.word	0x10624dd3
 8001778:	51eb851f 	.word	0x51eb851f
 800177c:	cccccccd 	.word	0xcccccccd
 8001780:	0800501c 	.word	0x0800501c
 8001784:	08005028 	.word	0x08005028
 8001788:	20000d90 	.word	0x20000d90
 800178c:	0800502c 	.word	0x0800502c
 8001790:	0800503c 	.word	0x0800503c

08001794 <HAL_CAN_RxFifo0MsgPendingCallback>:
		}
	}
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)//Receiver Interrupt Function
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, Received_Data) == HAL_OK)//Receiving data through FIFO
 800179c:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800179e:	4a0b      	ldr	r2, [pc, #44]	; (80017cc <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80017a0:	2100      	movs	r1, #0
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 ff4d 	bl	8002642 <HAL_CAN_GetRxMessage>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d108      	bne.n	80017c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>
 	{ 	Rx_Id = RxHeader.ExtId;
 80017ae:	4b07      	ldr	r3, [pc, #28]	; (80017cc <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	4a07      	ldr	r2, [pc, #28]	; (80017d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80017b4:	6013      	str	r3, [r2, #0]
 		merge(Rx_Id);// Implementation of merging and splitting received BMS data
 80017b6:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7fe ff62 	bl	8000684 <merge>
 	}
}
 80017c0:	bf00      	nop
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20000c60 	.word	0x20000c60
 80017cc:	20000db4 	.word	0x20000db4
 80017d0:	20000d78 	.word	0x20000d78

080017d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017d8:	f000 fbd6 	bl	8001f88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017dc:	f000 f860 	bl	80018a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017e0:	f000 f970 	bl	8001ac4 <MX_GPIO_Init>
  MX_CAN_Init();
 80017e4:	f000 f8a2 	bl	800192c <MX_CAN_Init>
  MX_TIM2_Init();
 80017e8:	f000 f920 	bl	8001a2c <MX_TIM2_Init>
  MX_I2C1_Init();
 80017ec:	f000 f8f0 	bl	80019d0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2); // Timer2 Interrupt Start
 80017f0:	4827      	ldr	r0, [pc, #156]	; (8001890 <main+0xbc>)
 80017f2:	f003 f81f 	bl	8004834 <HAL_TIM_Base_Start_IT>
  HAL_I2C_Init(&hi2c1);
 80017f6:	4827      	ldr	r0, [pc, #156]	; (8001894 <main+0xc0>)
 80017f8:	f001 fd4e 	bl	8003298 <HAL_I2C_Init>
  lcd_init();
 80017fc:	f7fe fd26 	bl	800024c <lcd_init>
  HAL_CAN_Start(&hcan);// CAN protocol enable function
 8001800:	4825      	ldr	r0, [pc, #148]	; (8001898 <main+0xc4>)
 8001802:	f000 fe0b 	bl	800241c <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO0_MSG_PENDING); // Interrupt activation for Receiving data ,whenever data is received in FIFO, this function will get triggered and goes to receiver interrupt function
 8001806:	2102      	movs	r1, #2
 8001808:	4823      	ldr	r0, [pc, #140]	; (8001898 <main+0xc4>)
 800180a:	f001 f83b 	bl	8002884 <HAL_CAN_ActivateNotification>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	lcd_into();
 800180e:	f7fe fee7 	bl	80005e0 <lcd_into>
	 BMS_CAN();// read data from the BMS through the can protocol
 8001812:	f7ff fe75 	bl	8001500 <BMS_CAN>
	 HAL_Delay(1000);
 8001816:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800181a:	f000 fc17 	bl	800204c <HAL_Delay>
	 lcd_clear(0, 0, 127);
 800181e:	227f      	movs	r2, #127	; 0x7f
 8001820:	2100      	movs	r1, #0
 8001822:	2000      	movs	r0, #0
 8001824:	f7fe fe78 	bl	8000518 <lcd_clear>
	 lcd_clear(1, 0, 127);
 8001828:	227f      	movs	r2, #127	; 0x7f
 800182a:	2100      	movs	r1, #0
 800182c:	2001      	movs	r0, #1
 800182e:	f7fe fe73 	bl	8000518 <lcd_clear>
	 lcd_clear(2, 0, 127);
 8001832:	227f      	movs	r2, #127	; 0x7f
 8001834:	2100      	movs	r1, #0
 8001836:	2002      	movs	r0, #2
 8001838:	f7fe fe6e 	bl	8000518 <lcd_clear>
	 lcd_clear(3, 0, 127);
 800183c:	227f      	movs	r2, #127	; 0x7f
 800183e:	2100      	movs	r1, #0
 8001840:	2003      	movs	r0, #3
 8001842:	f7fe fe69 	bl	8000518 <lcd_clear>
	 lcd_clear(4, 0, 127);
 8001846:	227f      	movs	r2, #127	; 0x7f
 8001848:	2100      	movs	r1, #0
 800184a:	2004      	movs	r0, #4
 800184c:	f7fe fe64 	bl	8000518 <lcd_clear>
	 lcd_clear(5, 0, 127);
 8001850:	227f      	movs	r2, #127	; 0x7f
 8001852:	2100      	movs	r1, #0
 8001854:	2005      	movs	r0, #5
 8001856:	f7fe fe5f 	bl	8000518 <lcd_clear>
	 lcd_clear(6, 0, 127);
 800185a:	227f      	movs	r2, #127	; 0x7f
 800185c:	2100      	movs	r1, #0
 800185e:	2006      	movs	r0, #6
 8001860:	f7fe fe5a 	bl	8000518 <lcd_clear>
	 lcd_clear(7, 0, 127);
 8001864:	227f      	movs	r2, #127	; 0x7f
 8001866:	2100      	movs	r1, #0
 8001868:	2007      	movs	r0, #7
 800186a:	f7fe fe55 	bl	8000518 <lcd_clear>
	 BMS_CAN();// read data from the BMS through the can protocol
 800186e:	f7ff fe47 	bl	8001500 <BMS_CAN>

	//Range.Odometer_Value=0;
	//I2C_WriteRead_ODO(Range.Odometer_Value);
	I2C_Read_ODO();
 8001872:	f7ff fdff 	bl	8001474 <I2C_Read_ODO>
	//Calib_Write(calib_reg);
	Calib_Read();
 8001876:	f7ff fe0b 	bl	8001490 <Calib_Read>
	 lcd_into1();
 800187a:	f7ff fe85 	bl	8001588 <lcd_into1>
	 HAL_Delay(1000);
 800187e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001882:	f000 fbe3 	bl	800204c <HAL_Delay>
	first_time=1;
 8001886:	4b05      	ldr	r3, [pc, #20]	; (800189c <main+0xc8>)
 8001888:	2201      	movs	r2, #1
 800188a:	701a      	strb	r2, [r3, #0]
while(1);
 800188c:	e7fe      	b.n	800188c <main+0xb8>
 800188e:	bf00      	nop
 8001890:	20000d24 	.word	0x20000d24
 8001894:	20000cd0 	.word	0x20000cd0
 8001898:	20000ca8 	.word	0x20000ca8
 800189c:	20000400 	.word	0x20000400

080018a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b090      	sub	sp, #64	; 0x40
 80018a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018a6:	f107 0318 	add.w	r3, r7, #24
 80018aa:	2228      	movs	r2, #40	; 0x28
 80018ac:	2100      	movs	r1, #0
 80018ae:	4618      	mov	r0, r3
 80018b0:	f003 fb6e 	bl	8004f90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018b4:	1d3b      	adds	r3, r7, #4
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	605a      	str	r2, [r3, #4]
 80018bc:	609a      	str	r2, [r3, #8]
 80018be:	60da      	str	r2, [r3, #12]
 80018c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018c2:	2301      	movs	r3, #1
 80018c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80018cc:	2300      	movs	r3, #0
 80018ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018d0:	2301      	movs	r3, #1
 80018d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018d4:	2302      	movs	r3, #2
 80018d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80018de:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80018e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018e4:	f107 0318 	add.w	r3, r7, #24
 80018e8:	4618      	mov	r0, r3
 80018ea:	f002 fb57 	bl	8003f9c <HAL_RCC_OscConfig>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80018f4:	f000 f9d8 	bl	8001ca8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018f8:	230f      	movs	r3, #15
 80018fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018fc:	2302      	movs	r3, #2
 80018fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001900:	2300      	movs	r3, #0
 8001902:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001904:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001908:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800190e:	1d3b      	adds	r3, r7, #4
 8001910:	2102      	movs	r1, #2
 8001912:	4618      	mov	r0, r3
 8001914:	f002 fdc4 	bl	80044a0 <HAL_RCC_ClockConfig>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800191e:	f000 f9c3 	bl	8001ca8 <Error_Handler>
  }
}
 8001922:	bf00      	nop
 8001924:	3740      	adds	r7, #64	; 0x40
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
	...

0800192c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08a      	sub	sp, #40	; 0x28
 8001930:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001932:	4b25      	ldr	r3, [pc, #148]	; (80019c8 <MX_CAN_Init+0x9c>)
 8001934:	4a25      	ldr	r2, [pc, #148]	; (80019cc <MX_CAN_Init+0xa0>)
 8001936:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 8001938:	4b23      	ldr	r3, [pc, #140]	; (80019c8 <MX_CAN_Init+0x9c>)
 800193a:	2208      	movs	r2, #8
 800193c:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800193e:	4b22      	ldr	r3, [pc, #136]	; (80019c8 <MX_CAN_Init+0x9c>)
 8001940:	2200      	movs	r2, #0
 8001942:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001944:	4b20      	ldr	r3, [pc, #128]	; (80019c8 <MX_CAN_Init+0x9c>)
 8001946:	2200      	movs	r2, #0
 8001948:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 800194a:	4b1f      	ldr	r3, [pc, #124]	; (80019c8 <MX_CAN_Init+0x9c>)
 800194c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001950:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001952:	4b1d      	ldr	r3, [pc, #116]	; (80019c8 <MX_CAN_Init+0x9c>)
 8001954:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001958:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800195a:	4b1b      	ldr	r3, [pc, #108]	; (80019c8 <MX_CAN_Init+0x9c>)
 800195c:	2200      	movs	r2, #0
 800195e:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001960:	4b19      	ldr	r3, [pc, #100]	; (80019c8 <MX_CAN_Init+0x9c>)
 8001962:	2200      	movs	r2, #0
 8001964:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001966:	4b18      	ldr	r3, [pc, #96]	; (80019c8 <MX_CAN_Init+0x9c>)
 8001968:	2200      	movs	r2, #0
 800196a:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800196c:	4b16      	ldr	r3, [pc, #88]	; (80019c8 <MX_CAN_Init+0x9c>)
 800196e:	2200      	movs	r2, #0
 8001970:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001972:	4b15      	ldr	r3, [pc, #84]	; (80019c8 <MX_CAN_Init+0x9c>)
 8001974:	2200      	movs	r2, #0
 8001976:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001978:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <MX_CAN_Init+0x9c>)
 800197a:	2200      	movs	r2, #0
 800197c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800197e:	4812      	ldr	r0, [pc, #72]	; (80019c8 <MX_CAN_Init+0x9c>)
 8001980:	f000 fb88 	bl	8002094 <HAL_CAN_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_CAN_Init+0x62>
  {
    Error_Handler();
 800198a:	f000 f98d 	bl	8001ca8 <Error_Handler>
    * Filter ID and Filter Mask are used to compare and verify the incoming Identifier for receiving data
    * FIFO 0 is used for store the received data
    *In FiterID mask mode , two 32 bit registers (Filter ID and Filter Mask)
    */
	CAN_FilterTypeDef filtercon;// Need to add filter configuration for receiving data
	filtercon.FilterActivation = CAN_FILTER_ENABLE;//Enable Filter for receiving data
 800198e:	2301      	movs	r3, #1
 8001990:	623b      	str	r3, [r7, #32]
	filtercon.FilterBank = 1;//Here using filter bank 1 for receiving data(Controller- single CAN -14 filter bank)
 8001992:	2301      	movs	r3, #1
 8001994:	617b      	str	r3, [r7, #20]
	filtercon.FilterFIFOAssignment = CAN_FILTER_FIFO0;//using FIFO 0 for receiving data
 8001996:	2300      	movs	r3, #0
 8001998:	613b      	str	r3, [r7, #16]
	filtercon.FilterIdHigh = 0x0000;//controller receives all the identifier without any restriction if gives 0x0000
 800199a:	2300      	movs	r3, #0
 800199c:	603b      	str	r3, [r7, #0]
	filtercon.FilterIdLow = 0x0000;//controller receives all the identifier without any restriction if gives 0x0000
 800199e:	2300      	movs	r3, #0
 80019a0:	607b      	str	r3, [r7, #4]
	filtercon.FilterMaskIdHigh = 0X0000;//controller receives all the identifier without any restriction if gives 0x0000
 80019a2:	2300      	movs	r3, #0
 80019a4:	60bb      	str	r3, [r7, #8]
	filtercon.FilterMaskIdLow = 0X0000;//controller receives all the identifier without any restriction if gives 0x0000
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
	filtercon.FilterMode = CAN_FILTERMODE_IDMASK;//using ID mask mode receiving identifier
 80019aa:	2300      	movs	r3, #0
 80019ac:	61bb      	str	r3, [r7, #24]
	filtercon.FilterScale = CAN_FILTERSCALE_32BIT;//32 bit register ID and Mask register
 80019ae:	2301      	movs	r3, #1
 80019b0:	61fb      	str	r3, [r7, #28]
	filtercon.SlaveStartFilterBank = 0;// don't care if the controller has single CAN
 80019b2:	2300      	movs	r3, #0
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_CAN_ConfigFilter(&hcan,&filtercon);//Filter configuration declaration
 80019b6:	463b      	mov	r3, r7
 80019b8:	4619      	mov	r1, r3
 80019ba:	4803      	ldr	r0, [pc, #12]	; (80019c8 <MX_CAN_Init+0x9c>)
 80019bc:	f000 fc65 	bl	800228a <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 80019c0:	bf00      	nop
 80019c2:	3728      	adds	r7, #40	; 0x28
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20000ca8 	.word	0x20000ca8
 80019cc:	40006400 	.word	0x40006400

080019d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019d4:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <MX_I2C1_Init+0x50>)
 80019d6:	4a13      	ldr	r2, [pc, #76]	; (8001a24 <MX_I2C1_Init+0x54>)
 80019d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80019da:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <MX_I2C1_Init+0x50>)
 80019dc:	4a12      	ldr	r2, [pc, #72]	; (8001a28 <MX_I2C1_Init+0x58>)
 80019de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019e0:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <MX_I2C1_Init+0x50>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019e6:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <MX_I2C1_Init+0x50>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019ec:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <MX_I2C1_Init+0x50>)
 80019ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019f4:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <MX_I2C1_Init+0x50>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019fa:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <MX_I2C1_Init+0x50>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a00:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <MX_I2C1_Init+0x50>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a06:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <MX_I2C1_Init+0x50>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a0c:	4804      	ldr	r0, [pc, #16]	; (8001a20 <MX_I2C1_Init+0x50>)
 8001a0e:	f001 fc43 	bl	8003298 <HAL_I2C_Init>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a18:	f000 f946 	bl	8001ca8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a1c:	bf00      	nop
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20000cd0 	.word	0x20000cd0
 8001a24:	40005400 	.word	0x40005400
 8001a28:	00061a80 	.word	0x00061a80

08001a2c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a32:	f107 0308 	add.w	r3, r7, #8
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	605a      	str	r2, [r3, #4]
 8001a3c:	609a      	str	r2, [r3, #8]
 8001a3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a40:	463b      	mov	r3, r7
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a48:	4b1d      	ldr	r3, [pc, #116]	; (8001ac0 <MX_TIM2_Init+0x94>)
 8001a4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a4e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8001a50:	4b1b      	ldr	r3, [pc, #108]	; (8001ac0 <MX_TIM2_Init+0x94>)
 8001a52:	2263      	movs	r2, #99	; 0x63
 8001a54:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a56:	4b1a      	ldr	r3, [pc, #104]	; (8001ac0 <MX_TIM2_Init+0x94>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 72-1;
 8001a5c:	4b18      	ldr	r3, [pc, #96]	; (8001ac0 <MX_TIM2_Init+0x94>)
 8001a5e:	2247      	movs	r2, #71	; 0x47
 8001a60:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a62:	4b17      	ldr	r3, [pc, #92]	; (8001ac0 <MX_TIM2_Init+0x94>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a68:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <MX_TIM2_Init+0x94>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a6e:	4814      	ldr	r0, [pc, #80]	; (8001ac0 <MX_TIM2_Init+0x94>)
 8001a70:	f002 fe90 	bl	8004794 <HAL_TIM_Base_Init>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001a7a:	f000 f915 	bl	8001ca8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a82:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a84:	f107 0308 	add.w	r3, r7, #8
 8001a88:	4619      	mov	r1, r3
 8001a8a:	480d      	ldr	r0, [pc, #52]	; (8001ac0 <MX_TIM2_Init+0x94>)
 8001a8c:	f003 f82c 	bl	8004ae8 <HAL_TIM_ConfigClockSource>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001a96:	f000 f907 	bl	8001ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001aa2:	463b      	mov	r3, r7
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4806      	ldr	r0, [pc, #24]	; (8001ac0 <MX_TIM2_Init+0x94>)
 8001aa8:	f003 fa02 	bl	8004eb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001ab2:	f000 f8f9 	bl	8001ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ab6:	bf00      	nop
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000d24 	.word	0x20000d24

08001ac4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b088      	sub	sp, #32
 8001ac8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aca:	f107 0310 	add.w	r3, r7, #16
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	605a      	str	r2, [r3, #4]
 8001ad4:	609a      	str	r2, [r3, #8]
 8001ad6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad8:	4b38      	ldr	r3, [pc, #224]	; (8001bbc <MX_GPIO_Init+0xf8>)
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	4a37      	ldr	r2, [pc, #220]	; (8001bbc <MX_GPIO_Init+0xf8>)
 8001ade:	f043 0310 	orr.w	r3, r3, #16
 8001ae2:	6193      	str	r3, [r2, #24]
 8001ae4:	4b35      	ldr	r3, [pc, #212]	; (8001bbc <MX_GPIO_Init+0xf8>)
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	f003 0310 	and.w	r3, r3, #16
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001af0:	4b32      	ldr	r3, [pc, #200]	; (8001bbc <MX_GPIO_Init+0xf8>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	4a31      	ldr	r2, [pc, #196]	; (8001bbc <MX_GPIO_Init+0xf8>)
 8001af6:	f043 0320 	orr.w	r3, r3, #32
 8001afa:	6193      	str	r3, [r2, #24]
 8001afc:	4b2f      	ldr	r3, [pc, #188]	; (8001bbc <MX_GPIO_Init+0xf8>)
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	f003 0320 	and.w	r3, r3, #32
 8001b04:	60bb      	str	r3, [r7, #8]
 8001b06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b08:	4b2c      	ldr	r3, [pc, #176]	; (8001bbc <MX_GPIO_Init+0xf8>)
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	4a2b      	ldr	r2, [pc, #172]	; (8001bbc <MX_GPIO_Init+0xf8>)
 8001b0e:	f043 0304 	orr.w	r3, r3, #4
 8001b12:	6193      	str	r3, [r2, #24]
 8001b14:	4b29      	ldr	r3, [pc, #164]	; (8001bbc <MX_GPIO_Init+0xf8>)
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	607b      	str	r3, [r7, #4]
 8001b1e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b20:	4b26      	ldr	r3, [pc, #152]	; (8001bbc <MX_GPIO_Init+0xf8>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	4a25      	ldr	r2, [pc, #148]	; (8001bbc <MX_GPIO_Init+0xf8>)
 8001b26:	f043 0308 	orr.w	r3, r3, #8
 8001b2a:	6193      	str	r3, [r2, #24]
 8001b2c:	4b23      	ldr	r3, [pc, #140]	; (8001bbc <MX_GPIO_Init+0xf8>)
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	f003 0308 	and.w	r3, r3, #8
 8001b34:	603b      	str	r3, [r7, #0]
 8001b36:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin
 8001b38:	2200      	movs	r2, #0
 8001b3a:	21ff      	movs	r1, #255	; 0xff
 8001b3c:	4820      	ldr	r0, [pc, #128]	; (8001bc0 <MX_GPIO_Init+0xfc>)
 8001b3e:	f001 fb7b 	bl	8003238 <HAL_GPIO_WritePin>
                          |LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, lcd_adr_Pin|LCD_RD_Pin|lcd_reset_Pin|lcd_chip_sel_Pin
 8001b42:	2200      	movs	r2, #0
 8001b44:	f640 4107 	movw	r1, #3079	; 0xc07
 8001b48:	481e      	ldr	r0, [pc, #120]	; (8001bc4 <MX_GPIO_Init+0x100>)
 8001b4a:	f001 fb75 	bl	8003238 <HAL_GPIO_WritePin>
                          |check_led_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : speed_sensor_Pin */
  GPIO_InitStruct.Pin = speed_sensor_Pin;
 8001b4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b54:	4b1c      	ldr	r3, [pc, #112]	; (8001bc8 <MX_GPIO_Init+0x104>)
 8001b56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(speed_sensor_GPIO_Port, &GPIO_InitStruct);
 8001b5c:	f107 0310 	add.w	r3, r7, #16
 8001b60:	4619      	mov	r1, r3
 8001b62:	481a      	ldr	r0, [pc, #104]	; (8001bcc <MX_GPIO_Init+0x108>)
 8001b64:	f001 f9e4 	bl	8002f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D0_Pin LCD_D1_Pin LCD_D2_Pin LCD_D3_Pin
                           LCD_D4_Pin LCD_D5_Pin LCD_D6_Pin LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin
 8001b68:	23ff      	movs	r3, #255	; 0xff
 8001b6a:	613b      	str	r3, [r7, #16]
                          |LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b74:	2302      	movs	r3, #2
 8001b76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b78:	f107 0310 	add.w	r3, r7, #16
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4810      	ldr	r0, [pc, #64]	; (8001bc0 <MX_GPIO_Init+0xfc>)
 8001b80:	f001 f9d6 	bl	8002f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : lcd_adr_Pin LCD_RD_Pin lcd_reset_Pin lcd_chip_sel_Pin
                           check_led_Pin */
  GPIO_InitStruct.Pin = lcd_adr_Pin|LCD_RD_Pin|lcd_reset_Pin|lcd_chip_sel_Pin
 8001b84:	f640 4307 	movw	r3, #3079	; 0xc07
 8001b88:	613b      	str	r3, [r7, #16]
                          |check_led_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b92:	2302      	movs	r3, #2
 8001b94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b96:	f107 0310 	add.w	r3, r7, #16
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4809      	ldr	r0, [pc, #36]	; (8001bc4 <MX_GPIO_Init+0x100>)
 8001b9e:	f001 f9c7 	bl	8002f30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	2028      	movs	r0, #40	; 0x28
 8001ba8:	f001 f98b 	bl	8002ec2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001bac:	2028      	movs	r0, #40	; 0x28
 8001bae:	f001 f9a4 	bl	8002efa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001bb2:	bf00      	nop
 8001bb4:	3720      	adds	r7, #32
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	40010800 	.word	0x40010800
 8001bc4:	40010c00 	.word	0x40010c00
 8001bc8:	10210000 	.word	0x10210000
 8001bcc:	40011000 	.word	0x40011000

08001bd0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
uint16_t speed_time=0,speed_count_avg=0,ttf_delay=0,sec=0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) // To create a every 100us timer Interrupt. prescalar value is 100 and ARR(Auto Reload Register) = 72.
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001be0:	d137      	bne.n	8001c52 <HAL_TIM_PeriodElapsedCallback+0x82>
  {
	 timerCounter++; //It will incremented every timer interrupt occur with time.
 8001be2:	4b1e      	ldr	r3, [pc, #120]	; (8001c5c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001be4:	881b      	ldrh	r3, [r3, #0]
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	3301      	adds	r3, #1
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	4b1b      	ldr	r3, [pc, #108]	; (8001c5c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001bee:	801a      	strh	r2, [r3, #0]
	 if(timerCounter==10)
 8001bf0:	4b1a      	ldr	r3, [pc, #104]	; (8001c5c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001bf2:	881b      	ldrh	r3, [r3, #0]
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	2b0a      	cmp	r3, #10
 8001bf8:	d108      	bne.n	8001c0c <HAL_TIM_PeriodElapsedCallback+0x3c>
	 {
		 m_sec++;
 8001bfa:	4b19      	ldr	r3, [pc, #100]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001bfc:	881b      	ldrh	r3, [r3, #0]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001c04:	801a      	strh	r2, [r3, #0]
		 timerCounter=0;
 8001c06:	4b15      	ldr	r3, [pc, #84]	; (8001c5c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	801a      	strh	r2, [r3, #0]
	 }
	 if(m_sec==print_delay)
 8001c0c:	4b14      	ldr	r3, [pc, #80]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001c0e:	881a      	ldrh	r2, [r3, #0]
 8001c10:	4b14      	ldr	r3, [pc, #80]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001c12:	881b      	ldrh	r3, [r3, #0]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d11c      	bne.n	8001c52 <HAL_TIM_PeriodElapsedCallback+0x82>
	 {
		 print_delay=m_sec+1000;
 8001c18:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001c1a:	881b      	ldrh	r3, [r3, #0]
 8001c1c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	4b10      	ldr	r3, [pc, #64]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001c24:	801a      	strh	r2, [r3, #0]
		 print_state=1;
 8001c26:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001c28:	2201      	movs	r2, #1
 8001c2a:	701a      	strb	r2, [r3, #0]
		 timer_sec_1++;
 8001c2c:	4b0f      	ldr	r3, [pc, #60]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001c2e:	881b      	ldrh	r3, [r3, #0]
 8001c30:	3301      	adds	r3, #1
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	4b0d      	ldr	r3, [pc, #52]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001c36:	801a      	strh	r2, [r3, #0]
		 speed_count_temp=100;
 8001c38:	4b0d      	ldr	r3, [pc, #52]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001c3a:	2264      	movs	r2, #100	; 0x64
 8001c3c:	601a      	str	r2, [r3, #0]
		 speed_count=speed_count_temp;
 8001c3e:	4b0c      	ldr	r3, [pc, #48]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a0c      	ldr	r2, [pc, #48]	; (8001c74 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001c44:	6013      	str	r3, [r2, #0]
		 after_sec=1;
 8001c46:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001c48:	2201      	movs	r2, #1
 8001c4a:	701a      	strb	r2, [r3, #0]
		 speed_count_temp=0;
 8001c4c:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
	 }
  }
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bc80      	pop	{r7}
 8001c5a:	4770      	bx	lr
 8001c5c:	20000d6c 	.word	0x20000d6c
 8001c60:	20000d6e 	.word	0x20000d6e
 8001c64:	20000404 	.word	0x20000404
 8001c68:	20000d8f 	.word	0x20000d8f
 8001c6c:	20000dd0 	.word	0x20000dd0
 8001c70:	20000d84 	.word	0x20000d84
 8001c74:	20000d80 	.word	0x20000d80
 8001c78:	20000d88 	.word	0x20000d88

08001c7c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==speed_sensor_Pin)
 8001c86:	88fb      	ldrh	r3, [r7, #6]
 8001c88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c8c:	d104      	bne.n	8001c98 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		speed_count_temp++;
 8001c8e:	4b05      	ldr	r3, [pc, #20]	; (8001ca4 <HAL_GPIO_EXTI_Callback+0x28>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	3301      	adds	r3, #1
 8001c94:	4a03      	ldr	r2, [pc, #12]	; (8001ca4 <HAL_GPIO_EXTI_Callback+0x28>)
 8001c96:	6013      	str	r3, [r2, #0]
	}
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bc80      	pop	{r7}
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	20000d84 	.word	0x20000d84

08001ca8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cac:	b672      	cpsid	i
}
 8001cae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cb0:	e7fe      	b.n	8001cb0 <Error_Handler+0x8>
	...

08001cb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001cba:	4b15      	ldr	r3, [pc, #84]	; (8001d10 <HAL_MspInit+0x5c>)
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	4a14      	ldr	r2, [pc, #80]	; (8001d10 <HAL_MspInit+0x5c>)
 8001cc0:	f043 0301 	orr.w	r3, r3, #1
 8001cc4:	6193      	str	r3, [r2, #24]
 8001cc6:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <HAL_MspInit+0x5c>)
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	60bb      	str	r3, [r7, #8]
 8001cd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cd2:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <HAL_MspInit+0x5c>)
 8001cd4:	69db      	ldr	r3, [r3, #28]
 8001cd6:	4a0e      	ldr	r2, [pc, #56]	; (8001d10 <HAL_MspInit+0x5c>)
 8001cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cdc:	61d3      	str	r3, [r2, #28]
 8001cde:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <HAL_MspInit+0x5c>)
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce6:	607b      	str	r3, [r7, #4]
 8001ce8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001cea:	4b0a      	ldr	r3, [pc, #40]	; (8001d14 <HAL_MspInit+0x60>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	4a04      	ldr	r2, [pc, #16]	; (8001d14 <HAL_MspInit+0x60>)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d06:	bf00      	nop
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bc80      	pop	{r7}
 8001d0e:	4770      	bx	lr
 8001d10:	40021000 	.word	0x40021000
 8001d14:	40010000 	.word	0x40010000

08001d18 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b088      	sub	sp, #32
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d20:	f107 0310 	add.w	r3, r7, #16
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a20      	ldr	r2, [pc, #128]	; (8001db4 <HAL_CAN_MspInit+0x9c>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d139      	bne.n	8001dac <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001d38:	4b1f      	ldr	r3, [pc, #124]	; (8001db8 <HAL_CAN_MspInit+0xa0>)
 8001d3a:	69db      	ldr	r3, [r3, #28]
 8001d3c:	4a1e      	ldr	r2, [pc, #120]	; (8001db8 <HAL_CAN_MspInit+0xa0>)
 8001d3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d42:	61d3      	str	r3, [r2, #28]
 8001d44:	4b1c      	ldr	r3, [pc, #112]	; (8001db8 <HAL_CAN_MspInit+0xa0>)
 8001d46:	69db      	ldr	r3, [r3, #28]
 8001d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d50:	4b19      	ldr	r3, [pc, #100]	; (8001db8 <HAL_CAN_MspInit+0xa0>)
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	4a18      	ldr	r2, [pc, #96]	; (8001db8 <HAL_CAN_MspInit+0xa0>)
 8001d56:	f043 0304 	orr.w	r3, r3, #4
 8001d5a:	6193      	str	r3, [r2, #24]
 8001d5c:	4b16      	ldr	r3, [pc, #88]	; (8001db8 <HAL_CAN_MspInit+0xa0>)
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	f003 0304 	and.w	r3, r3, #4
 8001d64:	60bb      	str	r3, [r7, #8]
 8001d66:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001d68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d6c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d76:	f107 0310 	add.w	r3, r7, #16
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	480f      	ldr	r0, [pc, #60]	; (8001dbc <HAL_CAN_MspInit+0xa4>)
 8001d7e:	f001 f8d7 	bl	8002f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d90:	f107 0310 	add.w	r3, r7, #16
 8001d94:	4619      	mov	r1, r3
 8001d96:	4809      	ldr	r0, [pc, #36]	; (8001dbc <HAL_CAN_MspInit+0xa4>)
 8001d98:	f001 f8ca 	bl	8002f30 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	2100      	movs	r1, #0
 8001da0:	2014      	movs	r0, #20
 8001da2:	f001 f88e 	bl	8002ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001da6:	2014      	movs	r0, #20
 8001da8:	f001 f8a7 	bl	8002efa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001dac:	bf00      	nop
 8001dae:	3720      	adds	r7, #32
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40006400 	.word	0x40006400
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	40010800 	.word	0x40010800

08001dc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b08a      	sub	sp, #40	; 0x28
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc8:	f107 0314 	add.w	r3, r7, #20
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a1d      	ldr	r2, [pc, #116]	; (8001e50 <HAL_I2C_MspInit+0x90>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d132      	bne.n	8001e46 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de0:	4b1c      	ldr	r3, [pc, #112]	; (8001e54 <HAL_I2C_MspInit+0x94>)
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	4a1b      	ldr	r2, [pc, #108]	; (8001e54 <HAL_I2C_MspInit+0x94>)
 8001de6:	f043 0308 	orr.w	r3, r3, #8
 8001dea:	6193      	str	r3, [r2, #24]
 8001dec:	4b19      	ldr	r3, [pc, #100]	; (8001e54 <HAL_I2C_MspInit+0x94>)
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	f003 0308 	and.w	r3, r3, #8
 8001df4:	613b      	str	r3, [r7, #16]
 8001df6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001df8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dfe:	2312      	movs	r3, #18
 8001e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e02:	2303      	movs	r3, #3
 8001e04:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e06:	f107 0314 	add.w	r3, r7, #20
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4812      	ldr	r0, [pc, #72]	; (8001e58 <HAL_I2C_MspInit+0x98>)
 8001e0e:	f001 f88f 	bl	8002f30 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001e12:	4b12      	ldr	r3, [pc, #72]	; (8001e5c <HAL_I2C_MspInit+0x9c>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
 8001e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e22:	f043 0302 	orr.w	r3, r3, #2
 8001e26:	627b      	str	r3, [r7, #36]	; 0x24
 8001e28:	4a0c      	ldr	r2, [pc, #48]	; (8001e5c <HAL_I2C_MspInit+0x9c>)
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e2e:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <HAL_I2C_MspInit+0x94>)
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	4a08      	ldr	r2, [pc, #32]	; (8001e54 <HAL_I2C_MspInit+0x94>)
 8001e34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e38:	61d3      	str	r3, [r2, #28]
 8001e3a:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <HAL_I2C_MspInit+0x94>)
 8001e3c:	69db      	ldr	r3, [r3, #28]
 8001e3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e46:	bf00      	nop
 8001e48:	3728      	adds	r7, #40	; 0x28
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	40005400 	.word	0x40005400
 8001e54:	40021000 	.word	0x40021000
 8001e58:	40010c00 	.word	0x40010c00
 8001e5c:	40010000 	.word	0x40010000

08001e60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e70:	d113      	bne.n	8001e9a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e72:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <HAL_TIM_Base_MspInit+0x44>)
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	4a0b      	ldr	r2, [pc, #44]	; (8001ea4 <HAL_TIM_Base_MspInit+0x44>)
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	61d3      	str	r3, [r2, #28]
 8001e7e:	4b09      	ldr	r3, [pc, #36]	; (8001ea4 <HAL_TIM_Base_MspInit+0x44>)
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	201c      	movs	r0, #28
 8001e90:	f001 f817 	bl	8002ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e94:	201c      	movs	r0, #28
 8001e96:	f001 f830 	bl	8002efa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001e9a:	bf00      	nop
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40021000 	.word	0x40021000

08001ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001eac:	e7fe      	b.n	8001eac <NMI_Handler+0x4>

08001eae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eb2:	e7fe      	b.n	8001eb2 <HardFault_Handler+0x4>

08001eb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eb8:	e7fe      	b.n	8001eb8 <MemManage_Handler+0x4>

08001eba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ebe:	e7fe      	b.n	8001ebe <BusFault_Handler+0x4>

08001ec0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ec4:	e7fe      	b.n	8001ec4 <UsageFault_Handler+0x4>

08001ec6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bc80      	pop	{r7}
 8001ed0:	4770      	bx	lr

08001ed2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bc80      	pop	{r7}
 8001edc:	4770      	bx	lr

08001ede <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bc80      	pop	{r7}
 8001ee8:	4770      	bx	lr

08001eea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eee:	f000 f891 	bl	8002014 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001efc:	4802      	ldr	r0, [pc, #8]	; (8001f08 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001efe:	f000 fce6 	bl	80028ce <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	20000ca8 	.word	0x20000ca8

08001f0c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f10:	4802      	ldr	r0, [pc, #8]	; (8001f1c <TIM2_IRQHandler+0x10>)
 8001f12:	f002 fce1 	bl	80048d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000d24 	.word	0x20000d24

08001f20 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(speed_sensor_Pin);
 8001f24:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001f28:	f001 f99e 	bl	8003268 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f2c:	bf00      	nop
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f34:	bf00      	nop
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr

08001f3c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f3c:	f7ff fff8 	bl	8001f30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f40:	480b      	ldr	r0, [pc, #44]	; (8001f70 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001f42:	490c      	ldr	r1, [pc, #48]	; (8001f74 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001f44:	4a0c      	ldr	r2, [pc, #48]	; (8001f78 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001f46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f48:	e002      	b.n	8001f50 <LoopCopyDataInit>

08001f4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f4e:	3304      	adds	r3, #4

08001f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f54:	d3f9      	bcc.n	8001f4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f56:	4a09      	ldr	r2, [pc, #36]	; (8001f7c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f58:	4c09      	ldr	r4, [pc, #36]	; (8001f80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f5c:	e001      	b.n	8001f62 <LoopFillZerobss>

08001f5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f60:	3204      	adds	r2, #4

08001f62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f64:	d3fb      	bcc.n	8001f5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f66:	f003 f81b 	bl	8004fa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f6a:	f7ff fc33 	bl	80017d4 <main>
  bx lr
 8001f6e:	4770      	bx	lr
  ldr r0, =_sdata
 8001f70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f74:	20000440 	.word	0x20000440
  ldr r2, =_sidata
 8001f78:	080051f8 	.word	0x080051f8
  ldr r2, =_sbss
 8001f7c:	20000440 	.word	0x20000440
  ldr r4, =_ebss
 8001f80:	20000dd8 	.word	0x20000dd8

08001f84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f84:	e7fe      	b.n	8001f84 <ADC1_2_IRQHandler>
	...

08001f88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f8c:	4b08      	ldr	r3, [pc, #32]	; (8001fb0 <HAL_Init+0x28>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a07      	ldr	r2, [pc, #28]	; (8001fb0 <HAL_Init+0x28>)
 8001f92:	f043 0310 	orr.w	r3, r3, #16
 8001f96:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f98:	2003      	movs	r0, #3
 8001f9a:	f000 ff87 	bl	8002eac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f9e:	200f      	movs	r0, #15
 8001fa0:	f000 f808 	bl	8001fb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fa4:	f7ff fe86 	bl	8001cb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40022000 	.word	0x40022000

08001fb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fbc:	4b12      	ldr	r3, [pc, #72]	; (8002008 <HAL_InitTick+0x54>)
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	4b12      	ldr	r3, [pc, #72]	; (800200c <HAL_InitTick+0x58>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f000 ff9f 	bl	8002f16 <HAL_SYSTICK_Config>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e00e      	b.n	8002000 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2b0f      	cmp	r3, #15
 8001fe6:	d80a      	bhi.n	8001ffe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fe8:	2200      	movs	r2, #0
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff0:	f000 ff67 	bl	8002ec2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ff4:	4a06      	ldr	r2, [pc, #24]	; (8002010 <HAL_InitTick+0x5c>)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	e000      	b.n	8002000 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
}
 8002000:	4618      	mov	r0, r3
 8002002:	3708      	adds	r7, #8
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	20000434 	.word	0x20000434
 800200c:	2000043c 	.word	0x2000043c
 8002010:	20000438 	.word	0x20000438

08002014 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002018:	4b05      	ldr	r3, [pc, #20]	; (8002030 <HAL_IncTick+0x1c>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	461a      	mov	r2, r3
 800201e:	4b05      	ldr	r3, [pc, #20]	; (8002034 <HAL_IncTick+0x20>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4413      	add	r3, r2
 8002024:	4a03      	ldr	r2, [pc, #12]	; (8002034 <HAL_IncTick+0x20>)
 8002026:	6013      	str	r3, [r2, #0]
}
 8002028:	bf00      	nop
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr
 8002030:	2000043c 	.word	0x2000043c
 8002034:	20000dd4 	.word	0x20000dd4

08002038 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  return uwTick;
 800203c:	4b02      	ldr	r3, [pc, #8]	; (8002048 <HAL_GetTick+0x10>)
 800203e:	681b      	ldr	r3, [r3, #0]
}
 8002040:	4618      	mov	r0, r3
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr
 8002048:	20000dd4 	.word	0x20000dd4

0800204c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002054:	f7ff fff0 	bl	8002038 <HAL_GetTick>
 8002058:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002064:	d005      	beq.n	8002072 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002066:	4b0a      	ldr	r3, [pc, #40]	; (8002090 <HAL_Delay+0x44>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	461a      	mov	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4413      	add	r3, r2
 8002070:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002072:	bf00      	nop
 8002074:	f7ff ffe0 	bl	8002038 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	429a      	cmp	r2, r3
 8002082:	d8f7      	bhi.n	8002074 <HAL_Delay+0x28>
  {
  }
}
 8002084:	bf00      	nop
 8002086:	bf00      	nop
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	2000043c 	.word	0x2000043c

08002094 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e0ed      	b.n	8002282 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d102      	bne.n	80020b8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7ff fe30 	bl	8001d18 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f042 0201 	orr.w	r2, r2, #1
 80020c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020c8:	f7ff ffb6 	bl	8002038 <HAL_GetTick>
 80020cc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80020ce:	e012      	b.n	80020f6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020d0:	f7ff ffb2 	bl	8002038 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b0a      	cmp	r3, #10
 80020dc:	d90b      	bls.n	80020f6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2205      	movs	r2, #5
 80020ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e0c5      	b.n	8002282 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	2b00      	cmp	r3, #0
 8002102:	d0e5      	beq.n	80020d0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f022 0202 	bic.w	r2, r2, #2
 8002112:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002114:	f7ff ff90 	bl	8002038 <HAL_GetTick>
 8002118:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800211a:	e012      	b.n	8002142 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800211c:	f7ff ff8c 	bl	8002038 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b0a      	cmp	r3, #10
 8002128:	d90b      	bls.n	8002142 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2205      	movs	r2, #5
 800213a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e09f      	b.n	8002282 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d1e5      	bne.n	800211c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	7e1b      	ldrb	r3, [r3, #24]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d108      	bne.n	800216a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	e007      	b.n	800217a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002178:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	7e5b      	ldrb	r3, [r3, #25]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d108      	bne.n	8002194 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	e007      	b.n	80021a4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	7e9b      	ldrb	r3, [r3, #26]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d108      	bne.n	80021be <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f042 0220 	orr.w	r2, r2, #32
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	e007      	b.n	80021ce <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 0220 	bic.w	r2, r2, #32
 80021cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	7edb      	ldrb	r3, [r3, #27]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d108      	bne.n	80021e8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f022 0210 	bic.w	r2, r2, #16
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	e007      	b.n	80021f8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f042 0210 	orr.w	r2, r2, #16
 80021f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	7f1b      	ldrb	r3, [r3, #28]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d108      	bne.n	8002212 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 0208 	orr.w	r2, r2, #8
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	e007      	b.n	8002222 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 0208 	bic.w	r2, r2, #8
 8002220:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	7f5b      	ldrb	r3, [r3, #29]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d108      	bne.n	800223c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f042 0204 	orr.w	r2, r2, #4
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	e007      	b.n	800224c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 0204 	bic.w	r2, r2, #4
 800224a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	431a      	orrs	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	431a      	orrs	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	695b      	ldr	r3, [r3, #20]
 8002260:	ea42 0103 	orr.w	r1, r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	1e5a      	subs	r2, r3, #1
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	430a      	orrs	r2, r1
 8002270:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800228a:	b480      	push	{r7}
 800228c:	b087      	sub	sp, #28
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
 8002292:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022a0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80022a2:	7cfb      	ldrb	r3, [r7, #19]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d003      	beq.n	80022b0 <HAL_CAN_ConfigFilter+0x26>
 80022a8:	7cfb      	ldrb	r3, [r7, #19]
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	f040 80aa 	bne.w	8002404 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80022b6:	f043 0201 	orr.w	r2, r3, #1
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	695b      	ldr	r3, [r3, #20]
 80022c4:	f003 031f 	and.w	r3, r3, #31
 80022c8:	2201      	movs	r2, #1
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	43db      	mvns	r3, r3
 80022da:	401a      	ands	r2, r3
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d123      	bne.n	8002332 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	43db      	mvns	r3, r3
 80022f4:	401a      	ands	r2, r3
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800230c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	3248      	adds	r2, #72	; 0x48
 8002312:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002326:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002328:	6979      	ldr	r1, [r7, #20]
 800232a:	3348      	adds	r3, #72	; 0x48
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	440b      	add	r3, r1
 8002330:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d122      	bne.n	8002380 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	431a      	orrs	r2, r3
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800235a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	3248      	adds	r2, #72	; 0x48
 8002360:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002374:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002376:	6979      	ldr	r1, [r7, #20]
 8002378:	3348      	adds	r3, #72	; 0x48
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	440b      	add	r3, r1
 800237e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d109      	bne.n	800239c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	43db      	mvns	r3, r3
 8002392:	401a      	ands	r2, r3
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800239a:	e007      	b.n	80023ac <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	431a      	orrs	r2, r3
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d109      	bne.n	80023c8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	43db      	mvns	r3, r3
 80023be:	401a      	ands	r2, r3
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80023c6:	e007      	b.n	80023d8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	431a      	orrs	r2, r3
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d107      	bne.n	80023f0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	431a      	orrs	r2, r3
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80023f6:	f023 0201 	bic.w	r2, r3, #1
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002400:	2300      	movs	r3, #0
 8002402:	e006      	b.n	8002412 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002408:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
  }
}
 8002412:	4618      	mov	r0, r3
 8002414:	371c      	adds	r7, #28
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr

0800241c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f893 3020 	ldrb.w	r3, [r3, #32]
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b01      	cmp	r3, #1
 800242e:	d12e      	bne.n	800248e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2202      	movs	r2, #2
 8002434:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f022 0201 	bic.w	r2, r2, #1
 8002446:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002448:	f7ff fdf6 	bl	8002038 <HAL_GetTick>
 800244c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800244e:	e012      	b.n	8002476 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002450:	f7ff fdf2 	bl	8002038 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b0a      	cmp	r3, #10
 800245c:	d90b      	bls.n	8002476 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002462:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2205      	movs	r2, #5
 800246e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e012      	b.n	800249c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1e5      	bne.n	8002450 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800248a:	2300      	movs	r3, #0
 800248c:	e006      	b.n	800249c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002492:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
  }
}
 800249c:	4618      	mov	r0, r3
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b089      	sub	sp, #36	; 0x24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
 80024b0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024b8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80024c2:	7ffb      	ldrb	r3, [r7, #31]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d003      	beq.n	80024d0 <HAL_CAN_AddTxMessage+0x2c>
 80024c8:	7ffb      	ldrb	r3, [r7, #31]
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	f040 80ad 	bne.w	800262a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d10a      	bne.n	80024f0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d105      	bne.n	80024f0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f000 8095 	beq.w	800261a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	0e1b      	lsrs	r3, r3, #24
 80024f4:	f003 0303 	and.w	r3, r3, #3
 80024f8:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80024fa:	2201      	movs	r2, #1
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	409a      	lsls	r2, r3
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d10d      	bne.n	8002528 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002516:	68f9      	ldr	r1, [r7, #12]
 8002518:	6809      	ldr	r1, [r1, #0]
 800251a:	431a      	orrs	r2, r3
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	3318      	adds	r3, #24
 8002520:	011b      	lsls	r3, r3, #4
 8002522:	440b      	add	r3, r1
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	e00f      	b.n	8002548 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002532:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002538:	68f9      	ldr	r1, [r7, #12]
 800253a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800253c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	3318      	adds	r3, #24
 8002542:	011b      	lsls	r3, r3, #4
 8002544:	440b      	add	r3, r1
 8002546:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6819      	ldr	r1, [r3, #0]
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	691a      	ldr	r2, [r3, #16]
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	3318      	adds	r3, #24
 8002554:	011b      	lsls	r3, r3, #4
 8002556:	440b      	add	r3, r1
 8002558:	3304      	adds	r3, #4
 800255a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	7d1b      	ldrb	r3, [r3, #20]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d111      	bne.n	8002588 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	3318      	adds	r3, #24
 800256c:	011b      	lsls	r3, r3, #4
 800256e:	4413      	add	r3, r2
 8002570:	3304      	adds	r3, #4
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	6811      	ldr	r1, [r2, #0]
 8002578:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	3318      	adds	r3, #24
 8002580:	011b      	lsls	r3, r3, #4
 8002582:	440b      	add	r3, r1
 8002584:	3304      	adds	r3, #4
 8002586:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	3307      	adds	r3, #7
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	061a      	lsls	r2, r3, #24
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3306      	adds	r3, #6
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	041b      	lsls	r3, r3, #16
 8002598:	431a      	orrs	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	3305      	adds	r3, #5
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	021b      	lsls	r3, r3, #8
 80025a2:	4313      	orrs	r3, r2
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	3204      	adds	r2, #4
 80025a8:	7812      	ldrb	r2, [r2, #0]
 80025aa:	4610      	mov	r0, r2
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	6811      	ldr	r1, [r2, #0]
 80025b0:	ea43 0200 	orr.w	r2, r3, r0
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	011b      	lsls	r3, r3, #4
 80025b8:	440b      	add	r3, r1
 80025ba:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80025be:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3303      	adds	r3, #3
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	061a      	lsls	r2, r3, #24
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3302      	adds	r3, #2
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	041b      	lsls	r3, r3, #16
 80025d0:	431a      	orrs	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	3301      	adds	r3, #1
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	021b      	lsls	r3, r3, #8
 80025da:	4313      	orrs	r3, r2
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	7812      	ldrb	r2, [r2, #0]
 80025e0:	4610      	mov	r0, r2
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	6811      	ldr	r1, [r2, #0]
 80025e6:	ea43 0200 	orr.w	r2, r3, r0
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	011b      	lsls	r3, r3, #4
 80025ee:	440b      	add	r3, r1
 80025f0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80025f4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	3318      	adds	r3, #24
 80025fe:	011b      	lsls	r3, r3, #4
 8002600:	4413      	add	r3, r2
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	6811      	ldr	r1, [r2, #0]
 8002608:	f043 0201 	orr.w	r2, r3, #1
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	3318      	adds	r3, #24
 8002610:	011b      	lsls	r3, r3, #4
 8002612:	440b      	add	r3, r1
 8002614:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002616:	2300      	movs	r3, #0
 8002618:	e00e      	b.n	8002638 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e006      	b.n	8002638 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
  }
}
 8002638:	4618      	mov	r0, r3
 800263a:	3724      	adds	r7, #36	; 0x24
 800263c:	46bd      	mov	sp, r7
 800263e:	bc80      	pop	{r7}
 8002640:	4770      	bx	lr

08002642 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002642:	b480      	push	{r7}
 8002644:	b087      	sub	sp, #28
 8002646:	af00      	add	r7, sp, #0
 8002648:	60f8      	str	r0, [r7, #12]
 800264a:	60b9      	str	r1, [r7, #8]
 800264c:	607a      	str	r2, [r7, #4]
 800264e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002656:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002658:	7dfb      	ldrb	r3, [r7, #23]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d003      	beq.n	8002666 <HAL_CAN_GetRxMessage+0x24>
 800265e:	7dfb      	ldrb	r3, [r7, #23]
 8002660:	2b02      	cmp	r3, #2
 8002662:	f040 8103 	bne.w	800286c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10e      	bne.n	800268a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	f003 0303 	and.w	r3, r3, #3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d116      	bne.n	80026a8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e0f7      	b.n	800287a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	f003 0303 	and.w	r3, r3, #3
 8002694:	2b00      	cmp	r3, #0
 8002696:	d107      	bne.n	80026a8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e0e8      	b.n	800287a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	331b      	adds	r3, #27
 80026b0:	011b      	lsls	r3, r3, #4
 80026b2:	4413      	add	r3, r2
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0204 	and.w	r2, r3, #4
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10c      	bne.n	80026e0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	331b      	adds	r3, #27
 80026ce:	011b      	lsls	r3, r3, #4
 80026d0:	4413      	add	r3, r2
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	0d5b      	lsrs	r3, r3, #21
 80026d6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	e00b      	b.n	80026f8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	331b      	adds	r3, #27
 80026e8:	011b      	lsls	r3, r3, #4
 80026ea:	4413      	add	r3, r2
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	08db      	lsrs	r3, r3, #3
 80026f0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	331b      	adds	r3, #27
 8002700:	011b      	lsls	r3, r3, #4
 8002702:	4413      	add	r3, r2
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0202 	and.w	r2, r3, #2
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	331b      	adds	r3, #27
 8002716:	011b      	lsls	r3, r3, #4
 8002718:	4413      	add	r3, r2
 800271a:	3304      	adds	r3, #4
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0308 	and.w	r3, r3, #8
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2208      	movs	r2, #8
 800272a:	611a      	str	r2, [r3, #16]
 800272c:	e00b      	b.n	8002746 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	331b      	adds	r3, #27
 8002736:	011b      	lsls	r3, r3, #4
 8002738:	4413      	add	r3, r2
 800273a:	3304      	adds	r3, #4
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 020f 	and.w	r2, r3, #15
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	331b      	adds	r3, #27
 800274e:	011b      	lsls	r3, r3, #4
 8002750:	4413      	add	r3, r2
 8002752:	3304      	adds	r3, #4
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	0a1b      	lsrs	r3, r3, #8
 8002758:	b2da      	uxtb	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	331b      	adds	r3, #27
 8002766:	011b      	lsls	r3, r3, #4
 8002768:	4413      	add	r3, r2
 800276a:	3304      	adds	r3, #4
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	0c1b      	lsrs	r3, r3, #16
 8002770:	b29a      	uxth	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	011b      	lsls	r3, r3, #4
 800277e:	4413      	add	r3, r2
 8002780:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	b2da      	uxtb	r2, r3
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	011b      	lsls	r3, r3, #4
 8002794:	4413      	add	r3, r2
 8002796:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	0a1a      	lsrs	r2, r3, #8
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	3301      	adds	r3, #1
 80027a2:	b2d2      	uxtb	r2, r2
 80027a4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	011b      	lsls	r3, r3, #4
 80027ae:	4413      	add	r3, r2
 80027b0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	0c1a      	lsrs	r2, r3, #16
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	3302      	adds	r3, #2
 80027bc:	b2d2      	uxtb	r2, r2
 80027be:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	011b      	lsls	r3, r3, #4
 80027c8:	4413      	add	r3, r2
 80027ca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	0e1a      	lsrs	r2, r3, #24
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	3303      	adds	r3, #3
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	011b      	lsls	r3, r3, #4
 80027e2:	4413      	add	r3, r2
 80027e4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	3304      	adds	r3, #4
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	011b      	lsls	r3, r3, #4
 80027fa:	4413      	add	r3, r2
 80027fc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	0a1a      	lsrs	r2, r3, #8
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	3305      	adds	r3, #5
 8002808:	b2d2      	uxtb	r2, r2
 800280a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	011b      	lsls	r3, r3, #4
 8002814:	4413      	add	r3, r2
 8002816:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	0c1a      	lsrs	r2, r3, #16
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	3306      	adds	r3, #6
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	011b      	lsls	r3, r3, #4
 800282e:	4413      	add	r3, r2
 8002830:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	0e1a      	lsrs	r2, r3, #24
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	3307      	adds	r3, #7
 800283c:	b2d2      	uxtb	r2, r2
 800283e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d108      	bne.n	8002858 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68da      	ldr	r2, [r3, #12]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f042 0220 	orr.w	r2, r2, #32
 8002854:	60da      	str	r2, [r3, #12]
 8002856:	e007      	b.n	8002868 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	691a      	ldr	r2, [r3, #16]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f042 0220 	orr.w	r2, r2, #32
 8002866:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002868:	2300      	movs	r3, #0
 800286a:	e006      	b.n	800287a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
  }
}
 800287a:	4618      	mov	r0, r3
 800287c:	371c      	adds	r7, #28
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr

08002884 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002894:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002896:	7bfb      	ldrb	r3, [r7, #15]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d002      	beq.n	80028a2 <HAL_CAN_ActivateNotification+0x1e>
 800289c:	7bfb      	ldrb	r3, [r7, #15]
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d109      	bne.n	80028b6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	6959      	ldr	r1, [r3, #20]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80028b2:	2300      	movs	r3, #0
 80028b4:	e006      	b.n	80028c4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
  }
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3714      	adds	r7, #20
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bc80      	pop	{r7}
 80028cc:	4770      	bx	lr

080028ce <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b08a      	sub	sp, #40	; 0x28
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80028d6:	2300      	movs	r3, #0
 80028d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	695b      	ldr	r3, [r3, #20]
 80028e0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800290a:	6a3b      	ldr	r3, [r7, #32]
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	2b00      	cmp	r3, #0
 8002912:	d07c      	beq.n	8002a0e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	2b00      	cmp	r3, #0
 800291c:	d023      	beq.n	8002966 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2201      	movs	r2, #1
 8002924:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d003      	beq.n	8002938 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 f983 	bl	8002c3c <HAL_CAN_TxMailbox0CompleteCallback>
 8002936:	e016      	b.n	8002966 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	f003 0304 	and.w	r3, r3, #4
 800293e:	2b00      	cmp	r3, #0
 8002940:	d004      	beq.n	800294c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002948:	627b      	str	r3, [r7, #36]	; 0x24
 800294a:	e00c      	b.n	8002966 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	f003 0308 	and.w	r3, r3, #8
 8002952:	2b00      	cmp	r3, #0
 8002954:	d004      	beq.n	8002960 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800295c:	627b      	str	r3, [r7, #36]	; 0x24
 800295e:	e002      	b.n	8002966 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f000 f986 	bl	8002c72 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800296c:	2b00      	cmp	r3, #0
 800296e:	d024      	beq.n	80029ba <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002978:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002980:	2b00      	cmp	r3, #0
 8002982:	d003      	beq.n	800298c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 f962 	bl	8002c4e <HAL_CAN_TxMailbox1CompleteCallback>
 800298a:	e016      	b.n	80029ba <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002992:	2b00      	cmp	r3, #0
 8002994:	d004      	beq.n	80029a0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800299c:	627b      	str	r3, [r7, #36]	; 0x24
 800299e:	e00c      	b.n	80029ba <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d004      	beq.n	80029b4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029b0:	627b      	str	r3, [r7, #36]	; 0x24
 80029b2:	e002      	b.n	80029ba <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 f965 	bl	8002c84 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d024      	beq.n	8002a0e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80029cc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d003      	beq.n	80029e0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 f941 	bl	8002c60 <HAL_CAN_TxMailbox2CompleteCallback>
 80029de:	e016      	b.n	8002a0e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d004      	beq.n	80029f4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80029ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029f0:	627b      	str	r3, [r7, #36]	; 0x24
 80029f2:	e00c      	b.n	8002a0e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d004      	beq.n	8002a08 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80029fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a04:	627b      	str	r3, [r7, #36]	; 0x24
 8002a06:	e002      	b.n	8002a0e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 f944 	bl	8002c96 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
 8002a10:	f003 0308 	and.w	r3, r3, #8
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00c      	beq.n	8002a32 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	f003 0310 	and.w	r3, r3, #16
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d007      	beq.n	8002a32 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a28:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2210      	movs	r2, #16
 8002a30:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002a32:	6a3b      	ldr	r3, [r7, #32]
 8002a34:	f003 0304 	and.w	r3, r3, #4
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00b      	beq.n	8002a54 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	f003 0308 	and.w	r3, r3, #8
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d006      	beq.n	8002a54 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2208      	movs	r2, #8
 8002a4c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 f92a 	bl	8002ca8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002a54:	6a3b      	ldr	r3, [r7, #32]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d009      	beq.n	8002a72 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	f003 0303 	and.w	r3, r3, #3
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d002      	beq.n	8002a72 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f7fe fe91 	bl	8001794 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002a72:	6a3b      	ldr	r3, [r7, #32]
 8002a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00c      	beq.n	8002a96 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	f003 0310 	and.w	r3, r3, #16
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d007      	beq.n	8002a96 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a8c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2210      	movs	r2, #16
 8002a94:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002a96:	6a3b      	ldr	r3, [r7, #32]
 8002a98:	f003 0320 	and.w	r3, r3, #32
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00b      	beq.n	8002ab8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	f003 0308 	and.w	r3, r3, #8
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d006      	beq.n	8002ab8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2208      	movs	r2, #8
 8002ab0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f90a 	bl	8002ccc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002ab8:	6a3b      	ldr	r3, [r7, #32]
 8002aba:	f003 0310 	and.w	r3, r3, #16
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d009      	beq.n	8002ad6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	f003 0303 	and.w	r3, r3, #3
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d002      	beq.n	8002ad6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 f8f2 	bl	8002cba <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002ad6:	6a3b      	ldr	r3, [r7, #32]
 8002ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00b      	beq.n	8002af8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	f003 0310 	and.w	r3, r3, #16
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d006      	beq.n	8002af8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2210      	movs	r2, #16
 8002af0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f8f3 	bl	8002cde <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002af8:	6a3b      	ldr	r3, [r7, #32]
 8002afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00b      	beq.n	8002b1a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	f003 0308 	and.w	r3, r3, #8
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d006      	beq.n	8002b1a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2208      	movs	r2, #8
 8002b12:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 f8eb 	bl	8002cf0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002b1a:	6a3b      	ldr	r3, [r7, #32]
 8002b1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d07b      	beq.n	8002c1c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	f003 0304 	and.w	r3, r3, #4
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d072      	beq.n	8002c14 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002b2e:	6a3b      	ldr	r3, [r7, #32]
 8002b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d008      	beq.n	8002b4a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b44:	f043 0301 	orr.w	r3, r3, #1
 8002b48:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002b4a:	6a3b      	ldr	r3, [r7, #32]
 8002b4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d008      	beq.n	8002b66 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	f043 0302 	orr.w	r3, r3, #2
 8002b64:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002b66:	6a3b      	ldr	r3, [r7, #32]
 8002b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d008      	beq.n	8002b82 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	f043 0304 	orr.w	r3, r3, #4
 8002b80:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002b82:	6a3b      	ldr	r3, [r7, #32]
 8002b84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d043      	beq.n	8002c14 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d03e      	beq.n	8002c14 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b9c:	2b60      	cmp	r3, #96	; 0x60
 8002b9e:	d02b      	beq.n	8002bf8 <HAL_CAN_IRQHandler+0x32a>
 8002ba0:	2b60      	cmp	r3, #96	; 0x60
 8002ba2:	d82e      	bhi.n	8002c02 <HAL_CAN_IRQHandler+0x334>
 8002ba4:	2b50      	cmp	r3, #80	; 0x50
 8002ba6:	d022      	beq.n	8002bee <HAL_CAN_IRQHandler+0x320>
 8002ba8:	2b50      	cmp	r3, #80	; 0x50
 8002baa:	d82a      	bhi.n	8002c02 <HAL_CAN_IRQHandler+0x334>
 8002bac:	2b40      	cmp	r3, #64	; 0x40
 8002bae:	d019      	beq.n	8002be4 <HAL_CAN_IRQHandler+0x316>
 8002bb0:	2b40      	cmp	r3, #64	; 0x40
 8002bb2:	d826      	bhi.n	8002c02 <HAL_CAN_IRQHandler+0x334>
 8002bb4:	2b30      	cmp	r3, #48	; 0x30
 8002bb6:	d010      	beq.n	8002bda <HAL_CAN_IRQHandler+0x30c>
 8002bb8:	2b30      	cmp	r3, #48	; 0x30
 8002bba:	d822      	bhi.n	8002c02 <HAL_CAN_IRQHandler+0x334>
 8002bbc:	2b10      	cmp	r3, #16
 8002bbe:	d002      	beq.n	8002bc6 <HAL_CAN_IRQHandler+0x2f8>
 8002bc0:	2b20      	cmp	r3, #32
 8002bc2:	d005      	beq.n	8002bd0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002bc4:	e01d      	b.n	8002c02 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc8:	f043 0308 	orr.w	r3, r3, #8
 8002bcc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bce:	e019      	b.n	8002c04 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd2:	f043 0310 	orr.w	r3, r3, #16
 8002bd6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bd8:	e014      	b.n	8002c04 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bdc:	f043 0320 	orr.w	r3, r3, #32
 8002be0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002be2:	e00f      	b.n	8002c04 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bec:	e00a      	b.n	8002c04 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bf4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bf6:	e005      	b.n	8002c04 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bfe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002c00:	e000      	b.n	8002c04 <HAL_CAN_IRQHandler+0x336>
            break;
 8002c02:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	699a      	ldr	r2, [r3, #24]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002c12:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2204      	movs	r2, #4
 8002c1a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d008      	beq.n	8002c34 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c28:	431a      	orrs	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f867 	bl	8002d02 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002c34:	bf00      	nop
 8002c36:	3728      	adds	r7, #40	; 0x28
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bc80      	pop	{r7}
 8002c4c:	4770      	bx	lr

08002c4e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b083      	sub	sp, #12
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002c56:	bf00      	nop
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bc80      	pop	{r7}
 8002c5e:	4770      	bx	lr

08002c60 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bc80      	pop	{r7}
 8002c70:	4770      	bx	lr

08002c72 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002c7a:	bf00      	nop
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bc80      	pop	{r7}
 8002c82:	4770      	bx	lr

08002c84 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bc80      	pop	{r7}
 8002c94:	4770      	bx	lr

08002c96 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b083      	sub	sp, #12
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002c9e:	bf00      	nop
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bc80      	pop	{r7}
 8002ca6:	4770      	bx	lr

08002ca8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bc80      	pop	{r7}
 8002cb8:	4770      	bx	lr

08002cba <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b083      	sub	sp, #12
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002cc2:	bf00      	nop
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bc80      	pop	{r7}
 8002cca:	4770      	bx	lr

08002ccc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bc80      	pop	{r7}
 8002cdc:	4770      	bx	lr

08002cde <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	b083      	sub	sp, #12
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002ce6:	bf00      	nop
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bc80      	pop	{r7}
 8002cee:	4770      	bx	lr

08002cf0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bc80      	pop	{r7}
 8002d00:	4770      	bx	lr

08002d02 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b083      	sub	sp, #12
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bc80      	pop	{r7}
 8002d12:	4770      	bx	lr

08002d14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f003 0307 	and.w	r3, r3, #7
 8002d22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d24:	4b0c      	ldr	r3, [pc, #48]	; (8002d58 <__NVIC_SetPriorityGrouping+0x44>)
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d2a:	68ba      	ldr	r2, [r7, #8]
 8002d2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d30:	4013      	ands	r3, r2
 8002d32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d46:	4a04      	ldr	r2, [pc, #16]	; (8002d58 <__NVIC_SetPriorityGrouping+0x44>)
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	60d3      	str	r3, [r2, #12]
}
 8002d4c:	bf00      	nop
 8002d4e:	3714      	adds	r7, #20
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bc80      	pop	{r7}
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	e000ed00 	.word	0xe000ed00

08002d5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d60:	4b04      	ldr	r3, [pc, #16]	; (8002d74 <__NVIC_GetPriorityGrouping+0x18>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	0a1b      	lsrs	r3, r3, #8
 8002d66:	f003 0307 	and.w	r3, r3, #7
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bc80      	pop	{r7}
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	e000ed00 	.word	0xe000ed00

08002d78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	4603      	mov	r3, r0
 8002d80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	db0b      	blt.n	8002da2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d8a:	79fb      	ldrb	r3, [r7, #7]
 8002d8c:	f003 021f 	and.w	r2, r3, #31
 8002d90:	4906      	ldr	r1, [pc, #24]	; (8002dac <__NVIC_EnableIRQ+0x34>)
 8002d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d96:	095b      	lsrs	r3, r3, #5
 8002d98:	2001      	movs	r0, #1
 8002d9a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002da2:	bf00      	nop
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bc80      	pop	{r7}
 8002daa:	4770      	bx	lr
 8002dac:	e000e100 	.word	0xe000e100

08002db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	4603      	mov	r3, r0
 8002db8:	6039      	str	r1, [r7, #0]
 8002dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	db0a      	blt.n	8002dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	b2da      	uxtb	r2, r3
 8002dc8:	490c      	ldr	r1, [pc, #48]	; (8002dfc <__NVIC_SetPriority+0x4c>)
 8002dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dce:	0112      	lsls	r2, r2, #4
 8002dd0:	b2d2      	uxtb	r2, r2
 8002dd2:	440b      	add	r3, r1
 8002dd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dd8:	e00a      	b.n	8002df0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	4908      	ldr	r1, [pc, #32]	; (8002e00 <__NVIC_SetPriority+0x50>)
 8002de0:	79fb      	ldrb	r3, [r7, #7]
 8002de2:	f003 030f 	and.w	r3, r3, #15
 8002de6:	3b04      	subs	r3, #4
 8002de8:	0112      	lsls	r2, r2, #4
 8002dea:	b2d2      	uxtb	r2, r2
 8002dec:	440b      	add	r3, r1
 8002dee:	761a      	strb	r2, [r3, #24]
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bc80      	pop	{r7}
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	e000e100 	.word	0xe000e100
 8002e00:	e000ed00 	.word	0xe000ed00

08002e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b089      	sub	sp, #36	; 0x24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f003 0307 	and.w	r3, r3, #7
 8002e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	f1c3 0307 	rsb	r3, r3, #7
 8002e1e:	2b04      	cmp	r3, #4
 8002e20:	bf28      	it	cs
 8002e22:	2304      	movcs	r3, #4
 8002e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	3304      	adds	r3, #4
 8002e2a:	2b06      	cmp	r3, #6
 8002e2c:	d902      	bls.n	8002e34 <NVIC_EncodePriority+0x30>
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	3b03      	subs	r3, #3
 8002e32:	e000      	b.n	8002e36 <NVIC_EncodePriority+0x32>
 8002e34:	2300      	movs	r3, #0
 8002e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e38:	f04f 32ff 	mov.w	r2, #4294967295
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	43da      	mvns	r2, r3
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	401a      	ands	r2, r3
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	fa01 f303 	lsl.w	r3, r1, r3
 8002e56:	43d9      	mvns	r1, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e5c:	4313      	orrs	r3, r2
         );
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3724      	adds	r7, #36	; 0x24
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bc80      	pop	{r7}
 8002e66:	4770      	bx	lr

08002e68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3b01      	subs	r3, #1
 8002e74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e78:	d301      	bcc.n	8002e7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e00f      	b.n	8002e9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e7e:	4a0a      	ldr	r2, [pc, #40]	; (8002ea8 <SysTick_Config+0x40>)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	3b01      	subs	r3, #1
 8002e84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e86:	210f      	movs	r1, #15
 8002e88:	f04f 30ff 	mov.w	r0, #4294967295
 8002e8c:	f7ff ff90 	bl	8002db0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e90:	4b05      	ldr	r3, [pc, #20]	; (8002ea8 <SysTick_Config+0x40>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e96:	4b04      	ldr	r3, [pc, #16]	; (8002ea8 <SysTick_Config+0x40>)
 8002e98:	2207      	movs	r2, #7
 8002e9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	e000e010 	.word	0xe000e010

08002eac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f7ff ff2d 	bl	8002d14 <__NVIC_SetPriorityGrouping>
}
 8002eba:	bf00      	nop
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b086      	sub	sp, #24
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	4603      	mov	r3, r0
 8002eca:	60b9      	str	r1, [r7, #8]
 8002ecc:	607a      	str	r2, [r7, #4]
 8002ece:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ed4:	f7ff ff42 	bl	8002d5c <__NVIC_GetPriorityGrouping>
 8002ed8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	68b9      	ldr	r1, [r7, #8]
 8002ede:	6978      	ldr	r0, [r7, #20]
 8002ee0:	f7ff ff90 	bl	8002e04 <NVIC_EncodePriority>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eea:	4611      	mov	r1, r2
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff ff5f 	bl	8002db0 <__NVIC_SetPriority>
}
 8002ef2:	bf00      	nop
 8002ef4:	3718      	adds	r7, #24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b082      	sub	sp, #8
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	4603      	mov	r3, r0
 8002f02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff ff35 	bl	8002d78 <__NVIC_EnableIRQ>
}
 8002f0e:	bf00      	nop
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b082      	sub	sp, #8
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f7ff ffa2 	bl	8002e68 <SysTick_Config>
 8002f24:	4603      	mov	r3, r0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
	...

08002f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b08b      	sub	sp, #44	; 0x2c
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f42:	e169      	b.n	8003218 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f44:	2201      	movs	r2, #1
 8002f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	69fa      	ldr	r2, [r7, #28]
 8002f54:	4013      	ands	r3, r2
 8002f56:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	f040 8158 	bne.w	8003212 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	4a9a      	ldr	r2, [pc, #616]	; (80031d0 <HAL_GPIO_Init+0x2a0>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d05e      	beq.n	800302a <HAL_GPIO_Init+0xfa>
 8002f6c:	4a98      	ldr	r2, [pc, #608]	; (80031d0 <HAL_GPIO_Init+0x2a0>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d875      	bhi.n	800305e <HAL_GPIO_Init+0x12e>
 8002f72:	4a98      	ldr	r2, [pc, #608]	; (80031d4 <HAL_GPIO_Init+0x2a4>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d058      	beq.n	800302a <HAL_GPIO_Init+0xfa>
 8002f78:	4a96      	ldr	r2, [pc, #600]	; (80031d4 <HAL_GPIO_Init+0x2a4>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d86f      	bhi.n	800305e <HAL_GPIO_Init+0x12e>
 8002f7e:	4a96      	ldr	r2, [pc, #600]	; (80031d8 <HAL_GPIO_Init+0x2a8>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d052      	beq.n	800302a <HAL_GPIO_Init+0xfa>
 8002f84:	4a94      	ldr	r2, [pc, #592]	; (80031d8 <HAL_GPIO_Init+0x2a8>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d869      	bhi.n	800305e <HAL_GPIO_Init+0x12e>
 8002f8a:	4a94      	ldr	r2, [pc, #592]	; (80031dc <HAL_GPIO_Init+0x2ac>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d04c      	beq.n	800302a <HAL_GPIO_Init+0xfa>
 8002f90:	4a92      	ldr	r2, [pc, #584]	; (80031dc <HAL_GPIO_Init+0x2ac>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d863      	bhi.n	800305e <HAL_GPIO_Init+0x12e>
 8002f96:	4a92      	ldr	r2, [pc, #584]	; (80031e0 <HAL_GPIO_Init+0x2b0>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d046      	beq.n	800302a <HAL_GPIO_Init+0xfa>
 8002f9c:	4a90      	ldr	r2, [pc, #576]	; (80031e0 <HAL_GPIO_Init+0x2b0>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d85d      	bhi.n	800305e <HAL_GPIO_Init+0x12e>
 8002fa2:	2b12      	cmp	r3, #18
 8002fa4:	d82a      	bhi.n	8002ffc <HAL_GPIO_Init+0xcc>
 8002fa6:	2b12      	cmp	r3, #18
 8002fa8:	d859      	bhi.n	800305e <HAL_GPIO_Init+0x12e>
 8002faa:	a201      	add	r2, pc, #4	; (adr r2, 8002fb0 <HAL_GPIO_Init+0x80>)
 8002fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb0:	0800302b 	.word	0x0800302b
 8002fb4:	08003005 	.word	0x08003005
 8002fb8:	08003017 	.word	0x08003017
 8002fbc:	08003059 	.word	0x08003059
 8002fc0:	0800305f 	.word	0x0800305f
 8002fc4:	0800305f 	.word	0x0800305f
 8002fc8:	0800305f 	.word	0x0800305f
 8002fcc:	0800305f 	.word	0x0800305f
 8002fd0:	0800305f 	.word	0x0800305f
 8002fd4:	0800305f 	.word	0x0800305f
 8002fd8:	0800305f 	.word	0x0800305f
 8002fdc:	0800305f 	.word	0x0800305f
 8002fe0:	0800305f 	.word	0x0800305f
 8002fe4:	0800305f 	.word	0x0800305f
 8002fe8:	0800305f 	.word	0x0800305f
 8002fec:	0800305f 	.word	0x0800305f
 8002ff0:	0800305f 	.word	0x0800305f
 8002ff4:	0800300d 	.word	0x0800300d
 8002ff8:	08003021 	.word	0x08003021
 8002ffc:	4a79      	ldr	r2, [pc, #484]	; (80031e4 <HAL_GPIO_Init+0x2b4>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d013      	beq.n	800302a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003002:	e02c      	b.n	800305e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	623b      	str	r3, [r7, #32]
          break;
 800300a:	e029      	b.n	8003060 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	3304      	adds	r3, #4
 8003012:	623b      	str	r3, [r7, #32]
          break;
 8003014:	e024      	b.n	8003060 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	3308      	adds	r3, #8
 800301c:	623b      	str	r3, [r7, #32]
          break;
 800301e:	e01f      	b.n	8003060 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	330c      	adds	r3, #12
 8003026:	623b      	str	r3, [r7, #32]
          break;
 8003028:	e01a      	b.n	8003060 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d102      	bne.n	8003038 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003032:	2304      	movs	r3, #4
 8003034:	623b      	str	r3, [r7, #32]
          break;
 8003036:	e013      	b.n	8003060 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d105      	bne.n	800304c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003040:	2308      	movs	r3, #8
 8003042:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	69fa      	ldr	r2, [r7, #28]
 8003048:	611a      	str	r2, [r3, #16]
          break;
 800304a:	e009      	b.n	8003060 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800304c:	2308      	movs	r3, #8
 800304e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	69fa      	ldr	r2, [r7, #28]
 8003054:	615a      	str	r2, [r3, #20]
          break;
 8003056:	e003      	b.n	8003060 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003058:	2300      	movs	r3, #0
 800305a:	623b      	str	r3, [r7, #32]
          break;
 800305c:	e000      	b.n	8003060 <HAL_GPIO_Init+0x130>
          break;
 800305e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	2bff      	cmp	r3, #255	; 0xff
 8003064:	d801      	bhi.n	800306a <HAL_GPIO_Init+0x13a>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	e001      	b.n	800306e <HAL_GPIO_Init+0x13e>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	3304      	adds	r3, #4
 800306e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	2bff      	cmp	r3, #255	; 0xff
 8003074:	d802      	bhi.n	800307c <HAL_GPIO_Init+0x14c>
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	e002      	b.n	8003082 <HAL_GPIO_Init+0x152>
 800307c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307e:	3b08      	subs	r3, #8
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	210f      	movs	r1, #15
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	fa01 f303 	lsl.w	r3, r1, r3
 8003090:	43db      	mvns	r3, r3
 8003092:	401a      	ands	r2, r3
 8003094:	6a39      	ldr	r1, [r7, #32]
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	fa01 f303 	lsl.w	r3, r1, r3
 800309c:	431a      	orrs	r2, r3
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f000 80b1 	beq.w	8003212 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80030b0:	4b4d      	ldr	r3, [pc, #308]	; (80031e8 <HAL_GPIO_Init+0x2b8>)
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	4a4c      	ldr	r2, [pc, #304]	; (80031e8 <HAL_GPIO_Init+0x2b8>)
 80030b6:	f043 0301 	orr.w	r3, r3, #1
 80030ba:	6193      	str	r3, [r2, #24]
 80030bc:	4b4a      	ldr	r3, [pc, #296]	; (80031e8 <HAL_GPIO_Init+0x2b8>)
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	60bb      	str	r3, [r7, #8]
 80030c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80030c8:	4a48      	ldr	r2, [pc, #288]	; (80031ec <HAL_GPIO_Init+0x2bc>)
 80030ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030cc:	089b      	lsrs	r3, r3, #2
 80030ce:	3302      	adds	r3, #2
 80030d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80030d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d8:	f003 0303 	and.w	r3, r3, #3
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	220f      	movs	r2, #15
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	43db      	mvns	r3, r3
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	4013      	ands	r3, r2
 80030ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a40      	ldr	r2, [pc, #256]	; (80031f0 <HAL_GPIO_Init+0x2c0>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d013      	beq.n	800311c <HAL_GPIO_Init+0x1ec>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a3f      	ldr	r2, [pc, #252]	; (80031f4 <HAL_GPIO_Init+0x2c4>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d00d      	beq.n	8003118 <HAL_GPIO_Init+0x1e8>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a3e      	ldr	r2, [pc, #248]	; (80031f8 <HAL_GPIO_Init+0x2c8>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d007      	beq.n	8003114 <HAL_GPIO_Init+0x1e4>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a3d      	ldr	r2, [pc, #244]	; (80031fc <HAL_GPIO_Init+0x2cc>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d101      	bne.n	8003110 <HAL_GPIO_Init+0x1e0>
 800310c:	2303      	movs	r3, #3
 800310e:	e006      	b.n	800311e <HAL_GPIO_Init+0x1ee>
 8003110:	2304      	movs	r3, #4
 8003112:	e004      	b.n	800311e <HAL_GPIO_Init+0x1ee>
 8003114:	2302      	movs	r3, #2
 8003116:	e002      	b.n	800311e <HAL_GPIO_Init+0x1ee>
 8003118:	2301      	movs	r3, #1
 800311a:	e000      	b.n	800311e <HAL_GPIO_Init+0x1ee>
 800311c:	2300      	movs	r3, #0
 800311e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003120:	f002 0203 	and.w	r2, r2, #3
 8003124:	0092      	lsls	r2, r2, #2
 8003126:	4093      	lsls	r3, r2
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	4313      	orrs	r3, r2
 800312c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800312e:	492f      	ldr	r1, [pc, #188]	; (80031ec <HAL_GPIO_Init+0x2bc>)
 8003130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003132:	089b      	lsrs	r3, r3, #2
 8003134:	3302      	adds	r3, #2
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d006      	beq.n	8003156 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003148:	4b2d      	ldr	r3, [pc, #180]	; (8003200 <HAL_GPIO_Init+0x2d0>)
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	492c      	ldr	r1, [pc, #176]	; (8003200 <HAL_GPIO_Init+0x2d0>)
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	4313      	orrs	r3, r2
 8003152:	608b      	str	r3, [r1, #8]
 8003154:	e006      	b.n	8003164 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003156:	4b2a      	ldr	r3, [pc, #168]	; (8003200 <HAL_GPIO_Init+0x2d0>)
 8003158:	689a      	ldr	r2, [r3, #8]
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	43db      	mvns	r3, r3
 800315e:	4928      	ldr	r1, [pc, #160]	; (8003200 <HAL_GPIO_Init+0x2d0>)
 8003160:	4013      	ands	r3, r2
 8003162:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d006      	beq.n	800317e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003170:	4b23      	ldr	r3, [pc, #140]	; (8003200 <HAL_GPIO_Init+0x2d0>)
 8003172:	68da      	ldr	r2, [r3, #12]
 8003174:	4922      	ldr	r1, [pc, #136]	; (8003200 <HAL_GPIO_Init+0x2d0>)
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	4313      	orrs	r3, r2
 800317a:	60cb      	str	r3, [r1, #12]
 800317c:	e006      	b.n	800318c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800317e:	4b20      	ldr	r3, [pc, #128]	; (8003200 <HAL_GPIO_Init+0x2d0>)
 8003180:	68da      	ldr	r2, [r3, #12]
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	43db      	mvns	r3, r3
 8003186:	491e      	ldr	r1, [pc, #120]	; (8003200 <HAL_GPIO_Init+0x2d0>)
 8003188:	4013      	ands	r3, r2
 800318a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d006      	beq.n	80031a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003198:	4b19      	ldr	r3, [pc, #100]	; (8003200 <HAL_GPIO_Init+0x2d0>)
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	4918      	ldr	r1, [pc, #96]	; (8003200 <HAL_GPIO_Init+0x2d0>)
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	604b      	str	r3, [r1, #4]
 80031a4:	e006      	b.n	80031b4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80031a6:	4b16      	ldr	r3, [pc, #88]	; (8003200 <HAL_GPIO_Init+0x2d0>)
 80031a8:	685a      	ldr	r2, [r3, #4]
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	43db      	mvns	r3, r3
 80031ae:	4914      	ldr	r1, [pc, #80]	; (8003200 <HAL_GPIO_Init+0x2d0>)
 80031b0:	4013      	ands	r3, r2
 80031b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d021      	beq.n	8003204 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80031c0:	4b0f      	ldr	r3, [pc, #60]	; (8003200 <HAL_GPIO_Init+0x2d0>)
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	490e      	ldr	r1, [pc, #56]	; (8003200 <HAL_GPIO_Init+0x2d0>)
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	600b      	str	r3, [r1, #0]
 80031cc:	e021      	b.n	8003212 <HAL_GPIO_Init+0x2e2>
 80031ce:	bf00      	nop
 80031d0:	10320000 	.word	0x10320000
 80031d4:	10310000 	.word	0x10310000
 80031d8:	10220000 	.word	0x10220000
 80031dc:	10210000 	.word	0x10210000
 80031e0:	10120000 	.word	0x10120000
 80031e4:	10110000 	.word	0x10110000
 80031e8:	40021000 	.word	0x40021000
 80031ec:	40010000 	.word	0x40010000
 80031f0:	40010800 	.word	0x40010800
 80031f4:	40010c00 	.word	0x40010c00
 80031f8:	40011000 	.word	0x40011000
 80031fc:	40011400 	.word	0x40011400
 8003200:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003204:	4b0b      	ldr	r3, [pc, #44]	; (8003234 <HAL_GPIO_Init+0x304>)
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	43db      	mvns	r3, r3
 800320c:	4909      	ldr	r1, [pc, #36]	; (8003234 <HAL_GPIO_Init+0x304>)
 800320e:	4013      	ands	r3, r2
 8003210:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003214:	3301      	adds	r3, #1
 8003216:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321e:	fa22 f303 	lsr.w	r3, r2, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	f47f ae8e 	bne.w	8002f44 <HAL_GPIO_Init+0x14>
  }
}
 8003228:	bf00      	nop
 800322a:	bf00      	nop
 800322c:	372c      	adds	r7, #44	; 0x2c
 800322e:	46bd      	mov	sp, r7
 8003230:	bc80      	pop	{r7}
 8003232:	4770      	bx	lr
 8003234:	40010400 	.word	0x40010400

08003238 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	460b      	mov	r3, r1
 8003242:	807b      	strh	r3, [r7, #2]
 8003244:	4613      	mov	r3, r2
 8003246:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003248:	787b      	ldrb	r3, [r7, #1]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d003      	beq.n	8003256 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800324e:	887a      	ldrh	r2, [r7, #2]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003254:	e003      	b.n	800325e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003256:	887b      	ldrh	r3, [r7, #2]
 8003258:	041a      	lsls	r2, r3, #16
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	611a      	str	r2, [r3, #16]
}
 800325e:	bf00      	nop
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	bc80      	pop	{r7}
 8003266:	4770      	bx	lr

08003268 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	4603      	mov	r3, r0
 8003270:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003272:	4b08      	ldr	r3, [pc, #32]	; (8003294 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003274:	695a      	ldr	r2, [r3, #20]
 8003276:	88fb      	ldrh	r3, [r7, #6]
 8003278:	4013      	ands	r3, r2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d006      	beq.n	800328c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800327e:	4a05      	ldr	r2, [pc, #20]	; (8003294 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003280:	88fb      	ldrh	r3, [r7, #6]
 8003282:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003284:	88fb      	ldrh	r3, [r7, #6]
 8003286:	4618      	mov	r0, r3
 8003288:	f7fe fcf8 	bl	8001c7c <HAL_GPIO_EXTI_Callback>
  }
}
 800328c:	bf00      	nop
 800328e:	3708      	adds	r7, #8
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40010400 	.word	0x40010400

08003298 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e12b      	b.n	8003502 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d106      	bne.n	80032c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7fe fd7e 	bl	8001dc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2224      	movs	r2, #36	; 0x24
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 0201 	bic.w	r2, r2, #1
 80032da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032fc:	f001 fa18 	bl	8004730 <HAL_RCC_GetPCLK1Freq>
 8003300:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	4a81      	ldr	r2, [pc, #516]	; (800350c <HAL_I2C_Init+0x274>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d807      	bhi.n	800331c <HAL_I2C_Init+0x84>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	4a80      	ldr	r2, [pc, #512]	; (8003510 <HAL_I2C_Init+0x278>)
 8003310:	4293      	cmp	r3, r2
 8003312:	bf94      	ite	ls
 8003314:	2301      	movls	r3, #1
 8003316:	2300      	movhi	r3, #0
 8003318:	b2db      	uxtb	r3, r3
 800331a:	e006      	b.n	800332a <HAL_I2C_Init+0x92>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	4a7d      	ldr	r2, [pc, #500]	; (8003514 <HAL_I2C_Init+0x27c>)
 8003320:	4293      	cmp	r3, r2
 8003322:	bf94      	ite	ls
 8003324:	2301      	movls	r3, #1
 8003326:	2300      	movhi	r3, #0
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e0e7      	b.n	8003502 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	4a78      	ldr	r2, [pc, #480]	; (8003518 <HAL_I2C_Init+0x280>)
 8003336:	fba2 2303 	umull	r2, r3, r2, r3
 800333a:	0c9b      	lsrs	r3, r3, #18
 800333c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68ba      	ldr	r2, [r7, #8]
 800334e:	430a      	orrs	r2, r1
 8003350:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	4a6a      	ldr	r2, [pc, #424]	; (800350c <HAL_I2C_Init+0x274>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d802      	bhi.n	800336c <HAL_I2C_Init+0xd4>
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	3301      	adds	r3, #1
 800336a:	e009      	b.n	8003380 <HAL_I2C_Init+0xe8>
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003372:	fb02 f303 	mul.w	r3, r2, r3
 8003376:	4a69      	ldr	r2, [pc, #420]	; (800351c <HAL_I2C_Init+0x284>)
 8003378:	fba2 2303 	umull	r2, r3, r2, r3
 800337c:	099b      	lsrs	r3, r3, #6
 800337e:	3301      	adds	r3, #1
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	6812      	ldr	r2, [r2, #0]
 8003384:	430b      	orrs	r3, r1
 8003386:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	69db      	ldr	r3, [r3, #28]
 800338e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003392:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	495c      	ldr	r1, [pc, #368]	; (800350c <HAL_I2C_Init+0x274>)
 800339c:	428b      	cmp	r3, r1
 800339e:	d819      	bhi.n	80033d4 <HAL_I2C_Init+0x13c>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	1e59      	subs	r1, r3, #1
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80033ae:	1c59      	adds	r1, r3, #1
 80033b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80033b4:	400b      	ands	r3, r1
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00a      	beq.n	80033d0 <HAL_I2C_Init+0x138>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	1e59      	subs	r1, r3, #1
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80033c8:	3301      	adds	r3, #1
 80033ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033ce:	e051      	b.n	8003474 <HAL_I2C_Init+0x1dc>
 80033d0:	2304      	movs	r3, #4
 80033d2:	e04f      	b.n	8003474 <HAL_I2C_Init+0x1dc>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d111      	bne.n	8003400 <HAL_I2C_Init+0x168>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	1e58      	subs	r0, r3, #1
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6859      	ldr	r1, [r3, #4]
 80033e4:	460b      	mov	r3, r1
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	440b      	add	r3, r1
 80033ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80033ee:	3301      	adds	r3, #1
 80033f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	bf0c      	ite	eq
 80033f8:	2301      	moveq	r3, #1
 80033fa:	2300      	movne	r3, #0
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	e012      	b.n	8003426 <HAL_I2C_Init+0x18e>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	1e58      	subs	r0, r3, #1
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6859      	ldr	r1, [r3, #4]
 8003408:	460b      	mov	r3, r1
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	0099      	lsls	r1, r3, #2
 8003410:	440b      	add	r3, r1
 8003412:	fbb0 f3f3 	udiv	r3, r0, r3
 8003416:	3301      	adds	r3, #1
 8003418:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800341c:	2b00      	cmp	r3, #0
 800341e:	bf0c      	ite	eq
 8003420:	2301      	moveq	r3, #1
 8003422:	2300      	movne	r3, #0
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <HAL_I2C_Init+0x196>
 800342a:	2301      	movs	r3, #1
 800342c:	e022      	b.n	8003474 <HAL_I2C_Init+0x1dc>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10e      	bne.n	8003454 <HAL_I2C_Init+0x1bc>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	1e58      	subs	r0, r3, #1
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6859      	ldr	r1, [r3, #4]
 800343e:	460b      	mov	r3, r1
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	440b      	add	r3, r1
 8003444:	fbb0 f3f3 	udiv	r3, r0, r3
 8003448:	3301      	adds	r3, #1
 800344a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800344e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003452:	e00f      	b.n	8003474 <HAL_I2C_Init+0x1dc>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	1e58      	subs	r0, r3, #1
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6859      	ldr	r1, [r3, #4]
 800345c:	460b      	mov	r3, r1
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	440b      	add	r3, r1
 8003462:	0099      	lsls	r1, r3, #2
 8003464:	440b      	add	r3, r1
 8003466:	fbb0 f3f3 	udiv	r3, r0, r3
 800346a:	3301      	adds	r3, #1
 800346c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003470:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003474:	6879      	ldr	r1, [r7, #4]
 8003476:	6809      	ldr	r1, [r1, #0]
 8003478:	4313      	orrs	r3, r2
 800347a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	69da      	ldr	r2, [r3, #28]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	431a      	orrs	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	430a      	orrs	r2, r1
 8003496:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80034a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	6911      	ldr	r1, [r2, #16]
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	68d2      	ldr	r2, [r2, #12]
 80034ae:	4311      	orrs	r1, r2
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	6812      	ldr	r2, [r2, #0]
 80034b4:	430b      	orrs	r3, r1
 80034b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	695a      	ldr	r2, [r3, #20]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	431a      	orrs	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	430a      	orrs	r2, r1
 80034d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f042 0201 	orr.w	r2, r2, #1
 80034e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2220      	movs	r2, #32
 80034ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	000186a0 	.word	0x000186a0
 8003510:	001e847f 	.word	0x001e847f
 8003514:	003d08ff 	.word	0x003d08ff
 8003518:	431bde83 	.word	0x431bde83
 800351c:	10624dd3 	.word	0x10624dd3

08003520 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b08c      	sub	sp, #48	; 0x30
 8003524:	af02      	add	r7, sp, #8
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	4608      	mov	r0, r1
 800352a:	4611      	mov	r1, r2
 800352c:	461a      	mov	r2, r3
 800352e:	4603      	mov	r3, r0
 8003530:	817b      	strh	r3, [r7, #10]
 8003532:	460b      	mov	r3, r1
 8003534:	813b      	strh	r3, [r7, #8]
 8003536:	4613      	mov	r3, r2
 8003538:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800353a:	2300      	movs	r3, #0
 800353c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800353e:	f7fe fd7b 	bl	8002038 <HAL_GetTick>
 8003542:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b20      	cmp	r3, #32
 800354e:	f040 8244 	bne.w	80039da <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	2319      	movs	r3, #25
 8003558:	2201      	movs	r2, #1
 800355a:	4982      	ldr	r1, [pc, #520]	; (8003764 <HAL_I2C_Mem_Read+0x244>)
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f000 fb2f 	bl	8003bc0 <I2C_WaitOnFlagUntilTimeout>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003568:	2302      	movs	r3, #2
 800356a:	e237      	b.n	80039dc <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003572:	2b01      	cmp	r3, #1
 8003574:	d101      	bne.n	800357a <HAL_I2C_Mem_Read+0x5a>
 8003576:	2302      	movs	r3, #2
 8003578:	e230      	b.n	80039dc <HAL_I2C_Mem_Read+0x4bc>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0301 	and.w	r3, r3, #1
 800358c:	2b01      	cmp	r3, #1
 800358e:	d007      	beq.n	80035a0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f042 0201 	orr.w	r2, r2, #1
 800359e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2222      	movs	r2, #34	; 0x22
 80035b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2240      	movs	r2, #64	; 0x40
 80035bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80035d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	4a62      	ldr	r2, [pc, #392]	; (8003768 <HAL_I2C_Mem_Read+0x248>)
 80035e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035e2:	88f8      	ldrh	r0, [r7, #6]
 80035e4:	893a      	ldrh	r2, [r7, #8]
 80035e6:	8979      	ldrh	r1, [r7, #10]
 80035e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ea:	9301      	str	r3, [sp, #4]
 80035ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ee:	9300      	str	r3, [sp, #0]
 80035f0:	4603      	mov	r3, r0
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f000 f9fc 	bl	80039f0 <I2C_RequestMemoryRead>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e1ec      	b.n	80039dc <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003606:	2b00      	cmp	r3, #0
 8003608:	d113      	bne.n	8003632 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800360a:	2300      	movs	r3, #0
 800360c:	61fb      	str	r3, [r7, #28]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	61fb      	str	r3, [r7, #28]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	61fb      	str	r3, [r7, #28]
 800361e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	e1c0      	b.n	80039b4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003636:	2b01      	cmp	r3, #1
 8003638:	d11e      	bne.n	8003678 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003648:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800364a:	b672      	cpsid	i
}
 800364c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800364e:	2300      	movs	r3, #0
 8003650:	61bb      	str	r3, [r7, #24]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	61bb      	str	r3, [r7, #24]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	61bb      	str	r3, [r7, #24]
 8003662:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003672:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003674:	b662      	cpsie	i
}
 8003676:	e035      	b.n	80036e4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800367c:	2b02      	cmp	r3, #2
 800367e:	d11e      	bne.n	80036be <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800368e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003690:	b672      	cpsid	i
}
 8003692:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003694:	2300      	movs	r3, #0
 8003696:	617b      	str	r3, [r7, #20]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	617b      	str	r3, [r7, #20]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	617b      	str	r3, [r7, #20]
 80036a8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036b8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80036ba:	b662      	cpsie	i
}
 80036bc:	e012      	b.n	80036e4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036cc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ce:	2300      	movs	r3, #0
 80036d0:	613b      	str	r3, [r7, #16]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	695b      	ldr	r3, [r3, #20]
 80036d8:	613b      	str	r3, [r7, #16]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	613b      	str	r3, [r7, #16]
 80036e2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80036e4:	e166      	b.n	80039b4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ea:	2b03      	cmp	r3, #3
 80036ec:	f200 811f 	bhi.w	800392e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d123      	bne.n	8003740 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f000 fbc1 	bl	8003e84 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d001      	beq.n	800370c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e167      	b.n	80039dc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	691a      	ldr	r2, [r3, #16]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003716:	b2d2      	uxtb	r2, r2
 8003718:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371e:	1c5a      	adds	r2, r3, #1
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003728:	3b01      	subs	r3, #1
 800372a:	b29a      	uxth	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003734:	b29b      	uxth	r3, r3
 8003736:	3b01      	subs	r3, #1
 8003738:	b29a      	uxth	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800373e:	e139      	b.n	80039b4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003744:	2b02      	cmp	r3, #2
 8003746:	d152      	bne.n	80037ee <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374a:	9300      	str	r3, [sp, #0]
 800374c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800374e:	2200      	movs	r2, #0
 8003750:	4906      	ldr	r1, [pc, #24]	; (800376c <HAL_I2C_Mem_Read+0x24c>)
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 fa34 	bl	8003bc0 <I2C_WaitOnFlagUntilTimeout>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d008      	beq.n	8003770 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e13c      	b.n	80039dc <HAL_I2C_Mem_Read+0x4bc>
 8003762:	bf00      	nop
 8003764:	00100002 	.word	0x00100002
 8003768:	ffff0000 	.word	0xffff0000
 800376c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003770:	b672      	cpsid	i
}
 8003772:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003782:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	691a      	ldr	r2, [r3, #16]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	b2d2      	uxtb	r2, r2
 8003790:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003796:	1c5a      	adds	r2, r3, #1
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a0:	3b01      	subs	r3, #1
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	3b01      	subs	r3, #1
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80037b6:	b662      	cpsie	i
}
 80037b8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	691a      	ldr	r2, [r3, #16]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c4:	b2d2      	uxtb	r2, r2
 80037c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037cc:	1c5a      	adds	r2, r3, #1
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d6:	3b01      	subs	r3, #1
 80037d8:	b29a      	uxth	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	3b01      	subs	r3, #1
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037ec:	e0e2      	b.n	80039b4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f0:	9300      	str	r3, [sp, #0]
 80037f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f4:	2200      	movs	r2, #0
 80037f6:	497b      	ldr	r1, [pc, #492]	; (80039e4 <HAL_I2C_Mem_Read+0x4c4>)
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f000 f9e1 	bl	8003bc0 <I2C_WaitOnFlagUntilTimeout>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d001      	beq.n	8003808 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e0e9      	b.n	80039dc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003816:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003818:	b672      	cpsid	i
}
 800381a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	691a      	ldr	r2, [r3, #16]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	b2d2      	uxtb	r2, r2
 8003828:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382e:	1c5a      	adds	r2, r3, #1
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003838:	3b01      	subs	r3, #1
 800383a:	b29a      	uxth	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003844:	b29b      	uxth	r3, r3
 8003846:	3b01      	subs	r3, #1
 8003848:	b29a      	uxth	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800384e:	4b66      	ldr	r3, [pc, #408]	; (80039e8 <HAL_I2C_Mem_Read+0x4c8>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	08db      	lsrs	r3, r3, #3
 8003854:	4a65      	ldr	r2, [pc, #404]	; (80039ec <HAL_I2C_Mem_Read+0x4cc>)
 8003856:	fba2 2303 	umull	r2, r3, r2, r3
 800385a:	0a1a      	lsrs	r2, r3, #8
 800385c:	4613      	mov	r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4413      	add	r3, r2
 8003862:	00da      	lsls	r2, r3, #3
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003868:	6a3b      	ldr	r3, [r7, #32]
 800386a:	3b01      	subs	r3, #1
 800386c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800386e:	6a3b      	ldr	r3, [r7, #32]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d118      	bne.n	80038a6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2220      	movs	r2, #32
 800387e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	f043 0220 	orr.w	r2, r3, #32
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003896:	b662      	cpsie	i
}
 8003898:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e09a      	b.n	80039dc <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	f003 0304 	and.w	r3, r3, #4
 80038b0:	2b04      	cmp	r3, #4
 80038b2:	d1d9      	bne.n	8003868 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	691a      	ldr	r2, [r3, #16]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ce:	b2d2      	uxtb	r2, r2
 80038d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d6:	1c5a      	adds	r2, r3, #1
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e0:	3b01      	subs	r3, #1
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	3b01      	subs	r3, #1
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80038f6:	b662      	cpsie	i
}
 80038f8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	691a      	ldr	r2, [r3, #16]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003904:	b2d2      	uxtb	r2, r2
 8003906:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	1c5a      	adds	r2, r3, #1
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003916:	3b01      	subs	r3, #1
 8003918:	b29a      	uxth	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003922:	b29b      	uxth	r3, r3
 8003924:	3b01      	subs	r3, #1
 8003926:	b29a      	uxth	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800392c:	e042      	b.n	80039b4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800392e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003930:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f000 faa6 	bl	8003e84 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e04c      	b.n	80039dc <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	691a      	ldr	r2, [r3, #16]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394c:	b2d2      	uxtb	r2, r2
 800394e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003954:	1c5a      	adds	r2, r3, #1
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800395e:	3b01      	subs	r3, #1
 8003960:	b29a      	uxth	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800396a:	b29b      	uxth	r3, r3
 800396c:	3b01      	subs	r3, #1
 800396e:	b29a      	uxth	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	f003 0304 	and.w	r3, r3, #4
 800397e:	2b04      	cmp	r3, #4
 8003980:	d118      	bne.n	80039b4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	691a      	ldr	r2, [r3, #16]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398c:	b2d2      	uxtb	r2, r2
 800398e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003994:	1c5a      	adds	r2, r3, #1
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800399e:	3b01      	subs	r3, #1
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	3b01      	subs	r3, #1
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f47f ae94 	bne.w	80036e6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2220      	movs	r2, #32
 80039c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80039d6:	2300      	movs	r3, #0
 80039d8:	e000      	b.n	80039dc <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80039da:	2302      	movs	r3, #2
  }
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3728      	adds	r7, #40	; 0x28
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	00010004 	.word	0x00010004
 80039e8:	20000434 	.word	0x20000434
 80039ec:	14f8b589 	.word	0x14f8b589

080039f0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b088      	sub	sp, #32
 80039f4:	af02      	add	r7, sp, #8
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	4608      	mov	r0, r1
 80039fa:	4611      	mov	r1, r2
 80039fc:	461a      	mov	r2, r3
 80039fe:	4603      	mov	r3, r0
 8003a00:	817b      	strh	r3, [r7, #10]
 8003a02:	460b      	mov	r3, r1
 8003a04:	813b      	strh	r3, [r7, #8]
 8003a06:	4613      	mov	r3, r2
 8003a08:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a18:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a28:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	6a3b      	ldr	r3, [r7, #32]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	f000 f8c2 	bl	8003bc0 <I2C_WaitOnFlagUntilTimeout>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00d      	beq.n	8003a5e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a50:	d103      	bne.n	8003a5a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a58:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e0aa      	b.n	8003bb4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a5e:	897b      	ldrh	r3, [r7, #10]
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	461a      	mov	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a6c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a70:	6a3a      	ldr	r2, [r7, #32]
 8003a72:	4952      	ldr	r1, [pc, #328]	; (8003bbc <I2C_RequestMemoryRead+0x1cc>)
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f000 f91d 	bl	8003cb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e097      	b.n	8003bb4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a84:	2300      	movs	r3, #0
 8003a86:	617b      	str	r3, [r7, #20]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	617b      	str	r3, [r7, #20]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	617b      	str	r3, [r7, #20]
 8003a98:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a9c:	6a39      	ldr	r1, [r7, #32]
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f000 f9a8 	bl	8003df4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00d      	beq.n	8003ac6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	2b04      	cmp	r3, #4
 8003ab0:	d107      	bne.n	8003ac2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ac0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e076      	b.n	8003bb4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ac6:	88fb      	ldrh	r3, [r7, #6]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d105      	bne.n	8003ad8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003acc:	893b      	ldrh	r3, [r7, #8]
 8003ace:	b2da      	uxtb	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	611a      	str	r2, [r3, #16]
 8003ad6:	e021      	b.n	8003b1c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ad8:	893b      	ldrh	r3, [r7, #8]
 8003ada:	0a1b      	lsrs	r3, r3, #8
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	b2da      	uxtb	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ae8:	6a39      	ldr	r1, [r7, #32]
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f000 f982 	bl	8003df4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00d      	beq.n	8003b12 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afa:	2b04      	cmp	r3, #4
 8003afc:	d107      	bne.n	8003b0e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b0c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e050      	b.n	8003bb4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b12:	893b      	ldrh	r3, [r7, #8]
 8003b14:	b2da      	uxtb	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b1e:	6a39      	ldr	r1, [r7, #32]
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f000 f967 	bl	8003df4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00d      	beq.n	8003b48 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b30:	2b04      	cmp	r3, #4
 8003b32:	d107      	bne.n	8003b44 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b42:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e035      	b.n	8003bb4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b56:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5a:	9300      	str	r3, [sp, #0]
 8003b5c:	6a3b      	ldr	r3, [r7, #32]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f000 f82b 	bl	8003bc0 <I2C_WaitOnFlagUntilTimeout>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00d      	beq.n	8003b8c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b7e:	d103      	bne.n	8003b88 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e013      	b.n	8003bb4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003b8c:	897b      	ldrh	r3, [r7, #10]
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	f043 0301 	orr.w	r3, r3, #1
 8003b94:	b2da      	uxtb	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9e:	6a3a      	ldr	r2, [r7, #32]
 8003ba0:	4906      	ldr	r1, [pc, #24]	; (8003bbc <I2C_RequestMemoryRead+0x1cc>)
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f000 f886 	bl	8003cb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d001      	beq.n	8003bb2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e000      	b.n	8003bb4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3718      	adds	r7, #24
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	00010002 	.word	0x00010002

08003bc0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	603b      	str	r3, [r7, #0]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bd0:	e048      	b.n	8003c64 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd8:	d044      	beq.n	8003c64 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bda:	f7fe fa2d 	bl	8002038 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	683a      	ldr	r2, [r7, #0]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d302      	bcc.n	8003bf0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d139      	bne.n	8003c64 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	0c1b      	lsrs	r3, r3, #16
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d10d      	bne.n	8003c16 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	695b      	ldr	r3, [r3, #20]
 8003c00:	43da      	mvns	r2, r3
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	4013      	ands	r3, r2
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	bf0c      	ite	eq
 8003c0c:	2301      	moveq	r3, #1
 8003c0e:	2300      	movne	r3, #0
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	461a      	mov	r2, r3
 8003c14:	e00c      	b.n	8003c30 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	43da      	mvns	r2, r3
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	4013      	ands	r3, r2
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	bf0c      	ite	eq
 8003c28:	2301      	moveq	r3, #1
 8003c2a:	2300      	movne	r3, #0
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	461a      	mov	r2, r3
 8003c30:	79fb      	ldrb	r3, [r7, #7]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d116      	bne.n	8003c64 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2220      	movs	r2, #32
 8003c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c50:	f043 0220 	orr.w	r2, r3, #32
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e023      	b.n	8003cac <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	0c1b      	lsrs	r3, r3, #16
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d10d      	bne.n	8003c8a <I2C_WaitOnFlagUntilTimeout+0xca>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	43da      	mvns	r2, r3
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	bf0c      	ite	eq
 8003c80:	2301      	moveq	r3, #1
 8003c82:	2300      	movne	r3, #0
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	461a      	mov	r2, r3
 8003c88:	e00c      	b.n	8003ca4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	43da      	mvns	r2, r3
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	4013      	ands	r3, r2
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	bf0c      	ite	eq
 8003c9c:	2301      	moveq	r3, #1
 8003c9e:	2300      	movne	r3, #0
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	79fb      	ldrb	r3, [r7, #7]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d093      	beq.n	8003bd2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
 8003cc0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cc2:	e071      	b.n	8003da8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cd2:	d123      	bne.n	8003d1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ce2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003cec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d08:	f043 0204 	orr.w	r2, r3, #4
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e067      	b.n	8003dec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d22:	d041      	beq.n	8003da8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d24:	f7fe f988 	bl	8002038 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d302      	bcc.n	8003d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d136      	bne.n	8003da8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	0c1b      	lsrs	r3, r3, #16
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d10c      	bne.n	8003d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	43da      	mvns	r2, r3
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	4013      	ands	r3, r2
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	bf14      	ite	ne
 8003d56:	2301      	movne	r3, #1
 8003d58:	2300      	moveq	r3, #0
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	e00b      	b.n	8003d76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	43da      	mvns	r2, r3
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	bf14      	ite	ne
 8003d70:	2301      	movne	r3, #1
 8003d72:	2300      	moveq	r3, #0
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d016      	beq.n	8003da8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2220      	movs	r2, #32
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d94:	f043 0220 	orr.w	r2, r3, #32
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e021      	b.n	8003dec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	0c1b      	lsrs	r3, r3, #16
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d10c      	bne.n	8003dcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	43da      	mvns	r2, r3
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	bf14      	ite	ne
 8003dc4:	2301      	movne	r3, #1
 8003dc6:	2300      	moveq	r3, #0
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	e00b      	b.n	8003de4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	43da      	mvns	r2, r3
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	bf14      	ite	ne
 8003dde:	2301      	movne	r3, #1
 8003de0:	2300      	moveq	r3, #0
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f47f af6d 	bne.w	8003cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e00:	e034      	b.n	8003e6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e02:	68f8      	ldr	r0, [r7, #12]
 8003e04:	f000 f89b 	bl	8003f3e <I2C_IsAcknowledgeFailed>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d001      	beq.n	8003e12 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e034      	b.n	8003e7c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e18:	d028      	beq.n	8003e6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e1a:	f7fe f90d 	bl	8002038 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	68ba      	ldr	r2, [r7, #8]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d302      	bcc.n	8003e30 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d11d      	bne.n	8003e6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e3a:	2b80      	cmp	r3, #128	; 0x80
 8003e3c:	d016      	beq.n	8003e6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2220      	movs	r2, #32
 8003e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e58:	f043 0220 	orr.w	r2, r3, #32
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e007      	b.n	8003e7c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e76:	2b80      	cmp	r3, #128	; 0x80
 8003e78:	d1c3      	bne.n	8003e02 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e90:	e049      	b.n	8003f26 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	695b      	ldr	r3, [r3, #20]
 8003e98:	f003 0310 	and.w	r3, r3, #16
 8003e9c:	2b10      	cmp	r3, #16
 8003e9e:	d119      	bne.n	8003ed4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f06f 0210 	mvn.w	r2, #16
 8003ea8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e030      	b.n	8003f36 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ed4:	f7fe f8b0 	bl	8002038 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d302      	bcc.n	8003eea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d11d      	bne.n	8003f26 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef4:	2b40      	cmp	r3, #64	; 0x40
 8003ef6:	d016      	beq.n	8003f26 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2220      	movs	r2, #32
 8003f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f12:	f043 0220 	orr.w	r2, r3, #32
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e007      	b.n	8003f36 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	695b      	ldr	r3, [r3, #20]
 8003f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f30:	2b40      	cmp	r3, #64	; 0x40
 8003f32:	d1ae      	bne.n	8003e92 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f3e:	b480      	push	{r7}
 8003f40:	b083      	sub	sp, #12
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f54:	d11b      	bne.n	8003f8e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f5e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2220      	movs	r2, #32
 8003f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	f043 0204 	orr.w	r2, r3, #4
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e000      	b.n	8003f90 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bc80      	pop	{r7}
 8003f98:	4770      	bx	lr
	...

08003f9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b086      	sub	sp, #24
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d101      	bne.n	8003fae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e272      	b.n	8004494 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f000 8087 	beq.w	80040ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fbc:	4b92      	ldr	r3, [pc, #584]	; (8004208 <HAL_RCC_OscConfig+0x26c>)
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f003 030c 	and.w	r3, r3, #12
 8003fc4:	2b04      	cmp	r3, #4
 8003fc6:	d00c      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003fc8:	4b8f      	ldr	r3, [pc, #572]	; (8004208 <HAL_RCC_OscConfig+0x26c>)
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f003 030c 	and.w	r3, r3, #12
 8003fd0:	2b08      	cmp	r3, #8
 8003fd2:	d112      	bne.n	8003ffa <HAL_RCC_OscConfig+0x5e>
 8003fd4:	4b8c      	ldr	r3, [pc, #560]	; (8004208 <HAL_RCC_OscConfig+0x26c>)
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fe0:	d10b      	bne.n	8003ffa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fe2:	4b89      	ldr	r3, [pc, #548]	; (8004208 <HAL_RCC_OscConfig+0x26c>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d06c      	beq.n	80040c8 <HAL_RCC_OscConfig+0x12c>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d168      	bne.n	80040c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e24c      	b.n	8004494 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004002:	d106      	bne.n	8004012 <HAL_RCC_OscConfig+0x76>
 8004004:	4b80      	ldr	r3, [pc, #512]	; (8004208 <HAL_RCC_OscConfig+0x26c>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a7f      	ldr	r2, [pc, #508]	; (8004208 <HAL_RCC_OscConfig+0x26c>)
 800400a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800400e:	6013      	str	r3, [r2, #0]
 8004010:	e02e      	b.n	8004070 <HAL_RCC_OscConfig+0xd4>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10c      	bne.n	8004034 <HAL_RCC_OscConfig+0x98>
 800401a:	4b7b      	ldr	r3, [pc, #492]	; (8004208 <HAL_RCC_OscConfig+0x26c>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a7a      	ldr	r2, [pc, #488]	; (8004208 <HAL_RCC_OscConfig+0x26c>)
 8004020:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004024:	6013      	str	r3, [r2, #0]
 8004026:	4b78      	ldr	r3, [pc, #480]	; (8004208 <HAL_RCC_OscConfig+0x26c>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a77      	ldr	r2, [pc, #476]	; (8004208 <HAL_RCC_OscConfig+0x26c>)
 800402c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004030:	6013      	str	r3, [r2, #0]
 8004032:	e01d      	b.n	8004070 <HAL_RCC_OscConfig+0xd4>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800403c:	d10c      	bne.n	8004058 <HAL_RCC_OscConfig+0xbc>
 800403e:	4b72      	ldr	r3, [pc, #456]	; (8004208 <HAL_RCC_OscConfig+0x26c>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a71      	ldr	r2, [pc, #452]	; (8004208 <HAL_RCC_OscConfig+0x26c>)
 8004044:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004048:	6013      	str	r3, [r2, #0]
 800404a:	4b6f      	ldr	r3, [pc, #444]	; (8004208 <HAL_RCC_OscConfig+0x26c>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a6e      	ldr	r2, [pc, #440]	; (8004208 <HAL_RCC_OscConfig+0x26c>)
 8004050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004054:	6013      	str	r3, [r2, #0]
 8004056:	e00b      	b.n	8004070 <HAL_RCC_OscConfig+0xd4>
 8004058:	4b6b      	ldr	r3, [pc, #428]	; (8004208 <HAL_RCC_OscConfig+0x26c>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a6a      	ldr	r2, [pc, #424]	; (8004208 <HAL_RCC_OscConfig+0x26c>)
 800405e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004062:	6013      	str	r3, [r2, #0]
 8004064:	4b68      	ldr	r3, [pc, #416]	; (8004208 <HAL_RCC_OscConfig+0x26c>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a67      	ldr	r2, [pc, #412]	; (8004208 <HAL_RCC_OscConfig+0x26c>)
 800406a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800406e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d013      	beq.n	80040a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004078:	f7fd ffde 	bl	8002038 <HAL_GetTick>
 800407c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800407e:	e008      	b.n	8004092 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004080:	f7fd ffda 	bl	8002038 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b64      	cmp	r3, #100	; 0x64
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e200      	b.n	8004494 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004092:	4b5d      	ldr	r3, [pc, #372]	; (8004208 <HAL_RCC_OscConfig+0x26c>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d0f0      	beq.n	8004080 <HAL_RCC_OscConfig+0xe4>
 800409e:	e014      	b.n	80040ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a0:	f7fd ffca 	bl	8002038 <HAL_GetTick>
 80040a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040a6:	e008      	b.n	80040ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040a8:	f7fd ffc6 	bl	8002038 <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	2b64      	cmp	r3, #100	; 0x64
 80040b4:	d901      	bls.n	80040ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e1ec      	b.n	8004494 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ba:	4b53      	ldr	r3, [pc, #332]	; (8004208 <HAL_RCC_OscConfig+0x26c>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1f0      	bne.n	80040a8 <HAL_RCC_OscConfig+0x10c>
 80040c6:	e000      	b.n	80040ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0302 	and.w	r3, r3, #2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d063      	beq.n	800419e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80040d6:	4b4c      	ldr	r3, [pc, #304]	; (8004208 <HAL_RCC_OscConfig+0x26c>)
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f003 030c 	and.w	r3, r3, #12
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00b      	beq.n	80040fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80040e2:	4b49      	ldr	r3, [pc, #292]	; (8004208 <HAL_RCC_OscConfig+0x26c>)
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f003 030c 	and.w	r3, r3, #12
 80040ea:	2b08      	cmp	r3, #8
 80040ec:	d11c      	bne.n	8004128 <HAL_RCC_OscConfig+0x18c>
 80040ee:	4b46      	ldr	r3, [pc, #280]	; (8004208 <HAL_RCC_OscConfig+0x26c>)
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d116      	bne.n	8004128 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040fa:	4b43      	ldr	r3, [pc, #268]	; (8004208 <HAL_RCC_OscConfig+0x26c>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	2b00      	cmp	r3, #0
 8004104:	d005      	beq.n	8004112 <HAL_RCC_OscConfig+0x176>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d001      	beq.n	8004112 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e1c0      	b.n	8004494 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004112:	4b3d      	ldr	r3, [pc, #244]	; (8004208 <HAL_RCC_OscConfig+0x26c>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	4939      	ldr	r1, [pc, #228]	; (8004208 <HAL_RCC_OscConfig+0x26c>)
 8004122:	4313      	orrs	r3, r2
 8004124:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004126:	e03a      	b.n	800419e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d020      	beq.n	8004172 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004130:	4b36      	ldr	r3, [pc, #216]	; (800420c <HAL_RCC_OscConfig+0x270>)
 8004132:	2201      	movs	r2, #1
 8004134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004136:	f7fd ff7f 	bl	8002038 <HAL_GetTick>
 800413a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800413c:	e008      	b.n	8004150 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800413e:	f7fd ff7b 	bl	8002038 <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b02      	cmp	r3, #2
 800414a:	d901      	bls.n	8004150 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e1a1      	b.n	8004494 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004150:	4b2d      	ldr	r3, [pc, #180]	; (8004208 <HAL_RCC_OscConfig+0x26c>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d0f0      	beq.n	800413e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800415c:	4b2a      	ldr	r3, [pc, #168]	; (8004208 <HAL_RCC_OscConfig+0x26c>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	00db      	lsls	r3, r3, #3
 800416a:	4927      	ldr	r1, [pc, #156]	; (8004208 <HAL_RCC_OscConfig+0x26c>)
 800416c:	4313      	orrs	r3, r2
 800416e:	600b      	str	r3, [r1, #0]
 8004170:	e015      	b.n	800419e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004172:	4b26      	ldr	r3, [pc, #152]	; (800420c <HAL_RCC_OscConfig+0x270>)
 8004174:	2200      	movs	r2, #0
 8004176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004178:	f7fd ff5e 	bl	8002038 <HAL_GetTick>
 800417c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800417e:	e008      	b.n	8004192 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004180:	f7fd ff5a 	bl	8002038 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e180      	b.n	8004494 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004192:	4b1d      	ldr	r3, [pc, #116]	; (8004208 <HAL_RCC_OscConfig+0x26c>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1f0      	bne.n	8004180 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0308 	and.w	r3, r3, #8
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d03a      	beq.n	8004220 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d019      	beq.n	80041e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041b2:	4b17      	ldr	r3, [pc, #92]	; (8004210 <HAL_RCC_OscConfig+0x274>)
 80041b4:	2201      	movs	r2, #1
 80041b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041b8:	f7fd ff3e 	bl	8002038 <HAL_GetTick>
 80041bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041c0:	f7fd ff3a 	bl	8002038 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e160      	b.n	8004494 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041d2:	4b0d      	ldr	r3, [pc, #52]	; (8004208 <HAL_RCC_OscConfig+0x26c>)
 80041d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d0f0      	beq.n	80041c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80041de:	2001      	movs	r0, #1
 80041e0:	f000 faba 	bl	8004758 <RCC_Delay>
 80041e4:	e01c      	b.n	8004220 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041e6:	4b0a      	ldr	r3, [pc, #40]	; (8004210 <HAL_RCC_OscConfig+0x274>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041ec:	f7fd ff24 	bl	8002038 <HAL_GetTick>
 80041f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041f2:	e00f      	b.n	8004214 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041f4:	f7fd ff20 	bl	8002038 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d908      	bls.n	8004214 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e146      	b.n	8004494 <HAL_RCC_OscConfig+0x4f8>
 8004206:	bf00      	nop
 8004208:	40021000 	.word	0x40021000
 800420c:	42420000 	.word	0x42420000
 8004210:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004214:	4b92      	ldr	r3, [pc, #584]	; (8004460 <HAL_RCC_OscConfig+0x4c4>)
 8004216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1e9      	bne.n	80041f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0304 	and.w	r3, r3, #4
 8004228:	2b00      	cmp	r3, #0
 800422a:	f000 80a6 	beq.w	800437a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800422e:	2300      	movs	r3, #0
 8004230:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004232:	4b8b      	ldr	r3, [pc, #556]	; (8004460 <HAL_RCC_OscConfig+0x4c4>)
 8004234:	69db      	ldr	r3, [r3, #28]
 8004236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d10d      	bne.n	800425a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800423e:	4b88      	ldr	r3, [pc, #544]	; (8004460 <HAL_RCC_OscConfig+0x4c4>)
 8004240:	69db      	ldr	r3, [r3, #28]
 8004242:	4a87      	ldr	r2, [pc, #540]	; (8004460 <HAL_RCC_OscConfig+0x4c4>)
 8004244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004248:	61d3      	str	r3, [r2, #28]
 800424a:	4b85      	ldr	r3, [pc, #532]	; (8004460 <HAL_RCC_OscConfig+0x4c4>)
 800424c:	69db      	ldr	r3, [r3, #28]
 800424e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004252:	60bb      	str	r3, [r7, #8]
 8004254:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004256:	2301      	movs	r3, #1
 8004258:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800425a:	4b82      	ldr	r3, [pc, #520]	; (8004464 <HAL_RCC_OscConfig+0x4c8>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004262:	2b00      	cmp	r3, #0
 8004264:	d118      	bne.n	8004298 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004266:	4b7f      	ldr	r3, [pc, #508]	; (8004464 <HAL_RCC_OscConfig+0x4c8>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a7e      	ldr	r2, [pc, #504]	; (8004464 <HAL_RCC_OscConfig+0x4c8>)
 800426c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004270:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004272:	f7fd fee1 	bl	8002038 <HAL_GetTick>
 8004276:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004278:	e008      	b.n	800428c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800427a:	f7fd fedd 	bl	8002038 <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	2b64      	cmp	r3, #100	; 0x64
 8004286:	d901      	bls.n	800428c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e103      	b.n	8004494 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800428c:	4b75      	ldr	r3, [pc, #468]	; (8004464 <HAL_RCC_OscConfig+0x4c8>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004294:	2b00      	cmp	r3, #0
 8004296:	d0f0      	beq.n	800427a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d106      	bne.n	80042ae <HAL_RCC_OscConfig+0x312>
 80042a0:	4b6f      	ldr	r3, [pc, #444]	; (8004460 <HAL_RCC_OscConfig+0x4c4>)
 80042a2:	6a1b      	ldr	r3, [r3, #32]
 80042a4:	4a6e      	ldr	r2, [pc, #440]	; (8004460 <HAL_RCC_OscConfig+0x4c4>)
 80042a6:	f043 0301 	orr.w	r3, r3, #1
 80042aa:	6213      	str	r3, [r2, #32]
 80042ac:	e02d      	b.n	800430a <HAL_RCC_OscConfig+0x36e>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10c      	bne.n	80042d0 <HAL_RCC_OscConfig+0x334>
 80042b6:	4b6a      	ldr	r3, [pc, #424]	; (8004460 <HAL_RCC_OscConfig+0x4c4>)
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	4a69      	ldr	r2, [pc, #420]	; (8004460 <HAL_RCC_OscConfig+0x4c4>)
 80042bc:	f023 0301 	bic.w	r3, r3, #1
 80042c0:	6213      	str	r3, [r2, #32]
 80042c2:	4b67      	ldr	r3, [pc, #412]	; (8004460 <HAL_RCC_OscConfig+0x4c4>)
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	4a66      	ldr	r2, [pc, #408]	; (8004460 <HAL_RCC_OscConfig+0x4c4>)
 80042c8:	f023 0304 	bic.w	r3, r3, #4
 80042cc:	6213      	str	r3, [r2, #32]
 80042ce:	e01c      	b.n	800430a <HAL_RCC_OscConfig+0x36e>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	2b05      	cmp	r3, #5
 80042d6:	d10c      	bne.n	80042f2 <HAL_RCC_OscConfig+0x356>
 80042d8:	4b61      	ldr	r3, [pc, #388]	; (8004460 <HAL_RCC_OscConfig+0x4c4>)
 80042da:	6a1b      	ldr	r3, [r3, #32]
 80042dc:	4a60      	ldr	r2, [pc, #384]	; (8004460 <HAL_RCC_OscConfig+0x4c4>)
 80042de:	f043 0304 	orr.w	r3, r3, #4
 80042e2:	6213      	str	r3, [r2, #32]
 80042e4:	4b5e      	ldr	r3, [pc, #376]	; (8004460 <HAL_RCC_OscConfig+0x4c4>)
 80042e6:	6a1b      	ldr	r3, [r3, #32]
 80042e8:	4a5d      	ldr	r2, [pc, #372]	; (8004460 <HAL_RCC_OscConfig+0x4c4>)
 80042ea:	f043 0301 	orr.w	r3, r3, #1
 80042ee:	6213      	str	r3, [r2, #32]
 80042f0:	e00b      	b.n	800430a <HAL_RCC_OscConfig+0x36e>
 80042f2:	4b5b      	ldr	r3, [pc, #364]	; (8004460 <HAL_RCC_OscConfig+0x4c4>)
 80042f4:	6a1b      	ldr	r3, [r3, #32]
 80042f6:	4a5a      	ldr	r2, [pc, #360]	; (8004460 <HAL_RCC_OscConfig+0x4c4>)
 80042f8:	f023 0301 	bic.w	r3, r3, #1
 80042fc:	6213      	str	r3, [r2, #32]
 80042fe:	4b58      	ldr	r3, [pc, #352]	; (8004460 <HAL_RCC_OscConfig+0x4c4>)
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	4a57      	ldr	r2, [pc, #348]	; (8004460 <HAL_RCC_OscConfig+0x4c4>)
 8004304:	f023 0304 	bic.w	r3, r3, #4
 8004308:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d015      	beq.n	800433e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004312:	f7fd fe91 	bl	8002038 <HAL_GetTick>
 8004316:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004318:	e00a      	b.n	8004330 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800431a:	f7fd fe8d 	bl	8002038 <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	f241 3288 	movw	r2, #5000	; 0x1388
 8004328:	4293      	cmp	r3, r2
 800432a:	d901      	bls.n	8004330 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e0b1      	b.n	8004494 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004330:	4b4b      	ldr	r3, [pc, #300]	; (8004460 <HAL_RCC_OscConfig+0x4c4>)
 8004332:	6a1b      	ldr	r3, [r3, #32]
 8004334:	f003 0302 	and.w	r3, r3, #2
 8004338:	2b00      	cmp	r3, #0
 800433a:	d0ee      	beq.n	800431a <HAL_RCC_OscConfig+0x37e>
 800433c:	e014      	b.n	8004368 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800433e:	f7fd fe7b 	bl	8002038 <HAL_GetTick>
 8004342:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004344:	e00a      	b.n	800435c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004346:	f7fd fe77 	bl	8002038 <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	f241 3288 	movw	r2, #5000	; 0x1388
 8004354:	4293      	cmp	r3, r2
 8004356:	d901      	bls.n	800435c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e09b      	b.n	8004494 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800435c:	4b40      	ldr	r3, [pc, #256]	; (8004460 <HAL_RCC_OscConfig+0x4c4>)
 800435e:	6a1b      	ldr	r3, [r3, #32]
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1ee      	bne.n	8004346 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004368:	7dfb      	ldrb	r3, [r7, #23]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d105      	bne.n	800437a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800436e:	4b3c      	ldr	r3, [pc, #240]	; (8004460 <HAL_RCC_OscConfig+0x4c4>)
 8004370:	69db      	ldr	r3, [r3, #28]
 8004372:	4a3b      	ldr	r2, [pc, #236]	; (8004460 <HAL_RCC_OscConfig+0x4c4>)
 8004374:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004378:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	69db      	ldr	r3, [r3, #28]
 800437e:	2b00      	cmp	r3, #0
 8004380:	f000 8087 	beq.w	8004492 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004384:	4b36      	ldr	r3, [pc, #216]	; (8004460 <HAL_RCC_OscConfig+0x4c4>)
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f003 030c 	and.w	r3, r3, #12
 800438c:	2b08      	cmp	r3, #8
 800438e:	d061      	beq.n	8004454 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	69db      	ldr	r3, [r3, #28]
 8004394:	2b02      	cmp	r3, #2
 8004396:	d146      	bne.n	8004426 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004398:	4b33      	ldr	r3, [pc, #204]	; (8004468 <HAL_RCC_OscConfig+0x4cc>)
 800439a:	2200      	movs	r2, #0
 800439c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800439e:	f7fd fe4b 	bl	8002038 <HAL_GetTick>
 80043a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043a4:	e008      	b.n	80043b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043a6:	f7fd fe47 	bl	8002038 <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d901      	bls.n	80043b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e06d      	b.n	8004494 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043b8:	4b29      	ldr	r3, [pc, #164]	; (8004460 <HAL_RCC_OscConfig+0x4c4>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1f0      	bne.n	80043a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043cc:	d108      	bne.n	80043e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80043ce:	4b24      	ldr	r3, [pc, #144]	; (8004460 <HAL_RCC_OscConfig+0x4c4>)
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	4921      	ldr	r1, [pc, #132]	; (8004460 <HAL_RCC_OscConfig+0x4c4>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043e0:	4b1f      	ldr	r3, [pc, #124]	; (8004460 <HAL_RCC_OscConfig+0x4c4>)
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a19      	ldr	r1, [r3, #32]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f0:	430b      	orrs	r3, r1
 80043f2:	491b      	ldr	r1, [pc, #108]	; (8004460 <HAL_RCC_OscConfig+0x4c4>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043f8:	4b1b      	ldr	r3, [pc, #108]	; (8004468 <HAL_RCC_OscConfig+0x4cc>)
 80043fa:	2201      	movs	r2, #1
 80043fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043fe:	f7fd fe1b 	bl	8002038 <HAL_GetTick>
 8004402:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004404:	e008      	b.n	8004418 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004406:	f7fd fe17 	bl	8002038 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d901      	bls.n	8004418 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e03d      	b.n	8004494 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004418:	4b11      	ldr	r3, [pc, #68]	; (8004460 <HAL_RCC_OscConfig+0x4c4>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d0f0      	beq.n	8004406 <HAL_RCC_OscConfig+0x46a>
 8004424:	e035      	b.n	8004492 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004426:	4b10      	ldr	r3, [pc, #64]	; (8004468 <HAL_RCC_OscConfig+0x4cc>)
 8004428:	2200      	movs	r2, #0
 800442a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800442c:	f7fd fe04 	bl	8002038 <HAL_GetTick>
 8004430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004432:	e008      	b.n	8004446 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004434:	f7fd fe00 	bl	8002038 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b02      	cmp	r3, #2
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e026      	b.n	8004494 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004446:	4b06      	ldr	r3, [pc, #24]	; (8004460 <HAL_RCC_OscConfig+0x4c4>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1f0      	bne.n	8004434 <HAL_RCC_OscConfig+0x498>
 8004452:	e01e      	b.n	8004492 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	69db      	ldr	r3, [r3, #28]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d107      	bne.n	800446c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e019      	b.n	8004494 <HAL_RCC_OscConfig+0x4f8>
 8004460:	40021000 	.word	0x40021000
 8004464:	40007000 	.word	0x40007000
 8004468:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800446c:	4b0b      	ldr	r3, [pc, #44]	; (800449c <HAL_RCC_OscConfig+0x500>)
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a1b      	ldr	r3, [r3, #32]
 800447c:	429a      	cmp	r2, r3
 800447e:	d106      	bne.n	800448e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800448a:	429a      	cmp	r2, r3
 800448c:	d001      	beq.n	8004492 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e000      	b.n	8004494 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3718      	adds	r7, #24
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	40021000 	.word	0x40021000

080044a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d101      	bne.n	80044b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e0d0      	b.n	8004656 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044b4:	4b6a      	ldr	r3, [pc, #424]	; (8004660 <HAL_RCC_ClockConfig+0x1c0>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0307 	and.w	r3, r3, #7
 80044bc:	683a      	ldr	r2, [r7, #0]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d910      	bls.n	80044e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044c2:	4b67      	ldr	r3, [pc, #412]	; (8004660 <HAL_RCC_ClockConfig+0x1c0>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f023 0207 	bic.w	r2, r3, #7
 80044ca:	4965      	ldr	r1, [pc, #404]	; (8004660 <HAL_RCC_ClockConfig+0x1c0>)
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044d2:	4b63      	ldr	r3, [pc, #396]	; (8004660 <HAL_RCC_ClockConfig+0x1c0>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0307 	and.w	r3, r3, #7
 80044da:	683a      	ldr	r2, [r7, #0]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d001      	beq.n	80044e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e0b8      	b.n	8004656 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d020      	beq.n	8004532 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0304 	and.w	r3, r3, #4
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d005      	beq.n	8004508 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044fc:	4b59      	ldr	r3, [pc, #356]	; (8004664 <HAL_RCC_ClockConfig+0x1c4>)
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	4a58      	ldr	r2, [pc, #352]	; (8004664 <HAL_RCC_ClockConfig+0x1c4>)
 8004502:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004506:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0308 	and.w	r3, r3, #8
 8004510:	2b00      	cmp	r3, #0
 8004512:	d005      	beq.n	8004520 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004514:	4b53      	ldr	r3, [pc, #332]	; (8004664 <HAL_RCC_ClockConfig+0x1c4>)
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	4a52      	ldr	r2, [pc, #328]	; (8004664 <HAL_RCC_ClockConfig+0x1c4>)
 800451a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800451e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004520:	4b50      	ldr	r3, [pc, #320]	; (8004664 <HAL_RCC_ClockConfig+0x1c4>)
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	494d      	ldr	r1, [pc, #308]	; (8004664 <HAL_RCC_ClockConfig+0x1c4>)
 800452e:	4313      	orrs	r3, r2
 8004530:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b00      	cmp	r3, #0
 800453c:	d040      	beq.n	80045c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d107      	bne.n	8004556 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004546:	4b47      	ldr	r3, [pc, #284]	; (8004664 <HAL_RCC_ClockConfig+0x1c4>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d115      	bne.n	800457e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e07f      	b.n	8004656 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	2b02      	cmp	r3, #2
 800455c:	d107      	bne.n	800456e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800455e:	4b41      	ldr	r3, [pc, #260]	; (8004664 <HAL_RCC_ClockConfig+0x1c4>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d109      	bne.n	800457e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e073      	b.n	8004656 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800456e:	4b3d      	ldr	r3, [pc, #244]	; (8004664 <HAL_RCC_ClockConfig+0x1c4>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e06b      	b.n	8004656 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800457e:	4b39      	ldr	r3, [pc, #228]	; (8004664 <HAL_RCC_ClockConfig+0x1c4>)
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f023 0203 	bic.w	r2, r3, #3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	4936      	ldr	r1, [pc, #216]	; (8004664 <HAL_RCC_ClockConfig+0x1c4>)
 800458c:	4313      	orrs	r3, r2
 800458e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004590:	f7fd fd52 	bl	8002038 <HAL_GetTick>
 8004594:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004596:	e00a      	b.n	80045ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004598:	f7fd fd4e 	bl	8002038 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e053      	b.n	8004656 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ae:	4b2d      	ldr	r3, [pc, #180]	; (8004664 <HAL_RCC_ClockConfig+0x1c4>)
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f003 020c 	and.w	r2, r3, #12
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	429a      	cmp	r2, r3
 80045be:	d1eb      	bne.n	8004598 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045c0:	4b27      	ldr	r3, [pc, #156]	; (8004660 <HAL_RCC_ClockConfig+0x1c0>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0307 	and.w	r3, r3, #7
 80045c8:	683a      	ldr	r2, [r7, #0]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d210      	bcs.n	80045f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ce:	4b24      	ldr	r3, [pc, #144]	; (8004660 <HAL_RCC_ClockConfig+0x1c0>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f023 0207 	bic.w	r2, r3, #7
 80045d6:	4922      	ldr	r1, [pc, #136]	; (8004660 <HAL_RCC_ClockConfig+0x1c0>)
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	4313      	orrs	r3, r2
 80045dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045de:	4b20      	ldr	r3, [pc, #128]	; (8004660 <HAL_RCC_ClockConfig+0x1c0>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0307 	and.w	r3, r3, #7
 80045e6:	683a      	ldr	r2, [r7, #0]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d001      	beq.n	80045f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e032      	b.n	8004656 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0304 	and.w	r3, r3, #4
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d008      	beq.n	800460e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045fc:	4b19      	ldr	r3, [pc, #100]	; (8004664 <HAL_RCC_ClockConfig+0x1c4>)
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	4916      	ldr	r1, [pc, #88]	; (8004664 <HAL_RCC_ClockConfig+0x1c4>)
 800460a:	4313      	orrs	r3, r2
 800460c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0308 	and.w	r3, r3, #8
 8004616:	2b00      	cmp	r3, #0
 8004618:	d009      	beq.n	800462e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800461a:	4b12      	ldr	r3, [pc, #72]	; (8004664 <HAL_RCC_ClockConfig+0x1c4>)
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	00db      	lsls	r3, r3, #3
 8004628:	490e      	ldr	r1, [pc, #56]	; (8004664 <HAL_RCC_ClockConfig+0x1c4>)
 800462a:	4313      	orrs	r3, r2
 800462c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800462e:	f000 f821 	bl	8004674 <HAL_RCC_GetSysClockFreq>
 8004632:	4602      	mov	r2, r0
 8004634:	4b0b      	ldr	r3, [pc, #44]	; (8004664 <HAL_RCC_ClockConfig+0x1c4>)
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	091b      	lsrs	r3, r3, #4
 800463a:	f003 030f 	and.w	r3, r3, #15
 800463e:	490a      	ldr	r1, [pc, #40]	; (8004668 <HAL_RCC_ClockConfig+0x1c8>)
 8004640:	5ccb      	ldrb	r3, [r1, r3]
 8004642:	fa22 f303 	lsr.w	r3, r2, r3
 8004646:	4a09      	ldr	r2, [pc, #36]	; (800466c <HAL_RCC_ClockConfig+0x1cc>)
 8004648:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800464a:	4b09      	ldr	r3, [pc, #36]	; (8004670 <HAL_RCC_ClockConfig+0x1d0>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4618      	mov	r0, r3
 8004650:	f7fd fcb0 	bl	8001fb4 <HAL_InitTick>

  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3710      	adds	r7, #16
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	40022000 	.word	0x40022000
 8004664:	40021000 	.word	0x40021000
 8004668:	080051c4 	.word	0x080051c4
 800466c:	20000434 	.word	0x20000434
 8004670:	20000438 	.word	0x20000438

08004674 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004674:	b480      	push	{r7}
 8004676:	b087      	sub	sp, #28
 8004678:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800467a:	2300      	movs	r3, #0
 800467c:	60fb      	str	r3, [r7, #12]
 800467e:	2300      	movs	r3, #0
 8004680:	60bb      	str	r3, [r7, #8]
 8004682:	2300      	movs	r3, #0
 8004684:	617b      	str	r3, [r7, #20]
 8004686:	2300      	movs	r3, #0
 8004688:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800468a:	2300      	movs	r3, #0
 800468c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800468e:	4b1e      	ldr	r3, [pc, #120]	; (8004708 <HAL_RCC_GetSysClockFreq+0x94>)
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f003 030c 	and.w	r3, r3, #12
 800469a:	2b04      	cmp	r3, #4
 800469c:	d002      	beq.n	80046a4 <HAL_RCC_GetSysClockFreq+0x30>
 800469e:	2b08      	cmp	r3, #8
 80046a0:	d003      	beq.n	80046aa <HAL_RCC_GetSysClockFreq+0x36>
 80046a2:	e027      	b.n	80046f4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80046a4:	4b19      	ldr	r3, [pc, #100]	; (800470c <HAL_RCC_GetSysClockFreq+0x98>)
 80046a6:	613b      	str	r3, [r7, #16]
      break;
 80046a8:	e027      	b.n	80046fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	0c9b      	lsrs	r3, r3, #18
 80046ae:	f003 030f 	and.w	r3, r3, #15
 80046b2:	4a17      	ldr	r2, [pc, #92]	; (8004710 <HAL_RCC_GetSysClockFreq+0x9c>)
 80046b4:	5cd3      	ldrb	r3, [r2, r3]
 80046b6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d010      	beq.n	80046e4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80046c2:	4b11      	ldr	r3, [pc, #68]	; (8004708 <HAL_RCC_GetSysClockFreq+0x94>)
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	0c5b      	lsrs	r3, r3, #17
 80046c8:	f003 0301 	and.w	r3, r3, #1
 80046cc:	4a11      	ldr	r2, [pc, #68]	; (8004714 <HAL_RCC_GetSysClockFreq+0xa0>)
 80046ce:	5cd3      	ldrb	r3, [r2, r3]
 80046d0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a0d      	ldr	r2, [pc, #52]	; (800470c <HAL_RCC_GetSysClockFreq+0x98>)
 80046d6:	fb03 f202 	mul.w	r2, r3, r2
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e0:	617b      	str	r3, [r7, #20]
 80046e2:	e004      	b.n	80046ee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a0c      	ldr	r2, [pc, #48]	; (8004718 <HAL_RCC_GetSysClockFreq+0xa4>)
 80046e8:	fb02 f303 	mul.w	r3, r2, r3
 80046ec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	613b      	str	r3, [r7, #16]
      break;
 80046f2:	e002      	b.n	80046fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80046f4:	4b05      	ldr	r3, [pc, #20]	; (800470c <HAL_RCC_GetSysClockFreq+0x98>)
 80046f6:	613b      	str	r3, [r7, #16]
      break;
 80046f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046fa:	693b      	ldr	r3, [r7, #16]
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	371c      	adds	r7, #28
 8004700:	46bd      	mov	sp, r7
 8004702:	bc80      	pop	{r7}
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	40021000 	.word	0x40021000
 800470c:	007a1200 	.word	0x007a1200
 8004710:	080051dc 	.word	0x080051dc
 8004714:	080051ec 	.word	0x080051ec
 8004718:	003d0900 	.word	0x003d0900

0800471c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800471c:	b480      	push	{r7}
 800471e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004720:	4b02      	ldr	r3, [pc, #8]	; (800472c <HAL_RCC_GetHCLKFreq+0x10>)
 8004722:	681b      	ldr	r3, [r3, #0]
}
 8004724:	4618      	mov	r0, r3
 8004726:	46bd      	mov	sp, r7
 8004728:	bc80      	pop	{r7}
 800472a:	4770      	bx	lr
 800472c:	20000434 	.word	0x20000434

08004730 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004734:	f7ff fff2 	bl	800471c <HAL_RCC_GetHCLKFreq>
 8004738:	4602      	mov	r2, r0
 800473a:	4b05      	ldr	r3, [pc, #20]	; (8004750 <HAL_RCC_GetPCLK1Freq+0x20>)
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	0a1b      	lsrs	r3, r3, #8
 8004740:	f003 0307 	and.w	r3, r3, #7
 8004744:	4903      	ldr	r1, [pc, #12]	; (8004754 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004746:	5ccb      	ldrb	r3, [r1, r3]
 8004748:	fa22 f303 	lsr.w	r3, r2, r3
}
 800474c:	4618      	mov	r0, r3
 800474e:	bd80      	pop	{r7, pc}
 8004750:	40021000 	.word	0x40021000
 8004754:	080051d4 	.word	0x080051d4

08004758 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004760:	4b0a      	ldr	r3, [pc, #40]	; (800478c <RCC_Delay+0x34>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a0a      	ldr	r2, [pc, #40]	; (8004790 <RCC_Delay+0x38>)
 8004766:	fba2 2303 	umull	r2, r3, r2, r3
 800476a:	0a5b      	lsrs	r3, r3, #9
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	fb02 f303 	mul.w	r3, r2, r3
 8004772:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004774:	bf00      	nop
  }
  while (Delay --);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	1e5a      	subs	r2, r3, #1
 800477a:	60fa      	str	r2, [r7, #12]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1f9      	bne.n	8004774 <RCC_Delay+0x1c>
}
 8004780:	bf00      	nop
 8004782:	bf00      	nop
 8004784:	3714      	adds	r7, #20
 8004786:	46bd      	mov	sp, r7
 8004788:	bc80      	pop	{r7}
 800478a:	4770      	bx	lr
 800478c:	20000434 	.word	0x20000434
 8004790:	10624dd3 	.word	0x10624dd3

08004794 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d101      	bne.n	80047a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e041      	b.n	800482a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d106      	bne.n	80047c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f7fd fb50 	bl	8001e60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2202      	movs	r2, #2
 80047c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	3304      	adds	r3, #4
 80047d0:	4619      	mov	r1, r3
 80047d2:	4610      	mov	r0, r2
 80047d4:	f000 fa74 	bl	8004cc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3708      	adds	r7, #8
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
	...

08004834 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004842:	b2db      	uxtb	r3, r3
 8004844:	2b01      	cmp	r3, #1
 8004846:	d001      	beq.n	800484c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e03a      	b.n	80048c2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2202      	movs	r2, #2
 8004850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68da      	ldr	r2, [r3, #12]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f042 0201 	orr.w	r2, r2, #1
 8004862:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a18      	ldr	r2, [pc, #96]	; (80048cc <HAL_TIM_Base_Start_IT+0x98>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d00e      	beq.n	800488c <HAL_TIM_Base_Start_IT+0x58>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004876:	d009      	beq.n	800488c <HAL_TIM_Base_Start_IT+0x58>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a14      	ldr	r2, [pc, #80]	; (80048d0 <HAL_TIM_Base_Start_IT+0x9c>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d004      	beq.n	800488c <HAL_TIM_Base_Start_IT+0x58>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a13      	ldr	r2, [pc, #76]	; (80048d4 <HAL_TIM_Base_Start_IT+0xa0>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d111      	bne.n	80048b0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f003 0307 	and.w	r3, r3, #7
 8004896:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2b06      	cmp	r3, #6
 800489c:	d010      	beq.n	80048c0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f042 0201 	orr.w	r2, r2, #1
 80048ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ae:	e007      	b.n	80048c0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f042 0201 	orr.w	r2, r2, #1
 80048be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3714      	adds	r7, #20
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bc80      	pop	{r7}
 80048ca:	4770      	bx	lr
 80048cc:	40012c00 	.word	0x40012c00
 80048d0:	40000400 	.word	0x40000400
 80048d4:	40000800 	.word	0x40000800

080048d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d122      	bne.n	8004934 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	f003 0302 	and.w	r3, r3, #2
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d11b      	bne.n	8004934 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f06f 0202 	mvn.w	r2, #2
 8004904:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2201      	movs	r2, #1
 800490a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	f003 0303 	and.w	r3, r3, #3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d003      	beq.n	8004922 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 f9b4 	bl	8004c88 <HAL_TIM_IC_CaptureCallback>
 8004920:	e005      	b.n	800492e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 f9a7 	bl	8004c76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f000 f9b6 	bl	8004c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	f003 0304 	and.w	r3, r3, #4
 800493e:	2b04      	cmp	r3, #4
 8004940:	d122      	bne.n	8004988 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	f003 0304 	and.w	r3, r3, #4
 800494c:	2b04      	cmp	r3, #4
 800494e:	d11b      	bne.n	8004988 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f06f 0204 	mvn.w	r2, #4
 8004958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2202      	movs	r2, #2
 800495e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800496a:	2b00      	cmp	r3, #0
 800496c:	d003      	beq.n	8004976 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 f98a 	bl	8004c88 <HAL_TIM_IC_CaptureCallback>
 8004974:	e005      	b.n	8004982 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 f97d 	bl	8004c76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 f98c 	bl	8004c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	f003 0308 	and.w	r3, r3, #8
 8004992:	2b08      	cmp	r3, #8
 8004994:	d122      	bne.n	80049dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	f003 0308 	and.w	r3, r3, #8
 80049a0:	2b08      	cmp	r3, #8
 80049a2:	d11b      	bne.n	80049dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f06f 0208 	mvn.w	r2, #8
 80049ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2204      	movs	r2, #4
 80049b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	69db      	ldr	r3, [r3, #28]
 80049ba:	f003 0303 	and.w	r3, r3, #3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d003      	beq.n	80049ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f960 	bl	8004c88 <HAL_TIM_IC_CaptureCallback>
 80049c8:	e005      	b.n	80049d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f953 	bl	8004c76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 f962 	bl	8004c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	f003 0310 	and.w	r3, r3, #16
 80049e6:	2b10      	cmp	r3, #16
 80049e8:	d122      	bne.n	8004a30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	f003 0310 	and.w	r3, r3, #16
 80049f4:	2b10      	cmp	r3, #16
 80049f6:	d11b      	bne.n	8004a30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f06f 0210 	mvn.w	r2, #16
 8004a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2208      	movs	r2, #8
 8004a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	69db      	ldr	r3, [r3, #28]
 8004a0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d003      	beq.n	8004a1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 f936 	bl	8004c88 <HAL_TIM_IC_CaptureCallback>
 8004a1c:	e005      	b.n	8004a2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f929 	bl	8004c76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 f938 	bl	8004c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d10e      	bne.n	8004a5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	f003 0301 	and.w	r3, r3, #1
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d107      	bne.n	8004a5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f06f 0201 	mvn.w	r2, #1
 8004a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f7fd f8ba 	bl	8001bd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a66:	2b80      	cmp	r3, #128	; 0x80
 8004a68:	d10e      	bne.n	8004a88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a74:	2b80      	cmp	r3, #128	; 0x80
 8004a76:	d107      	bne.n	8004a88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 fa7b 	bl	8004f7e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a92:	2b40      	cmp	r3, #64	; 0x40
 8004a94:	d10e      	bne.n	8004ab4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa0:	2b40      	cmp	r3, #64	; 0x40
 8004aa2:	d107      	bne.n	8004ab4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 f8fc 	bl	8004cac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	f003 0320 	and.w	r3, r3, #32
 8004abe:	2b20      	cmp	r3, #32
 8004ac0:	d10e      	bne.n	8004ae0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	f003 0320 	and.w	r3, r3, #32
 8004acc:	2b20      	cmp	r3, #32
 8004ace:	d107      	bne.n	8004ae0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f06f 0220 	mvn.w	r2, #32
 8004ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 fa46 	bl	8004f6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ae0:	bf00      	nop
 8004ae2:	3708      	adds	r7, #8
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004af2:	2300      	movs	r3, #0
 8004af4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d101      	bne.n	8004b04 <HAL_TIM_ConfigClockSource+0x1c>
 8004b00:	2302      	movs	r3, #2
 8004b02:	e0b4      	b.n	8004c6e <HAL_TIM_ConfigClockSource+0x186>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2202      	movs	r2, #2
 8004b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68ba      	ldr	r2, [r7, #8]
 8004b32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b3c:	d03e      	beq.n	8004bbc <HAL_TIM_ConfigClockSource+0xd4>
 8004b3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b42:	f200 8087 	bhi.w	8004c54 <HAL_TIM_ConfigClockSource+0x16c>
 8004b46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b4a:	f000 8086 	beq.w	8004c5a <HAL_TIM_ConfigClockSource+0x172>
 8004b4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b52:	d87f      	bhi.n	8004c54 <HAL_TIM_ConfigClockSource+0x16c>
 8004b54:	2b70      	cmp	r3, #112	; 0x70
 8004b56:	d01a      	beq.n	8004b8e <HAL_TIM_ConfigClockSource+0xa6>
 8004b58:	2b70      	cmp	r3, #112	; 0x70
 8004b5a:	d87b      	bhi.n	8004c54 <HAL_TIM_ConfigClockSource+0x16c>
 8004b5c:	2b60      	cmp	r3, #96	; 0x60
 8004b5e:	d050      	beq.n	8004c02 <HAL_TIM_ConfigClockSource+0x11a>
 8004b60:	2b60      	cmp	r3, #96	; 0x60
 8004b62:	d877      	bhi.n	8004c54 <HAL_TIM_ConfigClockSource+0x16c>
 8004b64:	2b50      	cmp	r3, #80	; 0x50
 8004b66:	d03c      	beq.n	8004be2 <HAL_TIM_ConfigClockSource+0xfa>
 8004b68:	2b50      	cmp	r3, #80	; 0x50
 8004b6a:	d873      	bhi.n	8004c54 <HAL_TIM_ConfigClockSource+0x16c>
 8004b6c:	2b40      	cmp	r3, #64	; 0x40
 8004b6e:	d058      	beq.n	8004c22 <HAL_TIM_ConfigClockSource+0x13a>
 8004b70:	2b40      	cmp	r3, #64	; 0x40
 8004b72:	d86f      	bhi.n	8004c54 <HAL_TIM_ConfigClockSource+0x16c>
 8004b74:	2b30      	cmp	r3, #48	; 0x30
 8004b76:	d064      	beq.n	8004c42 <HAL_TIM_ConfigClockSource+0x15a>
 8004b78:	2b30      	cmp	r3, #48	; 0x30
 8004b7a:	d86b      	bhi.n	8004c54 <HAL_TIM_ConfigClockSource+0x16c>
 8004b7c:	2b20      	cmp	r3, #32
 8004b7e:	d060      	beq.n	8004c42 <HAL_TIM_ConfigClockSource+0x15a>
 8004b80:	2b20      	cmp	r3, #32
 8004b82:	d867      	bhi.n	8004c54 <HAL_TIM_ConfigClockSource+0x16c>
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d05c      	beq.n	8004c42 <HAL_TIM_ConfigClockSource+0x15a>
 8004b88:	2b10      	cmp	r3, #16
 8004b8a:	d05a      	beq.n	8004c42 <HAL_TIM_ConfigClockSource+0x15a>
 8004b8c:	e062      	b.n	8004c54 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b9e:	f000 f968 	bl	8004e72 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004bb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68ba      	ldr	r2, [r7, #8]
 8004bb8:	609a      	str	r2, [r3, #8]
      break;
 8004bba:	e04f      	b.n	8004c5c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004bcc:	f000 f951 	bl	8004e72 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	689a      	ldr	r2, [r3, #8]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bde:	609a      	str	r2, [r3, #8]
      break;
 8004be0:	e03c      	b.n	8004c5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bee:	461a      	mov	r2, r3
 8004bf0:	f000 f8c8 	bl	8004d84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2150      	movs	r1, #80	; 0x50
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f000 f91f 	bl	8004e3e <TIM_ITRx_SetConfig>
      break;
 8004c00:	e02c      	b.n	8004c5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c0e:	461a      	mov	r2, r3
 8004c10:	f000 f8e6 	bl	8004de0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2160      	movs	r1, #96	; 0x60
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f000 f90f 	bl	8004e3e <TIM_ITRx_SetConfig>
      break;
 8004c20:	e01c      	b.n	8004c5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c2e:	461a      	mov	r2, r3
 8004c30:	f000 f8a8 	bl	8004d84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2140      	movs	r1, #64	; 0x40
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f000 f8ff 	bl	8004e3e <TIM_ITRx_SetConfig>
      break;
 8004c40:	e00c      	b.n	8004c5c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	4610      	mov	r0, r2
 8004c4e:	f000 f8f6 	bl	8004e3e <TIM_ITRx_SetConfig>
      break;
 8004c52:	e003      	b.n	8004c5c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	73fb      	strb	r3, [r7, #15]
      break;
 8004c58:	e000      	b.n	8004c5c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3710      	adds	r7, #16
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c76:	b480      	push	{r7}
 8004c78:	b083      	sub	sp, #12
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c7e:	bf00      	nop
 8004c80:	370c      	adds	r7, #12
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bc80      	pop	{r7}
 8004c86:	4770      	bx	lr

08004c88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bc80      	pop	{r7}
 8004c98:	4770      	bx	lr

08004c9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c9a:	b480      	push	{r7}
 8004c9c:	b083      	sub	sp, #12
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ca2:	bf00      	nop
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bc80      	pop	{r7}
 8004caa:	4770      	bx	lr

08004cac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bc80      	pop	{r7}
 8004cbc:	4770      	bx	lr
	...

08004cc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a29      	ldr	r2, [pc, #164]	; (8004d78 <TIM_Base_SetConfig+0xb8>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d00b      	beq.n	8004cf0 <TIM_Base_SetConfig+0x30>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cde:	d007      	beq.n	8004cf0 <TIM_Base_SetConfig+0x30>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a26      	ldr	r2, [pc, #152]	; (8004d7c <TIM_Base_SetConfig+0xbc>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d003      	beq.n	8004cf0 <TIM_Base_SetConfig+0x30>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a25      	ldr	r2, [pc, #148]	; (8004d80 <TIM_Base_SetConfig+0xc0>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d108      	bne.n	8004d02 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a1c      	ldr	r2, [pc, #112]	; (8004d78 <TIM_Base_SetConfig+0xb8>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d00b      	beq.n	8004d22 <TIM_Base_SetConfig+0x62>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d10:	d007      	beq.n	8004d22 <TIM_Base_SetConfig+0x62>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a19      	ldr	r2, [pc, #100]	; (8004d7c <TIM_Base_SetConfig+0xbc>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d003      	beq.n	8004d22 <TIM_Base_SetConfig+0x62>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a18      	ldr	r2, [pc, #96]	; (8004d80 <TIM_Base_SetConfig+0xc0>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d108      	bne.n	8004d34 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	689a      	ldr	r2, [r3, #8]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a07      	ldr	r2, [pc, #28]	; (8004d78 <TIM_Base_SetConfig+0xb8>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d103      	bne.n	8004d68 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	691a      	ldr	r2, [r3, #16]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	615a      	str	r2, [r3, #20]
}
 8004d6e:	bf00      	nop
 8004d70:	3714      	adds	r7, #20
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bc80      	pop	{r7}
 8004d76:	4770      	bx	lr
 8004d78:	40012c00 	.word	0x40012c00
 8004d7c:	40000400 	.word	0x40000400
 8004d80:	40000800 	.word	0x40000800

08004d84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b087      	sub	sp, #28
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6a1b      	ldr	r3, [r3, #32]
 8004d94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6a1b      	ldr	r3, [r3, #32]
 8004d9a:	f023 0201 	bic.w	r2, r3, #1
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	011b      	lsls	r3, r3, #4
 8004db4:	693a      	ldr	r2, [r7, #16]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	f023 030a 	bic.w	r3, r3, #10
 8004dc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004dc2:	697a      	ldr	r2, [r7, #20]
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	693a      	ldr	r2, [r7, #16]
 8004dce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	621a      	str	r2, [r3, #32]
}
 8004dd6:	bf00      	nop
 8004dd8:	371c      	adds	r7, #28
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bc80      	pop	{r7}
 8004dde:	4770      	bx	lr

08004de0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b087      	sub	sp, #28
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6a1b      	ldr	r3, [r3, #32]
 8004df0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	f023 0210 	bic.w	r2, r3, #16
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	699b      	ldr	r3, [r3, #24]
 8004e02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	031b      	lsls	r3, r3, #12
 8004e10:	693a      	ldr	r2, [r7, #16]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e1c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	011b      	lsls	r3, r3, #4
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	697a      	ldr	r2, [r7, #20]
 8004e32:	621a      	str	r2, [r3, #32]
}
 8004e34:	bf00      	nop
 8004e36:	371c      	adds	r7, #28
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bc80      	pop	{r7}
 8004e3c:	4770      	bx	lr

08004e3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b085      	sub	sp, #20
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
 8004e46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e56:	683a      	ldr	r2, [r7, #0]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	f043 0307 	orr.w	r3, r3, #7
 8004e60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	609a      	str	r2, [r3, #8]
}
 8004e68:	bf00      	nop
 8004e6a:	3714      	adds	r7, #20
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bc80      	pop	{r7}
 8004e70:	4770      	bx	lr

08004e72 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e72:	b480      	push	{r7}
 8004e74:	b087      	sub	sp, #28
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	60f8      	str	r0, [r7, #12]
 8004e7a:	60b9      	str	r1, [r7, #8]
 8004e7c:	607a      	str	r2, [r7, #4]
 8004e7e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e8c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	021a      	lsls	r2, r3, #8
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	431a      	orrs	r2, r3
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	697a      	ldr	r2, [r7, #20]
 8004ea4:	609a      	str	r2, [r3, #8]
}
 8004ea6:	bf00      	nop
 8004ea8:	371c      	adds	r7, #28
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bc80      	pop	{r7}
 8004eae:	4770      	bx	lr

08004eb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b085      	sub	sp, #20
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d101      	bne.n	8004ec8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ec4:	2302      	movs	r3, #2
 8004ec6:	e046      	b.n	8004f56 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a16      	ldr	r2, [pc, #88]	; (8004f60 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d00e      	beq.n	8004f2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f14:	d009      	beq.n	8004f2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a12      	ldr	r2, [pc, #72]	; (8004f64 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d004      	beq.n	8004f2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a10      	ldr	r2, [pc, #64]	; (8004f68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d10c      	bne.n	8004f44 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	68ba      	ldr	r2, [r7, #8]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3714      	adds	r7, #20
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bc80      	pop	{r7}
 8004f5e:	4770      	bx	lr
 8004f60:	40012c00 	.word	0x40012c00
 8004f64:	40000400 	.word	0x40000400
 8004f68:	40000800 	.word	0x40000800

08004f6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bc80      	pop	{r7}
 8004f7c:	4770      	bx	lr

08004f7e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f7e:	b480      	push	{r7}
 8004f80:	b083      	sub	sp, #12
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f86:	bf00      	nop
 8004f88:	370c      	adds	r7, #12
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bc80      	pop	{r7}
 8004f8e:	4770      	bx	lr

08004f90 <memset>:
 8004f90:	4603      	mov	r3, r0
 8004f92:	4402      	add	r2, r0
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d100      	bne.n	8004f9a <memset+0xa>
 8004f98:	4770      	bx	lr
 8004f9a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f9e:	e7f9      	b.n	8004f94 <memset+0x4>

08004fa0 <__libc_init_array>:
 8004fa0:	b570      	push	{r4, r5, r6, lr}
 8004fa2:	2600      	movs	r6, #0
 8004fa4:	4d0c      	ldr	r5, [pc, #48]	; (8004fd8 <__libc_init_array+0x38>)
 8004fa6:	4c0d      	ldr	r4, [pc, #52]	; (8004fdc <__libc_init_array+0x3c>)
 8004fa8:	1b64      	subs	r4, r4, r5
 8004faa:	10a4      	asrs	r4, r4, #2
 8004fac:	42a6      	cmp	r6, r4
 8004fae:	d109      	bne.n	8004fc4 <__libc_init_array+0x24>
 8004fb0:	f000 f81a 	bl	8004fe8 <_init>
 8004fb4:	2600      	movs	r6, #0
 8004fb6:	4d0a      	ldr	r5, [pc, #40]	; (8004fe0 <__libc_init_array+0x40>)
 8004fb8:	4c0a      	ldr	r4, [pc, #40]	; (8004fe4 <__libc_init_array+0x44>)
 8004fba:	1b64      	subs	r4, r4, r5
 8004fbc:	10a4      	asrs	r4, r4, #2
 8004fbe:	42a6      	cmp	r6, r4
 8004fc0:	d105      	bne.n	8004fce <__libc_init_array+0x2e>
 8004fc2:	bd70      	pop	{r4, r5, r6, pc}
 8004fc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fc8:	4798      	blx	r3
 8004fca:	3601      	adds	r6, #1
 8004fcc:	e7ee      	b.n	8004fac <__libc_init_array+0xc>
 8004fce:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fd2:	4798      	blx	r3
 8004fd4:	3601      	adds	r6, #1
 8004fd6:	e7f2      	b.n	8004fbe <__libc_init_array+0x1e>
 8004fd8:	080051f0 	.word	0x080051f0
 8004fdc:	080051f0 	.word	0x080051f0
 8004fe0:	080051f0 	.word	0x080051f0
 8004fe4:	080051f4 	.word	0x080051f4

08004fe8 <_init>:
 8004fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fea:	bf00      	nop
 8004fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fee:	bc08      	pop	{r3}
 8004ff0:	469e      	mov	lr, r3
 8004ff2:	4770      	bx	lr

08004ff4 <_fini>:
 8004ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ff6:	bf00      	nop
 8004ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ffa:	bc08      	pop	{r3}
 8004ffc:	469e      	mov	lr, r3
 8004ffe:	4770      	bx	lr

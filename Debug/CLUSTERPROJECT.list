
CLUSTERPROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067e0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001de0  080068f0  080068f0  000168f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086d0  080086d0  000207d8  2**0
                  CONTENTS
  4 .ARM          00000000  080086d0  080086d0  000207d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080086d0  080086d0  000207d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086d0  080086d0  000186d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086d4  080086d4  000186d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000007d8  20000000  080086d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009a8  200007d8  08008eb0  000207d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001180  08008eb0  00021180  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000207d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020801  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eb9d  00000000  00000000  00020844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fef  00000000  00000000  0002f3e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ec8  00000000  00000000  000313d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b9b  00000000  00000000  00032298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000174bb  00000000  00000000  00032e33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010609  00000000  00000000  0004a2ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a900  00000000  00000000  0005a8f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000403c  00000000  00000000  000e51f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000099  00000000  00000000  000e9234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200007d8 	.word	0x200007d8
 800012c:	00000000 	.word	0x00000000
 8000130:	080068d8 	.word	0x080068d8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200007dc 	.word	0x200007dc
 800014c:	080068d8 	.word	0x080068d8

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2uiz>:
 800071c:	004a      	lsls	r2, r1, #1
 800071e:	d211      	bcs.n	8000744 <__aeabi_d2uiz+0x28>
 8000720:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000724:	d211      	bcs.n	800074a <__aeabi_d2uiz+0x2e>
 8000726:	d50d      	bpl.n	8000744 <__aeabi_d2uiz+0x28>
 8000728:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800072c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000730:	d40e      	bmi.n	8000750 <__aeabi_d2uiz+0x34>
 8000732:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000736:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800073a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073e:	fa23 f002 	lsr.w	r0, r3, r2
 8000742:	4770      	bx	lr
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	4770      	bx	lr
 800074a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800074e:	d102      	bne.n	8000756 <__aeabi_d2uiz+0x3a>
 8000750:	f04f 30ff 	mov.w	r0, #4294967295
 8000754:	4770      	bx	lr
 8000756:	f04f 0000 	mov.w	r0, #0
 800075a:	4770      	bx	lr

0800075c <Lcd_cmd>:
#include "ST7565p.H"
uint8_t lcd_temp_ram[8][128];
uint8_t lcd_temp_ram_1[8][128];

void Lcd_cmd(uint8_t cmd)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
	GPIOB->BRR|=lcd_adr_Pin;  //Address(RESET);
 8000766:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <Lcd_cmd+0x58>)
 8000768:	695b      	ldr	r3, [r3, #20]
 800076a:	4a12      	ldr	r2, [pc, #72]	; (80007b4 <Lcd_cmd+0x58>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6153      	str	r3, [r2, #20]
	GPIOB->BRR|=lcd_chip_sel_Pin;  //CS_1(RESET);
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <Lcd_cmd+0x58>)
 8000774:	695b      	ldr	r3, [r3, #20]
 8000776:	4a0f      	ldr	r2, [pc, #60]	; (80007b4 <Lcd_cmd+0x58>)
 8000778:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800077c:	6153      	str	r3, [r2, #20]
	parllel_transmit(cmd&0xFF);
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	4618      	mov	r0, r3
 8000782:	f001 fbab 	bl	8001edc <parllel_transmit>
	GPIOB->ODR|=LCD_RD_Pin;
 8000786:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <Lcd_cmd+0x58>)
 8000788:	68db      	ldr	r3, [r3, #12]
 800078a:	4a0a      	ldr	r2, [pc, #40]	; (80007b4 <Lcd_cmd+0x58>)
 800078c:	f043 0302 	orr.w	r3, r3, #2
 8000790:	60d3      	str	r3, [r2, #12]
	GPIOB->BRR|=LCD_RD_Pin;
 8000792:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <Lcd_cmd+0x58>)
 8000794:	695b      	ldr	r3, [r3, #20]
 8000796:	4a07      	ldr	r2, [pc, #28]	; (80007b4 <Lcd_cmd+0x58>)
 8000798:	f043 0302 	orr.w	r3, r3, #2
 800079c:	6153      	str	r3, [r2, #20]
	GPIOB->ODR|=lcd_chip_sel_Pin;   //CS_1(SET);
 800079e:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <Lcd_cmd+0x58>)
 80007a0:	68db      	ldr	r3, [r3, #12]
 80007a2:	4a04      	ldr	r2, [pc, #16]	; (80007b4 <Lcd_cmd+0x58>)
 80007a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007a8:	60d3      	str	r3, [r2, #12]
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40010c00 	.word	0x40010c00

080007b8 <lcd_print_ram_1>:

void lcd_print_ram_1()
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
	for(int y_axsis=0;y_axsis<=7;y_axsis++)
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	e03f      	b.n	8000844 <lcd_print_ram_1+0x8c>
	{
		Lcd_cmd(y_axsis+0xB0);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	3b50      	subs	r3, #80	; 0x50
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff ffc5 	bl	800075c <Lcd_cmd>
		for(int x_axsis=0;x_axsis<=127;x_axsis++)
 80007d2:	2300      	movs	r3, #0
 80007d4:	603b      	str	r3, [r7, #0]
 80007d6:	e02f      	b.n	8000838 <lcd_print_ram_1+0x80>
		{
			lcd_x_axis(x_axsis);
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	4618      	mov	r0, r3
 80007de:	f000 f87f 	bl	80008e0 <lcd_x_axis>
			GPIOB->ODR|=lcd_adr_Pin;  //Address(RESET);
 80007e2:	4b1c      	ldr	r3, [pc, #112]	; (8000854 <lcd_print_ram_1+0x9c>)
 80007e4:	68db      	ldr	r3, [r3, #12]
 80007e6:	4a1b      	ldr	r2, [pc, #108]	; (8000854 <lcd_print_ram_1+0x9c>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	60d3      	str	r3, [r2, #12]
			GPIOB->ODR|=LCD_RD_Pin;
 80007ee:	4b19      	ldr	r3, [pc, #100]	; (8000854 <lcd_print_ram_1+0x9c>)
 80007f0:	68db      	ldr	r3, [r3, #12]
 80007f2:	4a18      	ldr	r2, [pc, #96]	; (8000854 <lcd_print_ram_1+0x9c>)
 80007f4:	f043 0302 	orr.w	r3, r3, #2
 80007f8:	60d3      	str	r3, [r2, #12]
			GPIOB->BRR|=lcd_chip_sel_Pin;  //CS_1(RESET);
 80007fa:	4b16      	ldr	r3, [pc, #88]	; (8000854 <lcd_print_ram_1+0x9c>)
 80007fc:	695b      	ldr	r3, [r3, #20]
 80007fe:	4a15      	ldr	r2, [pc, #84]	; (8000854 <lcd_print_ram_1+0x9c>)
 8000800:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000804:	6153      	str	r3, [r2, #20]
			parllel_transmit( (lcd_temp_ram_1[y_axsis][x_axsis])& 0XFF);
 8000806:	4a14      	ldr	r2, [pc, #80]	; (8000858 <lcd_print_ram_1+0xa0>)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	01db      	lsls	r3, r3, #7
 800080c:	441a      	add	r2, r3
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	4413      	add	r3, r2
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	4618      	mov	r0, r3
 8000816:	f001 fb61 	bl	8001edc <parllel_transmit>
			GPIOB->ODR|=lcd_chip_sel_Pin;
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <lcd_print_ram_1+0x9c>)
 800081c:	68db      	ldr	r3, [r3, #12]
 800081e:	4a0d      	ldr	r2, [pc, #52]	; (8000854 <lcd_print_ram_1+0x9c>)
 8000820:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000824:	60d3      	str	r3, [r2, #12]
			GPIOB->BRR|=LCD_RD_Pin;//CS_1(SET);
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <lcd_print_ram_1+0x9c>)
 8000828:	695b      	ldr	r3, [r3, #20]
 800082a:	4a0a      	ldr	r2, [pc, #40]	; (8000854 <lcd_print_ram_1+0x9c>)
 800082c:	f043 0302 	orr.w	r3, r3, #2
 8000830:	6153      	str	r3, [r2, #20]
		for(int x_axsis=0;x_axsis<=127;x_axsis++)
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	3301      	adds	r3, #1
 8000836:	603b      	str	r3, [r7, #0]
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	2b7f      	cmp	r3, #127	; 0x7f
 800083c:	ddcc      	ble.n	80007d8 <lcd_print_ram_1+0x20>
	for(int y_axsis=0;y_axsis<=7;y_axsis++)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	3301      	adds	r3, #1
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2b07      	cmp	r3, #7
 8000848:	ddbc      	ble.n	80007c4 <lcd_print_ram_1+0xc>
		}
	}
}
 800084a:	bf00      	nop
 800084c:	bf00      	nop
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40010c00 	.word	0x40010c00
 8000858:	20000bf4 	.word	0x20000bf4

0800085c <lcd_init>:

void lcd_init(){
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
	GPIOB->BRR|=lcd_chip_sel_Pin;	 				//HAL_GPIO_WritePin(GPIOA,  CS_1_Pin,RESET);// low the cs pin to listen the controller
 8000860:	4b1e      	ldr	r3, [pc, #120]	; (80008dc <lcd_init+0x80>)
 8000862:	695b      	ldr	r3, [r3, #20]
 8000864:	4a1d      	ldr	r2, [pc, #116]	; (80008dc <lcd_init+0x80>)
 8000866:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800086a:	6153      	str	r3, [r2, #20]
	HAL_GPIO_WritePin(GPIOB, lcd_reset_Pin,RESET); // low reset button
 800086c:	2200      	movs	r2, #0
 800086e:	2104      	movs	r1, #4
 8000870:	481a      	ldr	r0, [pc, #104]	; (80008dc <lcd_init+0x80>)
 8000872:	f003 ff68 	bl	8004746 <HAL_GPIO_WritePin>
	HAL_Delay(500); // wait for 500ms
 8000876:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800087a:	f002 fe3d 	bl	80034f8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, lcd_reset_Pin,SET); // high the reset button for initial reset
 800087e:	2201      	movs	r2, #1
 8000880:	2104      	movs	r1, #4
 8000882:	4816      	ldr	r0, [pc, #88]	; (80008dc <lcd_init+0x80>)
 8000884:	f003 ff5f 	bl	8004746 <HAL_GPIO_WritePin>

	  // LCD bias select
	  Lcd_cmd(CMD_SET_BIAS_9);
 8000888:	20a2      	movs	r0, #162	; 0xa2
 800088a:	f7ff ff67 	bl	800075c <Lcd_cmd>
	  // ADC select
	  Lcd_cmd(CMD_SET_ADC_NORMAL);
 800088e:	20a0      	movs	r0, #160	; 0xa0
 8000890:	f7ff ff64 	bl	800075c <Lcd_cmd>
	  // SHL select
	  Lcd_cmd(CMD_SET_COM_NORMAL);
 8000894:	20c0      	movs	r0, #192	; 0xc0
 8000896:	f7ff ff61 	bl	800075c <Lcd_cmd>
	  // Initial display line
	  Lcd_cmd(CMD_SET_DISP_START_LINE);
 800089a:	2040      	movs	r0, #64	; 0x40
 800089c:	f7ff ff5e 	bl	800075c <Lcd_cmd>

	  // turn on voltage converter (VC=1, VR=0, VF=0)
	  Lcd_cmd(CMD_SET_POWER_CONTROL | 0x4);
 80008a0:	202c      	movs	r0, #44	; 0x2c
 80008a2:	f7ff ff5b 	bl	800075c <Lcd_cmd>
	  // wait for 50% rising
	  HAL_Delay(50);
 80008a6:	2032      	movs	r0, #50	; 0x32
 80008a8:	f002 fe26 	bl	80034f8 <HAL_Delay>

	  // turn on voltage regulator (VC=1, VR=1, VF=0)
	  Lcd_cmd(CMD_SET_POWER_CONTROL | 0x6);
 80008ac:	202e      	movs	r0, #46	; 0x2e
 80008ae:	f7ff ff55 	bl	800075c <Lcd_cmd>
	  // wait >=50ms
	  HAL_Delay(50);
 80008b2:	2032      	movs	r0, #50	; 0x32
 80008b4:	f002 fe20 	bl	80034f8 <HAL_Delay>

	  // turn on voltage follower (VC=1, VR=1, VF=1)
	  Lcd_cmd(CMD_SET_POWER_CONTROL | 0x7);
 80008b8:	202f      	movs	r0, #47	; 0x2f
 80008ba:	f7ff ff4f 	bl	800075c <Lcd_cmd>
	  // wait
	  HAL_Delay(50);
 80008be:	2032      	movs	r0, #50	; 0x32
 80008c0:	f002 fe1a 	bl	80034f8 <HAL_Delay>

	  // set lcd operating voltage (regulator resistor, ref voltage resistor)
	  Lcd_cmd(CMD_SET_RESISTOR_RATIO | 0x4);// contrast CHANGE OPTION USING EEPROM
 80008c4:	2024      	movs	r0, #36	; 0x24
 80008c6:	f7ff ff49 	bl	800075c <Lcd_cmd>
	  // set column address
	  // write display data

	  // set up a bounding box for screen updates

	  Lcd_cmd(0xAF);    //Display on
 80008ca:	20af      	movs	r0, #175	; 0xaf
 80008cc:	f7ff ff46 	bl	800075c <Lcd_cmd>
	  Lcd_cmd(0XA4);  // Display clear all
 80008d0:	20a4      	movs	r0, #164	; 0xa4
 80008d2:	f7ff ff43 	bl	800075c <Lcd_cmd>
	}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40010c00 	.word	0x40010c00

080008e0 <lcd_x_axis>:

void lcd_x_axis(uint8_t value){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]

    Lcd_cmd(0x10|((value&0xF0)>>4));//Setting  y-address  Msb
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	091b      	lsrs	r3, r3, #4
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	f043 0310 	orr.w	r3, r3, #16
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff ff30 	bl	800075c <Lcd_cmd>
    Lcd_cmd(value&0x0F); //Setting  y-address  Lsb
 80008fc:	79fb      	ldrb	r3, [r7, #7]
 80008fe:	f003 030f 	and.w	r3, r3, #15
 8000902:	b2db      	uxtb	r3, r3
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff ff29 	bl	800075c <Lcd_cmd>
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
	...

08000914 <lcd_invert_process>:

void lcd_invert_process()
{
 8000914:	b480      	push	{r7}
 8000916:	b085      	sub	sp, #20
 8000918:	af00      	add	r7, sp, #0
	for(int y_axsis=0;y_axsis<=7;y_axsis++){
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	e01f      	b.n	8000960 <lcd_invert_process+0x4c>
		uint8_t temp_x_axsis=0;
 8000920:	2300      	movs	r3, #0
 8000922:	72fb      	strb	r3, [r7, #11]
		for(int x_axsis=127;x_axsis>=0;x_axsis--)
 8000924:	237f      	movs	r3, #127	; 0x7f
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	e014      	b.n	8000954 <lcd_invert_process+0x40>
		{
			lcd_temp_ram_1[y_axsis][temp_x_axsis++]=(lcd_temp_ram[y_axsis][x_axsis]);
 800092a:	7afb      	ldrb	r3, [r7, #11]
 800092c:	1c5a      	adds	r2, r3, #1
 800092e:	72fa      	strb	r2, [r7, #11]
 8000930:	4618      	mov	r0, r3
 8000932:	4a10      	ldr	r2, [pc, #64]	; (8000974 <lcd_invert_process+0x60>)
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	01db      	lsls	r3, r3, #7
 8000938:	441a      	add	r2, r3
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4413      	add	r3, r2
 800093e:	7819      	ldrb	r1, [r3, #0]
 8000940:	4a0d      	ldr	r2, [pc, #52]	; (8000978 <lcd_invert_process+0x64>)
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	01db      	lsls	r3, r3, #7
 8000946:	4413      	add	r3, r2
 8000948:	4403      	add	r3, r0
 800094a:	460a      	mov	r2, r1
 800094c:	701a      	strb	r2, [r3, #0]
		for(int x_axsis=127;x_axsis>=0;x_axsis--)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	3b01      	subs	r3, #1
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2b00      	cmp	r3, #0
 8000958:	dae7      	bge.n	800092a <lcd_invert_process+0x16>
	for(int y_axsis=0;y_axsis<=7;y_axsis++){
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	3301      	adds	r3, #1
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	2b07      	cmp	r3, #7
 8000964:	dddc      	ble.n	8000920 <lcd_invert_process+0xc>
		}
	}
}
 8000966:	bf00      	nop
 8000968:	bf00      	nop
 800096a:	3714      	adds	r7, #20
 800096c:	46bd      	mov	sp, r7
 800096e:	bc80      	pop	{r7}
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	200007f4 	.word	0x200007f4
 8000978:	20000bf4 	.word	0x20000bf4

0800097c <lcd_speed>:

void lcd_speed(uint8_t num){
 800097c:	b5b0      	push	{r4, r5, r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	71fb      	strb	r3, [r7, #7]
	uint8_t x_axis,y_axis,value_num=0,first_num,second_num,third_num;
 8000986:	2300      	movs	r3, #0
 8000988:	737b      	strb	r3, [r7, #13]
    first_num=num/100;
 800098a:	79fb      	ldrb	r3, [r7, #7]
 800098c:	4a50      	ldr	r2, [pc, #320]	; (8000ad0 <lcd_speed+0x154>)
 800098e:	fba2 2303 	umull	r2, r3, r2, r3
 8000992:	095b      	lsrs	r3, r3, #5
 8000994:	733b      	strb	r3, [r7, #12]
    second_num=((num%100)/10);
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	4a4d      	ldr	r2, [pc, #308]	; (8000ad0 <lcd_speed+0x154>)
 800099a:	fba2 1203 	umull	r1, r2, r2, r3
 800099e:	0952      	lsrs	r2, r2, #5
 80009a0:	2164      	movs	r1, #100	; 0x64
 80009a2:	fb01 f202 	mul.w	r2, r1, r2
 80009a6:	1a9b      	subs	r3, r3, r2
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	4a4a      	ldr	r2, [pc, #296]	; (8000ad4 <lcd_speed+0x158>)
 80009ac:	fba2 2303 	umull	r2, r3, r2, r3
 80009b0:	08db      	lsrs	r3, r3, #3
 80009b2:	72fb      	strb	r3, [r7, #11]
    third_num=((num%100)%10);
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	4a46      	ldr	r2, [pc, #280]	; (8000ad0 <lcd_speed+0x154>)
 80009b8:	fba2 1203 	umull	r1, r2, r2, r3
 80009bc:	0952      	lsrs	r2, r2, #5
 80009be:	2164      	movs	r1, #100	; 0x64
 80009c0:	fb01 f202 	mul.w	r2, r1, r2
 80009c4:	1a9b      	subs	r3, r3, r2
 80009c6:	b2da      	uxtb	r2, r3
 80009c8:	4b42      	ldr	r3, [pc, #264]	; (8000ad4 <lcd_speed+0x158>)
 80009ca:	fba3 1302 	umull	r1, r3, r3, r2
 80009ce:	08d9      	lsrs	r1, r3, #3
 80009d0:	460b      	mov	r3, r1
 80009d2:	009b      	lsls	r3, r3, #2
 80009d4:	440b      	add	r3, r1
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	1ad3      	subs	r3, r2, r3
 80009da:	72bb      	strb	r3, [r7, #10]
    value_num=0;
 80009dc:	2300      	movs	r3, #0
 80009de:	737b      	strb	r3, [r7, #13]
//        }
//    }
//


   for(y_axis=0;y_axis<4;y_axis++)
 80009e0:	2300      	movs	r3, #0
 80009e2:	73bb      	strb	r3, [r7, #14]
 80009e4:	e020      	b.n	8000a28 <lcd_speed+0xac>
	{
		for(x_axis=0;x_axis<16;x_axis++)
 80009e6:	2300      	movs	r3, #0
 80009e8:	73fb      	strb	r3, [r7, #15]
 80009ea:	e017      	b.n	8000a1c <lcd_speed+0xa0>
		{
			lcd_print_convert((0+(y_axis)),(x_axis+46),(font16x32_digits[second_num][value_num]));
 80009ec:	7bb8      	ldrb	r0, [r7, #14]
 80009ee:	7bfb      	ldrb	r3, [r7, #15]
 80009f0:	f103 042e 	add.w	r4, r3, #46	; 0x2e
 80009f4:	7afa      	ldrb	r2, [r7, #11]
 80009f6:	7b79      	ldrb	r1, [r7, #13]
 80009f8:	4d37      	ldr	r5, [pc, #220]	; (8000ad8 <lcd_speed+0x15c>)
 80009fa:	4613      	mov	r3, r2
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	4413      	add	r3, r2
 8000a00:	01db      	lsls	r3, r3, #7
 8000a02:	442b      	add	r3, r5
 8000a04:	440b      	add	r3, r1
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	461a      	mov	r2, r3
 8000a0a:	4621      	mov	r1, r4
 8000a0c:	f000 fb5a 	bl	80010c4 <lcd_print_convert>
			value_num++;
 8000a10:	7b7b      	ldrb	r3, [r7, #13]
 8000a12:	3301      	adds	r3, #1
 8000a14:	737b      	strb	r3, [r7, #13]
		for(x_axis=0;x_axis<16;x_axis++)
 8000a16:	7bfb      	ldrb	r3, [r7, #15]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	73fb      	strb	r3, [r7, #15]
 8000a1c:	7bfb      	ldrb	r3, [r7, #15]
 8000a1e:	2b0f      	cmp	r3, #15
 8000a20:	d9e4      	bls.n	80009ec <lcd_speed+0x70>
   for(y_axis=0;y_axis<4;y_axis++)
 8000a22:	7bbb      	ldrb	r3, [r7, #14]
 8000a24:	3301      	adds	r3, #1
 8000a26:	73bb      	strb	r3, [r7, #14]
 8000a28:	7bbb      	ldrb	r3, [r7, #14]
 8000a2a:	2b03      	cmp	r3, #3
 8000a2c:	d9db      	bls.n	80009e6 <lcd_speed+0x6a>
		}
	}
   value_num=0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	737b      	strb	r3, [r7, #13]
    for(y_axis=0;y_axis<4;y_axis++)
 8000a32:	2300      	movs	r3, #0
 8000a34:	73bb      	strb	r3, [r7, #14]
 8000a36:	e020      	b.n	8000a7a <lcd_speed+0xfe>
     {
         for(x_axis=0;x_axis<16;x_axis++)
 8000a38:	2300      	movs	r3, #0
 8000a3a:	73fb      	strb	r3, [r7, #15]
 8000a3c:	e017      	b.n	8000a6e <lcd_speed+0xf2>
         {

             lcd_print_convert((0+(y_axis)),(x_axis+64),(font16x32_digits[third_num][value_num]));
 8000a3e:	7bb8      	ldrb	r0, [r7, #14]
 8000a40:	7bfb      	ldrb	r3, [r7, #15]
 8000a42:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8000a46:	7aba      	ldrb	r2, [r7, #10]
 8000a48:	7b79      	ldrb	r1, [r7, #13]
 8000a4a:	4d23      	ldr	r5, [pc, #140]	; (8000ad8 <lcd_speed+0x15c>)
 8000a4c:	4613      	mov	r3, r2
 8000a4e:	009b      	lsls	r3, r3, #2
 8000a50:	4413      	add	r3, r2
 8000a52:	01db      	lsls	r3, r3, #7
 8000a54:	442b      	add	r3, r5
 8000a56:	440b      	add	r3, r1
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	4621      	mov	r1, r4
 8000a5e:	f000 fb31 	bl	80010c4 <lcd_print_convert>
             value_num++;
 8000a62:	7b7b      	ldrb	r3, [r7, #13]
 8000a64:	3301      	adds	r3, #1
 8000a66:	737b      	strb	r3, [r7, #13]
         for(x_axis=0;x_axis<16;x_axis++)
 8000a68:	7bfb      	ldrb	r3, [r7, #15]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	73fb      	strb	r3, [r7, #15]
 8000a6e:	7bfb      	ldrb	r3, [r7, #15]
 8000a70:	2b0f      	cmp	r3, #15
 8000a72:	d9e4      	bls.n	8000a3e <lcd_speed+0xc2>
    for(y_axis=0;y_axis<4;y_axis++)
 8000a74:	7bbb      	ldrb	r3, [r7, #14]
 8000a76:	3301      	adds	r3, #1
 8000a78:	73bb      	strb	r3, [r7, #14]
 8000a7a:	7bbb      	ldrb	r3, [r7, #14]
 8000a7c:	2b03      	cmp	r3, #3
 8000a7e:	d9db      	bls.n	8000a38 <lcd_speed+0xbc>
         }
     }
    value_num=0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	737b      	strb	r3, [r7, #13]
    for(y_axis=0;y_axis<1;y_axis++)
 8000a84:	2300      	movs	r3, #0
 8000a86:	73bb      	strb	r3, [r7, #14]
 8000a88:	e019      	b.n	8000abe <lcd_speed+0x142>
        {
            for(x_axis=0;x_axis<21;x_axis++)
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	73fb      	strb	r3, [r7, #15]
 8000a8e:	e010      	b.n	8000ab2 <lcd_speed+0x136>
            {

                lcd_print_convert((4+(y_axis)),(x_axis+52),kmph[value_num]);
 8000a90:	7bbb      	ldrb	r3, [r7, #14]
 8000a92:	1d18      	adds	r0, r3, #4
 8000a94:	7bfb      	ldrb	r3, [r7, #15]
 8000a96:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8000a9a:	7b7b      	ldrb	r3, [r7, #13]
 8000a9c:	4a0f      	ldr	r2, [pc, #60]	; (8000adc <lcd_speed+0x160>)
 8000a9e:	5cd3      	ldrb	r3, [r2, r3]
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	f000 fb0f 	bl	80010c4 <lcd_print_convert>
                value_num++;
 8000aa6:	7b7b      	ldrb	r3, [r7, #13]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	737b      	strb	r3, [r7, #13]
            for(x_axis=0;x_axis<21;x_axis++)
 8000aac:	7bfb      	ldrb	r3, [r7, #15]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	73fb      	strb	r3, [r7, #15]
 8000ab2:	7bfb      	ldrb	r3, [r7, #15]
 8000ab4:	2b14      	cmp	r3, #20
 8000ab6:	d9eb      	bls.n	8000a90 <lcd_speed+0x114>
    for(y_axis=0;y_axis<1;y_axis++)
 8000ab8:	7bbb      	ldrb	r3, [r7, #14]
 8000aba:	3301      	adds	r3, #1
 8000abc:	73bb      	strb	r3, [r7, #14]
 8000abe:	7bbb      	ldrb	r3, [r7, #14]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d0e2      	beq.n	8000a8a <lcd_speed+0x10e>
            }
        }
}
 8000ac4:	bf00      	nop
 8000ac6:	bf00      	nop
 8000ac8:	3710      	adds	r7, #16
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bdb0      	pop	{r4, r5, r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	51eb851f 	.word	0x51eb851f
 8000ad4:	cccccccd 	.word	0xcccccccd
 8000ad8:	08006adc 	.word	0x08006adc
 8000adc:	0800865c 	.word	0x0800865c

08000ae0 <gear_status_print>:
		 }
	 }
}

void gear_status_print(uint8_t data_gear)
{
 8000ae0:	b5b0      	push	{r4, r5, r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	71fb      	strb	r3, [r7, #7]
	uint8_t temp_gear=0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	73fb      	strb	r3, [r7, #15]
	if(data_gear==0)
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d11d      	bne.n	8000b30 <gear_status_print+0x50>
	{
		for(uint8_t y_axsis=3;y_axsis<4;y_axsis++)
 8000af4:	2303      	movs	r3, #3
 8000af6:	73bb      	strb	r3, [r7, #14]
 8000af8:	e016      	b.n	8000b28 <gear_status_print+0x48>
		{
			for(uint8_t x_axsis=0;x_axsis<29;x_axsis++)
 8000afa:	2300      	movs	r3, #0
 8000afc:	737b      	strb	r3, [r7, #13]
 8000afe:	e00d      	b.n	8000b1c <gear_status_print+0x3c>
			{
				lcd_print_convert(y_axsis,x_axsis,reverse_icon[temp_gear++]);
 8000b00:	7bb8      	ldrb	r0, [r7, #14]
 8000b02:	7b79      	ldrb	r1, [r7, #13]
 8000b04:	7bfb      	ldrb	r3, [r7, #15]
 8000b06:	1c5a      	adds	r2, r3, #1
 8000b08:	73fa      	strb	r2, [r7, #15]
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	4b1d      	ldr	r3, [pc, #116]	; (8000b84 <gear_status_print+0xa4>)
 8000b0e:	5c9b      	ldrb	r3, [r3, r2]
 8000b10:	461a      	mov	r2, r3
 8000b12:	f000 fad7 	bl	80010c4 <lcd_print_convert>
			for(uint8_t x_axsis=0;x_axsis<29;x_axsis++)
 8000b16:	7b7b      	ldrb	r3, [r7, #13]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	737b      	strb	r3, [r7, #13]
 8000b1c:	7b7b      	ldrb	r3, [r7, #13]
 8000b1e:	2b1c      	cmp	r3, #28
 8000b20:	d9ee      	bls.n	8000b00 <gear_status_print+0x20>
		for(uint8_t y_axsis=3;y_axsis<4;y_axsis++)
 8000b22:	7bbb      	ldrb	r3, [r7, #14]
 8000b24:	3301      	adds	r3, #1
 8000b26:	73bb      	strb	r3, [r7, #14]
 8000b28:	7bbb      	ldrb	r3, [r7, #14]
 8000b2a:	2b03      	cmp	r3, #3
 8000b2c:	d9e5      	bls.n	8000afa <gear_status_print+0x1a>
			{
				lcd_print_convert(y_axsis,x_axsis,gear_print[data_gear-1][temp_gear++]);
			}
		}
	}
}
 8000b2e:	e025      	b.n	8000b7c <gear_status_print+0x9c>
	 for(uint8_t y_axsis=3;y_axsis<4;y_axsis++)
 8000b30:	2303      	movs	r3, #3
 8000b32:	733b      	strb	r3, [r7, #12]
 8000b34:	e01f      	b.n	8000b76 <gear_status_print+0x96>
			for(uint8_t x_axsis=0;x_axsis<21;x_axsis++)
 8000b36:	2300      	movs	r3, #0
 8000b38:	72fb      	strb	r3, [r7, #11]
 8000b3a:	e016      	b.n	8000b6a <gear_status_print+0x8a>
				lcd_print_convert(y_axsis,x_axsis,gear_print[data_gear-1][temp_gear++]);
 8000b3c:	7b38      	ldrb	r0, [r7, #12]
 8000b3e:	7af9      	ldrb	r1, [r7, #11]
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	1e5a      	subs	r2, r3, #1
 8000b44:	7bfb      	ldrb	r3, [r7, #15]
 8000b46:	1c5c      	adds	r4, r3, #1
 8000b48:	73fc      	strb	r4, [r7, #15]
 8000b4a:	461d      	mov	r5, r3
 8000b4c:	4c0e      	ldr	r4, [pc, #56]	; (8000b88 <gear_status_print+0xa8>)
 8000b4e:	4613      	mov	r3, r2
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	4413      	add	r3, r2
 8000b54:	00da      	lsls	r2, r3, #3
 8000b56:	1ad2      	subs	r2, r2, r3
 8000b58:	18a3      	adds	r3, r4, r2
 8000b5a:	442b      	add	r3, r5
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	461a      	mov	r2, r3
 8000b60:	f000 fab0 	bl	80010c4 <lcd_print_convert>
			for(uint8_t x_axsis=0;x_axsis<21;x_axsis++)
 8000b64:	7afb      	ldrb	r3, [r7, #11]
 8000b66:	3301      	adds	r3, #1
 8000b68:	72fb      	strb	r3, [r7, #11]
 8000b6a:	7afb      	ldrb	r3, [r7, #11]
 8000b6c:	2b14      	cmp	r3, #20
 8000b6e:	d9e5      	bls.n	8000b3c <gear_status_print+0x5c>
	 for(uint8_t y_axsis=3;y_axsis<4;y_axsis++)
 8000b70:	7b3b      	ldrb	r3, [r7, #12]
 8000b72:	3301      	adds	r3, #1
 8000b74:	733b      	strb	r3, [r7, #12]
 8000b76:	7b3b      	ldrb	r3, [r7, #12]
 8000b78:	2b03      	cmp	r3, #3
 8000b7a:	d9dc      	bls.n	8000b36 <gear_status_print+0x56>
}
 8000b7c:	bf00      	nop
 8000b7e:	3710      	adds	r7, #16
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bdb0      	pop	{r4, r5, r7, pc}
 8000b84:	08006abc 	.word	0x08006abc
 8000b88:	08006a7c 	.word	0x08006a7c

08000b8c <battery_bar_print>:

void battery_bar_print(uint8_t battery_temp)
{
 8000b8c:	b5b0      	push	{r4, r5, r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	71fb      	strb	r3, [r7, #7]
	uint8_t temp_bat=0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	73fb      	strb	r3, [r7, #15]
	 for(uint8_t y_axsis=6;y_axsis<=7;y_axsis++)
 8000b9a:	2306      	movs	r3, #6
 8000b9c:	73bb      	strb	r3, [r7, #14]
 8000b9e:	e01c      	b.n	8000bda <battery_bar_print+0x4e>
		{
			for(uint8_t x_axsis=26;x_axsis<=102;x_axsis++)
 8000ba0:	231a      	movs	r3, #26
 8000ba2:	737b      	strb	r3, [r7, #13]
 8000ba4:	e013      	b.n	8000bce <battery_bar_print+0x42>
			{
				lcd_print_convert(y_axsis,x_axsis,Battery_bar[battery_temp][temp_bat++]);
 8000ba6:	7bb8      	ldrb	r0, [r7, #14]
 8000ba8:	7b79      	ldrb	r1, [r7, #13]
 8000baa:	79fa      	ldrb	r2, [r7, #7]
 8000bac:	7bfb      	ldrb	r3, [r7, #15]
 8000bae:	1c5c      	adds	r4, r3, #1
 8000bb0:	73fc      	strb	r4, [r7, #15]
 8000bb2:	461d      	mov	r5, r3
 8000bb4:	4c0d      	ldr	r4, [pc, #52]	; (8000bec <battery_bar_print+0x60>)
 8000bb6:	239a      	movs	r3, #154	; 0x9a
 8000bb8:	fb02 f303 	mul.w	r3, r2, r3
 8000bbc:	4423      	add	r3, r4
 8000bbe:	442b      	add	r3, r5
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	f000 fa7e 	bl	80010c4 <lcd_print_convert>
			for(uint8_t x_axsis=26;x_axsis<=102;x_axsis++)
 8000bc8:	7b7b      	ldrb	r3, [r7, #13]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	737b      	strb	r3, [r7, #13]
 8000bce:	7b7b      	ldrb	r3, [r7, #13]
 8000bd0:	2b66      	cmp	r3, #102	; 0x66
 8000bd2:	d9e8      	bls.n	8000ba6 <battery_bar_print+0x1a>
	 for(uint8_t y_axsis=6;y_axsis<=7;y_axsis++)
 8000bd4:	7bbb      	ldrb	r3, [r7, #14]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	73bb      	strb	r3, [r7, #14]
 8000bda:	7bbb      	ldrb	r3, [r7, #14]
 8000bdc:	2b07      	cmp	r3, #7
 8000bde:	d9df      	bls.n	8000ba0 <battery_bar_print+0x14>
			}
		}
	 temp_bat=0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	73fb      	strb	r3, [r7, #15]
}
 8000be4:	bf00      	nop
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bdb0      	pop	{r4, r5, r7, pc}
 8000bec:	20000400 	.word	0x20000400

08000bf0 <odo_icon_print>:
		}
	 temp_gear=0;
}

void odo_icon_print()
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
	uint8_t temp_gear=0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	71fb      	strb	r3, [r7, #7]
	for(uint8_t x_axsis=32;x_axsis<=47;x_axsis++)
 8000bfa:	2320      	movs	r3, #32
 8000bfc:	71bb      	strb	r3, [r7, #6]
 8000bfe:	e00d      	b.n	8000c1c <odo_icon_print+0x2c>
		{
		 	 lcd_print_convert(5,x_axsis,ODO_ICON[temp_gear++]);
 8000c00:	79b9      	ldrb	r1, [r7, #6]
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	1c5a      	adds	r2, r3, #1
 8000c06:	71fa      	strb	r2, [r7, #7]
 8000c08:	461a      	mov	r2, r3
 8000c0a:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <odo_icon_print+0x3c>)
 8000c0c:	5c9b      	ldrb	r3, [r3, r2]
 8000c0e:	461a      	mov	r2, r3
 8000c10:	2005      	movs	r0, #5
 8000c12:	f000 fa57 	bl	80010c4 <lcd_print_convert>
	for(uint8_t x_axsis=32;x_axsis<=47;x_axsis++)
 8000c16:	79bb      	ldrb	r3, [r7, #6]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	71bb      	strb	r3, [r7, #6]
 8000c1c:	79bb      	ldrb	r3, [r7, #6]
 8000c1e:	2b2f      	cmp	r3, #47	; 0x2f
 8000c20:	d9ee      	bls.n	8000c00 <odo_icon_print+0x10>
		}
}
 8000c22:	bf00      	nop
 8000c24:	bf00      	nop
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	08008674 	.word	0x08008674

08000c30 <dte_icon_print>:

void dte_icon_print()
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
	uint8_t temp_gear=0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	71fb      	strb	r3, [r7, #7]
	for(uint8_t x_axsis=83;x_axsis<=97;x_axsis++)
 8000c3a:	2353      	movs	r3, #83	; 0x53
 8000c3c:	71bb      	strb	r3, [r7, #6]
 8000c3e:	e00d      	b.n	8000c5c <dte_icon_print+0x2c>
	{
	 lcd_print_convert(0,x_axsis,DTE_ICON[temp_gear++]);
 8000c40:	79b9      	ldrb	r1, [r7, #6]
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	1c5a      	adds	r2, r3, #1
 8000c46:	71fa      	strb	r2, [r7, #7]
 8000c48:	461a      	mov	r2, r3
 8000c4a:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <dte_icon_print+0x3c>)
 8000c4c:	5c9b      	ldrb	r3, [r3, r2]
 8000c4e:	461a      	mov	r2, r3
 8000c50:	2000      	movs	r0, #0
 8000c52:	f000 fa37 	bl	80010c4 <lcd_print_convert>
	for(uint8_t x_axsis=83;x_axsis<=97;x_axsis++)
 8000c56:	79bb      	ldrb	r3, [r7, #6]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	71bb      	strb	r3, [r7, #6]
 8000c5c:	79bb      	ldrb	r3, [r7, #6]
 8000c5e:	2b61      	cmp	r3, #97	; 0x61
 8000c60:	d9ee      	bls.n	8000c40 <dte_icon_print+0x10>
	}
}
 8000c62:	bf00      	nop
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	08008684 	.word	0x08008684

08000c70 <trp_icon_print>:

void trp_icon_print()
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
	uint8_t temp_gear=0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	71fb      	strb	r3, [r7, #7]
	for(uint8_t x_axsis=36;x_axsis<=50;x_axsis++)
 8000c7a:	2324      	movs	r3, #36	; 0x24
 8000c7c:	71bb      	strb	r3, [r7, #6]
 8000c7e:	e00d      	b.n	8000c9c <trp_icon_print+0x2c>
	{
	 lcd_print_convert(5,x_axsis,TRP_ICON[temp_gear++]);
 8000c80:	79b9      	ldrb	r1, [r7, #6]
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	1c5a      	adds	r2, r3, #1
 8000c86:	71fa      	strb	r2, [r7, #7]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	4b08      	ldr	r3, [pc, #32]	; (8000cac <trp_icon_print+0x3c>)
 8000c8c:	5c9b      	ldrb	r3, [r3, r2]
 8000c8e:	461a      	mov	r2, r3
 8000c90:	2005      	movs	r0, #5
 8000c92:	f000 fa17 	bl	80010c4 <lcd_print_convert>
	for(uint8_t x_axsis=36;x_axsis<=50;x_axsis++)
 8000c96:	79bb      	ldrb	r3, [r7, #6]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	71bb      	strb	r3, [r7, #6]
 8000c9c:	79bb      	ldrb	r3, [r7, #6]
 8000c9e:	2b32      	cmp	r3, #50	; 0x32
 8000ca0:	d9ee      	bls.n	8000c80 <trp_icon_print+0x10>
	}
}
 8000ca2:	bf00      	nop
 8000ca4:	bf00      	nop
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	08008694 	.word	0x08008694

08000cb0 <lcd_print_char>:
	}
}

uint8_t print_value_int=0;
void lcd_print_char(uint8_t y_axis_start, uint8_t x_axis_start, char* print_value)//(x_axis_start, y_axis_start, icon_width, icon_height, *print_value
{
 8000cb0:	b590      	push	{r4, r7, lr}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	603a      	str	r2, [r7, #0]
 8000cba:	71fb      	strb	r3, [r7, #7]
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	71bb      	strb	r3, [r7, #6]
	uint8_t space=1;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	73fb      	strb	r3, [r7, #15]
	Lcd_cmd((0xB0|(y_axis_start)));
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff fd45 	bl	800075c <Lcd_cmd>
	lcd_x_axis(x_axis_start);
 8000cd2:	79bb      	ldrb	r3, [r7, #6]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff fe03 	bl	80008e0 <lcd_x_axis>
	while(*print_value)
 8000cda:	e0b1      	b.n	8000e40 <lcd_print_char+0x190>
	{
	 for(int temp1=0;temp1<5;temp1++)
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60bb      	str	r3, [r7, #8]
 8000ce0:	e09a      	b.n	8000e18 <lcd_print_char+0x168>
			{
			 if((*print_value>=65)&&(*print_value<=90))
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2b40      	cmp	r3, #64	; 0x40
 8000ce8:	d91f      	bls.n	8000d2a <lcd_print_char+0x7a>
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	2b5a      	cmp	r3, #90	; 0x5a
 8000cf0:	d81b      	bhi.n	8000d2a <lcd_print_char+0x7a>
				{
				 print_value_int=*print_value;
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	781a      	ldrb	r2, [r3, #0]
 8000cf6:	4b57      	ldr	r3, [pc, #348]	; (8000e54 <lcd_print_char+0x1a4>)
 8000cf8:	701a      	strb	r2, [r3, #0]
				// lcd_print(alphabet[print_value_int-65][temp1]);
				 lcd_print_convert(y_axis_start, x_axis_start++, (alphabet[print_value_int-65][temp1])<<1);
 8000cfa:	79f8      	ldrb	r0, [r7, #7]
 8000cfc:	79bb      	ldrb	r3, [r7, #6]
 8000cfe:	1c5a      	adds	r2, r3, #1
 8000d00:	71ba      	strb	r2, [r7, #6]
 8000d02:	461c      	mov	r4, r3
 8000d04:	4b53      	ldr	r3, [pc, #332]	; (8000e54 <lcd_print_char+0x1a4>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8000d0c:	4952      	ldr	r1, [pc, #328]	; (8000e58 <lcd_print_char+0x1a8>)
 8000d0e:	4613      	mov	r3, r2
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	4413      	add	r3, r2
 8000d14:	18ca      	adds	r2, r1, r3
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	4413      	add	r3, r2
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	461a      	mov	r2, r3
 8000d20:	4621      	mov	r1, r4
 8000d22:	f000 f9cf 	bl	80010c4 <lcd_print_convert>
				 space=1;
 8000d26:	2301      	movs	r3, #1
 8000d28:	73fb      	strb	r3, [r7, #15]
				}

			 if((*print_value>=97)&&(*print_value<=124))
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b60      	cmp	r3, #96	; 0x60
 8000d30:	d91f      	bls.n	8000d72 <lcd_print_char+0xc2>
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b7c      	cmp	r3, #124	; 0x7c
 8000d38:	d81b      	bhi.n	8000d72 <lcd_print_char+0xc2>
				{
				 print_value_int=*print_value;
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	781a      	ldrb	r2, [r3, #0]
 8000d3e:	4b45      	ldr	r3, [pc, #276]	; (8000e54 <lcd_print_char+0x1a4>)
 8000d40:	701a      	strb	r2, [r3, #0]
				 //lcd_print(alphabet[print_value_int-71][temp1]);

				 lcd_print_convert(y_axis_start,x_axis_start++, (alphabet[print_value_int-71][temp1])<<1);
 8000d42:	79f8      	ldrb	r0, [r7, #7]
 8000d44:	79bb      	ldrb	r3, [r7, #6]
 8000d46:	1c5a      	adds	r2, r3, #1
 8000d48:	71ba      	strb	r2, [r7, #6]
 8000d4a:	461c      	mov	r4, r3
 8000d4c:	4b41      	ldr	r3, [pc, #260]	; (8000e54 <lcd_print_char+0x1a4>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	f1a3 0247 	sub.w	r2, r3, #71	; 0x47
 8000d54:	4940      	ldr	r1, [pc, #256]	; (8000e58 <lcd_print_char+0x1a8>)
 8000d56:	4613      	mov	r3, r2
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	4413      	add	r3, r2
 8000d5c:	18ca      	adds	r2, r1, r3
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	4413      	add	r3, r2
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	461a      	mov	r2, r3
 8000d68:	4621      	mov	r1, r4
 8000d6a:	f000 f9ab 	bl	80010c4 <lcd_print_convert>
				 space=0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	73fb      	strb	r3, [r7, #15]
				}

			 if((*print_value>=48)&&(*print_value<=57))
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b2f      	cmp	r3, #47	; 0x2f
 8000d78:	d920      	bls.n	8000dbc <lcd_print_char+0x10c>
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b39      	cmp	r3, #57	; 0x39
 8000d80:	d81c      	bhi.n	8000dbc <lcd_print_char+0x10c>
				{
				 print_value_int=*print_value;
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	781a      	ldrb	r2, [r3, #0]
 8000d86:	4b33      	ldr	r3, [pc, #204]	; (8000e54 <lcd_print_char+0x1a4>)
 8000d88:	701a      	strb	r2, [r3, #0]
				 //lcd_print(digit[print_value_int-48][temp1]);

				 lcd_print_convert(y_axis_start, x_axis_start++, (digit[print_value_int-48][temp1])<<1);
 8000d8a:	79f8      	ldrb	r0, [r7, #7]
 8000d8c:	79bb      	ldrb	r3, [r7, #6]
 8000d8e:	1c5a      	adds	r2, r3, #1
 8000d90:	71ba      	strb	r2, [r7, #6]
 8000d92:	461c      	mov	r4, r3
 8000d94:	4b2f      	ldr	r3, [pc, #188]	; (8000e54 <lcd_print_char+0x1a4>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000d9c:	492f      	ldr	r1, [pc, #188]	; (8000e5c <lcd_print_char+0x1ac>)
 8000d9e:	4613      	mov	r3, r2
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	4413      	add	r3, r2
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	18ca      	adds	r2, r1, r3
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	4413      	add	r3, r2
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	461a      	mov	r2, r3
 8000db2:	4621      	mov	r1, r4
 8000db4:	f000 f986 	bl	80010c4 <lcd_print_convert>
				 space=1;
 8000db8:	2301      	movs	r3, #1
 8000dba:	73fb      	strb	r3, [r7, #15]
				}
			 if(*print_value==46)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b2e      	cmp	r3, #46	; 0x2e
 8000dc2:	d108      	bne.n	8000dd6 <lcd_print_char+0x126>
				 {
				 // lcd_print(0x00);
				  lcd_print_convert(y_axis_start, x_axis_start++, 0x40 );
 8000dc4:	79f8      	ldrb	r0, [r7, #7]
 8000dc6:	79bb      	ldrb	r3, [r7, #6]
 8000dc8:	1c5a      	adds	r2, r3, #1
 8000dca:	71ba      	strb	r2, [r7, #6]
 8000dcc:	2240      	movs	r2, #64	; 0x40
 8000dce:	4619      	mov	r1, r3
 8000dd0:	f000 f978 	bl	80010c4 <lcd_print_convert>
				  break;
 8000dd4:	e024      	b.n	8000e20 <lcd_print_char+0x170>
				 }
			 if(*print_value==32)
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	2b20      	cmp	r3, #32
 8000ddc:	d108      	bne.n	8000df0 <lcd_print_char+0x140>
				 {
				 // lcd_print(0x00);
				  lcd_print_convert(y_axis_start, x_axis_start++, 0x00 );
 8000dde:	79f8      	ldrb	r0, [r7, #7]
 8000de0:	79bb      	ldrb	r3, [r7, #6]
 8000de2:	1c5a      	adds	r2, r3, #1
 8000de4:	71ba      	strb	r2, [r7, #6]
 8000de6:	2200      	movs	r2, #0
 8000de8:	4619      	mov	r1, r3
 8000dea:	f000 f96b 	bl	80010c4 <lcd_print_convert>
				  break;
 8000dee:	e017      	b.n	8000e20 <lcd_print_char+0x170>
				 }

			 if(*print_value==37)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b25      	cmp	r3, #37	; 0x25
 8000df6:	d10c      	bne.n	8000e12 <lcd_print_char+0x162>
			 {
				 lcd_print_convert(y_axis_start, x_axis_start++,persentage[temp1]<<1);
 8000df8:	79f8      	ldrb	r0, [r7, #7]
 8000dfa:	79bb      	ldrb	r3, [r7, #6]
 8000dfc:	1c5a      	adds	r2, r3, #1
 8000dfe:	71ba      	strb	r2, [r7, #6]
 8000e00:	4619      	mov	r1, r3
 8000e02:	4a17      	ldr	r2, [pc, #92]	; (8000e60 <lcd_print_char+0x1b0>)
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	4413      	add	r3, r2
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	f000 f959 	bl	80010c4 <lcd_print_convert>
	 for(int temp1=0;temp1<5;temp1++)
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	3301      	adds	r3, #1
 8000e16:	60bb      	str	r3, [r7, #8]
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	2b04      	cmp	r3, #4
 8000e1c:	f77f af61 	ble.w	8000ce2 <lcd_print_char+0x32>
			 }
		 }
	 print_value++;
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	3301      	adds	r3, #1
 8000e24:	603b      	str	r3, [r7, #0]
	 //lcd_print(0x00);
	 if(space)
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d009      	beq.n	8000e40 <lcd_print_char+0x190>
	 {
		 lcd_print_convert(y_axis_start, x_axis_start++, 0x00 );
 8000e2c:	79f8      	ldrb	r0, [r7, #7]
 8000e2e:	79bb      	ldrb	r3, [r7, #6]
 8000e30:	1c5a      	adds	r2, r3, #1
 8000e32:	71ba      	strb	r2, [r7, #6]
 8000e34:	2200      	movs	r2, #0
 8000e36:	4619      	mov	r1, r3
 8000e38:	f000 f944 	bl	80010c4 <lcd_print_convert>
		 space=0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	73fb      	strb	r3, [r7, #15]
	while(*print_value)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	f47f af49 	bne.w	8000cdc <lcd_print_char+0x2c>
	 }
	}
}
 8000e4a:	bf00      	nop
 8000e4c:	bf00      	nop
 8000e4e:	3714      	adds	r7, #20
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd90      	pop	{r4, r7, pc}
 8000e54:	20000ff4 	.word	0x20000ff4
 8000e58:	08006948 	.word	0x08006948
 8000e5c:	0800690c 	.word	0x0800690c
 8000e60:	08006904 	.word	0x08006904

08000e64 <lcd_clear>:
void lcd_clear(uint8_t y_axsis,uint8_t x_axsis, uint8_t count)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	71fb      	strb	r3, [r7, #7]
 8000e6e:	460b      	mov	r3, r1
 8000e70:	71bb      	strb	r3, [r7, #6]
 8000e72:	4613      	mov	r3, r2
 8000e74:	717b      	strb	r3, [r7, #5]
	for(uint8_t x_axis_start=0;x_axis_start<=count;x_axis_start++)
 8000e76:	2300      	movs	r3, #0
 8000e78:	73fb      	strb	r3, [r7, #15]
 8000e7a:	e00d      	b.n	8000e98 <lcd_clear+0x34>
	{
		lcd_temp_ram[y_axsis][x_axsis++]=0x00;
 8000e7c:	79fa      	ldrb	r2, [r7, #7]
 8000e7e:	79bb      	ldrb	r3, [r7, #6]
 8000e80:	1c59      	adds	r1, r3, #1
 8000e82:	71b9      	strb	r1, [r7, #6]
 8000e84:	4618      	mov	r0, r3
 8000e86:	4909      	ldr	r1, [pc, #36]	; (8000eac <lcd_clear+0x48>)
 8000e88:	01d3      	lsls	r3, r2, #7
 8000e8a:	440b      	add	r3, r1
 8000e8c:	4403      	add	r3, r0
 8000e8e:	2200      	movs	r2, #0
 8000e90:	701a      	strb	r2, [r3, #0]
	for(uint8_t x_axis_start=0;x_axis_start<=count;x_axis_start++)
 8000e92:	7bfb      	ldrb	r3, [r7, #15]
 8000e94:	3301      	adds	r3, #1
 8000e96:	73fb      	strb	r3, [r7, #15]
 8000e98:	7bfa      	ldrb	r2, [r7, #15]
 8000e9a:	797b      	ldrb	r3, [r7, #5]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d9ed      	bls.n	8000e7c <lcd_clear+0x18>
	}
}
 8000ea0:	bf00      	nop
 8000ea2:	bf00      	nop
 8000ea4:	3714      	adds	r7, #20
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr
 8000eac:	200007f4 	.word	0x200007f4

08000eb0 <lcd_print_digit_wos>:
void lcd_print_digit_wos(uint8_t y_axis_start, uint8_t x_axis_start,uint8_t print_value)//(x_axis_start, y_axis_start, icon_width, icon_height, *print_value
{
 8000eb0:	b590      	push	{r4, r7, lr}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
 8000eba:	460b      	mov	r3, r1
 8000ebc:	71bb      	strb	r3, [r7, #6]
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	717b      	strb	r3, [r7, #5]
	Lcd_cmd((0xB0|(y_axis_start)));
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fc46 	bl	800075c <Lcd_cmd>
	lcd_x_axis(x_axis_start);
 8000ed0:	79bb      	ldrb	r3, [r7, #6]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff fd04 	bl	80008e0 <lcd_x_axis>
	for(int temp1=0;temp1<5;temp1++)
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	e016      	b.n	8000f0c <lcd_print_digit_wos+0x5c>
	{
		//lcd_print(digit[currentDigit][temp1]);
		lcd_print_convert(y_axis_start, x_axis_start++, (digit[print_value][temp1])<<1);
 8000ede:	79f8      	ldrb	r0, [r7, #7]
 8000ee0:	79bb      	ldrb	r3, [r7, #6]
 8000ee2:	1c5a      	adds	r2, r3, #1
 8000ee4:	71ba      	strb	r2, [r7, #6]
 8000ee6:	461c      	mov	r4, r3
 8000ee8:	797a      	ldrb	r2, [r7, #5]
 8000eea:	4910      	ldr	r1, [pc, #64]	; (8000f2c <lcd_print_digit_wos+0x7c>)
 8000eec:	4613      	mov	r3, r2
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	4413      	add	r3, r2
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	18ca      	adds	r2, r1, r3
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	4413      	add	r3, r2
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	461a      	mov	r2, r3
 8000f00:	4621      	mov	r1, r4
 8000f02:	f000 f8df 	bl	80010c4 <lcd_print_convert>
	for(int temp1=0;temp1<5;temp1++)
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	2b04      	cmp	r3, #4
 8000f10:	dde5      	ble.n	8000ede <lcd_print_digit_wos+0x2e>
	}
	lcd_print_convert(y_axis_start, x_axis_start++, 0X00);
 8000f12:	79f8      	ldrb	r0, [r7, #7]
 8000f14:	79bb      	ldrb	r3, [r7, #6]
 8000f16:	1c5a      	adds	r2, r3, #1
 8000f18:	71ba      	strb	r2, [r7, #6]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	f000 f8d1 	bl	80010c4 <lcd_print_convert>
}
 8000f22:	bf00      	nop
 8000f24:	3714      	adds	r7, #20
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd90      	pop	{r4, r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	0800690c 	.word	0x0800690c

08000f30 <lcd_print_digit>:
void lcd_print_digit(uint8_t y_axis_start, uint8_t x_axis_start,uint16_t print_value)//(x_axis_start, y_axis_start, icon_width, icon_height, *print_value
{
 8000f30:	b590      	push	{r4, r7, lr}
 8000f32:	b08b      	sub	sp, #44	; 0x2c
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	71bb      	strb	r3, [r7, #6]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	80bb      	strh	r3, [r7, #4]
  uint8_t digitCount=0;
 8000f42:	2300      	movs	r3, #0
 8000f44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int originalNumber = print_value;
 8000f48:	88bb      	ldrh	r3, [r7, #4]
 8000f4a:	623b      	str	r3, [r7, #32]
	Lcd_cmd((0xB0|(y_axis_start)));
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff fc01 	bl	800075c <Lcd_cmd>
	lcd_x_axis(x_axis_start);
 8000f5a:	79bb      	ldrb	r3, [r7, #6]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff fcbf 	bl	80008e0 <lcd_x_axis>
	int num_digit=0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
	while (originalNumber > 0)
 8000f66:	e00c      	b.n	8000f82 <lcd_print_digit+0x52>
		{
			digitCount++;
 8000f68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			originalNumber /= 10;
 8000f72:	6a3b      	ldr	r3, [r7, #32]
 8000f74:	4a34      	ldr	r2, [pc, #208]	; (8001048 <lcd_print_digit+0x118>)
 8000f76:	fb82 1203 	smull	r1, r2, r2, r3
 8000f7a:	1092      	asrs	r2, r2, #2
 8000f7c:	17db      	asrs	r3, r3, #31
 8000f7e:	1ad3      	subs	r3, r2, r3
 8000f80:	623b      	str	r3, [r7, #32]
	while (originalNumber > 0)
 8000f82:	6a3b      	ldr	r3, [r7, #32]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	dcef      	bgt.n	8000f68 <lcd_print_digit+0x38>
		}

	for (int8_t temp_flag_1 = digitCount - 1; temp_flag_1 >= 0; temp_flag_1--)
 8000f88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f8c:	3b01      	subs	r3, #1
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	77fb      	strb	r3, [r7, #31]
 8000f92:	e04e      	b.n	8001032 <lcd_print_digit+0x102>
	{
		  // Extract the digit at position i
		  int divisor = 1;
 8000f94:	2301      	movs	r3, #1
 8000f96:	61bb      	str	r3, [r7, #24]
		  for (uint8_t temp_flag_2 = 0; temp_flag_2 < temp_flag_1; temp_flag_2++) {
 8000f98:	2300      	movs	r3, #0
 8000f9a:	75fb      	strb	r3, [r7, #23]
 8000f9c:	e008      	b.n	8000fb0 <lcd_print_digit+0x80>
			  divisor *= 10;
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	4413      	add	r3, r2
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	61bb      	str	r3, [r7, #24]
		  for (uint8_t temp_flag_2 = 0; temp_flag_2 < temp_flag_1; temp_flag_2++) {
 8000faa:	7dfb      	ldrb	r3, [r7, #23]
 8000fac:	3301      	adds	r3, #1
 8000fae:	75fb      	strb	r3, [r7, #23]
 8000fb0:	7dfa      	ldrb	r2, [r7, #23]
 8000fb2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	dbf1      	blt.n	8000f9e <lcd_print_digit+0x6e>
	}
	  uint8_t currentDigit = (print_value / divisor) % 10;
 8000fba:	88ba      	ldrh	r2, [r7, #4]
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	fb92 f2f3 	sdiv	r2, r2, r3
 8000fc2:	4b21      	ldr	r3, [pc, #132]	; (8001048 <lcd_print_digit+0x118>)
 8000fc4:	fb83 1302 	smull	r1, r3, r3, r2
 8000fc8:	1099      	asrs	r1, r3, #2
 8000fca:	17d3      	asrs	r3, r2, #31
 8000fcc:	1ac9      	subs	r1, r1, r3
 8000fce:	460b      	mov	r3, r1
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	440b      	add	r3, r1
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	1ad1      	subs	r1, r2, r3
 8000fd8:	460b      	mov	r3, r1
 8000fda:	72bb      	strb	r3, [r7, #10]
		for(int temp1=0;temp1<5;temp1++)
 8000fdc:	2300      	movs	r3, #0
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	e016      	b.n	8001010 <lcd_print_digit+0xe0>
		{
			//lcd_print(digit[currentDigit][temp1]);
			lcd_print_convert(y_axis_start, x_axis_start++, (digit[currentDigit][temp1])<<1);
 8000fe2:	79f8      	ldrb	r0, [r7, #7]
 8000fe4:	79bb      	ldrb	r3, [r7, #6]
 8000fe6:	1c5a      	adds	r2, r3, #1
 8000fe8:	71ba      	strb	r2, [r7, #6]
 8000fea:	461c      	mov	r4, r3
 8000fec:	7aba      	ldrb	r2, [r7, #10]
 8000fee:	4917      	ldr	r1, [pc, #92]	; (800104c <lcd_print_digit+0x11c>)
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	4413      	add	r3, r2
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	18ca      	adds	r2, r1, r3
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	461a      	mov	r2, r3
 8001004:	4621      	mov	r1, r4
 8001006:	f000 f85d 	bl	80010c4 <lcd_print_convert>
		for(int temp1=0;temp1<5;temp1++)
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	3301      	adds	r3, #1
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	2b04      	cmp	r3, #4
 8001014:	dde5      	ble.n	8000fe2 <lcd_print_digit+0xb2>
		}
		lcd_print_convert(y_axis_start, x_axis_start++, 0X00);
 8001016:	79f8      	ldrb	r0, [r7, #7]
 8001018:	79bb      	ldrb	r3, [r7, #6]
 800101a:	1c5a      	adds	r2, r3, #1
 800101c:	71ba      	strb	r2, [r7, #6]
 800101e:	2200      	movs	r2, #0
 8001020:	4619      	mov	r1, r3
 8001022:	f000 f84f 	bl	80010c4 <lcd_print_convert>
	for (int8_t temp_flag_1 = digitCount - 1; temp_flag_1 >= 0; temp_flag_1--)
 8001026:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800102a:	b2db      	uxtb	r3, r3
 800102c:	3b01      	subs	r3, #1
 800102e:	b2db      	uxtb	r3, r3
 8001030:	77fb      	strb	r3, [r7, #31]
 8001032:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001036:	2b00      	cmp	r3, #0
 8001038:	daac      	bge.n	8000f94 <lcd_print_digit+0x64>
}
uint8_t print_value_int=0;
 800103a:	2300      	movs	r3, #0
 800103c:	72fb      	strb	r3, [r7, #11]
}
 800103e:	bf00      	nop
 8001040:	372c      	adds	r7, #44	; 0x2c
 8001042:	46bd      	mov	sp, r7
 8001044:	bd90      	pop	{r4, r7, pc}
 8001046:	bf00      	nop
 8001048:	66666667 	.word	0x66666667
 800104c:	0800690c 	.word	0x0800690c

08001050 <lcd_into>:

void lcd_into()
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
	uint16_t temp=0;
 8001056:	2300      	movs	r3, #0
 8001058:	80fb      	strh	r3, [r7, #6]
	for(uint8_t y_axsis=0;y_axsis<=7;y_axsis++)
 800105a:	2300      	movs	r3, #0
 800105c:	717b      	strb	r3, [r7, #5]
 800105e:	e017      	b.n	8001090 <lcd_into+0x40>
		{
			for(uint8_t x_axsis=0;x_axsis<=127;x_axsis++)
 8001060:	2300      	movs	r3, #0
 8001062:	713b      	strb	r3, [r7, #4]
 8001064:	e00d      	b.n	8001082 <lcd_into+0x32>
			{
				lcd_print_convert(y_axsis,x_axsis,intro1[temp++]);
 8001066:	7978      	ldrb	r0, [r7, #5]
 8001068:	7939      	ldrb	r1, [r7, #4]
 800106a:	88fb      	ldrh	r3, [r7, #6]
 800106c:	1c5a      	adds	r2, r3, #1
 800106e:	80fa      	strh	r2, [r7, #6]
 8001070:	461a      	mov	r2, r3
 8001072:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <lcd_into+0x70>)
 8001074:	5c9b      	ldrb	r3, [r3, r2]
 8001076:	461a      	mov	r2, r3
 8001078:	f000 f824 	bl	80010c4 <lcd_print_convert>
			for(uint8_t x_axsis=0;x_axsis<=127;x_axsis++)
 800107c:	793b      	ldrb	r3, [r7, #4]
 800107e:	3301      	adds	r3, #1
 8001080:	713b      	strb	r3, [r7, #4]
 8001082:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001086:	2b00      	cmp	r3, #0
 8001088:	daed      	bge.n	8001066 <lcd_into+0x16>
	for(uint8_t y_axsis=0;y_axsis<=7;y_axsis++)
 800108a:	797b      	ldrb	r3, [r7, #5]
 800108c:	3301      	adds	r3, #1
 800108e:	717b      	strb	r3, [r7, #5]
 8001090:	797b      	ldrb	r3, [r7, #5]
 8001092:	2b07      	cmp	r3, #7
 8001094:	d9e4      	bls.n	8001060 <lcd_into+0x10>
			}
		}
	 Lcd_cmd(0xA2);// ADC select
 8001096:	20a2      	movs	r0, #162	; 0xa2
 8001098:	f7ff fb60 	bl	800075c <Lcd_cmd>
	 Lcd_cmd(0xA0);// SHL select
 800109c:	20a0      	movs	r0, #160	; 0xa0
 800109e:	f7ff fb5d 	bl	800075c <Lcd_cmd>
	 Lcd_cmd(0xC0);// Initial display line
 80010a2:	20c0      	movs	r0, #192	; 0xc0
 80010a4:	f7ff fb5a 	bl	800075c <Lcd_cmd>
	 Lcd_cmd(0x40);
 80010a8:	2040      	movs	r0, #64	; 0x40
 80010aa:	f7ff fb57 	bl	800075c <Lcd_cmd>
	 lcd_invert_process();
 80010ae:	f7ff fc31 	bl	8000914 <lcd_invert_process>
	 lcd_print_ram_1();
 80010b2:	f7ff fb81 	bl	80007b8 <lcd_print_ram_1>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000000 	.word	0x20000000

080010c4 <lcd_print_convert>:


void lcd_print_convert(uint8_t y_axsis,uint8_t x_axsis,uint8_t data)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	71fb      	strb	r3, [r7, #7]
 80010ce:	460b      	mov	r3, r1
 80010d0:	71bb      	strb	r3, [r7, #6]
 80010d2:	4613      	mov	r3, r2
 80010d4:	717b      	strb	r3, [r7, #5]
	lcd_temp_ram[y_axsis][x_axsis]=data;
 80010d6:	79fa      	ldrb	r2, [r7, #7]
 80010d8:	79bb      	ldrb	r3, [r7, #6]
 80010da:	4905      	ldr	r1, [pc, #20]	; (80010f0 <lcd_print_convert+0x2c>)
 80010dc:	01d2      	lsls	r2, r2, #7
 80010de:	440a      	add	r2, r1
 80010e0:	4413      	add	r3, r2
 80010e2:	797a      	ldrb	r2, [r7, #5]
 80010e4:	701a      	strb	r2, [r3, #0]
}
 80010e6:	bf00      	nop
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bc80      	pop	{r7}
 80010ee:	4770      	bx	lr
 80010f0:	200007f4 	.word	0x200007f4

080010f4 <line_print>:
			   lcd_print_convert((1+(y_axis)),(x_axis+7),time_am[x_axis]);
		   }
	   }
}
void line_print()
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
	 for(uint8_t y_axis=0;y_axis<1;y_axis++)
 80010fa:	2300      	movs	r3, #0
 80010fc:	71fb      	strb	r3, [r7, #7]
 80010fe:	e014      	b.n	800112a <line_print+0x36>
			   {
		for(uint8_t x_axis=0;x_axis<128;x_axis++)
 8001100:	2300      	movs	r3, #0
 8001102:	71bb      	strb	r3, [r7, #6]
 8001104:	e00a      	b.n	800111c <line_print+0x28>
		   {
			//if(x_axis==26){x_axis=102;}
			   lcd_print_convert((6+(y_axis)),(x_axis),0x04);
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	3306      	adds	r3, #6
 800110a:	b2db      	uxtb	r3, r3
 800110c:	79b9      	ldrb	r1, [r7, #6]
 800110e:	2204      	movs	r2, #4
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ffd7 	bl	80010c4 <lcd_print_convert>
		for(uint8_t x_axis=0;x_axis<128;x_axis++)
 8001116:	79bb      	ldrb	r3, [r7, #6]
 8001118:	3301      	adds	r3, #1
 800111a:	71bb      	strb	r3, [r7, #6]
 800111c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001120:	2b00      	cmp	r3, #0
 8001122:	daf0      	bge.n	8001106 <line_print+0x12>
	 for(uint8_t y_axis=0;y_axis<1;y_axis++)
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	3301      	adds	r3, #1
 8001128:	71fb      	strb	r3, [r7, #7]
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d0e7      	beq.n	8001100 <line_print+0xc>
		   }
	   }
}
 8001130:	bf00      	nop
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <merge>:
 * Data will be splitting and merging  based on the requirement and stored in a corresponding variable
 * It likely disassembles larger data units into smaller parts or combines smaller parts to form larger data entities.s
 */

void merge(uint32_t Id)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
switch(Id)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4a78      	ldr	r2, [pc, #480]	; (8001328 <merge+0x1ec>)
 8001148:	4293      	cmp	r3, r2
 800114a:	f000 8421 	beq.w	8001990 <merge+0x854>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a75      	ldr	r2, [pc, #468]	; (8001328 <merge+0x1ec>)
 8001152:	4293      	cmp	r3, r2
 8001154:	f200 86b4 	bhi.w	8001ec0 <merge+0xd84>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4a74      	ldr	r2, [pc, #464]	; (800132c <merge+0x1f0>)
 800115c:	4293      	cmp	r3, r2
 800115e:	f000 819d 	beq.w	800149c <merge+0x360>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a71      	ldr	r2, [pc, #452]	; (800132c <merge+0x1f0>)
 8001166:	4293      	cmp	r3, r2
 8001168:	f200 86aa 	bhi.w	8001ec0 <merge+0xd84>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4a70      	ldr	r2, [pc, #448]	; (8001330 <merge+0x1f4>)
 8001170:	4293      	cmp	r3, r2
 8001172:	f000 8171 	beq.w	8001458 <merge+0x31c>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a6d      	ldr	r2, [pc, #436]	; (8001330 <merge+0x1f4>)
 800117a:	4293      	cmp	r3, r2
 800117c:	f200 86a0 	bhi.w	8001ec0 <merge+0xd84>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4a6c      	ldr	r2, [pc, #432]	; (8001334 <merge+0x1f8>)
 8001184:	4293      	cmp	r3, r2
 8001186:	f000 869d 	beq.w	8001ec4 <merge+0xd88>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a69      	ldr	r2, [pc, #420]	; (8001334 <merge+0x1f8>)
 800118e:	4293      	cmp	r3, r2
 8001190:	f200 8696 	bhi.w	8001ec0 <merge+0xd84>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a68      	ldr	r2, [pc, #416]	; (8001338 <merge+0x1fc>)
 8001198:	4293      	cmp	r3, r2
 800119a:	f000 80df 	beq.w	800135c <merge+0x220>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a65      	ldr	r2, [pc, #404]	; (8001338 <merge+0x1fc>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	f200 868c 	bhi.w	8001ec0 <merge+0xd84>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4a64      	ldr	r2, [pc, #400]	; (800133c <merge+0x200>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	f000 8096 	beq.w	80012de <merge+0x1a2>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a61      	ldr	r2, [pc, #388]	; (800133c <merge+0x200>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	f200 8682 	bhi.w	8001ec0 <merge+0xd84>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4a60      	ldr	r2, [pc, #384]	; (8001340 <merge+0x204>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d07a      	beq.n	80012ba <merge+0x17e>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4a5e      	ldr	r2, [pc, #376]	; (8001340 <merge+0x204>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	f200 8679 	bhi.w	8001ec0 <merge+0xd84>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a5c      	ldr	r2, [pc, #368]	; (8001344 <merge+0x208>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d04f      	beq.n	8001276 <merge+0x13a>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a5a      	ldr	r2, [pc, #360]	; (8001344 <merge+0x208>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	f200 8670 	bhi.w	8001ec0 <merge+0xd84>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4a59      	ldr	r2, [pc, #356]	; (8001348 <merge+0x20c>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d010      	beq.n	800120a <merge+0xce>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4a57      	ldr	r2, [pc, #348]	; (8001348 <merge+0x20c>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	f200 8667 	bhi.w	8001ec0 <merge+0xd84>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a55      	ldr	r2, [pc, #340]	; (800134c <merge+0x210>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	f000 8652 	beq.w	8001ea0 <merge+0xd64>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4a54      	ldr	r2, [pc, #336]	; (8001350 <merge+0x214>)
 8001200:	4293      	cmp	r3, r2
 8001202:	f000 863f 	beq.w	8001e84 <merge+0xd48>
	             BMS.Battery_capacity = (((Received_Data[2]<<8)|Received_Data[3])/1000);//The battery rated capacity in Ah eg(58 Ah)
	             break;

default:

	break;
 8001206:	f000 be5b 	b.w	8001ec0 <merge+0xd84>
				 BMS.Cumulative_Total_Voltage = (Received_Data[0]<<8)|Received_Data[1];//Cumulative total voltage of BMS
 800120a:	4b52      	ldr	r3, [pc, #328]	; (8001354 <merge+0x218>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	021b      	lsls	r3, r3, #8
 8001210:	b21a      	sxth	r2, r3
 8001212:	4b50      	ldr	r3, [pc, #320]	; (8001354 <merge+0x218>)
 8001214:	785b      	ldrb	r3, [r3, #1]
 8001216:	b21b      	sxth	r3, r3
 8001218:	4313      	orrs	r3, r2
 800121a:	b21b      	sxth	r3, r3
 800121c:	b29a      	uxth	r2, r3
 800121e:	4b4e      	ldr	r3, [pc, #312]	; (8001358 <merge+0x21c>)
 8001220:	801a      	strh	r2, [r3, #0]
				 BMS.Gather_Total_Voltage = (Received_Data[2]<<8)|Received_Data[3];//Gather total voltage of BMS
 8001222:	4b4c      	ldr	r3, [pc, #304]	; (8001354 <merge+0x218>)
 8001224:	789b      	ldrb	r3, [r3, #2]
 8001226:	021b      	lsls	r3, r3, #8
 8001228:	b21a      	sxth	r2, r3
 800122a:	4b4a      	ldr	r3, [pc, #296]	; (8001354 <merge+0x218>)
 800122c:	78db      	ldrb	r3, [r3, #3]
 800122e:	b21b      	sxth	r3, r3
 8001230:	4313      	orrs	r3, r2
 8001232:	b21b      	sxth	r3, r3
 8001234:	b29a      	uxth	r2, r3
 8001236:	4b48      	ldr	r3, [pc, #288]	; (8001358 <merge+0x21c>)
 8001238:	805a      	strh	r2, [r3, #2]
				 BMS.Current = ((Received_Data[4]<<8)|Received_Data[5])-30000;//Total Current of BMS
 800123a:	4b46      	ldr	r3, [pc, #280]	; (8001354 <merge+0x218>)
 800123c:	791b      	ldrb	r3, [r3, #4]
 800123e:	021b      	lsls	r3, r3, #8
 8001240:	b21a      	sxth	r2, r3
 8001242:	4b44      	ldr	r3, [pc, #272]	; (8001354 <merge+0x218>)
 8001244:	795b      	ldrb	r3, [r3, #5]
 8001246:	b21b      	sxth	r3, r3
 8001248:	4313      	orrs	r3, r2
 800124a:	b21b      	sxth	r3, r3
 800124c:	b29b      	uxth	r3, r3
 800124e:	f5a3 43ea 	sub.w	r3, r3, #29952	; 0x7500
 8001252:	3b30      	subs	r3, #48	; 0x30
 8001254:	b29a      	uxth	r2, r3
 8001256:	4b40      	ldr	r3, [pc, #256]	; (8001358 <merge+0x21c>)
 8001258:	809a      	strh	r2, [r3, #4]
				 BMS.SOC = (Received_Data[6]<<8)|Received_Data[7];//state of charge of BMS
 800125a:	4b3e      	ldr	r3, [pc, #248]	; (8001354 <merge+0x218>)
 800125c:	799b      	ldrb	r3, [r3, #6]
 800125e:	021b      	lsls	r3, r3, #8
 8001260:	b21a      	sxth	r2, r3
 8001262:	4b3c      	ldr	r3, [pc, #240]	; (8001354 <merge+0x218>)
 8001264:	79db      	ldrb	r3, [r3, #7]
 8001266:	b21b      	sxth	r3, r3
 8001268:	4313      	orrs	r3, r2
 800126a:	b21b      	sxth	r3, r3
 800126c:	b29a      	uxth	r2, r3
 800126e:	4b3a      	ldr	r3, [pc, #232]	; (8001358 <merge+0x21c>)
 8001270:	811a      	strh	r2, [r3, #8]
                 break;
 8001272:	f000 be28 	b.w	8001ec6 <merge+0xd8a>
                 BMS.Max_Cell_Voltage = (Received_Data[0]<<8)|Received_Data[1];//Maximum Voltage value among all the cells
 8001276:	4b37      	ldr	r3, [pc, #220]	; (8001354 <merge+0x218>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	021b      	lsls	r3, r3, #8
 800127c:	b21a      	sxth	r2, r3
 800127e:	4b35      	ldr	r3, [pc, #212]	; (8001354 <merge+0x218>)
 8001280:	785b      	ldrb	r3, [r3, #1]
 8001282:	b21b      	sxth	r3, r3
 8001284:	4313      	orrs	r3, r2
 8001286:	b21b      	sxth	r3, r3
 8001288:	b29a      	uxth	r2, r3
 800128a:	4b33      	ldr	r3, [pc, #204]	; (8001358 <merge+0x21c>)
 800128c:	815a      	strh	r2, [r3, #10]
			     BMS.Max_Cell_Voltage_No = Received_Data[2];//Maximum voltage cell number among all the cells
 800128e:	4b31      	ldr	r3, [pc, #196]	; (8001354 <merge+0x218>)
 8001290:	789a      	ldrb	r2, [r3, #2]
 8001292:	4b31      	ldr	r3, [pc, #196]	; (8001358 <merge+0x21c>)
 8001294:	731a      	strb	r2, [r3, #12]
			     BMS.Min_Cell_Voltage = (Received_Data[3]<<8)|Received_Data[4];//Minimum voltage value among all the cells
 8001296:	4b2f      	ldr	r3, [pc, #188]	; (8001354 <merge+0x218>)
 8001298:	78db      	ldrb	r3, [r3, #3]
 800129a:	021b      	lsls	r3, r3, #8
 800129c:	b21a      	sxth	r2, r3
 800129e:	4b2d      	ldr	r3, [pc, #180]	; (8001354 <merge+0x218>)
 80012a0:	791b      	ldrb	r3, [r3, #4]
 80012a2:	b21b      	sxth	r3, r3
 80012a4:	4313      	orrs	r3, r2
 80012a6:	b21b      	sxth	r3, r3
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	4b2b      	ldr	r3, [pc, #172]	; (8001358 <merge+0x21c>)
 80012ac:	81da      	strh	r2, [r3, #14]
			     BMS.Min_Cell_Voltage_No =  Received_Data[5];//Minimum voltage cell number among all the cells
 80012ae:	4b29      	ldr	r3, [pc, #164]	; (8001354 <merge+0x218>)
 80012b0:	795a      	ldrb	r2, [r3, #5]
 80012b2:	4b29      	ldr	r3, [pc, #164]	; (8001358 <merge+0x21c>)
 80012b4:	741a      	strb	r2, [r3, #16]
			     break;
 80012b6:	f000 be06 	b.w	8001ec6 <merge+0xd8a>
                 BMS.Max_Temp = (Received_Data[0]);//Maximum temperature sensor value among all the sensor
 80012ba:	4b26      	ldr	r3, [pc, #152]	; (8001354 <merge+0x218>)
 80012bc:	781a      	ldrb	r2, [r3, #0]
 80012be:	4b26      	ldr	r3, [pc, #152]	; (8001358 <merge+0x21c>)
 80012c0:	745a      	strb	r2, [r3, #17]
			     BMS.Max_Temp_Sensor_No = Received_Data[1];//Number of the sensor that has the highest temperature value among the sensors
 80012c2:	4b24      	ldr	r3, [pc, #144]	; (8001354 <merge+0x218>)
 80012c4:	785a      	ldrb	r2, [r3, #1]
 80012c6:	4b24      	ldr	r3, [pc, #144]	; (8001358 <merge+0x21c>)
 80012c8:	749a      	strb	r2, [r3, #18]
		         BMS.Min_Temp = (Received_Data[2]);//Minimum temperature value among all the sensors
 80012ca:	4b22      	ldr	r3, [pc, #136]	; (8001354 <merge+0x218>)
 80012cc:	789a      	ldrb	r2, [r3, #2]
 80012ce:	4b22      	ldr	r3, [pc, #136]	; (8001358 <merge+0x21c>)
 80012d0:	74da      	strb	r2, [r3, #19]
		         BMS.Min_Temp_Sensor_No = Received_Data[3];//Number of the sensor that has the lowest temperature value among the sensors
 80012d2:	4b20      	ldr	r3, [pc, #128]	; (8001354 <merge+0x218>)
 80012d4:	78da      	ldrb	r2, [r3, #3]
 80012d6:	4b20      	ldr	r3, [pc, #128]	; (8001358 <merge+0x21c>)
 80012d8:	751a      	strb	r2, [r3, #20]
                 break;
 80012da:	f000 bdf4 	b.w	8001ec6 <merge+0xd8a>
                 BMS.Charger_State = Received_Data[0];//0:stationary 1:charge 2:discharge
 80012de:	4b1d      	ldr	r3, [pc, #116]	; (8001354 <merge+0x218>)
 80012e0:	781a      	ldrb	r2, [r3, #0]
 80012e2:	4b1d      	ldr	r3, [pc, #116]	; (8001358 <merge+0x21c>)
 80012e4:	755a      	strb	r2, [r3, #21]
 		  	     BMS.Charge_MOS_State= Received_Data[1];//0:stationary 1:charge 2:discharge
 80012e6:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <merge+0x218>)
 80012e8:	785a      	ldrb	r2, [r3, #1]
 80012ea:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <merge+0x21c>)
 80012ec:	759a      	strb	r2, [r3, #22]
 		  	     BMS.Discharge_MOS_State= Received_Data[2];//0:stationary 1:charge 2:discharge
 80012ee:	4b19      	ldr	r3, [pc, #100]	; (8001354 <merge+0x218>)
 80012f0:	789a      	ldrb	r2, [r3, #2]
 80012f2:	4b19      	ldr	r3, [pc, #100]	; (8001358 <merge+0x21c>)
 80012f4:	75da      	strb	r2, [r3, #23]
 		  		 BMS.BMS_Life = Received_Data[3];//Count of charge-discharge cycles
 80012f6:	4b17      	ldr	r3, [pc, #92]	; (8001354 <merge+0x218>)
 80012f8:	78da      	ldrb	r2, [r3, #3]
 80012fa:	4b17      	ldr	r3, [pc, #92]	; (8001358 <merge+0x21c>)
 80012fc:	761a      	strb	r2, [r3, #24]
 		  	     BMS.Capacity = Received_Data[4]|(Received_Data[5]<<8)|(Received_Data[6]<<16)|(Received_Data[7]<<24);//Remaining capacity of BMS
 80012fe:	4b15      	ldr	r3, [pc, #84]	; (8001354 <merge+0x218>)
 8001300:	791b      	ldrb	r3, [r3, #4]
 8001302:	461a      	mov	r2, r3
 8001304:	4b13      	ldr	r3, [pc, #76]	; (8001354 <merge+0x218>)
 8001306:	795b      	ldrb	r3, [r3, #5]
 8001308:	021b      	lsls	r3, r3, #8
 800130a:	431a      	orrs	r2, r3
 800130c:	4b11      	ldr	r3, [pc, #68]	; (8001354 <merge+0x218>)
 800130e:	799b      	ldrb	r3, [r3, #6]
 8001310:	041b      	lsls	r3, r3, #16
 8001312:	431a      	orrs	r2, r3
 8001314:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <merge+0x218>)
 8001316:	79db      	ldrb	r3, [r3, #7]
 8001318:	061b      	lsls	r3, r3, #24
 800131a:	4313      	orrs	r3, r2
 800131c:	461a      	mov	r2, r3
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <merge+0x21c>)
 8001320:	61da      	str	r2, [r3, #28]
                 break;
 8001322:	f000 bdd0 	b.w	8001ec6 <merge+0xd8a>
 8001326:	bf00      	nop
 8001328:	18984001 	.word	0x18984001
 800132c:	18974001 	.word	0x18974001
 8001330:	18964001 	.word	0x18964001
 8001334:	18954001 	.word	0x18954001
 8001338:	18944001 	.word	0x18944001
 800133c:	18934001 	.word	0x18934001
 8001340:	18924001 	.word	0x18924001
 8001344:	18914001 	.word	0x18914001
 8001348:	18904001 	.word	0x18904001
 800134c:	18504001 	.word	0x18504001
 8001350:	18524001 	.word	0x18524001
 8001354:	20000ff8 	.word	0x20000ff8
 8001358:	20001000 	.word	0x20001000
	             BMS.No_Of_Battery = Received_Data[0];//Total number cells connected in BMS
 800135c:	4b4d      	ldr	r3, [pc, #308]	; (8001494 <merge+0x358>)
 800135e:	781a      	ldrb	r2, [r3, #0]
 8001360:	4b4d      	ldr	r3, [pc, #308]	; (8001498 <merge+0x35c>)
 8001362:	f883 2020 	strb.w	r2, [r3, #32]
 			     BMS.No_Of_Temp_Sensor = Received_Data[1];//Total Number of temperature sensor connected in BMS
 8001366:	4b4b      	ldr	r3, [pc, #300]	; (8001494 <merge+0x358>)
 8001368:	785a      	ldrb	r2, [r3, #1]
 800136a:	4b4b      	ldr	r3, [pc, #300]	; (8001498 <merge+0x35c>)
 800136c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 			     BMS.Charger_Status = Received_Data[2];//0:disconnect,1:connect
 8001370:	4b48      	ldr	r3, [pc, #288]	; (8001494 <merge+0x358>)
 8001372:	789a      	ldrb	r2, [r3, #2]
 8001374:	4b48      	ldr	r3, [pc, #288]	; (8001498 <merge+0x35c>)
 8001376:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 			     BMS.Load_Status = Received_Data[3];//0:disconnect,1:connect
 800137a:	4b46      	ldr	r3, [pc, #280]	; (8001494 <merge+0x358>)
 800137c:	78da      	ldrb	r2, [r3, #3]
 800137e:	4b46      	ldr	r3, [pc, #280]	; (8001498 <merge+0x35c>)
 8001380:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 			     BMS.DI1state = (Received_Data[4] & 0X01)>>0;
 8001384:	4b43      	ldr	r3, [pc, #268]	; (8001494 <merge+0x358>)
 8001386:	791b      	ldrb	r3, [r3, #4]
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	b2d9      	uxtb	r1, r3
 800138e:	4a42      	ldr	r2, [pc, #264]	; (8001498 <merge+0x35c>)
 8001390:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8001394:	f361 0300 	bfi	r3, r1, #0, #1
 8001398:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 			     BMS.DI2state = (Received_Data[4] & 0X02)>>1;
 800139c:	4b3d      	ldr	r3, [pc, #244]	; (8001494 <merge+0x358>)
 800139e:	791b      	ldrb	r3, [r3, #4]
 80013a0:	105b      	asrs	r3, r3, #1
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	b2d9      	uxtb	r1, r3
 80013a8:	4a3b      	ldr	r2, [pc, #236]	; (8001498 <merge+0x35c>)
 80013aa:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80013ae:	f361 0341 	bfi	r3, r1, #1, #1
 80013b2:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 		         BMS.DI3state = (Received_Data[4] & 0X04)>>2;
 80013b6:	4b37      	ldr	r3, [pc, #220]	; (8001494 <merge+0x358>)
 80013b8:	791b      	ldrb	r3, [r3, #4]
 80013ba:	109b      	asrs	r3, r3, #2
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	b2d9      	uxtb	r1, r3
 80013c2:	4a35      	ldr	r2, [pc, #212]	; (8001498 <merge+0x35c>)
 80013c4:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80013c8:	f361 0382 	bfi	r3, r1, #2, #1
 80013cc:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 			     BMS.DI4state = (Received_Data[4] & 0X08)>>3;
 80013d0:	4b30      	ldr	r3, [pc, #192]	; (8001494 <merge+0x358>)
 80013d2:	791b      	ldrb	r3, [r3, #4]
 80013d4:	10db      	asrs	r3, r3, #3
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	b2d9      	uxtb	r1, r3
 80013dc:	4a2e      	ldr	r2, [pc, #184]	; (8001498 <merge+0x35c>)
 80013de:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80013e2:	f361 03c3 	bfi	r3, r1, #3, #1
 80013e6:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 			     BMS.DO1state = (Received_Data[4] & 0X10)>>4;
 80013ea:	4b2a      	ldr	r3, [pc, #168]	; (8001494 <merge+0x358>)
 80013ec:	791b      	ldrb	r3, [r3, #4]
 80013ee:	111b      	asrs	r3, r3, #4
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	b2d9      	uxtb	r1, r3
 80013f6:	4a28      	ldr	r2, [pc, #160]	; (8001498 <merge+0x35c>)
 80013f8:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80013fc:	f361 1304 	bfi	r3, r1, #4, #1
 8001400:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 			     BMS.DO2state = (Received_Data[4] & 0X20)>>5;
 8001404:	4b23      	ldr	r3, [pc, #140]	; (8001494 <merge+0x358>)
 8001406:	791b      	ldrb	r3, [r3, #4]
 8001408:	115b      	asrs	r3, r3, #5
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	b2d9      	uxtb	r1, r3
 8001410:	4a21      	ldr	r2, [pc, #132]	; (8001498 <merge+0x35c>)
 8001412:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8001416:	f361 1345 	bfi	r3, r1, #5, #1
 800141a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 			     BMS.DO3state = (Received_Data[4] & 0X40)>>6;
 800141e:	4b1d      	ldr	r3, [pc, #116]	; (8001494 <merge+0x358>)
 8001420:	791b      	ldrb	r3, [r3, #4]
 8001422:	119b      	asrs	r3, r3, #6
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	b2d9      	uxtb	r1, r3
 800142a:	4a1b      	ldr	r2, [pc, #108]	; (8001498 <merge+0x35c>)
 800142c:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8001430:	f361 1386 	bfi	r3, r1, #6, #1
 8001434:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 			     BMS.DO4state = (Received_Data[4] & 0X80)>>7;
 8001438:	4b16      	ldr	r3, [pc, #88]	; (8001494 <merge+0x358>)
 800143a:	791b      	ldrb	r3, [r3, #4]
 800143c:	09db      	lsrs	r3, r3, #7
 800143e:	b2db      	uxtb	r3, r3
 8001440:	f003 0301 	and.w	r3, r3, #1
 8001444:	b2d9      	uxtb	r1, r3
 8001446:	4a14      	ldr	r2, [pc, #80]	; (8001498 <merge+0x35c>)
 8001448:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 800144c:	f361 13c7 	bfi	r3, r1, #7, #1
 8001450:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
                 break;
 8001454:	f000 bd37 	b.w	8001ec6 <merge+0xd8a>
	             BMS.Temp_Sensor1 = (Received_Data[1])-40;//1st temperature sensor value
 8001458:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <merge+0x358>)
 800145a:	785b      	ldrb	r3, [r3, #1]
 800145c:	3b28      	subs	r3, #40	; 0x28
 800145e:	b2da      	uxtb	r2, r3
 8001460:	4b0d      	ldr	r3, [pc, #52]	; (8001498 <merge+0x35c>)
 8001462:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	 			 BMS.Temp_Sensor2 = (Received_Data[2])-40;//2nd temperature sensor value
 8001466:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <merge+0x358>)
 8001468:	789b      	ldrb	r3, [r3, #2]
 800146a:	3b28      	subs	r3, #40	; 0x28
 800146c:	b2da      	uxtb	r2, r3
 800146e:	4b0a      	ldr	r3, [pc, #40]	; (8001498 <merge+0x35c>)
 8001470:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	 			 BMS.Temp_Sensor3 = (Received_Data[3])-40;//3rd temperature sensor value
 8001474:	4b07      	ldr	r3, [pc, #28]	; (8001494 <merge+0x358>)
 8001476:	78db      	ldrb	r3, [r3, #3]
 8001478:	3b28      	subs	r3, #40	; 0x28
 800147a:	b2da      	uxtb	r2, r3
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <merge+0x35c>)
 800147e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	 			 BMS.Temp_Sensor4 = (Received_Data[4])-40;//4th temperature sensor value
 8001482:	4b04      	ldr	r3, [pc, #16]	; (8001494 <merge+0x358>)
 8001484:	791b      	ldrb	r3, [r3, #4]
 8001486:	3b28      	subs	r3, #40	; 0x28
 8001488:	b2da      	uxtb	r2, r3
 800148a:	4b03      	ldr	r3, [pc, #12]	; (8001498 <merge+0x35c>)
 800148c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	 			 break;
 8001490:	f000 bd19 	b.w	8001ec6 <merge+0xd8a>
 8001494:	20000ff8 	.word	0x20000ff8
 8001498:	20001000 	.word	0x20001000
	             BMS.Cell1_Balance_State = (Received_Data[0] & 0x01)>>0;//0： Closed,1： Open
 800149c:	4bc0      	ldr	r3, [pc, #768]	; (80017a0 <merge+0x664>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	f003 0301 	and.w	r3, r3, #1
 80014a4:	b2d9      	uxtb	r1, r3
 80014a6:	4abf      	ldr	r2, [pc, #764]	; (80017a4 <merge+0x668>)
 80014a8:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 80014ac:	f361 0300 	bfi	r3, r1, #0, #1
 80014b0:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	 		     BMS.Cell2_Balance_State = (Received_Data[0] & 0x02)>>1;
 80014b4:	4bba      	ldr	r3, [pc, #744]	; (80017a0 <merge+0x664>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	105b      	asrs	r3, r3, #1
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	b2d9      	uxtb	r1, r3
 80014c0:	4ab8      	ldr	r2, [pc, #736]	; (80017a4 <merge+0x668>)
 80014c2:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 80014c6:	f361 0341 	bfi	r3, r1, #1, #1
 80014ca:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	 			 BMS.Cell3_Balance_State = (Received_Data[0] & 0x04)>>2;
 80014ce:	4bb4      	ldr	r3, [pc, #720]	; (80017a0 <merge+0x664>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	109b      	asrs	r3, r3, #2
 80014d4:	f003 0301 	and.w	r3, r3, #1
 80014d8:	b2d9      	uxtb	r1, r3
 80014da:	4ab2      	ldr	r2, [pc, #712]	; (80017a4 <merge+0x668>)
 80014dc:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 80014e0:	f361 0382 	bfi	r3, r1, #2, #1
 80014e4:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	 			 BMS.Cell4_Balance_State = (Received_Data[0] & 0x08)>>3;
 80014e8:	4bad      	ldr	r3, [pc, #692]	; (80017a0 <merge+0x664>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	10db      	asrs	r3, r3, #3
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	b2d9      	uxtb	r1, r3
 80014f4:	4aab      	ldr	r2, [pc, #684]	; (80017a4 <merge+0x668>)
 80014f6:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 80014fa:	f361 03c3 	bfi	r3, r1, #3, #1
 80014fe:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	 			 BMS.Cell5_Balance_State = (Received_Data[0] & 0x10)>>4;
 8001502:	4ba7      	ldr	r3, [pc, #668]	; (80017a0 <merge+0x664>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	111b      	asrs	r3, r3, #4
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	b2d9      	uxtb	r1, r3
 800150e:	4aa5      	ldr	r2, [pc, #660]	; (80017a4 <merge+0x668>)
 8001510:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 8001514:	f361 1304 	bfi	r3, r1, #4, #1
 8001518:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	 			 BMS.Cell6_Balance_State = (Received_Data[0] & 0x20)>>5;
 800151c:	4ba0      	ldr	r3, [pc, #640]	; (80017a0 <merge+0x664>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	115b      	asrs	r3, r3, #5
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	b2d9      	uxtb	r1, r3
 8001528:	4a9e      	ldr	r2, [pc, #632]	; (80017a4 <merge+0x668>)
 800152a:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800152e:	f361 1345 	bfi	r3, r1, #5, #1
 8001532:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	 			 BMS.Cell7_Balance_State = (Received_Data[0] & 0x40)>>6;
 8001536:	4b9a      	ldr	r3, [pc, #616]	; (80017a0 <merge+0x664>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	119b      	asrs	r3, r3, #6
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	b2d9      	uxtb	r1, r3
 8001542:	4a98      	ldr	r2, [pc, #608]	; (80017a4 <merge+0x668>)
 8001544:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 8001548:	f361 1386 	bfi	r3, r1, #6, #1
 800154c:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	 			 BMS.Cell8_Balance_State = (Received_Data[0] & 0x80)>>7;
 8001550:	4b93      	ldr	r3, [pc, #588]	; (80017a0 <merge+0x664>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	09db      	lsrs	r3, r3, #7
 8001556:	b2db      	uxtb	r3, r3
 8001558:	f003 0301 	and.w	r3, r3, #1
 800155c:	b2d9      	uxtb	r1, r3
 800155e:	4a91      	ldr	r2, [pc, #580]	; (80017a4 <merge+0x668>)
 8001560:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 8001564:	f361 13c7 	bfi	r3, r1, #7, #1
 8001568:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	 			 BMS.Cell9_Balance_State = (Received_Data[1] & 0x01)>>0;
 800156c:	4b8c      	ldr	r3, [pc, #560]	; (80017a0 <merge+0x664>)
 800156e:	785b      	ldrb	r3, [r3, #1]
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	b2d9      	uxtb	r1, r3
 8001576:	4a8b      	ldr	r2, [pc, #556]	; (80017a4 <merge+0x668>)
 8001578:	f892 302f 	ldrb.w	r3, [r2, #47]	; 0x2f
 800157c:	f361 0300 	bfi	r3, r1, #0, #1
 8001580:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
	 			 BMS.Cell10_Balance_State = (Received_Data[1] & 0x02)>>1;
 8001584:	4b86      	ldr	r3, [pc, #536]	; (80017a0 <merge+0x664>)
 8001586:	785b      	ldrb	r3, [r3, #1]
 8001588:	105b      	asrs	r3, r3, #1
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	b2d9      	uxtb	r1, r3
 8001590:	4a84      	ldr	r2, [pc, #528]	; (80017a4 <merge+0x668>)
 8001592:	f892 302f 	ldrb.w	r3, [r2, #47]	; 0x2f
 8001596:	f361 0341 	bfi	r3, r1, #1, #1
 800159a:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
	 			 BMS.Cell11_Balance_State = (Received_Data[1] & 0x04)>>2;
 800159e:	4b80      	ldr	r3, [pc, #512]	; (80017a0 <merge+0x664>)
 80015a0:	785b      	ldrb	r3, [r3, #1]
 80015a2:	109b      	asrs	r3, r3, #2
 80015a4:	f003 0301 	and.w	r3, r3, #1
 80015a8:	b2d9      	uxtb	r1, r3
 80015aa:	4a7e      	ldr	r2, [pc, #504]	; (80017a4 <merge+0x668>)
 80015ac:	f892 302f 	ldrb.w	r3, [r2, #47]	; 0x2f
 80015b0:	f361 0382 	bfi	r3, r1, #2, #1
 80015b4:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
	 			 BMS.Cell12_Balance_State = (Received_Data[1] & 0x08)>>3;
 80015b8:	4b79      	ldr	r3, [pc, #484]	; (80017a0 <merge+0x664>)
 80015ba:	785b      	ldrb	r3, [r3, #1]
 80015bc:	10db      	asrs	r3, r3, #3
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	b2d9      	uxtb	r1, r3
 80015c4:	4a77      	ldr	r2, [pc, #476]	; (80017a4 <merge+0x668>)
 80015c6:	f892 302f 	ldrb.w	r3, [r2, #47]	; 0x2f
 80015ca:	f361 03c3 	bfi	r3, r1, #3, #1
 80015ce:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
	 			 BMS.Cell13_Balance_State = (Received_Data[1] & 0x10)>>4;
 80015d2:	4b73      	ldr	r3, [pc, #460]	; (80017a0 <merge+0x664>)
 80015d4:	785b      	ldrb	r3, [r3, #1]
 80015d6:	111b      	asrs	r3, r3, #4
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	b2d9      	uxtb	r1, r3
 80015de:	4a71      	ldr	r2, [pc, #452]	; (80017a4 <merge+0x668>)
 80015e0:	f892 302f 	ldrb.w	r3, [r2, #47]	; 0x2f
 80015e4:	f361 1304 	bfi	r3, r1, #4, #1
 80015e8:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
	 			 BMS.Cell14_Balance_State = (Received_Data[1] & 0x20)>>5;
 80015ec:	4b6c      	ldr	r3, [pc, #432]	; (80017a0 <merge+0x664>)
 80015ee:	785b      	ldrb	r3, [r3, #1]
 80015f0:	115b      	asrs	r3, r3, #5
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	b2d9      	uxtb	r1, r3
 80015f8:	4a6a      	ldr	r2, [pc, #424]	; (80017a4 <merge+0x668>)
 80015fa:	f892 302f 	ldrb.w	r3, [r2, #47]	; 0x2f
 80015fe:	f361 1345 	bfi	r3, r1, #5, #1
 8001602:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
	 			 BMS.Cell15_Balance_State = (Received_Data[1] & 0x40)>>6;
 8001606:	4b66      	ldr	r3, [pc, #408]	; (80017a0 <merge+0x664>)
 8001608:	785b      	ldrb	r3, [r3, #1]
 800160a:	119b      	asrs	r3, r3, #6
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	b2d9      	uxtb	r1, r3
 8001612:	4a64      	ldr	r2, [pc, #400]	; (80017a4 <merge+0x668>)
 8001614:	f892 302f 	ldrb.w	r3, [r2, #47]	; 0x2f
 8001618:	f361 1386 	bfi	r3, r1, #6, #1
 800161c:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
	 			 BMS.Cell16_Balance_State = (Received_Data[1] & 0x80)>>7;
 8001620:	4b5f      	ldr	r3, [pc, #380]	; (80017a0 <merge+0x664>)
 8001622:	785b      	ldrb	r3, [r3, #1]
 8001624:	09db      	lsrs	r3, r3, #7
 8001626:	b2db      	uxtb	r3, r3
 8001628:	f003 0301 	and.w	r3, r3, #1
 800162c:	b2d9      	uxtb	r1, r3
 800162e:	4a5d      	ldr	r2, [pc, #372]	; (80017a4 <merge+0x668>)
 8001630:	f892 302f 	ldrb.w	r3, [r2, #47]	; 0x2f
 8001634:	f361 13c7 	bfi	r3, r1, #7, #1
 8001638:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
	 			 BMS.Cell17_Balance_State = (Received_Data[2] & 0x01)>>0;
 800163c:	4b58      	ldr	r3, [pc, #352]	; (80017a0 <merge+0x664>)
 800163e:	789b      	ldrb	r3, [r3, #2]
 8001640:	f003 0301 	and.w	r3, r3, #1
 8001644:	b2d9      	uxtb	r1, r3
 8001646:	4a57      	ldr	r2, [pc, #348]	; (80017a4 <merge+0x668>)
 8001648:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 800164c:	f361 0300 	bfi	r3, r1, #0, #1
 8001650:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
	 			 BMS.Cell18_Balance_State = (Received_Data[2] & 0x02)>>1;
 8001654:	4b52      	ldr	r3, [pc, #328]	; (80017a0 <merge+0x664>)
 8001656:	789b      	ldrb	r3, [r3, #2]
 8001658:	105b      	asrs	r3, r3, #1
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	b2d9      	uxtb	r1, r3
 8001660:	4a50      	ldr	r2, [pc, #320]	; (80017a4 <merge+0x668>)
 8001662:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8001666:	f361 0341 	bfi	r3, r1, #1, #1
 800166a:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
	 			 BMS.Cell19_Balance_State = (Received_Data[2] & 0x04)>>2;
 800166e:	4b4c      	ldr	r3, [pc, #304]	; (80017a0 <merge+0x664>)
 8001670:	789b      	ldrb	r3, [r3, #2]
 8001672:	109b      	asrs	r3, r3, #2
 8001674:	f003 0301 	and.w	r3, r3, #1
 8001678:	b2d9      	uxtb	r1, r3
 800167a:	4a4a      	ldr	r2, [pc, #296]	; (80017a4 <merge+0x668>)
 800167c:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8001680:	f361 0382 	bfi	r3, r1, #2, #1
 8001684:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
	 			 BMS.Cell20_Balance_State = (Received_Data[2] & 0x08)>>3;
 8001688:	4b45      	ldr	r3, [pc, #276]	; (80017a0 <merge+0x664>)
 800168a:	789b      	ldrb	r3, [r3, #2]
 800168c:	10db      	asrs	r3, r3, #3
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	b2d9      	uxtb	r1, r3
 8001694:	4a43      	ldr	r2, [pc, #268]	; (80017a4 <merge+0x668>)
 8001696:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 800169a:	f361 03c3 	bfi	r3, r1, #3, #1
 800169e:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
	 			 BMS.Cell21_Balance_State = (Received_Data[2] & 0x10)>>4;
 80016a2:	4b3f      	ldr	r3, [pc, #252]	; (80017a0 <merge+0x664>)
 80016a4:	789b      	ldrb	r3, [r3, #2]
 80016a6:	111b      	asrs	r3, r3, #4
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	b2d9      	uxtb	r1, r3
 80016ae:	4a3d      	ldr	r2, [pc, #244]	; (80017a4 <merge+0x668>)
 80016b0:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 80016b4:	f361 1304 	bfi	r3, r1, #4, #1
 80016b8:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
	 			 BMS.Cell22_Balance_State = (Received_Data[2] & 0x20)>>5;
 80016bc:	4b38      	ldr	r3, [pc, #224]	; (80017a0 <merge+0x664>)
 80016be:	789b      	ldrb	r3, [r3, #2]
 80016c0:	115b      	asrs	r3, r3, #5
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	b2d9      	uxtb	r1, r3
 80016c8:	4a36      	ldr	r2, [pc, #216]	; (80017a4 <merge+0x668>)
 80016ca:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 80016ce:	f361 1345 	bfi	r3, r1, #5, #1
 80016d2:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
	 			 BMS.Cell23_Balance_State = (Received_Data[2] & 0x40)>>6;
 80016d6:	4b32      	ldr	r3, [pc, #200]	; (80017a0 <merge+0x664>)
 80016d8:	789b      	ldrb	r3, [r3, #2]
 80016da:	119b      	asrs	r3, r3, #6
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	b2d9      	uxtb	r1, r3
 80016e2:	4a30      	ldr	r2, [pc, #192]	; (80017a4 <merge+0x668>)
 80016e4:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 80016e8:	f361 1386 	bfi	r3, r1, #6, #1
 80016ec:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
	 			 BMS.Cell24_Balance_State = (Received_Data[2] & 0x80)>>7;
 80016f0:	4b2b      	ldr	r3, [pc, #172]	; (80017a0 <merge+0x664>)
 80016f2:	789b      	ldrb	r3, [r3, #2]
 80016f4:	09db      	lsrs	r3, r3, #7
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	b2d9      	uxtb	r1, r3
 80016fe:	4a29      	ldr	r2, [pc, #164]	; (80017a4 <merge+0x668>)
 8001700:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8001704:	f361 13c7 	bfi	r3, r1, #7, #1
 8001708:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
	 			 BMS.Cell25_Balance_State = (Received_Data[3] & 0x01)>>0;
 800170c:	4b24      	ldr	r3, [pc, #144]	; (80017a0 <merge+0x664>)
 800170e:	78db      	ldrb	r3, [r3, #3]
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	b2d9      	uxtb	r1, r3
 8001716:	4a23      	ldr	r2, [pc, #140]	; (80017a4 <merge+0x668>)
 8001718:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 800171c:	f361 0300 	bfi	r3, r1, #0, #1
 8001720:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
	 			 BMS.Cell26_Balance_State = (Received_Data[3] & 0x02)>>1;
 8001724:	4b1e      	ldr	r3, [pc, #120]	; (80017a0 <merge+0x664>)
 8001726:	78db      	ldrb	r3, [r3, #3]
 8001728:	105b      	asrs	r3, r3, #1
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	b2d9      	uxtb	r1, r3
 8001730:	4a1c      	ldr	r2, [pc, #112]	; (80017a4 <merge+0x668>)
 8001732:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8001736:	f361 0341 	bfi	r3, r1, #1, #1
 800173a:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
	 			 BMS.Cell27_Balance_State = (Received_Data[3] & 0x04)>>2;
 800173e:	4b18      	ldr	r3, [pc, #96]	; (80017a0 <merge+0x664>)
 8001740:	78db      	ldrb	r3, [r3, #3]
 8001742:	109b      	asrs	r3, r3, #2
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	b2d9      	uxtb	r1, r3
 800174a:	4a16      	ldr	r2, [pc, #88]	; (80017a4 <merge+0x668>)
 800174c:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8001750:	f361 0382 	bfi	r3, r1, #2, #1
 8001754:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
	 			 BMS.Cell28_Balance_State = (Received_Data[3] & 0x08)>>3;
 8001758:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <merge+0x664>)
 800175a:	78db      	ldrb	r3, [r3, #3]
 800175c:	10db      	asrs	r3, r3, #3
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	b2d9      	uxtb	r1, r3
 8001764:	4a0f      	ldr	r2, [pc, #60]	; (80017a4 <merge+0x668>)
 8001766:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 800176a:	f361 03c3 	bfi	r3, r1, #3, #1
 800176e:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
	 			 BMS.Cell29_Balance_State = (Received_Data[3] & 0x10)>>4;
 8001772:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <merge+0x664>)
 8001774:	78db      	ldrb	r3, [r3, #3]
 8001776:	111b      	asrs	r3, r3, #4
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	b2d9      	uxtb	r1, r3
 800177e:	4a09      	ldr	r2, [pc, #36]	; (80017a4 <merge+0x668>)
 8001780:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8001784:	f361 1304 	bfi	r3, r1, #4, #1
 8001788:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
	 			 BMS.Cell30_Balance_State = (Received_Data[3] & 0x20)>>5;
 800178c:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <merge+0x664>)
 800178e:	78db      	ldrb	r3, [r3, #3]
 8001790:	115b      	asrs	r3, r3, #5
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	b2d9      	uxtb	r1, r3
 8001798:	4a02      	ldr	r2, [pc, #8]	; (80017a4 <merge+0x668>)
 800179a:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 800179e:	e003      	b.n	80017a8 <merge+0x66c>
 80017a0:	20000ff8 	.word	0x20000ff8
 80017a4:	20001000 	.word	0x20001000
 80017a8:	f361 1345 	bfi	r3, r1, #5, #1
 80017ac:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
	 			 BMS.Cell31_Balance_State = (Received_Data[3] & 0x40)>>6;
 80017b0:	4b75      	ldr	r3, [pc, #468]	; (8001988 <merge+0x84c>)
 80017b2:	78db      	ldrb	r3, [r3, #3]
 80017b4:	119b      	asrs	r3, r3, #6
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	b2d9      	uxtb	r1, r3
 80017bc:	4a73      	ldr	r2, [pc, #460]	; (800198c <merge+0x850>)
 80017be:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 80017c2:	f361 1386 	bfi	r3, r1, #6, #1
 80017c6:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
	 			 BMS.Cell32_Balance_State = (Received_Data[3] & 0x80)>>7;
 80017ca:	4b6f      	ldr	r3, [pc, #444]	; (8001988 <merge+0x84c>)
 80017cc:	78db      	ldrb	r3, [r3, #3]
 80017ce:	09db      	lsrs	r3, r3, #7
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	b2d9      	uxtb	r1, r3
 80017d8:	4a6c      	ldr	r2, [pc, #432]	; (800198c <merge+0x850>)
 80017da:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 80017de:	f361 13c7 	bfi	r3, r1, #7, #1
 80017e2:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
	 			 BMS.Cell33_Balance_State = (Received_Data[4] & 0x01)>>0;
 80017e6:	4b68      	ldr	r3, [pc, #416]	; (8001988 <merge+0x84c>)
 80017e8:	791b      	ldrb	r3, [r3, #4]
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	b2d9      	uxtb	r1, r3
 80017f0:	4a66      	ldr	r2, [pc, #408]	; (800198c <merge+0x850>)
 80017f2:	f892 3032 	ldrb.w	r3, [r2, #50]	; 0x32
 80017f6:	f361 0300 	bfi	r3, r1, #0, #1
 80017fa:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
	 			 BMS.Cell34_Balance_State = (Received_Data[4] & 0x02)>>1;
 80017fe:	4b62      	ldr	r3, [pc, #392]	; (8001988 <merge+0x84c>)
 8001800:	791b      	ldrb	r3, [r3, #4]
 8001802:	105b      	asrs	r3, r3, #1
 8001804:	f003 0301 	and.w	r3, r3, #1
 8001808:	b2d9      	uxtb	r1, r3
 800180a:	4a60      	ldr	r2, [pc, #384]	; (800198c <merge+0x850>)
 800180c:	f892 3032 	ldrb.w	r3, [r2, #50]	; 0x32
 8001810:	f361 0341 	bfi	r3, r1, #1, #1
 8001814:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
	 			 BMS.Cell35_Balance_State = (Received_Data[4] & 0x04)>>2;
 8001818:	4b5b      	ldr	r3, [pc, #364]	; (8001988 <merge+0x84c>)
 800181a:	791b      	ldrb	r3, [r3, #4]
 800181c:	109b      	asrs	r3, r3, #2
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	b2d9      	uxtb	r1, r3
 8001824:	4a59      	ldr	r2, [pc, #356]	; (800198c <merge+0x850>)
 8001826:	f892 3032 	ldrb.w	r3, [r2, #50]	; 0x32
 800182a:	f361 0382 	bfi	r3, r1, #2, #1
 800182e:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
	 			 BMS.Cell36_Balance_State = (Received_Data[4] & 0x08)>>3;
 8001832:	4b55      	ldr	r3, [pc, #340]	; (8001988 <merge+0x84c>)
 8001834:	791b      	ldrb	r3, [r3, #4]
 8001836:	10db      	asrs	r3, r3, #3
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	b2d9      	uxtb	r1, r3
 800183e:	4a53      	ldr	r2, [pc, #332]	; (800198c <merge+0x850>)
 8001840:	f892 3032 	ldrb.w	r3, [r2, #50]	; 0x32
 8001844:	f361 03c3 	bfi	r3, r1, #3, #1
 8001848:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
	 			 BMS.Cell37_Balance_State = (Received_Data[4] & 0x10)>>4;
 800184c:	4b4e      	ldr	r3, [pc, #312]	; (8001988 <merge+0x84c>)
 800184e:	791b      	ldrb	r3, [r3, #4]
 8001850:	111b      	asrs	r3, r3, #4
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	b2d9      	uxtb	r1, r3
 8001858:	4a4c      	ldr	r2, [pc, #304]	; (800198c <merge+0x850>)
 800185a:	f892 3032 	ldrb.w	r3, [r2, #50]	; 0x32
 800185e:	f361 1304 	bfi	r3, r1, #4, #1
 8001862:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
	 			 BMS.Cell38_Balance_State = (Received_Data[4] & 0x20)>>5;
 8001866:	4b48      	ldr	r3, [pc, #288]	; (8001988 <merge+0x84c>)
 8001868:	791b      	ldrb	r3, [r3, #4]
 800186a:	115b      	asrs	r3, r3, #5
 800186c:	f003 0301 	and.w	r3, r3, #1
 8001870:	b2d9      	uxtb	r1, r3
 8001872:	4a46      	ldr	r2, [pc, #280]	; (800198c <merge+0x850>)
 8001874:	f892 3032 	ldrb.w	r3, [r2, #50]	; 0x32
 8001878:	f361 1345 	bfi	r3, r1, #5, #1
 800187c:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
	 			 BMS.Cell39_Balance_State = (Received_Data[4] & 0x40)>>6;
 8001880:	4b41      	ldr	r3, [pc, #260]	; (8001988 <merge+0x84c>)
 8001882:	791b      	ldrb	r3, [r3, #4]
 8001884:	119b      	asrs	r3, r3, #6
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	b2d9      	uxtb	r1, r3
 800188c:	4a3f      	ldr	r2, [pc, #252]	; (800198c <merge+0x850>)
 800188e:	f892 3032 	ldrb.w	r3, [r2, #50]	; 0x32
 8001892:	f361 1386 	bfi	r3, r1, #6, #1
 8001896:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
	 			 BMS.Cell40_Balance_State = (Received_Data[4] & 0x80)>>7;
 800189a:	4b3b      	ldr	r3, [pc, #236]	; (8001988 <merge+0x84c>)
 800189c:	791b      	ldrb	r3, [r3, #4]
 800189e:	09db      	lsrs	r3, r3, #7
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	b2d9      	uxtb	r1, r3
 80018a8:	4a38      	ldr	r2, [pc, #224]	; (800198c <merge+0x850>)
 80018aa:	f892 3032 	ldrb.w	r3, [r2, #50]	; 0x32
 80018ae:	f361 13c7 	bfi	r3, r1, #7, #1
 80018b2:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
	 			 BMS.Cell41_Balance_State = (Received_Data[5] & 0x01)>>0;
 80018b6:	4b34      	ldr	r3, [pc, #208]	; (8001988 <merge+0x84c>)
 80018b8:	795b      	ldrb	r3, [r3, #5]
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	b2d9      	uxtb	r1, r3
 80018c0:	4a32      	ldr	r2, [pc, #200]	; (800198c <merge+0x850>)
 80018c2:	f892 3033 	ldrb.w	r3, [r2, #51]	; 0x33
 80018c6:	f361 0300 	bfi	r3, r1, #0, #1
 80018ca:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
	 			 BMS.Cell42_Balance_State = (Received_Data[5] & 0x02)>>1;
 80018ce:	4b2e      	ldr	r3, [pc, #184]	; (8001988 <merge+0x84c>)
 80018d0:	795b      	ldrb	r3, [r3, #5]
 80018d2:	105b      	asrs	r3, r3, #1
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	b2d9      	uxtb	r1, r3
 80018da:	4a2c      	ldr	r2, [pc, #176]	; (800198c <merge+0x850>)
 80018dc:	f892 3033 	ldrb.w	r3, [r2, #51]	; 0x33
 80018e0:	f361 0341 	bfi	r3, r1, #1, #1
 80018e4:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
	 			 BMS.Cell43_Balance_State = (Received_Data[5] & 0x04)>>2;
 80018e8:	4b27      	ldr	r3, [pc, #156]	; (8001988 <merge+0x84c>)
 80018ea:	795b      	ldrb	r3, [r3, #5]
 80018ec:	109b      	asrs	r3, r3, #2
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	b2d9      	uxtb	r1, r3
 80018f4:	4a25      	ldr	r2, [pc, #148]	; (800198c <merge+0x850>)
 80018f6:	f892 3033 	ldrb.w	r3, [r2, #51]	; 0x33
 80018fa:	f361 0382 	bfi	r3, r1, #2, #1
 80018fe:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
	 			 BMS.Cell44_Balance_State = (Received_Data[5] & 0x08)>>3;
 8001902:	4b21      	ldr	r3, [pc, #132]	; (8001988 <merge+0x84c>)
 8001904:	795b      	ldrb	r3, [r3, #5]
 8001906:	10db      	asrs	r3, r3, #3
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	b2d9      	uxtb	r1, r3
 800190e:	4a1f      	ldr	r2, [pc, #124]	; (800198c <merge+0x850>)
 8001910:	f892 3033 	ldrb.w	r3, [r2, #51]	; 0x33
 8001914:	f361 03c3 	bfi	r3, r1, #3, #1
 8001918:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
	 			 BMS.Cell45_Balance_State = (Received_Data[5] & 0x10)>>4;
 800191c:	4b1a      	ldr	r3, [pc, #104]	; (8001988 <merge+0x84c>)
 800191e:	795b      	ldrb	r3, [r3, #5]
 8001920:	111b      	asrs	r3, r3, #4
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	b2d9      	uxtb	r1, r3
 8001928:	4a18      	ldr	r2, [pc, #96]	; (800198c <merge+0x850>)
 800192a:	f892 3033 	ldrb.w	r3, [r2, #51]	; 0x33
 800192e:	f361 1304 	bfi	r3, r1, #4, #1
 8001932:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
	 			 BMS.Cell46_Balance_State = (Received_Data[5] & 0x20)>>5;
 8001936:	4b14      	ldr	r3, [pc, #80]	; (8001988 <merge+0x84c>)
 8001938:	795b      	ldrb	r3, [r3, #5]
 800193a:	115b      	asrs	r3, r3, #5
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	b2d9      	uxtb	r1, r3
 8001942:	4a12      	ldr	r2, [pc, #72]	; (800198c <merge+0x850>)
 8001944:	f892 3033 	ldrb.w	r3, [r2, #51]	; 0x33
 8001948:	f361 1345 	bfi	r3, r1, #5, #1
 800194c:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
	 			 BMS.Cell47_Balance_State = (Received_Data[5] & 0x40)>>6;
 8001950:	4b0d      	ldr	r3, [pc, #52]	; (8001988 <merge+0x84c>)
 8001952:	795b      	ldrb	r3, [r3, #5]
 8001954:	119b      	asrs	r3, r3, #6
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	b2d9      	uxtb	r1, r3
 800195c:	4a0b      	ldr	r2, [pc, #44]	; (800198c <merge+0x850>)
 800195e:	f892 3033 	ldrb.w	r3, [r2, #51]	; 0x33
 8001962:	f361 1386 	bfi	r3, r1, #6, #1
 8001966:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
	 			 BMS.Cell48_Balance_State = (Received_Data[5] & 0x80)>>7;
 800196a:	4b07      	ldr	r3, [pc, #28]	; (8001988 <merge+0x84c>)
 800196c:	795b      	ldrb	r3, [r3, #5]
 800196e:	09db      	lsrs	r3, r3, #7
 8001970:	b2db      	uxtb	r3, r3
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	b2d9      	uxtb	r1, r3
 8001978:	4a04      	ldr	r2, [pc, #16]	; (800198c <merge+0x850>)
 800197a:	f892 3033 	ldrb.w	r3, [r2, #51]	; 0x33
 800197e:	f361 13c7 	bfi	r3, r1, #7, #1
 8001982:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
	 			 break;
 8001986:	e29e      	b.n	8001ec6 <merge+0xd8a>
 8001988:	20000ff8 	.word	0x20000ff8
 800198c:	20001000 	.word	0x20001000
	             BMS.Cell_Volt_High_Level_1 = (Received_Data[0] & 0x01)>>0;//0:No error,1:Error
 8001990:	4bc0      	ldr	r3, [pc, #768]	; (8001c94 <merge+0xb58>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	b2d9      	uxtb	r1, r3
 800199a:	4abf      	ldr	r2, [pc, #764]	; (8001c98 <merge+0xb5c>)
 800199c:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 80019a0:	f361 0300 	bfi	r3, r1, #0, #1
 80019a4:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
	 		     BMS.Cell_Volt_High_Level_2 = (Received_Data[0] & 0x02)>>1;
 80019a8:	4bba      	ldr	r3, [pc, #744]	; (8001c94 <merge+0xb58>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	105b      	asrs	r3, r3, #1
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	b2d9      	uxtb	r1, r3
 80019b4:	4ab8      	ldr	r2, [pc, #736]	; (8001c98 <merge+0xb5c>)
 80019b6:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 80019ba:	f361 0341 	bfi	r3, r1, #1, #1
 80019be:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
	 	         BMS.Cell_Volt_Low_Level_1 = (Received_Data[0] & 0x04)>>2;
 80019c2:	4bb4      	ldr	r3, [pc, #720]	; (8001c94 <merge+0xb58>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	109b      	asrs	r3, r3, #2
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	b2d9      	uxtb	r1, r3
 80019ce:	4ab2      	ldr	r2, [pc, #712]	; (8001c98 <merge+0xb5c>)
 80019d0:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 80019d4:	f361 0382 	bfi	r3, r1, #2, #1
 80019d8:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
	 		     BMS.Cell_Volt_Low_Level_2 = (Received_Data[0] & 0x08)>>3;
 80019dc:	4bad      	ldr	r3, [pc, #692]	; (8001c94 <merge+0xb58>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	10db      	asrs	r3, r3, #3
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	b2d9      	uxtb	r1, r3
 80019e8:	4aab      	ldr	r2, [pc, #684]	; (8001c98 <merge+0xb5c>)
 80019ea:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 80019ee:	f361 03c3 	bfi	r3, r1, #3, #1
 80019f2:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
	 		     BMS.Sum_Volt_High_Level_1 = (Received_Data[0] & 0x10)>>4;
 80019f6:	4ba7      	ldr	r3, [pc, #668]	; (8001c94 <merge+0xb58>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	111b      	asrs	r3, r3, #4
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	b2d9      	uxtb	r1, r3
 8001a02:	4aa5      	ldr	r2, [pc, #660]	; (8001c98 <merge+0xb5c>)
 8001a04:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8001a08:	f361 1304 	bfi	r3, r1, #4, #1
 8001a0c:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
	 			 BMS.Sum_Volt_High_Level_2 = (Received_Data[0] & 0x20)>>5;
 8001a10:	4ba0      	ldr	r3, [pc, #640]	; (8001c94 <merge+0xb58>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	115b      	asrs	r3, r3, #5
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	b2d9      	uxtb	r1, r3
 8001a1c:	4a9e      	ldr	r2, [pc, #632]	; (8001c98 <merge+0xb5c>)
 8001a1e:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8001a22:	f361 1345 	bfi	r3, r1, #5, #1
 8001a26:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
	 			 BMS.Sum_Volt_Low_Level_1 = (Received_Data[0] & 0x40)>>6;
 8001a2a:	4b9a      	ldr	r3, [pc, #616]	; (8001c94 <merge+0xb58>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	119b      	asrs	r3, r3, #6
 8001a30:	f003 0301 	and.w	r3, r3, #1
 8001a34:	b2d9      	uxtb	r1, r3
 8001a36:	4a98      	ldr	r2, [pc, #608]	; (8001c98 <merge+0xb5c>)
 8001a38:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8001a3c:	f361 1386 	bfi	r3, r1, #6, #1
 8001a40:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
	 			 BMS.Sum_Volt_Low_Level_2 = (Received_Data[0] & 0x80)>>7;
 8001a44:	4b93      	ldr	r3, [pc, #588]	; (8001c94 <merge+0xb58>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	09db      	lsrs	r3, r3, #7
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	b2d9      	uxtb	r1, r3
 8001a52:	4a91      	ldr	r2, [pc, #580]	; (8001c98 <merge+0xb5c>)
 8001a54:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8001a58:	f361 13c7 	bfi	r3, r1, #7, #1
 8001a5c:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
	 			 BMS.Chg_Temp_High_Level_1 = (Received_Data[1] & 0x01)>>0;
 8001a60:	4b8c      	ldr	r3, [pc, #560]	; (8001c94 <merge+0xb58>)
 8001a62:	785b      	ldrb	r3, [r3, #1]
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	b2d9      	uxtb	r1, r3
 8001a6a:	4a8b      	ldr	r2, [pc, #556]	; (8001c98 <merge+0xb5c>)
 8001a6c:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8001a70:	f361 0300 	bfi	r3, r1, #0, #1
 8001a74:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
	 			 BMS.Chg_Temp_High_Level_2 = (Received_Data[1] & 0x02)>>1;
 8001a78:	4b86      	ldr	r3, [pc, #536]	; (8001c94 <merge+0xb58>)
 8001a7a:	785b      	ldrb	r3, [r3, #1]
 8001a7c:	105b      	asrs	r3, r3, #1
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	b2d9      	uxtb	r1, r3
 8001a84:	4a84      	ldr	r2, [pc, #528]	; (8001c98 <merge+0xb5c>)
 8001a86:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8001a8a:	f361 0341 	bfi	r3, r1, #1, #1
 8001a8e:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
	 		     BMS.Chg_Temp_Low_Level_1 = (Received_Data[1] & 0x04)>>2;
 8001a92:	4b80      	ldr	r3, [pc, #512]	; (8001c94 <merge+0xb58>)
 8001a94:	785b      	ldrb	r3, [r3, #1]
 8001a96:	109b      	asrs	r3, r3, #2
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	b2d9      	uxtb	r1, r3
 8001a9e:	4a7e      	ldr	r2, [pc, #504]	; (8001c98 <merge+0xb5c>)
 8001aa0:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8001aa4:	f361 0382 	bfi	r3, r1, #2, #1
 8001aa8:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
	 		     BMS.Chg_Temp_Low_Level_2 = (Received_Data[1] & 0x08)>>3;
 8001aac:	4b79      	ldr	r3, [pc, #484]	; (8001c94 <merge+0xb58>)
 8001aae:	785b      	ldrb	r3, [r3, #1]
 8001ab0:	10db      	asrs	r3, r3, #3
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	b2d9      	uxtb	r1, r3
 8001ab8:	4a77      	ldr	r2, [pc, #476]	; (8001c98 <merge+0xb5c>)
 8001aba:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8001abe:	f361 03c3 	bfi	r3, r1, #3, #1
 8001ac2:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
	 		     BMS.Dischg_Temp_High_Level_1 = (Received_Data[1] & 0x10)>>4;
 8001ac6:	4b73      	ldr	r3, [pc, #460]	; (8001c94 <merge+0xb58>)
 8001ac8:	785b      	ldrb	r3, [r3, #1]
 8001aca:	111b      	asrs	r3, r3, #4
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	b2d9      	uxtb	r1, r3
 8001ad2:	4a71      	ldr	r2, [pc, #452]	; (8001c98 <merge+0xb5c>)
 8001ad4:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8001ad8:	f361 1304 	bfi	r3, r1, #4, #1
 8001adc:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
	 			 BMS.Dischg_Temp_High_Level_2 = (Received_Data[1] & 0x20)>>5;
 8001ae0:	4b6c      	ldr	r3, [pc, #432]	; (8001c94 <merge+0xb58>)
 8001ae2:	785b      	ldrb	r3, [r3, #1]
 8001ae4:	115b      	asrs	r3, r3, #5
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	b2d9      	uxtb	r1, r3
 8001aec:	4a6a      	ldr	r2, [pc, #424]	; (8001c98 <merge+0xb5c>)
 8001aee:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8001af2:	f361 1345 	bfi	r3, r1, #5, #1
 8001af6:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
	 			 BMS.Dischg_Temp_Low_Level_1 = (Received_Data[1] & 0x40)>>6;
 8001afa:	4b66      	ldr	r3, [pc, #408]	; (8001c94 <merge+0xb58>)
 8001afc:	785b      	ldrb	r3, [r3, #1]
 8001afe:	119b      	asrs	r3, r3, #6
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	b2d9      	uxtb	r1, r3
 8001b06:	4a64      	ldr	r2, [pc, #400]	; (8001c98 <merge+0xb5c>)
 8001b08:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8001b0c:	f361 1386 	bfi	r3, r1, #6, #1
 8001b10:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
	 			 BMS.Dischg_Temp_Low_Level_2 = (Received_Data[1] & 0x80)>>7;
 8001b14:	4b5f      	ldr	r3, [pc, #380]	; (8001c94 <merge+0xb58>)
 8001b16:	785b      	ldrb	r3, [r3, #1]
 8001b18:	09db      	lsrs	r3, r3, #7
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	f003 0301 	and.w	r3, r3, #1
 8001b20:	b2d9      	uxtb	r1, r3
 8001b22:	4a5d      	ldr	r2, [pc, #372]	; (8001c98 <merge+0xb5c>)
 8001b24:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8001b28:	f361 13c7 	bfi	r3, r1, #7, #1
 8001b2c:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
	 			 BMS.Chg_Overcurrent_Level_1 = (Received_Data[2] & 0x01)>>0;
 8001b30:	4b58      	ldr	r3, [pc, #352]	; (8001c94 <merge+0xb58>)
 8001b32:	789b      	ldrb	r3, [r3, #2]
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	b2d9      	uxtb	r1, r3
 8001b3a:	4a57      	ldr	r2, [pc, #348]	; (8001c98 <merge+0xb5c>)
 8001b3c:	f892 3036 	ldrb.w	r3, [r2, #54]	; 0x36
 8001b40:	f361 0300 	bfi	r3, r1, #0, #1
 8001b44:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36
	 		     BMS.Chg_Overcurrent_Level_2 = (Received_Data[2] & 0x02)>>1;
 8001b48:	4b52      	ldr	r3, [pc, #328]	; (8001c94 <merge+0xb58>)
 8001b4a:	789b      	ldrb	r3, [r3, #2]
 8001b4c:	105b      	asrs	r3, r3, #1
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	b2d9      	uxtb	r1, r3
 8001b54:	4a50      	ldr	r2, [pc, #320]	; (8001c98 <merge+0xb5c>)
 8001b56:	f892 3036 	ldrb.w	r3, [r2, #54]	; 0x36
 8001b5a:	f361 0341 	bfi	r3, r1, #1, #1
 8001b5e:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36
	 			 BMS.Dischg_Overcurrent_Level_1 = (Received_Data[2] & 0x04)>>2;
 8001b62:	4b4c      	ldr	r3, [pc, #304]	; (8001c94 <merge+0xb58>)
 8001b64:	789b      	ldrb	r3, [r3, #2]
 8001b66:	109b      	asrs	r3, r3, #2
 8001b68:	f003 0301 	and.w	r3, r3, #1
 8001b6c:	b2d9      	uxtb	r1, r3
 8001b6e:	4a4a      	ldr	r2, [pc, #296]	; (8001c98 <merge+0xb5c>)
 8001b70:	f892 3036 	ldrb.w	r3, [r2, #54]	; 0x36
 8001b74:	f361 0382 	bfi	r3, r1, #2, #1
 8001b78:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36
	 			 BMS.Dischg_Overcurrent_Level_2 = (Received_Data[2] & 0x08)>>3;
 8001b7c:	4b45      	ldr	r3, [pc, #276]	; (8001c94 <merge+0xb58>)
 8001b7e:	789b      	ldrb	r3, [r3, #2]
 8001b80:	10db      	asrs	r3, r3, #3
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	b2d9      	uxtb	r1, r3
 8001b88:	4a43      	ldr	r2, [pc, #268]	; (8001c98 <merge+0xb5c>)
 8001b8a:	f892 3036 	ldrb.w	r3, [r2, #54]	; 0x36
 8001b8e:	f361 03c3 	bfi	r3, r1, #3, #1
 8001b92:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36
	 		     BMS.SOC_High_Level_1 = (Received_Data[2] & 0x10)>>4;
 8001b96:	4b3f      	ldr	r3, [pc, #252]	; (8001c94 <merge+0xb58>)
 8001b98:	789b      	ldrb	r3, [r3, #2]
 8001b9a:	111b      	asrs	r3, r3, #4
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	b2d9      	uxtb	r1, r3
 8001ba2:	4a3d      	ldr	r2, [pc, #244]	; (8001c98 <merge+0xb5c>)
 8001ba4:	f892 3036 	ldrb.w	r3, [r2, #54]	; 0x36
 8001ba8:	f361 1304 	bfi	r3, r1, #4, #1
 8001bac:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36
	 		     BMS.SOC_High_Level_2 = (Received_Data[2] & 0x20)>>5;
 8001bb0:	4b38      	ldr	r3, [pc, #224]	; (8001c94 <merge+0xb58>)
 8001bb2:	789b      	ldrb	r3, [r3, #2]
 8001bb4:	115b      	asrs	r3, r3, #5
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	b2d9      	uxtb	r1, r3
 8001bbc:	4a36      	ldr	r2, [pc, #216]	; (8001c98 <merge+0xb5c>)
 8001bbe:	f892 3036 	ldrb.w	r3, [r2, #54]	; 0x36
 8001bc2:	f361 1345 	bfi	r3, r1, #5, #1
 8001bc6:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36
	 		     BMS.SOC_Low_Level_1 = (Received_Data[2] & 0x40)>>6;
 8001bca:	4b32      	ldr	r3, [pc, #200]	; (8001c94 <merge+0xb58>)
 8001bcc:	789b      	ldrb	r3, [r3, #2]
 8001bce:	119b      	asrs	r3, r3, #6
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	b2d9      	uxtb	r1, r3
 8001bd6:	4a30      	ldr	r2, [pc, #192]	; (8001c98 <merge+0xb5c>)
 8001bd8:	f892 3036 	ldrb.w	r3, [r2, #54]	; 0x36
 8001bdc:	f361 1386 	bfi	r3, r1, #6, #1
 8001be0:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36
	 			 BMS.SOC_Low_Level_2 = (Received_Data[2] & 0x80)>>7;
 8001be4:	4b2b      	ldr	r3, [pc, #172]	; (8001c94 <merge+0xb58>)
 8001be6:	789b      	ldrb	r3, [r3, #2]
 8001be8:	09db      	lsrs	r3, r3, #7
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	b2d9      	uxtb	r1, r3
 8001bf2:	4a29      	ldr	r2, [pc, #164]	; (8001c98 <merge+0xb5c>)
 8001bf4:	f892 3036 	ldrb.w	r3, [r2, #54]	; 0x36
 8001bf8:	f361 13c7 	bfi	r3, r1, #7, #1
 8001bfc:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36
	 			 BMS.Diff_Volt_Level_1 = (Received_Data[3] & 0x01)>>0;
 8001c00:	4b24      	ldr	r3, [pc, #144]	; (8001c94 <merge+0xb58>)
 8001c02:	78db      	ldrb	r3, [r3, #3]
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	b2d9      	uxtb	r1, r3
 8001c0a:	4a23      	ldr	r2, [pc, #140]	; (8001c98 <merge+0xb5c>)
 8001c0c:	f892 3037 	ldrb.w	r3, [r2, #55]	; 0x37
 8001c10:	f361 0300 	bfi	r3, r1, #0, #1
 8001c14:	f882 3037 	strb.w	r3, [r2, #55]	; 0x37
	 			 BMS.Diff_Volt_Level_2 = (Received_Data[3] & 0x02)>>1;
 8001c18:	4b1e      	ldr	r3, [pc, #120]	; (8001c94 <merge+0xb58>)
 8001c1a:	78db      	ldrb	r3, [r3, #3]
 8001c1c:	105b      	asrs	r3, r3, #1
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	b2d9      	uxtb	r1, r3
 8001c24:	4a1c      	ldr	r2, [pc, #112]	; (8001c98 <merge+0xb5c>)
 8001c26:	f892 3037 	ldrb.w	r3, [r2, #55]	; 0x37
 8001c2a:	f361 0341 	bfi	r3, r1, #1, #1
 8001c2e:	f882 3037 	strb.w	r3, [r2, #55]	; 0x37
	 			 BMS.Diff_Temp_Level_1 = (Received_Data[3] & 0x04)>>2;
 8001c32:	4b18      	ldr	r3, [pc, #96]	; (8001c94 <merge+0xb58>)
 8001c34:	78db      	ldrb	r3, [r3, #3]
 8001c36:	109b      	asrs	r3, r3, #2
 8001c38:	f003 0301 	and.w	r3, r3, #1
 8001c3c:	b2d9      	uxtb	r1, r3
 8001c3e:	4a16      	ldr	r2, [pc, #88]	; (8001c98 <merge+0xb5c>)
 8001c40:	f892 3037 	ldrb.w	r3, [r2, #55]	; 0x37
 8001c44:	f361 0382 	bfi	r3, r1, #2, #1
 8001c48:	f882 3037 	strb.w	r3, [r2, #55]	; 0x37
	 			 BMS.Diff_Temp_Level_2 = (Received_Data[3] & 0x08)>>3;
 8001c4c:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <merge+0xb58>)
 8001c4e:	78db      	ldrb	r3, [r3, #3]
 8001c50:	10db      	asrs	r3, r3, #3
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	b2d9      	uxtb	r1, r3
 8001c58:	4a0f      	ldr	r2, [pc, #60]	; (8001c98 <merge+0xb5c>)
 8001c5a:	f892 3037 	ldrb.w	r3, [r2, #55]	; 0x37
 8001c5e:	f361 03c3 	bfi	r3, r1, #3, #1
 8001c62:	f882 3037 	strb.w	r3, [r2, #55]	; 0x37
	 			 BMS.Chg_MOS_Temp_High_Alarm = (Received_Data[4] & 0x01)>>0;//Alarm condition related to a high temperature in the charging MOSFET
 8001c66:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <merge+0xb58>)
 8001c68:	791b      	ldrb	r3, [r3, #4]
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	b2d9      	uxtb	r1, r3
 8001c70:	4a09      	ldr	r2, [pc, #36]	; (8001c98 <merge+0xb5c>)
 8001c72:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8001c76:	f361 0300 	bfi	r3, r1, #0, #1
 8001c7a:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	 			 BMS.Dischg_MOS_Temp_High_Alarm = (Received_Data[4] & 0x02)>>1;//Alarm condition related to a high temperature in the discharging MOSFET
 8001c7e:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <merge+0xb58>)
 8001c80:	791b      	ldrb	r3, [r3, #4]
 8001c82:	105b      	asrs	r3, r3, #1
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	b2d9      	uxtb	r1, r3
 8001c8a:	4a03      	ldr	r2, [pc, #12]	; (8001c98 <merge+0xb5c>)
 8001c8c:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8001c90:	e004      	b.n	8001c9c <merge+0xb60>
 8001c92:	bf00      	nop
 8001c94:	20000ff8 	.word	0x20000ff8
 8001c98:	20001000 	.word	0x20001000
 8001c9c:	f361 0341 	bfi	r3, r1, #1, #1
 8001ca0:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	 		     BMS.Chg_MOS_Temp_Sensor_Err = (Received_Data[4] & 0x04)>>2;//Error related to the temperature sensor(s) monitoring the charging MOSFET
 8001ca4:	4b8a      	ldr	r3, [pc, #552]	; (8001ed0 <merge+0xd94>)
 8001ca6:	791b      	ldrb	r3, [r3, #4]
 8001ca8:	109b      	asrs	r3, r3, #2
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	b2d9      	uxtb	r1, r3
 8001cb0:	4a88      	ldr	r2, [pc, #544]	; (8001ed4 <merge+0xd98>)
 8001cb2:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8001cb6:	f361 0382 	bfi	r3, r1, #2, #1
 8001cba:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	 			 BMS.Dischg_MOS_Temp_Sensor_Err = (Received_Data[4] & 0x08)>>3;//Error related to the temperature sensor(s) monitoring the discharging MOSFET
 8001cbe:	4b84      	ldr	r3, [pc, #528]	; (8001ed0 <merge+0xd94>)
 8001cc0:	791b      	ldrb	r3, [r3, #4]
 8001cc2:	10db      	asrs	r3, r3, #3
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	b2d9      	uxtb	r1, r3
 8001cca:	4a82      	ldr	r2, [pc, #520]	; (8001ed4 <merge+0xd98>)
 8001ccc:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8001cd0:	f361 03c3 	bfi	r3, r1, #3, #1
 8001cd4:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	 			 BMS.Chg_MOS_Adhesion_Err = (Received_Data[4] & 0x10)>>4;//Fault condition associated with the adhesion or attachment of components related to the Charging MOSFET
 8001cd8:	4b7d      	ldr	r3, [pc, #500]	; (8001ed0 <merge+0xd94>)
 8001cda:	791b      	ldrb	r3, [r3, #4]
 8001cdc:	111b      	asrs	r3, r3, #4
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	b2d9      	uxtb	r1, r3
 8001ce4:	4a7b      	ldr	r2, [pc, #492]	; (8001ed4 <merge+0xd98>)
 8001ce6:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8001cea:	f361 1304 	bfi	r3, r1, #4, #1
 8001cee:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	 			 BMS.Dischg_MOS_Adhesion_Err = (Received_Data[4] & 0x20)>>5;//Fault condition associated with the adhesion or attachment of components related to the discharging MOSFET
 8001cf2:	4b77      	ldr	r3, [pc, #476]	; (8001ed0 <merge+0xd94>)
 8001cf4:	791b      	ldrb	r3, [r3, #4]
 8001cf6:	115b      	asrs	r3, r3, #5
 8001cf8:	f003 0301 	and.w	r3, r3, #1
 8001cfc:	b2d9      	uxtb	r1, r3
 8001cfe:	4a75      	ldr	r2, [pc, #468]	; (8001ed4 <merge+0xd98>)
 8001d00:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8001d04:	f361 1345 	bfi	r3, r1, #5, #1
 8001d08:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	 		     BMS.Chg_MOS_Open_Circuit_Err = (Received_Data[4] & 0x40)>>6;//Error condition associated with an open circuit or an open-circuit fault detected in the Charging MOSFET
 8001d0c:	4b70      	ldr	r3, [pc, #448]	; (8001ed0 <merge+0xd94>)
 8001d0e:	791b      	ldrb	r3, [r3, #4]
 8001d10:	119b      	asrs	r3, r3, #6
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	b2d9      	uxtb	r1, r3
 8001d18:	4a6e      	ldr	r2, [pc, #440]	; (8001ed4 <merge+0xd98>)
 8001d1a:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8001d1e:	f361 1386 	bfi	r3, r1, #6, #1
 8001d22:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	 			 BMS.Discrg_MOS_Open_Circuit_Err = (Received_Data[4] & 0x80)>>7;//Error condition associated with an open circuit or an open-circuit fault detected in the discharging MOSFET
 8001d26:	4b6a      	ldr	r3, [pc, #424]	; (8001ed0 <merge+0xd94>)
 8001d28:	791b      	ldrb	r3, [r3, #4]
 8001d2a:	09db      	lsrs	r3, r3, #7
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	b2d9      	uxtb	r1, r3
 8001d34:	4a67      	ldr	r2, [pc, #412]	; (8001ed4 <merge+0xd98>)
 8001d36:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 8001d3a:	f361 13c7 	bfi	r3, r1, #7, #1
 8001d3e:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	 			 BMS.AFE_Collect_Chip_Err = (Received_Data[5] & 0x01)>>0;//Error condition associated with the Analog Front-End (AFE) chip or circuitry responsible for collecting and processing analog signals from various sensors or measurement points within the battery system
 8001d42:	4b63      	ldr	r3, [pc, #396]	; (8001ed0 <merge+0xd94>)
 8001d44:	795b      	ldrb	r3, [r3, #5]
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	b2d9      	uxtb	r1, r3
 8001d4c:	4a61      	ldr	r2, [pc, #388]	; (8001ed4 <merge+0xd98>)
 8001d4e:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
 8001d52:	f361 0300 	bfi	r3, r1, #0, #1
 8001d56:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
	 			 BMS.Voltage_Collect_Dropped = (Received_Data[5] & 0x02)>>1;//Alert, condition, or indication within the BMS that detects a significant and sudden drop in the collected voltage readings from sensors
 8001d5a:	4b5d      	ldr	r3, [pc, #372]	; (8001ed0 <merge+0xd94>)
 8001d5c:	795b      	ldrb	r3, [r3, #5]
 8001d5e:	105b      	asrs	r3, r3, #1
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	b2d9      	uxtb	r1, r3
 8001d66:	4a5b      	ldr	r2, [pc, #364]	; (8001ed4 <merge+0xd98>)
 8001d68:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
 8001d6c:	f361 0341 	bfi	r3, r1, #1, #1
 8001d70:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
	 			 BMS.Cell_Temp_Sensor_Err = (Received_Data[5] & 0x04)>>2;//Error or fault condition associated with temperature sensors
 8001d74:	4b56      	ldr	r3, [pc, #344]	; (8001ed0 <merge+0xd94>)
 8001d76:	795b      	ldrb	r3, [r3, #5]
 8001d78:	109b      	asrs	r3, r3, #2
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	b2d9      	uxtb	r1, r3
 8001d80:	4a54      	ldr	r2, [pc, #336]	; (8001ed4 <merge+0xd98>)
 8001d82:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
 8001d86:	f361 0382 	bfi	r3, r1, #2, #1
 8001d8a:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
	 			 BMS.EEPROM_Err = (Received_Data[5] & 0x08)>>3;//Error condition or fault related to the Electrically Erasable Programmable Read-Only Memory (EEPROM) used within the BMS circuitry or microcontroller.
 8001d8e:	4b50      	ldr	r3, [pc, #320]	; (8001ed0 <merge+0xd94>)
 8001d90:	795b      	ldrb	r3, [r3, #5]
 8001d92:	10db      	asrs	r3, r3, #3
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	b2d9      	uxtb	r1, r3
 8001d9a:	4a4e      	ldr	r2, [pc, #312]	; (8001ed4 <merge+0xd98>)
 8001d9c:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
 8001da0:	f361 03c3 	bfi	r3, r1, #3, #1
 8001da4:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
	 			 BMS.RTC_Err = (Received_Data[5] & 0x10)>>4;//Error condition related to the Real-Time Clock (RTC) component or module within the BMS.
 8001da8:	4b49      	ldr	r3, [pc, #292]	; (8001ed0 <merge+0xd94>)
 8001daa:	795b      	ldrb	r3, [r3, #5]
 8001dac:	111b      	asrs	r3, r3, #4
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	b2d9      	uxtb	r1, r3
 8001db4:	4a47      	ldr	r2, [pc, #284]	; (8001ed4 <merge+0xd98>)
 8001db6:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
 8001dba:	f361 1304 	bfi	r3, r1, #4, #1
 8001dbe:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
	 			 BMS.Precharge_Failure = (Received_Data[5] & 0x20)>>5;//fault where the precharging process within the battery system has encountered
 8001dc2:	4b43      	ldr	r3, [pc, #268]	; (8001ed0 <merge+0xd94>)
 8001dc4:	795b      	ldrb	r3, [r3, #5]
 8001dc6:	115b      	asrs	r3, r3, #5
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	b2d9      	uxtb	r1, r3
 8001dce:	4a41      	ldr	r2, [pc, #260]	; (8001ed4 <merge+0xd98>)
 8001dd0:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
 8001dd4:	f361 1345 	bfi	r3, r1, #5, #1
 8001dd8:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
	 			 BMS.Communication_Failure = (Received_Data[5] & 0x40)>>6;//disruptions in communication between various components, modules, or external devices within the battery system.
 8001ddc:	4b3c      	ldr	r3, [pc, #240]	; (8001ed0 <merge+0xd94>)
 8001dde:	795b      	ldrb	r3, [r3, #5]
 8001de0:	119b      	asrs	r3, r3, #6
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	b2d9      	uxtb	r1, r3
 8001de8:	4a3a      	ldr	r2, [pc, #232]	; (8001ed4 <merge+0xd98>)
 8001dea:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
 8001dee:	f361 1386 	bfi	r3, r1, #6, #1
 8001df2:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
	 			 BMS.Internal_Communication_Failure = (Received_Data[5] & 0x80)>>7;//disruptions in the internal communication between various components, modules, or subsystems within the BMS itself.
 8001df6:	4b36      	ldr	r3, [pc, #216]	; (8001ed0 <merge+0xd94>)
 8001df8:	795b      	ldrb	r3, [r3, #5]
 8001dfa:	09db      	lsrs	r3, r3, #7
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	b2d9      	uxtb	r1, r3
 8001e04:	4a33      	ldr	r2, [pc, #204]	; (8001ed4 <merge+0xd98>)
 8001e06:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
 8001e0a:	f361 13c7 	bfi	r3, r1, #7, #1
 8001e0e:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
	 			 BMS.Current_Module_Fault = (Received_Data[6] & 0x01)>>0;//Fault condition related to the current measurement module within the BMS.
 8001e12:	4b2f      	ldr	r3, [pc, #188]	; (8001ed0 <merge+0xd94>)
 8001e14:	799b      	ldrb	r3, [r3, #6]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	b2d9      	uxtb	r1, r3
 8001e1c:	4a2d      	ldr	r2, [pc, #180]	; (8001ed4 <merge+0xd98>)
 8001e1e:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
 8001e22:	f361 0300 	bfi	r3, r1, #0, #1
 8001e26:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
	 			 BMS.Sum_Voltage_Detect_Fault = (Received_Data[6] & 0x02)>>1;//Fault condition related to the detection or measurement of the total sum voltage across the battery cells or modules within the system.
 8001e2a:	4b29      	ldr	r3, [pc, #164]	; (8001ed0 <merge+0xd94>)
 8001e2c:	799b      	ldrb	r3, [r3, #6]
 8001e2e:	105b      	asrs	r3, r3, #1
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	b2d9      	uxtb	r1, r3
 8001e36:	4a27      	ldr	r2, [pc, #156]	; (8001ed4 <merge+0xd98>)
 8001e38:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
 8001e3c:	f361 0341 	bfi	r3, r1, #1, #1
 8001e40:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
	 			 BMS.Short_Circuit_Protect_Fault = (Received_Data[6] & 0x04)>>2;//fault condition related to the protective mechanisms within the BMS that are designed to detect and respond to short-circuit events occurring within the battery system.
 8001e44:	4b22      	ldr	r3, [pc, #136]	; (8001ed0 <merge+0xd94>)
 8001e46:	799b      	ldrb	r3, [r3, #6]
 8001e48:	109b      	asrs	r3, r3, #2
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	b2d9      	uxtb	r1, r3
 8001e50:	4a20      	ldr	r2, [pc, #128]	; (8001ed4 <merge+0xd98>)
 8001e52:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
 8001e56:	f361 0382 	bfi	r3, r1, #2, #1
 8001e5a:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
	 			 BMS.Low_Volt_Forbidden_Chg_Fault = (Received_Data[6] & 0x08)>>3;// fault condition where charging is forbidden due to low voltage detected in the battery cells or pack, preventing the charging process from initiating or continuing.
 8001e5e:	4b1c      	ldr	r3, [pc, #112]	; (8001ed0 <merge+0xd94>)
 8001e60:	799b      	ldrb	r3, [r3, #6]
 8001e62:	10db      	asrs	r3, r3, #3
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	b2d9      	uxtb	r1, r3
 8001e6a:	4a1a      	ldr	r2, [pc, #104]	; (8001ed4 <merge+0xd98>)
 8001e6c:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
 8001e70:	f361 03c3 	bfi	r3, r1, #3, #1
 8001e74:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
	 			 BMS.Faultcode = Received_Data[7];//Fault code that represents an error, fault, or abnormal condition detected by the BMS
 8001e78:	4b15      	ldr	r3, [pc, #84]	; (8001ed0 <merge+0xd94>)
 8001e7a:	79da      	ldrb	r2, [r3, #7]
 8001e7c:	4b15      	ldr	r3, [pc, #84]	; (8001ed4 <merge+0xd98>)
 8001e7e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	 			 break;
 8001e82:	e020      	b.n	8001ec6 <merge+0xd8a>
	             BMS.Cumulative_Charge = ((Received_Data[1]<<16)|(Received_Data[2]<<8)|(Received_Data[3]));//The total amount of charge that has been delivered or supplied to a battery
 8001e84:	4b12      	ldr	r3, [pc, #72]	; (8001ed0 <merge+0xd94>)
 8001e86:	785b      	ldrb	r3, [r3, #1]
 8001e88:	041a      	lsls	r2, r3, #16
 8001e8a:	4b11      	ldr	r3, [pc, #68]	; (8001ed0 <merge+0xd94>)
 8001e8c:	789b      	ldrb	r3, [r3, #2]
 8001e8e:	021b      	lsls	r3, r3, #8
 8001e90:	4313      	orrs	r3, r2
 8001e92:	4a0f      	ldr	r2, [pc, #60]	; (8001ed0 <merge+0xd94>)
 8001e94:	78d2      	ldrb	r2, [r2, #3]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4b0e      	ldr	r3, [pc, #56]	; (8001ed4 <merge+0xd98>)
 8001e9c:	63da      	str	r2, [r3, #60]	; 0x3c
	             break;
 8001e9e:	e012      	b.n	8001ec6 <merge+0xd8a>
	             BMS.Battery_capacity = (((Received_Data[2]<<8)|Received_Data[3])/1000);//The battery rated capacity in Ah eg(58 Ah)
 8001ea0:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <merge+0xd94>)
 8001ea2:	789b      	ldrb	r3, [r3, #2]
 8001ea4:	021b      	lsls	r3, r3, #8
 8001ea6:	4a0a      	ldr	r2, [pc, #40]	; (8001ed0 <merge+0xd94>)
 8001ea8:	78d2      	ldrb	r2, [r2, #3]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	4a0a      	ldr	r2, [pc, #40]	; (8001ed8 <merge+0xd9c>)
 8001eae:	fb82 1203 	smull	r1, r2, r2, r3
 8001eb2:	1192      	asrs	r2, r2, #6
 8001eb4:	17db      	asrs	r3, r3, #31
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <merge+0xd98>)
 8001ebc:	80da      	strh	r2, [r3, #6]
	             break;
 8001ebe:	e002      	b.n	8001ec6 <merge+0xd8a>
	break;
 8001ec0:	bf00      	nop
 8001ec2:	e000      	b.n	8001ec6 <merge+0xd8a>
	             break;
 8001ec4:	bf00      	nop

 }
 }
 8001ec6:	bf00      	nop
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bc80      	pop	{r7}
 8001ece:	4770      	bx	lr
 8001ed0:	20000ff8 	.word	0x20000ff8
 8001ed4:	20001000 	.word	0x20001000
 8001ed8:	10624dd3 	.word	0x10624dd3

08001edc <parllel_transmit>:
// * for Receiving response from BMS according to the Identifier request
// * Transmit data should be given to the mailbox
// */

void parllel_transmit(uint8_t data)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	71fb      	strb	r3, [r7, #7]
	GPIOA->ODR=0X00|data;
 8001ee6:	4a04      	ldr	r2, [pc, #16]	; (8001ef8 <parllel_transmit+0x1c>)
 8001ee8:	79fb      	ldrb	r3, [r7, #7]
 8001eea:	60d3      	str	r3, [r2, #12]
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bc80      	pop	{r7}
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	40010800 	.word	0x40010800

08001efc <Split>:

void Split(uint32_t Odo_Value)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
	data_Write[0]= Odo_Value & 0xFF;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	b2da      	uxtb	r2, r3
 8001f08:	4b08      	ldr	r3, [pc, #32]	; (8001f2c <Split+0x30>)
 8001f0a:	701a      	strb	r2, [r3, #0]
	data_Write[1]= (Odo_Value>>8) & 0xFF;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	0a1b      	lsrs	r3, r3, #8
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <Split+0x30>)
 8001f14:	705a      	strb	r2, [r3, #1]
	data_Write[2]= (Odo_Value>>16) & 0xFF;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	0c1b      	lsrs	r3, r3, #16
 8001f1a:	b2da      	uxtb	r2, r3
 8001f1c:	4b03      	ldr	r3, [pc, #12]	; (8001f2c <Split+0x30>)
 8001f1e:	709a      	strb	r2, [r3, #2]
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bc80      	pop	{r7}
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	20001138 	.word	0x20001138

08001f30 <I2C_Write_EEPROM>:
 * Merging individual byte of data and stored in a Structure
 */


void I2C_Write_EEPROM(uint32_t data_eeprom,uint8_t address)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	70fb      	strb	r3, [r7, #3]
   Split(data_eeprom);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f7ff ffdd 	bl	8001efc <Split>
   EEPROM_Write(address, data_Write, sizeof(data_Write));//Write odo-meter data
 8001f42:	78fb      	ldrb	r3, [r7, #3]
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	2203      	movs	r2, #3
 8001f48:	4903      	ldr	r1, [pc, #12]	; (8001f58 <I2C_Write_EEPROM+0x28>)
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f000 f822 	bl	8001f94 <EEPROM_Write>
}
 8001f50:	bf00      	nop
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	20001138 	.word	0x20001138

08001f5c <I2C_Read_EEPROM>:

int I2C_Read_EEPROM(uint8_t address)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	71fb      	strb	r3, [r7, #7]
	EEPROM_Read(address, data_Read, sizeof(data_Read));
 8001f66:	79fb      	ldrb	r3, [r7, #7]
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	2203      	movs	r2, #3
 8001f6c:	4908      	ldr	r1, [pc, #32]	; (8001f90 <I2C_Read_EEPROM+0x34>)
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f000 f82e 	bl	8001fd0 <EEPROM_Read>
	return((data_Read[2] << 16) | (data_Read[1] << 8) | (data_Read[0]));
 8001f74:	4b06      	ldr	r3, [pc, #24]	; (8001f90 <I2C_Read_EEPROM+0x34>)
 8001f76:	789b      	ldrb	r3, [r3, #2]
 8001f78:	041a      	lsls	r2, r3, #16
 8001f7a:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <I2C_Read_EEPROM+0x34>)
 8001f7c:	785b      	ldrb	r3, [r3, #1]
 8001f7e:	021b      	lsls	r3, r3, #8
 8001f80:	4313      	orrs	r3, r2
 8001f82:	4a03      	ldr	r2, [pc, #12]	; (8001f90 <I2C_Read_EEPROM+0x34>)
 8001f84:	7812      	ldrb	r2, [r2, #0]
 8001f86:	4313      	orrs	r3, r2
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	20001124 	.word	0x20001124

08001f94 <EEPROM_Write>:
 * This function contains Target device address,Internal Memory address
 * Size of internal memory address,Data buffer for storing write data ,
 * Size Amount of data to be sent and Timeout Timeout duration
 */
void EEPROM_Write(uint16_t address, uint8_t* data, uint16_t size)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af04      	add	r7, sp, #16
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	6039      	str	r1, [r7, #0]
 8001f9e:	80fb      	strh	r3, [r7, #6]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	80bb      	strh	r3, [r7, #4]
  HAL_I2C_Mem_Write(&hi2c1, EEPROM_DEV_ADD, address, I2C_MEMADD_SIZE_8BIT, data, size, HAL_MAX_DELAY);
 8001fa4:	88fa      	ldrh	r2, [r7, #6]
 8001fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8001faa:	9302      	str	r3, [sp, #8]
 8001fac:	88bb      	ldrh	r3, [r7, #4]
 8001fae:	9301      	str	r3, [sp, #4]
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	21a0      	movs	r1, #160	; 0xa0
 8001fb8:	4804      	ldr	r0, [pc, #16]	; (8001fcc <EEPROM_Write+0x38>)
 8001fba:	f002 fd51 	bl	8004a60 <HAL_I2C_Mem_Write>
  HAL_Delay(5); // Delay for EEPROM write operation
 8001fbe:	2005      	movs	r0, #5
 8001fc0:	f001 fa9a 	bl	80034f8 <HAL_Delay>
}
 8001fc4:	bf00      	nop
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	20001068 	.word	0x20001068

08001fd0 <EEPROM_Read>:
 * This function contains Target device address,Internal Memory address
 * Size of internal memory address,Data Buffer for storing read data,
 * Size Amount of data to be read and Timeout Timeout duration
 */
void EEPROM_Read(uint16_t address, uint8_t* data, uint16_t size)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af04      	add	r7, sp, #16
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	6039      	str	r1, [r7, #0]
 8001fda:	80fb      	strh	r3, [r7, #6]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	80bb      	strh	r3, [r7, #4]
  HAL_I2C_Mem_Read(&hi2c1, EEPROM_DEV_ADD, address, I2C_MEMADD_SIZE_8BIT, data, size, HAL_MAX_DELAY);
 8001fe0:	88fa      	ldrh	r2, [r7, #6]
 8001fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe6:	9302      	str	r3, [sp, #8]
 8001fe8:	88bb      	ldrh	r3, [r7, #4]
 8001fea:	9301      	str	r3, [sp, #4]
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	21a0      	movs	r1, #160	; 0xa0
 8001ff4:	4804      	ldr	r0, [pc, #16]	; (8002008 <EEPROM_Read+0x38>)
 8001ff6:	f002 fe2d 	bl	8004c54 <HAL_I2C_Mem_Read>
  HAL_Delay(5); // Delay for EEPROM read operation
 8001ffa:	2005      	movs	r0, #5
 8001ffc:	f001 fa7c 	bl	80034f8 <HAL_Delay>
}
 8002000:	bf00      	nop
 8002002:	3708      	adds	r7, #8
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	20001068 	.word	0x20001068

0800200c <battery_voltage>:

void battery_voltage()
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
	lcd_clear(7, 0, 12);
 8002010:	220c      	movs	r2, #12
 8002012:	2100      	movs	r1, #0
 8002014:	2007      	movs	r0, #7
 8002016:	f7fe ff25 	bl	8000e64 <lcd_clear>
	lcd_print_digit_wos(7, 0, (BMS.Cumulative_Total_Voltage/100));
 800201a:	4b14      	ldr	r3, [pc, #80]	; (800206c <battery_voltage+0x60>)
 800201c:	881b      	ldrh	r3, [r3, #0]
 800201e:	4a14      	ldr	r2, [pc, #80]	; (8002070 <battery_voltage+0x64>)
 8002020:	fba2 2303 	umull	r2, r3, r2, r3
 8002024:	095b      	lsrs	r3, r3, #5
 8002026:	b29b      	uxth	r3, r3
 8002028:	461a      	mov	r2, r3
 800202a:	2100      	movs	r1, #0
 800202c:	2007      	movs	r0, #7
 800202e:	f7fe ff3f 	bl	8000eb0 <lcd_print_digit_wos>
	lcd_print_digit_wos(7, 6, (BMS.Cumulative_Total_Voltage/10)%10);
 8002032:	4b0e      	ldr	r3, [pc, #56]	; (800206c <battery_voltage+0x60>)
 8002034:	881b      	ldrh	r3, [r3, #0]
 8002036:	4a0f      	ldr	r2, [pc, #60]	; (8002074 <battery_voltage+0x68>)
 8002038:	fba2 2303 	umull	r2, r3, r2, r3
 800203c:	08db      	lsrs	r3, r3, #3
 800203e:	b29a      	uxth	r2, r3
 8002040:	4b0c      	ldr	r3, [pc, #48]	; (8002074 <battery_voltage+0x68>)
 8002042:	fba3 1302 	umull	r1, r3, r3, r2
 8002046:	08d9      	lsrs	r1, r3, #3
 8002048:	460b      	mov	r3, r1
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	440b      	add	r3, r1
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	b29b      	uxth	r3, r3
 8002054:	461a      	mov	r2, r3
 8002056:	2106      	movs	r1, #6
 8002058:	2007      	movs	r0, #7
 800205a:	f7fe ff29 	bl	8000eb0 <lcd_print_digit_wos>
	lcd_print_char(7, 12, "V");
 800205e:	4a06      	ldr	r2, [pc, #24]	; (8002078 <battery_voltage+0x6c>)
 8002060:	210c      	movs	r1, #12
 8002062:	2007      	movs	r0, #7
 8002064:	f7fe fe24 	bl	8000cb0 <lcd_print_char>
}
 8002068:	bf00      	nop
 800206a:	bd80      	pop	{r7, pc}
 800206c:	20001000 	.word	0x20001000
 8002070:	51eb851f 	.word	0x51eb851f
 8002074:	cccccccd 	.word	0xcccccccd
 8002078:	080068f0 	.word	0x080068f0

0800207c <battery_temp>:
	lcd_print_digit_wos(1, 12, ((((BMS.Cumulative_Charge/BMS.Battery_capacity)%1000)%100)/10));
	lcd_print_digit_wos(1, 18, ((((BMS.Cumulative_Charge/BMS.Battery_capacity)%1000)%100)%10));
}

void battery_temp()
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
	if((BMS.Max_Temp==0)&&(BMS.Min_Temp==0))
 8002080:	4b32      	ldr	r3, [pc, #200]	; (800214c <battery_temp+0xd0>)
 8002082:	7c5b      	ldrb	r3, [r3, #17]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d11a      	bne.n	80020be <battery_temp+0x42>
 8002088:	4b30      	ldr	r3, [pc, #192]	; (800214c <battery_temp+0xd0>)
 800208a:	7cdb      	ldrb	r3, [r3, #19]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d116      	bne.n	80020be <battery_temp+0x42>
	{
		lcd_print_digit(0, 0, BMS.Max_Temp);
 8002090:	4b2e      	ldr	r3, [pc, #184]	; (800214c <battery_temp+0xd0>)
 8002092:	7c5b      	ldrb	r3, [r3, #17]
 8002094:	461a      	mov	r2, r3
 8002096:	2100      	movs	r1, #0
 8002098:	2000      	movs	r0, #0
 800209a:	f7fe ff49 	bl	8000f30 <lcd_print_digit>
		lcd_print_convert(0, 12, 0x03);
 800209e:	2203      	movs	r2, #3
 80020a0:	210c      	movs	r1, #12
 80020a2:	2000      	movs	r0, #0
 80020a4:	f7ff f80e 	bl	80010c4 <lcd_print_convert>
		lcd_print_convert(0, 13, 0x03);
 80020a8:	2203      	movs	r2, #3
 80020aa:	210d      	movs	r1, #13
 80020ac:	2000      	movs	r0, #0
 80020ae:	f7ff f809 	bl	80010c4 <lcd_print_convert>
		lcd_print_char(0, 15, "C");
 80020b2:	4a27      	ldr	r2, [pc, #156]	; (8002150 <battery_temp+0xd4>)
 80020b4:	210f      	movs	r1, #15
 80020b6:	2000      	movs	r0, #0
 80020b8:	f7fe fdfa 	bl	8000cb0 <lcd_print_char>
	{
 80020bc:	e035      	b.n	800212a <battery_temp+0xae>
	}
	else
	{
		if(BMS.Max_Temp>50)
 80020be:	4b23      	ldr	r3, [pc, #140]	; (800214c <battery_temp+0xd0>)
 80020c0:	7c5b      	ldrb	r3, [r3, #17]
 80020c2:	2b32      	cmp	r3, #50	; 0x32
 80020c4:	d916      	bls.n	80020f4 <battery_temp+0x78>
			{
				lcd_print_digit(0, 0, ((BMS.Max_Temp)-40));
 80020c6:	4b21      	ldr	r3, [pc, #132]	; (800214c <battery_temp+0xd0>)
 80020c8:	7c5b      	ldrb	r3, [r3, #17]
 80020ca:	3b28      	subs	r3, #40	; 0x28
 80020cc:	461a      	mov	r2, r3
 80020ce:	2100      	movs	r1, #0
 80020d0:	2000      	movs	r0, #0
 80020d2:	f7fe ff2d 	bl	8000f30 <lcd_print_digit>
				lcd_print_convert(0, 12, 0x03);
 80020d6:	2203      	movs	r2, #3
 80020d8:	210c      	movs	r1, #12
 80020da:	2000      	movs	r0, #0
 80020dc:	f7fe fff2 	bl	80010c4 <lcd_print_convert>
				lcd_print_convert(0, 13, 0x03);
 80020e0:	2203      	movs	r2, #3
 80020e2:	210d      	movs	r1, #13
 80020e4:	2000      	movs	r0, #0
 80020e6:	f7fe ffed 	bl	80010c4 <lcd_print_convert>
				lcd_print_char(0, 15, "C");
 80020ea:	4a19      	ldr	r2, [pc, #100]	; (8002150 <battery_temp+0xd4>)
 80020ec:	210f      	movs	r1, #15
 80020ee:	2000      	movs	r0, #0
 80020f0:	f7fe fdde 	bl	8000cb0 <lcd_print_char>
			}
			if(BMS.Min_Temp<=50)// less tham 10 degree min temp will be printed
 80020f4:	4b15      	ldr	r3, [pc, #84]	; (800214c <battery_temp+0xd0>)
 80020f6:	7cdb      	ldrb	r3, [r3, #19]
 80020f8:	2b32      	cmp	r3, #50	; 0x32
 80020fa:	d816      	bhi.n	800212a <battery_temp+0xae>
			{
				lcd_print_digit(0, 0, ((BMS.Min_Temp)-40));//
 80020fc:	4b13      	ldr	r3, [pc, #76]	; (800214c <battery_temp+0xd0>)
 80020fe:	7cdb      	ldrb	r3, [r3, #19]
 8002100:	3b28      	subs	r3, #40	; 0x28
 8002102:	461a      	mov	r2, r3
 8002104:	2100      	movs	r1, #0
 8002106:	2000      	movs	r0, #0
 8002108:	f7fe ff12 	bl	8000f30 <lcd_print_digit>
				lcd_print_convert(0, 12, 0x03);
 800210c:	2203      	movs	r2, #3
 800210e:	210c      	movs	r1, #12
 8002110:	2000      	movs	r0, #0
 8002112:	f7fe ffd7 	bl	80010c4 <lcd_print_convert>
				lcd_print_convert(0, 13, 0x03);
 8002116:	2203      	movs	r2, #3
 8002118:	210d      	movs	r1, #13
 800211a:	2000      	movs	r0, #0
 800211c:	f7fe ffd2 	bl	80010c4 <lcd_print_convert>
				lcd_print_char(0, 15, "C");
 8002120:	4a0b      	ldr	r2, [pc, #44]	; (8002150 <battery_temp+0xd4>)
 8002122:	210f      	movs	r1, #15
 8002124:	2000      	movs	r0, #0
 8002126:	f7fe fdc3 	bl	8000cb0 <lcd_print_char>
//		lcd_print_convert(7, 12, 0x03);
//		lcd_print_convert(7, 13, 0x03);
//		lcd_print_char(7, 15, "C");
//	}

	if(BMS.Max_Temp>95)
 800212a:	4b08      	ldr	r3, [pc, #32]	; (800214c <battery_temp+0xd0>)
 800212c:	7c5b      	ldrb	r3, [r3, #17]
 800212e:	2b5f      	cmp	r3, #95	; 0x5f
 8002130:	d902      	bls.n	8002138 <battery_temp+0xbc>
	{
		Battery_high_Temp=1;
 8002132:	4b08      	ldr	r3, [pc, #32]	; (8002154 <battery_temp+0xd8>)
 8002134:	2201      	movs	r2, #1
 8002136:	701a      	strb	r2, [r3, #0]
	}

	if(BMS.Max_Temp<90)
 8002138:	4b04      	ldr	r3, [pc, #16]	; (800214c <battery_temp+0xd0>)
 800213a:	7c5b      	ldrb	r3, [r3, #17]
 800213c:	2b59      	cmp	r3, #89	; 0x59
 800213e:	d802      	bhi.n	8002146 <battery_temp+0xca>
	{
		Battery_high_Temp=0;
 8002140:	4b04      	ldr	r3, [pc, #16]	; (8002154 <battery_temp+0xd8>)
 8002142:	2200      	movs	r2, #0
 8002144:	701a      	strb	r2, [r3, #0]
	}
}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20001000 	.word	0x20001000
 8002150:	080068f8 	.word	0x080068f8
 8002154:	2000112a 	.word	0x2000112a

08002158 <battery_soc>:

void battery_soc()
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
	Reserved_SOC=(int)1000.0-((1000.0-BMS.SOC)*(100.0/85.0));
 800215c:	4b3c      	ldr	r3, [pc, #240]	; (8002250 <battery_soc+0xf8>)
 800215e:	891b      	ldrh	r3, [r3, #8]
 8002160:	4618      	mov	r0, r3
 8002162:	f7fe fa71 	bl	8000648 <__aeabi_i2d>
 8002166:	4602      	mov	r2, r0
 8002168:	460b      	mov	r3, r1
 800216a:	f04f 0000 	mov.w	r0, #0
 800216e:	4939      	ldr	r1, [pc, #228]	; (8002254 <battery_soc+0xfc>)
 8002170:	f7fe f91c 	bl	80003ac <__aeabi_dsub>
 8002174:	4602      	mov	r2, r0
 8002176:	460b      	mov	r3, r1
 8002178:	4610      	mov	r0, r2
 800217a:	4619      	mov	r1, r3
 800217c:	a332      	add	r3, pc, #200	; (adr r3, 8002248 <battery_soc+0xf0>)
 800217e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002182:	f7fd ffe5 	bl	8000150 <__aeabi_dmul>
 8002186:	4602      	mov	r2, r0
 8002188:	460b      	mov	r3, r1
 800218a:	f04f 0000 	mov.w	r0, #0
 800218e:	4931      	ldr	r1, [pc, #196]	; (8002254 <battery_soc+0xfc>)
 8002190:	f7fe f90c 	bl	80003ac <__aeabi_dsub>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	4610      	mov	r0, r2
 800219a:	4619      	mov	r1, r3
 800219c:	f7fe fabe 	bl	800071c <__aeabi_d2uiz>
 80021a0:	4603      	mov	r3, r0
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	4b2c      	ldr	r3, [pc, #176]	; (8002258 <battery_soc+0x100>)
 80021a6:	801a      	strh	r2, [r3, #0]

	if(Reserved_SOC==1000){
 80021a8:	4b2b      	ldr	r3, [pc, #172]	; (8002258 <battery_soc+0x100>)
 80021aa:	881b      	ldrh	r3, [r3, #0]
 80021ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021b0:	d119      	bne.n	80021e6 <battery_soc+0x8e>
		lcd_clear(7, 98, 29);
 80021b2:	221d      	movs	r2, #29
 80021b4:	2162      	movs	r1, #98	; 0x62
 80021b6:	2007      	movs	r0, #7
 80021b8:	f7fe fe54 	bl	8000e64 <lcd_clear>
		lcd_print_digit_wos(7, 104, 1);
 80021bc:	2201      	movs	r2, #1
 80021be:	2168      	movs	r1, #104	; 0x68
 80021c0:	2007      	movs	r0, #7
 80021c2:	f7fe fe75 	bl	8000eb0 <lcd_print_digit_wos>
		lcd_print_digit_wos(7, 110, 0);
 80021c6:	2200      	movs	r2, #0
 80021c8:	216e      	movs	r1, #110	; 0x6e
 80021ca:	2007      	movs	r0, #7
 80021cc:	f7fe fe70 	bl	8000eb0 <lcd_print_digit_wos>
		lcd_print_digit_wos(7, 116, 0);
 80021d0:	2200      	movs	r2, #0
 80021d2:	2174      	movs	r1, #116	; 0x74
 80021d4:	2007      	movs	r0, #7
 80021d6:	f7fe fe6b 	bl	8000eb0 <lcd_print_digit_wos>
		lcd_print_char(7, 122, "%");
 80021da:	4a20      	ldr	r2, [pc, #128]	; (800225c <battery_soc+0x104>)
 80021dc:	217a      	movs	r1, #122	; 0x7a
 80021de:	2007      	movs	r0, #7
 80021e0:	f7fe fd66 	bl	8000cb0 <lcd_print_char>
		lcd_clear(7, 98, 29);
		lcd_print_digit_wos(7, 110, (Reserved_SOC/100));
		lcd_print_digit_wos(7, 116, (Reserved_SOC/10)%10);
		lcd_print_char(7, 122, "%");
	}
}
 80021e4:	e02b      	b.n	800223e <battery_soc+0xe6>
		lcd_clear(7, 98, 29);
 80021e6:	221d      	movs	r2, #29
 80021e8:	2162      	movs	r1, #98	; 0x62
 80021ea:	2007      	movs	r0, #7
 80021ec:	f7fe fe3a 	bl	8000e64 <lcd_clear>
		lcd_print_digit_wos(7, 110, (Reserved_SOC/100));
 80021f0:	4b19      	ldr	r3, [pc, #100]	; (8002258 <battery_soc+0x100>)
 80021f2:	881b      	ldrh	r3, [r3, #0]
 80021f4:	4a1a      	ldr	r2, [pc, #104]	; (8002260 <battery_soc+0x108>)
 80021f6:	fba2 2303 	umull	r2, r3, r2, r3
 80021fa:	095b      	lsrs	r3, r3, #5
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	461a      	mov	r2, r3
 8002200:	216e      	movs	r1, #110	; 0x6e
 8002202:	2007      	movs	r0, #7
 8002204:	f7fe fe54 	bl	8000eb0 <lcd_print_digit_wos>
		lcd_print_digit_wos(7, 116, (Reserved_SOC/10)%10);
 8002208:	4b13      	ldr	r3, [pc, #76]	; (8002258 <battery_soc+0x100>)
 800220a:	881b      	ldrh	r3, [r3, #0]
 800220c:	4a15      	ldr	r2, [pc, #84]	; (8002264 <battery_soc+0x10c>)
 800220e:	fba2 2303 	umull	r2, r3, r2, r3
 8002212:	08db      	lsrs	r3, r3, #3
 8002214:	b29a      	uxth	r2, r3
 8002216:	4b13      	ldr	r3, [pc, #76]	; (8002264 <battery_soc+0x10c>)
 8002218:	fba3 1302 	umull	r1, r3, r3, r2
 800221c:	08d9      	lsrs	r1, r3, #3
 800221e:	460b      	mov	r3, r1
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	440b      	add	r3, r1
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	b29b      	uxth	r3, r3
 800222a:	461a      	mov	r2, r3
 800222c:	2174      	movs	r1, #116	; 0x74
 800222e:	2007      	movs	r0, #7
 8002230:	f7fe fe3e 	bl	8000eb0 <lcd_print_digit_wos>
		lcd_print_char(7, 122, "%");
 8002234:	4a09      	ldr	r2, [pc, #36]	; (800225c <battery_soc+0x104>)
 8002236:	217a      	movs	r1, #122	; 0x7a
 8002238:	2007      	movs	r0, #7
 800223a:	f7fe fd39 	bl	8000cb0 <lcd_print_char>
}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	f3af 8000 	nop.w
 8002248:	d2d2d2d3 	.word	0xd2d2d2d3
 800224c:	3ff2d2d2 	.word	0x3ff2d2d2
 8002250:	20001000 	.word	0x20001000
 8002254:	408f4000 	.word	0x408f4000
 8002258:	20001128 	.word	0x20001128
 800225c:	080068fc 	.word	0x080068fc
 8002260:	51eb851f 	.word	0x51eb851f
 8002264:	cccccccd 	.word	0xcccccccd

08002268 <Gear_Status>:
uint8_t start_inc=0;uint8_t Reverse_status=0;uint16_t DTE=0;
void Gear_Status()
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
	uint8_t Gear_State=0;
 800226e:	2300      	movs	r3, #0
 8002270:	71fb      	strb	r3, [r7, #7]
	GPIOA->CRL=0X88888888;
 8002272:	4b51      	ldr	r3, [pc, #324]	; (80023b8 <Gear_Status+0x150>)
 8002274:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8002278:	601a      	str	r2, [r3, #0]
	GPIOA->ODR|=0XFF;
 800227a:	4b4f      	ldr	r3, [pc, #316]	; (80023b8 <Gear_Status+0x150>)
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	4a4e      	ldr	r2, [pc, #312]	; (80023b8 <Gear_Status+0x150>)
 8002280:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8002284:	60d3      	str	r3, [r2, #12]
	HAL_GPIO_WritePin(GPIOB, check_led_Pin, RESET);
 8002286:	2200      	movs	r2, #0
 8002288:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800228c:	484b      	ldr	r0, [pc, #300]	; (80023bc <Gear_Status+0x154>)
 800228e:	f002 fa5a 	bl	8004746 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8002292:	2032      	movs	r0, #50	; 0x32
 8002294:	f001 f930 	bl	80034f8 <HAL_Delay>
//	if(HAL_GPIO_ReadPin(GPIOA, LCD_D4_Pin)==0) //PARKING
//		{danger_icon();}
//	else
//		{danger_clear();}

	if(HAL_GPIO_ReadPin(GPIOA, LCD_D1_Pin)==1)
 8002298:	2102      	movs	r1, #2
 800229a:	4847      	ldr	r0, [pc, #284]	; (80023b8 <Gear_Status+0x150>)
 800229c:	f002 fa3c 	bl	8004718 <HAL_GPIO_ReadPin>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d102      	bne.n	80022ac <Gear_Status+0x44>
		{
			Gear_State=0;// REVERSE
 80022a6:	2300      	movs	r3, #0
 80022a8:	71fb      	strb	r3, [r7, #7]
 80022aa:	e055      	b.n	8002358 <Gear_Status+0xf0>
			//Reverse_status=1;
		}
	else
		{
			Reverse_status=0;
 80022ac:	4b44      	ldr	r3, [pc, #272]	; (80023c0 <Gear_Status+0x158>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	701a      	strb	r2, [r3, #0]
			if((HAL_GPIO_ReadPin(GPIOA, LCD_D2_Pin)==1)&&((HAL_GPIO_ReadPin(GPIOA, LCD_D3_Pin)==0)))
 80022b2:	2104      	movs	r1, #4
 80022b4:	4840      	ldr	r0, [pc, #256]	; (80023b8 <Gear_Status+0x150>)
 80022b6:	f002 fa2f 	bl	8004718 <HAL_GPIO_ReadPin>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d118      	bne.n	80022f2 <Gear_Status+0x8a>
 80022c0:	2108      	movs	r1, #8
 80022c2:	483d      	ldr	r0, [pc, #244]	; (80023b8 <Gear_Status+0x150>)
 80022c4:	f002 fa28 	bl	8004718 <HAL_GPIO_ReadPin>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d111      	bne.n	80022f2 <Gear_Status+0x8a>
				{
					Gear_State=1;
 80022ce:	2301      	movs	r3, #1
 80022d0:	71fb      	strb	r3, [r7, #7]
					DTE=(Reserved_SOC*130)/100;
 80022d2:	4b3c      	ldr	r3, [pc, #240]	; (80023c4 <Gear_Status+0x15c>)
 80022d4:	881b      	ldrh	r3, [r3, #0]
 80022d6:	461a      	mov	r2, r3
 80022d8:	4613      	mov	r3, r2
 80022da:	019b      	lsls	r3, r3, #6
 80022dc:	4413      	add	r3, r2
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	4a39      	ldr	r2, [pc, #228]	; (80023c8 <Gear_Status+0x160>)
 80022e2:	fb82 1203 	smull	r1, r2, r2, r3
 80022e6:	1152      	asrs	r2, r2, #5
 80022e8:	17db      	asrs	r3, r3, #31
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	4b37      	ldr	r3, [pc, #220]	; (80023cc <Gear_Status+0x164>)
 80022f0:	801a      	strh	r2, [r3, #0]
				}
			if((HAL_GPIO_ReadPin(GPIOA, LCD_D2_Pin)==0)&&((HAL_GPIO_ReadPin(GPIOA, LCD_D3_Pin)==0)))
 80022f2:	2104      	movs	r1, #4
 80022f4:	4830      	ldr	r0, [pc, #192]	; (80023b8 <Gear_Status+0x150>)
 80022f6:	f002 fa0f 	bl	8004718 <HAL_GPIO_ReadPin>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d10c      	bne.n	800231a <Gear_Status+0xb2>
 8002300:	2108      	movs	r1, #8
 8002302:	482d      	ldr	r0, [pc, #180]	; (80023b8 <Gear_Status+0x150>)
 8002304:	f002 fa08 	bl	8004718 <HAL_GPIO_ReadPin>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d105      	bne.n	800231a <Gear_Status+0xb2>
				{
					Gear_State=2;
 800230e:	2302      	movs	r3, #2
 8002310:	71fb      	strb	r3, [r7, #7]
					DTE=(Reserved_SOC*100)/100;
 8002312:	4b2c      	ldr	r3, [pc, #176]	; (80023c4 <Gear_Status+0x15c>)
 8002314:	881a      	ldrh	r2, [r3, #0]
 8002316:	4b2d      	ldr	r3, [pc, #180]	; (80023cc <Gear_Status+0x164>)
 8002318:	801a      	strh	r2, [r3, #0]
				}
			if((HAL_GPIO_ReadPin(GPIOA, LCD_D2_Pin)==0)&&((HAL_GPIO_ReadPin(GPIOA, LCD_D3_Pin)==1)))
 800231a:	2104      	movs	r1, #4
 800231c:	4826      	ldr	r0, [pc, #152]	; (80023b8 <Gear_Status+0x150>)
 800231e:	f002 f9fb 	bl	8004718 <HAL_GPIO_ReadPin>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d117      	bne.n	8002358 <Gear_Status+0xf0>
 8002328:	2108      	movs	r1, #8
 800232a:	4823      	ldr	r0, [pc, #140]	; (80023b8 <Gear_Status+0x150>)
 800232c:	f002 f9f4 	bl	8004718 <HAL_GPIO_ReadPin>
 8002330:	4603      	mov	r3, r0
 8002332:	2b01      	cmp	r3, #1
 8002334:	d110      	bne.n	8002358 <Gear_Status+0xf0>
				{
					Gear_State=3;
 8002336:	2303      	movs	r3, #3
 8002338:	71fb      	strb	r3, [r7, #7]
					DTE=(Reserved_SOC*70)/100;
 800233a:	4b22      	ldr	r3, [pc, #136]	; (80023c4 <Gear_Status+0x15c>)
 800233c:	881b      	ldrh	r3, [r3, #0]
 800233e:	461a      	mov	r2, r3
 8002340:	2346      	movs	r3, #70	; 0x46
 8002342:	fb02 f303 	mul.w	r3, r2, r3
 8002346:	4a20      	ldr	r2, [pc, #128]	; (80023c8 <Gear_Status+0x160>)
 8002348:	fb82 1203 	smull	r1, r2, r2, r3
 800234c:	1152      	asrs	r2, r2, #5
 800234e:	17db      	asrs	r3, r3, #31
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	b29a      	uxth	r2, r3
 8002354:	4b1d      	ldr	r3, [pc, #116]	; (80023cc <Gear_Status+0x164>)
 8002356:	801a      	strh	r2, [r3, #0]
				}
		}

	 if((HAL_GPIO_ReadPin(GPIOA, LCD_D5_Pin)==RESET))
 8002358:	2120      	movs	r1, #32
 800235a:	4817      	ldr	r0, [pc, #92]	; (80023b8 <Gear_Status+0x150>)
 800235c:	f002 f9dc 	bl	8004718 <HAL_GPIO_ReadPin>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d112      	bne.n	800238c <Gear_Status+0x124>
		{
			 start_inc++;
 8002366:	4b1a      	ldr	r3, [pc, #104]	; (80023d0 <Gear_Status+0x168>)
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	3301      	adds	r3, #1
 800236c:	b2da      	uxtb	r2, r3
 800236e:	4b18      	ldr	r3, [pc, #96]	; (80023d0 <Gear_Status+0x168>)
 8002370:	701a      	strb	r2, [r3, #0]
			 if(start_inc>=3)
 8002372:	4b17      	ldr	r3, [pc, #92]	; (80023d0 <Gear_Status+0x168>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b02      	cmp	r3, #2
 8002378:	d902      	bls.n	8002380 <Gear_Status+0x118>
			 {
				start_inc=1;
 800237a:	4b15      	ldr	r3, [pc, #84]	; (80023d0 <Gear_Status+0x168>)
 800237c:	2201      	movs	r2, #1
 800237e:	701a      	strb	r2, [r3, #0]
			 }
			 I2C_Write_EEPROM(start_inc, LAST_STATE_ADDRESS_EEPROM);
 8002380:	4b13      	ldr	r3, [pc, #76]	; (80023d0 <Gear_Status+0x168>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2140      	movs	r1, #64	; 0x40
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff fdd2 	bl	8001f30 <I2C_Write_EEPROM>
		}
	 GPIOA->CRL=0X22222222;
 800238c:	4b0a      	ldr	r3, [pc, #40]	; (80023b8 <Gear_Status+0x150>)
 800238e:	f04f 3222 	mov.w	r2, #572662306	; 0x22222222
 8002392:	601a      	str	r2, [r3, #0]
	 HAL_Delay(50);
 8002394:	2032      	movs	r0, #50	; 0x32
 8002396:	f001 f8af 	bl	80034f8 <HAL_Delay>
	 gear_status_print(Gear_State);
 800239a:	79fb      	ldrb	r3, [r7, #7]
 800239c:	4618      	mov	r0, r3
 800239e:	f7fe fb9f 	bl	8000ae0 <gear_status_print>
	 HAL_GPIO_WritePin(GPIOB, check_led_Pin, SET);
 80023a2:	2201      	movs	r2, #1
 80023a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023a8:	4804      	ldr	r0, [pc, #16]	; (80023bc <Gear_Status+0x154>)
 80023aa:	f002 f9cc 	bl	8004746 <HAL_GPIO_WritePin>
}
 80023ae:	bf00      	nop
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	40010800 	.word	0x40010800
 80023bc:	40010c00 	.word	0x40010c00
 80023c0:	20001171 	.word	0x20001171
 80023c4:	20001128 	.word	0x20001128
 80023c8:	51eb851f 	.word	0x51eb851f
 80023cc:	20001172 	.word	0x20001172
 80023d0:	20001170 	.word	0x20001170

080023d4 <BMS_CAN>:

void BMS_CAN()//Transmitter function
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
	for(Tx_count=0; Tx_count<11; Tx_count++)
 80023d8:	4b1b      	ldr	r3, [pc, #108]	; (8002448 <BMS_CAN+0x74>)
 80023da:	2200      	movs	r2, #0
 80023dc:	701a      	strb	r2, [r3, #0]
 80023de:	e029      	b.n	8002434 <BMS_CAN+0x60>
	  {
		TxHeader.ExtId = BMS_ID[Tx_count]; // Extended Identifier
 80023e0:	4b19      	ldr	r3, [pc, #100]	; (8002448 <BMS_CAN+0x74>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	461a      	mov	r2, r3
 80023e6:	4b19      	ldr	r3, [pc, #100]	; (800244c <BMS_CAN+0x78>)
 80023e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ec:	4a18      	ldr	r2, [pc, #96]	; (8002450 <BMS_CAN+0x7c>)
 80023ee:	6053      	str	r3, [r2, #4]
		TxHeader.IDE = CAN_ID_EXT; // Identifier Extension
 80023f0:	4b17      	ldr	r3, [pc, #92]	; (8002450 <BMS_CAN+0x7c>)
 80023f2:	2204      	movs	r2, #4
 80023f4:	609a      	str	r2, [r3, #8]
		TxHeader.RTR = CAN_RTR_DATA;// Remote Transmission Request bit, here send data frame
 80023f6:	4b16      	ldr	r3, [pc, #88]	; (8002450 <BMS_CAN+0x7c>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	60da      	str	r2, [r3, #12]
		TxHeader.DLC = 8;//Data length code
 80023fc:	4b14      	ldr	r3, [pc, #80]	; (8002450 <BMS_CAN+0x7c>)
 80023fe:	2208      	movs	r2, #8
 8002400:	611a      	str	r2, [r3, #16]
		Transmit_Data[Tx_count]=0x00;//Data
 8002402:	4b11      	ldr	r3, [pc, #68]	; (8002448 <BMS_CAN+0x74>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	461a      	mov	r2, r3
 8002408:	4b12      	ldr	r3, [pc, #72]	; (8002454 <BMS_CAN+0x80>)
 800240a:	2100      	movs	r1, #0
 800240c:	5499      	strb	r1, [r3, r2]
	   if(HAL_CAN_AddTxMessage(&hcan, &TxHeader, &Transmit_Data[Tx_count], &TxMailBox) != HAL_OK)//Adding data to the mailbox for transmitting
 800240e:	4b0e      	ldr	r3, [pc, #56]	; (8002448 <BMS_CAN+0x74>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	461a      	mov	r2, r3
 8002414:	4b0f      	ldr	r3, [pc, #60]	; (8002454 <BMS_CAN+0x80>)
 8002416:	441a      	add	r2, r3
 8002418:	4b0f      	ldr	r3, [pc, #60]	; (8002458 <BMS_CAN+0x84>)
 800241a:	490d      	ldr	r1, [pc, #52]	; (8002450 <BMS_CAN+0x7c>)
 800241c:	480f      	ldr	r0, [pc, #60]	; (800245c <BMS_CAN+0x88>)
 800241e:	f001 fa97 	bl	8003950 <HAL_CAN_AddTxMessage>
		  {
		   //Error_Handler();
		  }
	  HAL_Delay(50);
 8002422:	2032      	movs	r0, #50	; 0x32
 8002424:	f001 f868 	bl	80034f8 <HAL_Delay>
	for(Tx_count=0; Tx_count<11; Tx_count++)
 8002428:	4b07      	ldr	r3, [pc, #28]	; (8002448 <BMS_CAN+0x74>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	3301      	adds	r3, #1
 800242e:	b2da      	uxtb	r2, r3
 8002430:	4b05      	ldr	r3, [pc, #20]	; (8002448 <BMS_CAN+0x74>)
 8002432:	701a      	strb	r2, [r3, #0]
 8002434:	4b04      	ldr	r3, [pc, #16]	; (8002448 <BMS_CAN+0x74>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b0a      	cmp	r3, #10
 800243a:	d9d1      	bls.n	80023e0 <BMS_CAN+0xc>
	  }
	Tx_count=0;
 800243c:	4b02      	ldr	r3, [pc, #8]	; (8002448 <BMS_CAN+0x74>)
 800243e:	2200      	movs	r2, #0
 8002440:	701a      	strb	r2, [r3, #0]
}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	20001108 	.word	0x20001108
 800244c:	200007a0 	.word	0x200007a0
 8002450:	2000113c 	.word	0x2000113c
 8002454:	2000110c 	.word	0x2000110c
 8002458:	20001114 	.word	0x20001114
 800245c:	20001040 	.word	0x20001040

08002460 <battery_bar_soc>:
//	}
//}

uint8_t temp_bat=0;
void battery_bar_soc()
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0

		if((Reserved_SOC>=950)&&(Reserved_SOC<=1000))
 8002464:	4b32      	ldr	r3, [pc, #200]	; (8002530 <battery_bar_soc+0xd0>)
 8002466:	881b      	ldrh	r3, [r3, #0]
 8002468:	f240 32b5 	movw	r2, #949	; 0x3b5
 800246c:	4293      	cmp	r3, r2
 800246e:	d908      	bls.n	8002482 <battery_bar_soc+0x22>
 8002470:	4b2f      	ldr	r3, [pc, #188]	; (8002530 <battery_bar_soc+0xd0>)
 8002472:	881b      	ldrh	r3, [r3, #0]
 8002474:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002478:	d803      	bhi.n	8002482 <battery_bar_soc+0x22>
		{
			battery_bar_print(5);
 800247a:	2005      	movs	r0, #5
 800247c:	f7fe fb86 	bl	8000b8c <battery_bar_print>
		{
 8002480:	e054      	b.n	800252c <battery_bar_soc+0xcc>
		}
		else if((Reserved_SOC>=800)&&(Reserved_SOC<=949))
 8002482:	4b2b      	ldr	r3, [pc, #172]	; (8002530 <battery_bar_soc+0xd0>)
 8002484:	881b      	ldrh	r3, [r3, #0]
 8002486:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800248a:	d309      	bcc.n	80024a0 <battery_bar_soc+0x40>
 800248c:	4b28      	ldr	r3, [pc, #160]	; (8002530 <battery_bar_soc+0xd0>)
 800248e:	881b      	ldrh	r3, [r3, #0]
 8002490:	f240 32b5 	movw	r2, #949	; 0x3b5
 8002494:	4293      	cmp	r3, r2
 8002496:	d803      	bhi.n	80024a0 <battery_bar_soc+0x40>
		{
			battery_bar_print(4);
 8002498:	2004      	movs	r0, #4
 800249a:	f7fe fb77 	bl	8000b8c <battery_bar_print>
		{
 800249e:	e045      	b.n	800252c <battery_bar_soc+0xcc>
		}
		else if((Reserved_SOC>=600)&&(Reserved_SOC<=799))
 80024a0:	4b23      	ldr	r3, [pc, #140]	; (8002530 <battery_bar_soc+0xd0>)
 80024a2:	881b      	ldrh	r3, [r3, #0]
 80024a4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80024a8:	d308      	bcc.n	80024bc <battery_bar_soc+0x5c>
 80024aa:	4b21      	ldr	r3, [pc, #132]	; (8002530 <battery_bar_soc+0xd0>)
 80024ac:	881b      	ldrh	r3, [r3, #0]
 80024ae:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80024b2:	d203      	bcs.n	80024bc <battery_bar_soc+0x5c>
		{
			battery_bar_print(3);
 80024b4:	2003      	movs	r0, #3
 80024b6:	f7fe fb69 	bl	8000b8c <battery_bar_print>
		{
 80024ba:	e037      	b.n	800252c <battery_bar_soc+0xcc>
		}
		else if((Reserved_SOC>=400)&&(Reserved_SOC<=599))
 80024bc:	4b1c      	ldr	r3, [pc, #112]	; (8002530 <battery_bar_soc+0xd0>)
 80024be:	881b      	ldrh	r3, [r3, #0]
 80024c0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80024c4:	d308      	bcc.n	80024d8 <battery_bar_soc+0x78>
 80024c6:	4b1a      	ldr	r3, [pc, #104]	; (8002530 <battery_bar_soc+0xd0>)
 80024c8:	881b      	ldrh	r3, [r3, #0]
 80024ca:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80024ce:	d203      	bcs.n	80024d8 <battery_bar_soc+0x78>
		{
			battery_bar_print(2);
 80024d0:	2002      	movs	r0, #2
 80024d2:	f7fe fb5b 	bl	8000b8c <battery_bar_print>
		{
 80024d6:	e029      	b.n	800252c <battery_bar_soc+0xcc>
		}
		else if((Reserved_SOC>=200)&&(Reserved_SOC<=399))
 80024d8:	4b15      	ldr	r3, [pc, #84]	; (8002530 <battery_bar_soc+0xd0>)
 80024da:	881b      	ldrh	r3, [r3, #0]
 80024dc:	2bc7      	cmp	r3, #199	; 0xc7
 80024de:	d908      	bls.n	80024f2 <battery_bar_soc+0x92>
 80024e0:	4b13      	ldr	r3, [pc, #76]	; (8002530 <battery_bar_soc+0xd0>)
 80024e2:	881b      	ldrh	r3, [r3, #0]
 80024e4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80024e8:	d203      	bcs.n	80024f2 <battery_bar_soc+0x92>
		{
			battery_bar_print(1);
 80024ea:	2001      	movs	r0, #1
 80024ec:	f7fe fb4e 	bl	8000b8c <battery_bar_print>
		{
 80024f0:	e01c      	b.n	800252c <battery_bar_soc+0xcc>
		}
		else if((Reserved_SOC>=0)&&(Reserved_SOC<=199))
 80024f2:	4b0f      	ldr	r3, [pc, #60]	; (8002530 <battery_bar_soc+0xd0>)
 80024f4:	881b      	ldrh	r3, [r3, #0]
 80024f6:	2bc7      	cmp	r3, #199	; 0xc7
 80024f8:	d814      	bhi.n	8002524 <battery_bar_soc+0xc4>
		{
			bat_icon_toogle=!bat_icon_toogle;
 80024fa:	4b0e      	ldr	r3, [pc, #56]	; (8002534 <battery_bar_soc+0xd4>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	bf0c      	ite	eq
 8002502:	2301      	moveq	r3, #1
 8002504:	2300      	movne	r3, #0
 8002506:	b2db      	uxtb	r3, r3
 8002508:	461a      	mov	r2, r3
 800250a:	4b0a      	ldr	r3, [pc, #40]	; (8002534 <battery_bar_soc+0xd4>)
 800250c:	701a      	strb	r2, [r3, #0]

			if(bat_icon_toogle)
 800250e:	4b09      	ldr	r3, [pc, #36]	; (8002534 <battery_bar_soc+0xd4>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d003      	beq.n	800251e <battery_bar_soc+0xbe>
			{
				battery_bar_print(0);
 8002516:	2000      	movs	r0, #0
 8002518:	f7fe fb38 	bl	8000b8c <battery_bar_print>
		}
		else
		{
			battery_bar_print(0);
		}
}
 800251c:	e006      	b.n	800252c <battery_bar_soc+0xcc>
				line_print();
 800251e:	f7fe fde9 	bl	80010f4 <line_print>
}
 8002522:	e003      	b.n	800252c <battery_bar_soc+0xcc>
			battery_bar_print(0);
 8002524:	2000      	movs	r0, #0
 8002526:	f7fe fb31 	bl	8000b8c <battery_bar_print>
}
 800252a:	e7ff      	b.n	800252c <battery_bar_soc+0xcc>
 800252c:	bf00      	nop
 800252e:	bd80      	pop	{r7, pc}
 8002530:	20001128 	.word	0x20001128
 8002534:	2000112c 	.word	0x2000112c

08002538 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)//Receiver Interrupt Function
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, Received_Data) == HAL_OK)//Receiving data through FIFO
 8002540:	4b0a      	ldr	r3, [pc, #40]	; (800256c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8002542:	4a0b      	ldr	r2, [pc, #44]	; (8002570 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8002544:	2100      	movs	r1, #0
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f001 fad1 	bl	8003aee <HAL_CAN_GetRxMessage>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d108      	bne.n	8002564 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>
 	{
 		Rx_Id = RxHeader.ExtId;
 8002552:	4b07      	ldr	r3, [pc, #28]	; (8002570 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	4a07      	ldr	r2, [pc, #28]	; (8002574 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8002558:	6013      	str	r3, [r2, #0]
 		merge(Rx_Id);// Implementation of merging and splitting received BMS data
 800255a:	4b06      	ldr	r3, [pc, #24]	; (8002574 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4618      	mov	r0, r3
 8002560:	f7fe fdec 	bl	800113c <merge>
 	}
}
 8002564:	bf00      	nop
 8002566:	3708      	adds	r7, #8
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	20000ff8 	.word	0x20000ff8
 8002570:	20001154 	.word	0x20001154
 8002574:	20001110 	.word	0x20001110

08002578 <ODO_calculation>:
//}

uint16_t pluse_count=0;

void ODO_calculation()
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
	uint8_t bike_speed=((speed_count*360)/calib_reg);
 800257e:	4b51      	ldr	r3, [pc, #324]	; (80026c4 <ODO_calculation+0x14c>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8002586:	fb02 f303 	mul.w	r3, r2, r3
 800258a:	08db      	lsrs	r3, r3, #3
 800258c:	4a4e      	ldr	r2, [pc, #312]	; (80026c8 <ODO_calculation+0x150>)
 800258e:	fba2 2303 	umull	r2, r3, r2, r3
 8002592:	085b      	lsrs	r3, r3, #1
 8002594:	73fb      	strb	r3, [r7, #15]
    lcd_speed(bike_speed);
 8002596:	7bfb      	ldrb	r3, [r7, #15]
 8002598:	4618      	mov	r0, r3
 800259a:	f7fe f9ef 	bl	800097c <lcd_speed>

	if(after_sec)
 800259e:	4b4b      	ldr	r3, [pc, #300]	; (80026cc <ODO_calculation+0x154>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00b      	beq.n	80025be <ODO_calculation+0x46>
	{
		pluse_count+=speed_count;
 80025a6:	4b47      	ldr	r3, [pc, #284]	; (80026c4 <ODO_calculation+0x14c>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	4b48      	ldr	r3, [pc, #288]	; (80026d0 <ODO_calculation+0x158>)
 80025ae:	881b      	ldrh	r3, [r3, #0]
 80025b0:	4413      	add	r3, r2
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	4b46      	ldr	r3, [pc, #280]	; (80026d0 <ODO_calculation+0x158>)
 80025b6:	801a      	strh	r2, [r3, #0]
		after_sec=0;
 80025b8:	4b44      	ldr	r3, [pc, #272]	; (80026cc <ODO_calculation+0x154>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	701a      	strb	r2, [r3, #0]
	}

	if(pluse_count>=calib_reg)
 80025be:	4b44      	ldr	r3, [pc, #272]	; (80026d0 <ODO_calculation+0x158>)
 80025c0:	881b      	ldrh	r3, [r3, #0]
 80025c2:	f5b3 7fdc 	cmp.w	r3, #440	; 0x1b8
 80025c6:	d319      	bcc.n	80025fc <ODO_calculation+0x84>
	{
		pluse_count=0;
 80025c8:	4b41      	ldr	r3, [pc, #260]	; (80026d0 <ODO_calculation+0x158>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	801a      	strh	r2, [r3, #0]
		Range.Odometer_Value++;
 80025ce:	4b41      	ldr	r3, [pc, #260]	; (80026d4 <ODO_calculation+0x15c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	3301      	adds	r3, #1
 80025d4:	4a3f      	ldr	r2, [pc, #252]	; (80026d4 <ODO_calculation+0x15c>)
 80025d6:	6013      	str	r3, [r2, #0]
		Range.Trip_value++;
 80025d8:	4b3e      	ldr	r3, [pc, #248]	; (80026d4 <ODO_calculation+0x15c>)
 80025da:	889b      	ldrh	r3, [r3, #4]
 80025dc:	3301      	adds	r3, #1
 80025de:	b29a      	uxth	r2, r3
 80025e0:	4b3c      	ldr	r3, [pc, #240]	; (80026d4 <ODO_calculation+0x15c>)
 80025e2:	809a      	strh	r2, [r3, #4]
		I2C_Write_EEPROM(Range.Odometer_Value,ODO_ADDRESS_EEPROM);
 80025e4:	4b3b      	ldr	r3, [pc, #236]	; (80026d4 <ODO_calculation+0x15c>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2120      	movs	r1, #32
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff fca0 	bl	8001f30 <I2C_Write_EEPROM>
		I2C_Write_EEPROM(Range.Trip_value,TRIP_ADDRESS_EEPROM);
 80025f0:	4b38      	ldr	r3, [pc, #224]	; (80026d4 <ODO_calculation+0x15c>)
 80025f2:	889b      	ldrh	r3, [r3, #4]
 80025f4:	2130      	movs	r1, #48	; 0x30
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7ff fc9a 	bl	8001f30 <I2C_Write_EEPROM>
	}

	if(Range.Trip_value>=10000)
 80025fc:	4b35      	ldr	r3, [pc, #212]	; (80026d4 <ODO_calculation+0x15c>)
 80025fe:	889b      	ldrh	r3, [r3, #4]
 8002600:	f242 720f 	movw	r2, #9999	; 0x270f
 8002604:	4293      	cmp	r3, r2
 8002606:	d908      	bls.n	800261a <ODO_calculation+0xa2>
	{
		Range.Trip_value=0;
 8002608:	4b32      	ldr	r3, [pc, #200]	; (80026d4 <ODO_calculation+0x15c>)
 800260a:	2200      	movs	r2, #0
 800260c:	809a      	strh	r2, [r3, #4]
		I2C_Write_EEPROM(Range.Trip_value,TRIP_ADDRESS_EEPROM);
 800260e:	4b31      	ldr	r3, [pc, #196]	; (80026d4 <ODO_calculation+0x15c>)
 8002610:	889b      	ldrh	r3, [r3, #4]
 8002612:	2130      	movs	r1, #48	; 0x30
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff fc8b 	bl	8001f30 <I2C_Write_EEPROM>
	}
		lcd_clear(0, 96, 51);
 800261a:	2233      	movs	r2, #51	; 0x33
 800261c:	2160      	movs	r1, #96	; 0x60
 800261e:	2000      	movs	r0, #0
 8002620:	f7fe fc20 	bl	8000e64 <lcd_clear>
		uint8_t first=DTE/100;
 8002624:	4b2c      	ldr	r3, [pc, #176]	; (80026d8 <ODO_calculation+0x160>)
 8002626:	881b      	ldrh	r3, [r3, #0]
 8002628:	4a2c      	ldr	r2, [pc, #176]	; (80026dc <ODO_calculation+0x164>)
 800262a:	fba2 2303 	umull	r2, r3, r2, r3
 800262e:	095b      	lsrs	r3, r3, #5
 8002630:	b29b      	uxth	r3, r3
 8002632:	73bb      	strb	r3, [r7, #14]
		uint8_t second=((DTE%100)/10);
 8002634:	4b28      	ldr	r3, [pc, #160]	; (80026d8 <ODO_calculation+0x160>)
 8002636:	881b      	ldrh	r3, [r3, #0]
 8002638:	4a28      	ldr	r2, [pc, #160]	; (80026dc <ODO_calculation+0x164>)
 800263a:	fba2 1203 	umull	r1, r2, r2, r3
 800263e:	0952      	lsrs	r2, r2, #5
 8002640:	2164      	movs	r1, #100	; 0x64
 8002642:	fb01 f202 	mul.w	r2, r1, r2
 8002646:	1a9b      	subs	r3, r3, r2
 8002648:	b29b      	uxth	r3, r3
 800264a:	4a25      	ldr	r2, [pc, #148]	; (80026e0 <ODO_calculation+0x168>)
 800264c:	fba2 2303 	umull	r2, r3, r2, r3
 8002650:	08db      	lsrs	r3, r3, #3
 8002652:	b29b      	uxth	r3, r3
 8002654:	737b      	strb	r3, [r7, #13]
		uint8_t third=((DTE%100)%10);
 8002656:	4b20      	ldr	r3, [pc, #128]	; (80026d8 <ODO_calculation+0x160>)
 8002658:	881b      	ldrh	r3, [r3, #0]
 800265a:	4a20      	ldr	r2, [pc, #128]	; (80026dc <ODO_calculation+0x164>)
 800265c:	fba2 1203 	umull	r1, r2, r2, r3
 8002660:	0952      	lsrs	r2, r2, #5
 8002662:	2164      	movs	r1, #100	; 0x64
 8002664:	fb01 f202 	mul.w	r2, r1, r2
 8002668:	1a9b      	subs	r3, r3, r2
 800266a:	b29a      	uxth	r2, r3
 800266c:	4b1c      	ldr	r3, [pc, #112]	; (80026e0 <ODO_calculation+0x168>)
 800266e:	fba3 1302 	umull	r1, r3, r3, r2
 8002672:	08d9      	lsrs	r1, r3, #3
 8002674:	460b      	mov	r3, r1
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	440b      	add	r3, r1
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	b29b      	uxth	r3, r3
 8002680:	733b      	strb	r3, [r7, #12]
		dte_icon_print();
 8002682:	f7fe fad5 	bl	8000c30 <dte_icon_print>
		lcd_print_digit_wos(0, 98,first);
 8002686:	7bbb      	ldrb	r3, [r7, #14]
 8002688:	461a      	mov	r2, r3
 800268a:	2162      	movs	r1, #98	; 0x62
 800268c:	2000      	movs	r0, #0
 800268e:	f7fe fc0f 	bl	8000eb0 <lcd_print_digit_wos>
		lcd_print_digit_wos(0, 104,second);
 8002692:	7b7b      	ldrb	r3, [r7, #13]
 8002694:	461a      	mov	r2, r3
 8002696:	2168      	movs	r1, #104	; 0x68
 8002698:	2000      	movs	r0, #0
 800269a:	f7fe fc09 	bl	8000eb0 <lcd_print_digit_wos>
		lcd_print_digit_wos(0, 110,third);
 800269e:	7b3b      	ldrb	r3, [r7, #12]
 80026a0:	461a      	mov	r2, r3
 80026a2:	216e      	movs	r1, #110	; 0x6e
 80026a4:	2000      	movs	r0, #0
 80026a6:	f7fe fc03 	bl	8000eb0 <lcd_print_digit_wos>
		lcd_print_char(0, 116, "km");
 80026aa:	4a0e      	ldr	r2, [pc, #56]	; (80026e4 <ODO_calculation+0x16c>)
 80026ac:	2174      	movs	r1, #116	; 0x74
 80026ae:	2000      	movs	r0, #0
 80026b0:	f7fe fafe 	bl	8000cb0 <lcd_print_char>
switch(start_inc)
 80026b4:	4b0c      	ldr	r3, [pc, #48]	; (80026e8 <ODO_calculation+0x170>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d017      	beq.n	80026ec <ODO_calculation+0x174>
 80026bc:	2b02      	cmp	r3, #2
 80026be:	f000 813f 	beq.w	8002940 <ODO_calculation+0x3c8>
 80026c2:	e237      	b.n	8002b34 <ODO_calculation+0x5bc>
 80026c4:	20001118 	.word	0x20001118
 80026c8:	094f2095 	.word	0x094f2095
 80026cc:	20001120 	.word	0x20001120
 80026d0:	20001174 	.word	0x20001174
 80026d4:	20001130 	.word	0x20001130
 80026d8:	20001172 	.word	0x20001172
 80026dc:	51eb851f 	.word	0x51eb851f
 80026e0:	cccccccd 	.word	0xcccccccd
 80026e4:	08006900 	.word	0x08006900
 80026e8:	20001170 	.word	0x20001170
	{
	case 1:
		{
			uint8_t first = (Range.Odometer_Value / 1000000);
 80026ec:	4b8a      	ldr	r3, [pc, #552]	; (8002918 <ODO_calculation+0x3a0>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a8a      	ldr	r2, [pc, #552]	; (800291c <ODO_calculation+0x3a4>)
 80026f2:	fba2 2303 	umull	r2, r3, r2, r3
 80026f6:	0c9b      	lsrs	r3, r3, #18
 80026f8:	71bb      	strb	r3, [r7, #6]
			uint8_t second = ((Range.Odometer_Value % 1000000) / 100000);
 80026fa:	4b87      	ldr	r3, [pc, #540]	; (8002918 <ODO_calculation+0x3a0>)
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	4b87      	ldr	r3, [pc, #540]	; (800291c <ODO_calculation+0x3a4>)
 8002700:	fba3 1302 	umull	r1, r3, r3, r2
 8002704:	0c9b      	lsrs	r3, r3, #18
 8002706:	4986      	ldr	r1, [pc, #536]	; (8002920 <ODO_calculation+0x3a8>)
 8002708:	fb01 f303 	mul.w	r3, r1, r3
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	095b      	lsrs	r3, r3, #5
 8002710:	4a84      	ldr	r2, [pc, #528]	; (8002924 <ODO_calculation+0x3ac>)
 8002712:	fba2 2303 	umull	r2, r3, r2, r3
 8002716:	09db      	lsrs	r3, r3, #7
 8002718:	717b      	strb	r3, [r7, #5]
			uint8_t third = (((Range.Odometer_Value % 1000000) % 100000) / 10000);
 800271a:	4b7f      	ldr	r3, [pc, #508]	; (8002918 <ODO_calculation+0x3a0>)
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	4b7f      	ldr	r3, [pc, #508]	; (800291c <ODO_calculation+0x3a4>)
 8002720:	fba3 1302 	umull	r1, r3, r3, r2
 8002724:	0c9b      	lsrs	r3, r3, #18
 8002726:	497e      	ldr	r1, [pc, #504]	; (8002920 <ODO_calculation+0x3a8>)
 8002728:	fb01 f303 	mul.w	r3, r1, r3
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	095a      	lsrs	r2, r3, #5
 8002730:	497c      	ldr	r1, [pc, #496]	; (8002924 <ODO_calculation+0x3ac>)
 8002732:	fba1 1202 	umull	r1, r2, r1, r2
 8002736:	09d2      	lsrs	r2, r2, #7
 8002738:	497b      	ldr	r1, [pc, #492]	; (8002928 <ODO_calculation+0x3b0>)
 800273a:	fb01 f202 	mul.w	r2, r1, r2
 800273e:	1a9a      	subs	r2, r3, r2
 8002740:	4b7a      	ldr	r3, [pc, #488]	; (800292c <ODO_calculation+0x3b4>)
 8002742:	fba3 2302 	umull	r2, r3, r3, r2
 8002746:	0b5b      	lsrs	r3, r3, #13
 8002748:	713b      	strb	r3, [r7, #4]
			uint8_t fourth = ((((Range.Odometer_Value % 1000000) % 100000) % 10000) / 1000);
 800274a:	4b73      	ldr	r3, [pc, #460]	; (8002918 <ODO_calculation+0x3a0>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a73      	ldr	r2, [pc, #460]	; (800291c <ODO_calculation+0x3a4>)
 8002750:	fba2 1203 	umull	r1, r2, r2, r3
 8002754:	0c92      	lsrs	r2, r2, #18
 8002756:	4972      	ldr	r1, [pc, #456]	; (8002920 <ODO_calculation+0x3a8>)
 8002758:	fb01 f202 	mul.w	r2, r1, r2
 800275c:	1a9a      	subs	r2, r3, r2
 800275e:	0953      	lsrs	r3, r2, #5
 8002760:	4970      	ldr	r1, [pc, #448]	; (8002924 <ODO_calculation+0x3ac>)
 8002762:	fba1 1303 	umull	r1, r3, r1, r3
 8002766:	09db      	lsrs	r3, r3, #7
 8002768:	496f      	ldr	r1, [pc, #444]	; (8002928 <ODO_calculation+0x3b0>)
 800276a:	fb01 f303 	mul.w	r3, r1, r3
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	4a6e      	ldr	r2, [pc, #440]	; (800292c <ODO_calculation+0x3b4>)
 8002772:	fba2 1203 	umull	r1, r2, r2, r3
 8002776:	0b52      	lsrs	r2, r2, #13
 8002778:	f242 7110 	movw	r1, #10000	; 0x2710
 800277c:	fb01 f202 	mul.w	r2, r1, r2
 8002780:	1a9a      	subs	r2, r3, r2
 8002782:	4b6b      	ldr	r3, [pc, #428]	; (8002930 <ODO_calculation+0x3b8>)
 8002784:	fba3 2302 	umull	r2, r3, r3, r2
 8002788:	099b      	lsrs	r3, r3, #6
 800278a:	70fb      	strb	r3, [r7, #3]
			uint8_t fifth = (((((Range.Odometer_Value % 1000000) % 100000) % 10000) % 1000) / 100);
 800278c:	4b62      	ldr	r3, [pc, #392]	; (8002918 <ODO_calculation+0x3a0>)
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	4b62      	ldr	r3, [pc, #392]	; (800291c <ODO_calculation+0x3a4>)
 8002792:	fba3 1302 	umull	r1, r3, r3, r2
 8002796:	0c9b      	lsrs	r3, r3, #18
 8002798:	4961      	ldr	r1, [pc, #388]	; (8002920 <ODO_calculation+0x3a8>)
 800279a:	fb01 f303 	mul.w	r3, r1, r3
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	095a      	lsrs	r2, r3, #5
 80027a2:	4960      	ldr	r1, [pc, #384]	; (8002924 <ODO_calculation+0x3ac>)
 80027a4:	fba1 1202 	umull	r1, r2, r1, r2
 80027a8:	09d2      	lsrs	r2, r2, #7
 80027aa:	495f      	ldr	r1, [pc, #380]	; (8002928 <ODO_calculation+0x3b0>)
 80027ac:	fb01 f202 	mul.w	r2, r1, r2
 80027b0:	1a9a      	subs	r2, r3, r2
 80027b2:	4b5e      	ldr	r3, [pc, #376]	; (800292c <ODO_calculation+0x3b4>)
 80027b4:	fba3 1302 	umull	r1, r3, r3, r2
 80027b8:	0b5b      	lsrs	r3, r3, #13
 80027ba:	f242 7110 	movw	r1, #10000	; 0x2710
 80027be:	fb01 f303 	mul.w	r3, r1, r3
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	4a5a      	ldr	r2, [pc, #360]	; (8002930 <ODO_calculation+0x3b8>)
 80027c6:	fba2 1203 	umull	r1, r2, r2, r3
 80027ca:	0992      	lsrs	r2, r2, #6
 80027cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80027d0:	fb01 f202 	mul.w	r2, r1, r2
 80027d4:	1a9a      	subs	r2, r3, r2
 80027d6:	4b57      	ldr	r3, [pc, #348]	; (8002934 <ODO_calculation+0x3bc>)
 80027d8:	fba3 2302 	umull	r2, r3, r3, r2
 80027dc:	095b      	lsrs	r3, r3, #5
 80027de:	70bb      	strb	r3, [r7, #2]
			uint8_t sixth = ((((((Range.Odometer_Value % 1000000) % 100000) % 10000) % 1000) % 100) / 10);
 80027e0:	4b4d      	ldr	r3, [pc, #308]	; (8002918 <ODO_calculation+0x3a0>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a4d      	ldr	r2, [pc, #308]	; (800291c <ODO_calculation+0x3a4>)
 80027e6:	fba2 1203 	umull	r1, r2, r2, r3
 80027ea:	0c92      	lsrs	r2, r2, #18
 80027ec:	494c      	ldr	r1, [pc, #304]	; (8002920 <ODO_calculation+0x3a8>)
 80027ee:	fb01 f202 	mul.w	r2, r1, r2
 80027f2:	1a9a      	subs	r2, r3, r2
 80027f4:	0953      	lsrs	r3, r2, #5
 80027f6:	494b      	ldr	r1, [pc, #300]	; (8002924 <ODO_calculation+0x3ac>)
 80027f8:	fba1 1303 	umull	r1, r3, r1, r3
 80027fc:	09db      	lsrs	r3, r3, #7
 80027fe:	494a      	ldr	r1, [pc, #296]	; (8002928 <ODO_calculation+0x3b0>)
 8002800:	fb01 f303 	mul.w	r3, r1, r3
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	4a49      	ldr	r2, [pc, #292]	; (800292c <ODO_calculation+0x3b4>)
 8002808:	fba2 1203 	umull	r1, r2, r2, r3
 800280c:	0b52      	lsrs	r2, r2, #13
 800280e:	f242 7110 	movw	r1, #10000	; 0x2710
 8002812:	fb01 f202 	mul.w	r2, r1, r2
 8002816:	1a9a      	subs	r2, r3, r2
 8002818:	4b45      	ldr	r3, [pc, #276]	; (8002930 <ODO_calculation+0x3b8>)
 800281a:	fba3 1302 	umull	r1, r3, r3, r2
 800281e:	099b      	lsrs	r3, r3, #6
 8002820:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002824:	fb01 f303 	mul.w	r3, r1, r3
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	4a42      	ldr	r2, [pc, #264]	; (8002934 <ODO_calculation+0x3bc>)
 800282c:	fba2 1203 	umull	r1, r2, r2, r3
 8002830:	0952      	lsrs	r2, r2, #5
 8002832:	2164      	movs	r1, #100	; 0x64
 8002834:	fb01 f202 	mul.w	r2, r1, r2
 8002838:	1a9a      	subs	r2, r3, r2
 800283a:	4b3f      	ldr	r3, [pc, #252]	; (8002938 <ODO_calculation+0x3c0>)
 800283c:	fba3 2302 	umull	r2, r3, r3, r2
 8002840:	08db      	lsrs	r3, r3, #3
 8002842:	707b      	strb	r3, [r7, #1]
			uint8_t seventh = (((((((Range.Odometer_Value % 1000000) % 100000) % 10000) % 1000) % 100) % 10));
 8002844:	4b34      	ldr	r3, [pc, #208]	; (8002918 <ODO_calculation+0x3a0>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a34      	ldr	r2, [pc, #208]	; (800291c <ODO_calculation+0x3a4>)
 800284a:	fba2 1203 	umull	r1, r2, r2, r3
 800284e:	0c92      	lsrs	r2, r2, #18
 8002850:	4933      	ldr	r1, [pc, #204]	; (8002920 <ODO_calculation+0x3a8>)
 8002852:	fb01 f202 	mul.w	r2, r1, r2
 8002856:	1a9a      	subs	r2, r3, r2
 8002858:	0953      	lsrs	r3, r2, #5
 800285a:	4932      	ldr	r1, [pc, #200]	; (8002924 <ODO_calculation+0x3ac>)
 800285c:	fba1 1303 	umull	r1, r3, r1, r3
 8002860:	09db      	lsrs	r3, r3, #7
 8002862:	4931      	ldr	r1, [pc, #196]	; (8002928 <ODO_calculation+0x3b0>)
 8002864:	fb01 f303 	mul.w	r3, r1, r3
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	4a30      	ldr	r2, [pc, #192]	; (800292c <ODO_calculation+0x3b4>)
 800286c:	fba2 1203 	umull	r1, r2, r2, r3
 8002870:	0b52      	lsrs	r2, r2, #13
 8002872:	f242 7110 	movw	r1, #10000	; 0x2710
 8002876:	fb01 f202 	mul.w	r2, r1, r2
 800287a:	1a9a      	subs	r2, r3, r2
 800287c:	4b2c      	ldr	r3, [pc, #176]	; (8002930 <ODO_calculation+0x3b8>)
 800287e:	fba3 1302 	umull	r1, r3, r3, r2
 8002882:	099b      	lsrs	r3, r3, #6
 8002884:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002888:	fb01 f303 	mul.w	r3, r1, r3
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	4a29      	ldr	r2, [pc, #164]	; (8002934 <ODO_calculation+0x3bc>)
 8002890:	fba2 1203 	umull	r1, r2, r2, r3
 8002894:	0952      	lsrs	r2, r2, #5
 8002896:	2164      	movs	r1, #100	; 0x64
 8002898:	fb01 f202 	mul.w	r2, r1, r2
 800289c:	1a9a      	subs	r2, r3, r2
 800289e:	4b26      	ldr	r3, [pc, #152]	; (8002938 <ODO_calculation+0x3c0>)
 80028a0:	fba3 1302 	umull	r1, r3, r3, r2
 80028a4:	08d9      	lsrs	r1, r3, #3
 80028a6:	460b      	mov	r3, r1
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	440b      	add	r3, r1
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	1ad1      	subs	r1, r2, r3
 80028b0:	460b      	mov	r3, r1
 80028b2:	703b      	strb	r3, [r7, #0]
			lcd_clear(5, 32, 64);
 80028b4:	2240      	movs	r2, #64	; 0x40
 80028b6:	2120      	movs	r1, #32
 80028b8:	2005      	movs	r0, #5
 80028ba:	f7fe fad3 	bl	8000e64 <lcd_clear>
			odo_icon_print();
 80028be:	f7fe f997 	bl	8000bf0 <odo_icon_print>
			lcd_print_digit_wos(5, 50,first);
 80028c2:	79bb      	ldrb	r3, [r7, #6]
 80028c4:	461a      	mov	r2, r3
 80028c6:	2132      	movs	r1, #50	; 0x32
 80028c8:	2005      	movs	r0, #5
 80028ca:	f7fe faf1 	bl	8000eb0 <lcd_print_digit_wos>
			lcd_print_digit_wos(5, 56,second);
 80028ce:	797b      	ldrb	r3, [r7, #5]
 80028d0:	461a      	mov	r2, r3
 80028d2:	2138      	movs	r1, #56	; 0x38
 80028d4:	2005      	movs	r0, #5
 80028d6:	f7fe faeb 	bl	8000eb0 <lcd_print_digit_wos>
			lcd_print_digit_wos(5, 62,third);
 80028da:	793b      	ldrb	r3, [r7, #4]
 80028dc:	461a      	mov	r2, r3
 80028de:	213e      	movs	r1, #62	; 0x3e
 80028e0:	2005      	movs	r0, #5
 80028e2:	f7fe fae5 	bl	8000eb0 <lcd_print_digit_wos>
			lcd_print_digit_wos(5, 68,fourth);
 80028e6:	78fb      	ldrb	r3, [r7, #3]
 80028e8:	461a      	mov	r2, r3
 80028ea:	2144      	movs	r1, #68	; 0x44
 80028ec:	2005      	movs	r0, #5
 80028ee:	f7fe fadf 	bl	8000eb0 <lcd_print_digit_wos>
			lcd_print_digit_wos(5, 74,fifth);
 80028f2:	78bb      	ldrb	r3, [r7, #2]
 80028f4:	461a      	mov	r2, r3
 80028f6:	214a      	movs	r1, #74	; 0x4a
 80028f8:	2005      	movs	r0, #5
 80028fa:	f7fe fad9 	bl	8000eb0 <lcd_print_digit_wos>
			lcd_print_digit_wos(5, 80,sixth);
 80028fe:	787b      	ldrb	r3, [r7, #1]
 8002900:	461a      	mov	r2, r3
 8002902:	2150      	movs	r1, #80	; 0x50
 8002904:	2005      	movs	r0, #5
 8002906:	f7fe fad3 	bl	8000eb0 <lcd_print_digit_wos>
			lcd_print_char(5,89, "km");
 800290a:	4a0c      	ldr	r2, [pc, #48]	; (800293c <ODO_calculation+0x3c4>)
 800290c:	2159      	movs	r1, #89	; 0x59
 800290e:	2005      	movs	r0, #5
 8002910:	f7fe f9ce 	bl	8000cb0 <lcd_print_char>
			break;
 8002914:	e112      	b.n	8002b3c <ODO_calculation+0x5c4>
 8002916:	bf00      	nop
 8002918:	20001130 	.word	0x20001130
 800291c:	431bde83 	.word	0x431bde83
 8002920:	000f4240 	.word	0x000f4240
 8002924:	0a7c5ac5 	.word	0x0a7c5ac5
 8002928:	000186a0 	.word	0x000186a0
 800292c:	d1b71759 	.word	0xd1b71759
 8002930:	10624dd3 	.word	0x10624dd3
 8002934:	51eb851f 	.word	0x51eb851f
 8002938:	cccccccd 	.word	0xcccccccd
 800293c:	08006900 	.word	0x08006900
		}
	case 2:
		{
			uint8_t second=((Range.Trip_value%100000)/10000);
 8002940:	4b80      	ldr	r3, [pc, #512]	; (8002b44 <ODO_calculation+0x5cc>)
 8002942:	889b      	ldrh	r3, [r3, #4]
 8002944:	461a      	mov	r2, r3
 8002946:	4b80      	ldr	r3, [pc, #512]	; (8002b48 <ODO_calculation+0x5d0>)
 8002948:	fb83 1302 	smull	r1, r3, r3, r2
 800294c:	1359      	asrs	r1, r3, #13
 800294e:	17d3      	asrs	r3, r2, #31
 8002950:	1acb      	subs	r3, r1, r3
 8002952:	497e      	ldr	r1, [pc, #504]	; (8002b4c <ODO_calculation+0x5d4>)
 8002954:	fb01 f303 	mul.w	r3, r1, r3
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	4a7d      	ldr	r2, [pc, #500]	; (8002b50 <ODO_calculation+0x5d8>)
 800295c:	fb82 1203 	smull	r1, r2, r2, r3
 8002960:	1312      	asrs	r2, r2, #12
 8002962:	17db      	asrs	r3, r3, #31
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	72fb      	strb	r3, [r7, #11]
			uint8_t third=(((Range.Trip_value%100000)%10000)/1000);
 8002968:	4b76      	ldr	r3, [pc, #472]	; (8002b44 <ODO_calculation+0x5cc>)
 800296a:	889b      	ldrh	r3, [r3, #4]
 800296c:	461a      	mov	r2, r3
 800296e:	4b76      	ldr	r3, [pc, #472]	; (8002b48 <ODO_calculation+0x5d0>)
 8002970:	fb83 1302 	smull	r1, r3, r3, r2
 8002974:	1359      	asrs	r1, r3, #13
 8002976:	17d3      	asrs	r3, r2, #31
 8002978:	1acb      	subs	r3, r1, r3
 800297a:	4974      	ldr	r1, [pc, #464]	; (8002b4c <ODO_calculation+0x5d4>)
 800297c:	fb01 f303 	mul.w	r3, r1, r3
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	4a73      	ldr	r2, [pc, #460]	; (8002b50 <ODO_calculation+0x5d8>)
 8002984:	fb82 1203 	smull	r1, r2, r2, r3
 8002988:	1311      	asrs	r1, r2, #12
 800298a:	17da      	asrs	r2, r3, #31
 800298c:	1a8a      	subs	r2, r1, r2
 800298e:	f242 7110 	movw	r1, #10000	; 0x2710
 8002992:	fb01 f202 	mul.w	r2, r1, r2
 8002996:	1a9a      	subs	r2, r3, r2
 8002998:	4b6e      	ldr	r3, [pc, #440]	; (8002b54 <ODO_calculation+0x5dc>)
 800299a:	fb83 1302 	smull	r1, r3, r3, r2
 800299e:	1199      	asrs	r1, r3, #6
 80029a0:	17d3      	asrs	r3, r2, #31
 80029a2:	1acb      	subs	r3, r1, r3
 80029a4:	72bb      	strb	r3, [r7, #10]
			uint8_t fourth=((((Range.Trip_value%100000)%10000)%1000)/100);
 80029a6:	4b67      	ldr	r3, [pc, #412]	; (8002b44 <ODO_calculation+0x5cc>)
 80029a8:	889b      	ldrh	r3, [r3, #4]
 80029aa:	4a67      	ldr	r2, [pc, #412]	; (8002b48 <ODO_calculation+0x5d0>)
 80029ac:	fb82 1203 	smull	r1, r2, r2, r3
 80029b0:	1351      	asrs	r1, r2, #13
 80029b2:	17da      	asrs	r2, r3, #31
 80029b4:	1a8a      	subs	r2, r1, r2
 80029b6:	4965      	ldr	r1, [pc, #404]	; (8002b4c <ODO_calculation+0x5d4>)
 80029b8:	fb01 f202 	mul.w	r2, r1, r2
 80029bc:	1a9a      	subs	r2, r3, r2
 80029be:	4b64      	ldr	r3, [pc, #400]	; (8002b50 <ODO_calculation+0x5d8>)
 80029c0:	fb83 1302 	smull	r1, r3, r3, r2
 80029c4:	1319      	asrs	r1, r3, #12
 80029c6:	17d3      	asrs	r3, r2, #31
 80029c8:	1acb      	subs	r3, r1, r3
 80029ca:	f242 7110 	movw	r1, #10000	; 0x2710
 80029ce:	fb01 f303 	mul.w	r3, r1, r3
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	4a5f      	ldr	r2, [pc, #380]	; (8002b54 <ODO_calculation+0x5dc>)
 80029d6:	fb82 1203 	smull	r1, r2, r2, r3
 80029da:	1191      	asrs	r1, r2, #6
 80029dc:	17da      	asrs	r2, r3, #31
 80029de:	1a8a      	subs	r2, r1, r2
 80029e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80029e4:	fb01 f202 	mul.w	r2, r1, r2
 80029e8:	1a9a      	subs	r2, r3, r2
 80029ea:	4b5b      	ldr	r3, [pc, #364]	; (8002b58 <ODO_calculation+0x5e0>)
 80029ec:	fb83 1302 	smull	r1, r3, r3, r2
 80029f0:	1159      	asrs	r1, r3, #5
 80029f2:	17d3      	asrs	r3, r2, #31
 80029f4:	1acb      	subs	r3, r1, r3
 80029f6:	727b      	strb	r3, [r7, #9]
			uint8_t fifth=(((((Range.Trip_value%100000)%10000)%1000)%100)/10);
 80029f8:	4b52      	ldr	r3, [pc, #328]	; (8002b44 <ODO_calculation+0x5cc>)
 80029fa:	889b      	ldrh	r3, [r3, #4]
 80029fc:	461a      	mov	r2, r3
 80029fe:	4b52      	ldr	r3, [pc, #328]	; (8002b48 <ODO_calculation+0x5d0>)
 8002a00:	fb83 1302 	smull	r1, r3, r3, r2
 8002a04:	1359      	asrs	r1, r3, #13
 8002a06:	17d3      	asrs	r3, r2, #31
 8002a08:	1acb      	subs	r3, r1, r3
 8002a0a:	4950      	ldr	r1, [pc, #320]	; (8002b4c <ODO_calculation+0x5d4>)
 8002a0c:	fb01 f303 	mul.w	r3, r1, r3
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	4a4f      	ldr	r2, [pc, #316]	; (8002b50 <ODO_calculation+0x5d8>)
 8002a14:	fb82 1203 	smull	r1, r2, r2, r3
 8002a18:	1311      	asrs	r1, r2, #12
 8002a1a:	17da      	asrs	r2, r3, #31
 8002a1c:	1a8a      	subs	r2, r1, r2
 8002a1e:	f242 7110 	movw	r1, #10000	; 0x2710
 8002a22:	fb01 f202 	mul.w	r2, r1, r2
 8002a26:	1a9a      	subs	r2, r3, r2
 8002a28:	4b4a      	ldr	r3, [pc, #296]	; (8002b54 <ODO_calculation+0x5dc>)
 8002a2a:	fb83 1302 	smull	r1, r3, r3, r2
 8002a2e:	1199      	asrs	r1, r3, #6
 8002a30:	17d3      	asrs	r3, r2, #31
 8002a32:	1acb      	subs	r3, r1, r3
 8002a34:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002a38:	fb01 f303 	mul.w	r3, r1, r3
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	4a46      	ldr	r2, [pc, #280]	; (8002b58 <ODO_calculation+0x5e0>)
 8002a40:	fb82 1203 	smull	r1, r2, r2, r3
 8002a44:	1151      	asrs	r1, r2, #5
 8002a46:	17da      	asrs	r2, r3, #31
 8002a48:	1a8a      	subs	r2, r1, r2
 8002a4a:	2164      	movs	r1, #100	; 0x64
 8002a4c:	fb01 f202 	mul.w	r2, r1, r2
 8002a50:	1a9a      	subs	r2, r3, r2
 8002a52:	4b42      	ldr	r3, [pc, #264]	; (8002b5c <ODO_calculation+0x5e4>)
 8002a54:	fb83 1302 	smull	r1, r3, r3, r2
 8002a58:	1099      	asrs	r1, r3, #2
 8002a5a:	17d3      	asrs	r3, r2, #31
 8002a5c:	1acb      	subs	r3, r1, r3
 8002a5e:	723b      	strb	r3, [r7, #8]
			uint8_t sixth=(((((Range.Trip_value%100000)%10000)%1000)%100)%10);
 8002a60:	4b38      	ldr	r3, [pc, #224]	; (8002b44 <ODO_calculation+0x5cc>)
 8002a62:	889b      	ldrh	r3, [r3, #4]
 8002a64:	461a      	mov	r2, r3
 8002a66:	4b38      	ldr	r3, [pc, #224]	; (8002b48 <ODO_calculation+0x5d0>)
 8002a68:	fb83 1302 	smull	r1, r3, r3, r2
 8002a6c:	1359      	asrs	r1, r3, #13
 8002a6e:	17d3      	asrs	r3, r2, #31
 8002a70:	1acb      	subs	r3, r1, r3
 8002a72:	4936      	ldr	r1, [pc, #216]	; (8002b4c <ODO_calculation+0x5d4>)
 8002a74:	fb01 f303 	mul.w	r3, r1, r3
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	4a35      	ldr	r2, [pc, #212]	; (8002b50 <ODO_calculation+0x5d8>)
 8002a7c:	fb82 1203 	smull	r1, r2, r2, r3
 8002a80:	1311      	asrs	r1, r2, #12
 8002a82:	17da      	asrs	r2, r3, #31
 8002a84:	1a8a      	subs	r2, r1, r2
 8002a86:	f242 7110 	movw	r1, #10000	; 0x2710
 8002a8a:	fb01 f202 	mul.w	r2, r1, r2
 8002a8e:	1a9a      	subs	r2, r3, r2
 8002a90:	4b30      	ldr	r3, [pc, #192]	; (8002b54 <ODO_calculation+0x5dc>)
 8002a92:	fb83 1302 	smull	r1, r3, r3, r2
 8002a96:	1199      	asrs	r1, r3, #6
 8002a98:	17d3      	asrs	r3, r2, #31
 8002a9a:	1acb      	subs	r3, r1, r3
 8002a9c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002aa0:	fb01 f303 	mul.w	r3, r1, r3
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	4a2c      	ldr	r2, [pc, #176]	; (8002b58 <ODO_calculation+0x5e0>)
 8002aa8:	fb82 1203 	smull	r1, r2, r2, r3
 8002aac:	1151      	asrs	r1, r2, #5
 8002aae:	17da      	asrs	r2, r3, #31
 8002ab0:	1a8a      	subs	r2, r1, r2
 8002ab2:	2164      	movs	r1, #100	; 0x64
 8002ab4:	fb01 f202 	mul.w	r2, r1, r2
 8002ab8:	1a9a      	subs	r2, r3, r2
 8002aba:	4b28      	ldr	r3, [pc, #160]	; (8002b5c <ODO_calculation+0x5e4>)
 8002abc:	fb83 1302 	smull	r1, r3, r3, r2
 8002ac0:	1099      	asrs	r1, r3, #2
 8002ac2:	17d3      	asrs	r3, r2, #31
 8002ac4:	1ac9      	subs	r1, r1, r3
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	440b      	add	r3, r1
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	1ad1      	subs	r1, r2, r3
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	71fb      	strb	r3, [r7, #7]
			lcd_clear(5, 40, 51);
 8002ad4:	2233      	movs	r2, #51	; 0x33
 8002ad6:	2128      	movs	r1, #40	; 0x28
 8002ad8:	2005      	movs	r0, #5
 8002ada:	f7fe f9c3 	bl	8000e64 <lcd_clear>
			trp_icon_print();
 8002ade:	f7fe f8c7 	bl	8000c70 <trp_icon_print>
			lcd_print_digit_wos(5, 52,second);
 8002ae2:	7afb      	ldrb	r3, [r7, #11]
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	2134      	movs	r1, #52	; 0x34
 8002ae8:	2005      	movs	r0, #5
 8002aea:	f7fe f9e1 	bl	8000eb0 <lcd_print_digit_wos>
			lcd_print_digit_wos(5, 58,third);
 8002aee:	7abb      	ldrb	r3, [r7, #10]
 8002af0:	461a      	mov	r2, r3
 8002af2:	213a      	movs	r1, #58	; 0x3a
 8002af4:	2005      	movs	r0, #5
 8002af6:	f7fe f9db 	bl	8000eb0 <lcd_print_digit_wos>
			lcd_print_digit_wos(5, 64,fourth);
 8002afa:	7a7b      	ldrb	r3, [r7, #9]
 8002afc:	461a      	mov	r2, r3
 8002afe:	2140      	movs	r1, #64	; 0x40
 8002b00:	2005      	movs	r0, #5
 8002b02:	f7fe f9d5 	bl	8000eb0 <lcd_print_digit_wos>
			lcd_print_digit_wos(5, 70,fifth);
 8002b06:	7a3b      	ldrb	r3, [r7, #8]
 8002b08:	461a      	mov	r2, r3
 8002b0a:	2146      	movs	r1, #70	; 0x46
 8002b0c:	2005      	movs	r0, #5
 8002b0e:	f7fe f9cf 	bl	8000eb0 <lcd_print_digit_wos>
			lcd_print_convert(5, 76, 0x40);
 8002b12:	2240      	movs	r2, #64	; 0x40
 8002b14:	214c      	movs	r1, #76	; 0x4c
 8002b16:	2005      	movs	r0, #5
 8002b18:	f7fe fad4 	bl	80010c4 <lcd_print_convert>
			lcd_print_digit_wos(5, 78,sixth);
 8002b1c:	79fb      	ldrb	r3, [r7, #7]
 8002b1e:	461a      	mov	r2, r3
 8002b20:	214e      	movs	r1, #78	; 0x4e
 8002b22:	2005      	movs	r0, #5
 8002b24:	f7fe f9c4 	bl	8000eb0 <lcd_print_digit_wos>
			lcd_print_char(5,84, "km");
 8002b28:	4a0d      	ldr	r2, [pc, #52]	; (8002b60 <ODO_calculation+0x5e8>)
 8002b2a:	2154      	movs	r1, #84	; 0x54
 8002b2c:	2005      	movs	r0, #5
 8002b2e:	f7fe f8bf 	bl	8000cb0 <lcd_print_char>
			break;
 8002b32:	e003      	b.n	8002b3c <ODO_calculation+0x5c4>
		}

	default:
		{
			start_inc=1;
 8002b34:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <ODO_calculation+0x5ec>)
 8002b36:	2201      	movs	r2, #1
 8002b38:	701a      	strb	r2, [r3, #0]
			break;
 8002b3a:	bf00      	nop
		}
	}
}
 8002b3c:	bf00      	nop
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	20001130 	.word	0x20001130
 8002b48:	14f8b589 	.word	0x14f8b589
 8002b4c:	000186a0 	.word	0x000186a0
 8002b50:	68db8bad 	.word	0x68db8bad
 8002b54:	10624dd3 	.word	0x10624dd3
 8002b58:	51eb851f 	.word	0x51eb851f
 8002b5c:	66666667 	.word	0x66666667
 8002b60:	08006900 	.word	0x08006900
 8002b64:	20001170 	.word	0x20001170

08002b68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b6e:	f000 fc61 	bl	8003434 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b72:	f000 f8bd 	bl	8002cf0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b76:	f000 f9cd 	bl	8002f14 <MX_GPIO_Init>
  MX_CAN_Init();
 8002b7a:	f000 f8ff 	bl	8002d7c <MX_CAN_Init>
  MX_TIM2_Init();
 8002b7e:	f000 f97d 	bl	8002e7c <MX_TIM2_Init>
  MX_I2C1_Init();
 8002b82:	f000 f94d 	bl	8002e20 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_I2C_Init(&hi2c1);
 8002b86:	4853      	ldr	r0, [pc, #332]	; (8002cd4 <main+0x16c>)
 8002b88:	f001 fe26 	bl	80047d8 <HAL_I2C_Init>
  HAL_CAN_Start(&hcan);// CAN protocol enable function
 8002b8c:	4852      	ldr	r0, [pc, #328]	; (8002cd8 <main+0x170>)
 8002b8e:	f000 fe9b 	bl	80038c8 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO0_MSG_PENDING); // Interrupt activation for Receiving data ,whenever data is received in FIFO, this function will get triggered and goes to receiver interrupt function
 8002b92:	2102      	movs	r1, #2
 8002b94:	4850      	ldr	r0, [pc, #320]	; (8002cd8 <main+0x170>)
 8002b96:	f001 f8cb 	bl	8003d30 <HAL_CAN_ActivateNotification>
  HAL_TIM_Base_Start_IT(&htim2); // Timer2 Interrupt Start
 8002b9a:	4850      	ldr	r0, [pc, #320]	; (8002cdc <main+0x174>)
 8002b9c:	f003 fac2 	bl	8006124 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
     lcd_init();
 8002ba0:	f7fd fe5c 	bl	800085c <lcd_init>
	 lcd_into();
 8002ba4:	f7fe fa54 	bl	8001050 <lcd_into>
	 HAL_Delay(1000);
 8002ba8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002bac:	f000 fca4 	bl	80034f8 <HAL_Delay>
	 lcd_clear(0, 0, 127);
 8002bb0:	227f      	movs	r2, #127	; 0x7f
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	2000      	movs	r0, #0
 8002bb6:	f7fe f955 	bl	8000e64 <lcd_clear>
	 lcd_clear(1, 0, 127);
 8002bba:	227f      	movs	r2, #127	; 0x7f
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	2001      	movs	r0, #1
 8002bc0:	f7fe f950 	bl	8000e64 <lcd_clear>
	 lcd_clear(2, 0, 127);
 8002bc4:	227f      	movs	r2, #127	; 0x7f
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	2002      	movs	r0, #2
 8002bca:	f7fe f94b 	bl	8000e64 <lcd_clear>
	 lcd_clear(3, 0, 127);
 8002bce:	227f      	movs	r2, #127	; 0x7f
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	2003      	movs	r0, #3
 8002bd4:	f7fe f946 	bl	8000e64 <lcd_clear>
	 lcd_clear(4, 0, 127);
 8002bd8:	227f      	movs	r2, #127	; 0x7f
 8002bda:	2100      	movs	r1, #0
 8002bdc:	2004      	movs	r0, #4
 8002bde:	f7fe f941 	bl	8000e64 <lcd_clear>
	 lcd_clear(5, 0, 127);
 8002be2:	227f      	movs	r2, #127	; 0x7f
 8002be4:	2100      	movs	r1, #0
 8002be6:	2005      	movs	r0, #5
 8002be8:	f7fe f93c 	bl	8000e64 <lcd_clear>
	 lcd_clear(6, 0, 127);
 8002bec:	227f      	movs	r2, #127	; 0x7f
 8002bee:	2100      	movs	r1, #0
 8002bf0:	2006      	movs	r0, #6
 8002bf2:	f7fe f937 	bl	8000e64 <lcd_clear>
	 lcd_clear(7, 0, 127);
 8002bf6:	227f      	movs	r2, #127	; 0x7f
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	2007      	movs	r0, #7
 8002bfc:	f7fe f932 	bl	8000e64 <lcd_clear>

//	 I2C_Write_EEPROM(0,ODO_ADDRESS_EEPROM);
//	 I2C_Write_EEPROM(0,TRIP_ADDRESS_EEPROM);
//   I2C_Write_EEPROM(1,LAST_STATE_ADDRESS_EEPROM);
	 Range.Odometer_Value=I2C_Read_EEPROM(ODO_ADDRESS_EEPROM);
 8002c00:	2020      	movs	r0, #32
 8002c02:	f7ff f9ab 	bl	8001f5c <I2C_Read_EEPROM>
 8002c06:	4603      	mov	r3, r0
 8002c08:	461a      	mov	r2, r3
 8002c0a:	4b35      	ldr	r3, [pc, #212]	; (8002ce0 <main+0x178>)
 8002c0c:	601a      	str	r2, [r3, #0]
	 Range.Trip_value=I2C_Read_EEPROM(TRIP_ADDRESS_EEPROM);
 8002c0e:	2030      	movs	r0, #48	; 0x30
 8002c10:	f7ff f9a4 	bl	8001f5c <I2C_Read_EEPROM>
 8002c14:	4603      	mov	r3, r0
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	4b31      	ldr	r3, [pc, #196]	; (8002ce0 <main+0x178>)
 8002c1a:	809a      	strh	r2, [r3, #4]
	 start_inc=I2C_Read_EEPROM(LAST_STATE_ADDRESS_EEPROM);
 8002c1c:	2040      	movs	r0, #64	; 0x40
 8002c1e:	f7ff f99d 	bl	8001f5c <I2C_Read_EEPROM>
 8002c22:	4603      	mov	r3, r0
 8002c24:	b2da      	uxtb	r2, r3
 8002c26:	4b2f      	ldr	r3, [pc, #188]	; (8002ce4 <main+0x17c>)
 8002c28:	701a      	strb	r2, [r3, #0]

	 first_time=1;
 8002c2a:	4b2f      	ldr	r3, [pc, #188]	; (8002ce8 <main+0x180>)
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	701a      	strb	r2, [r3, #0]
	 uint8_t tog=0;
 8002c30:	2300      	movs	r3, #0
 8002c32:	71fb      	strb	r3, [r7, #7]
 while(1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  if(print_state)
 8002c34:	4b2d      	ldr	r3, [pc, #180]	; (8002cec <main+0x184>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d0fb      	beq.n	8002c34 <main+0xcc>
  {
	  	print_state=0;
 8002c3c:	4b2b      	ldr	r3, [pc, #172]	; (8002cec <main+0x184>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	701a      	strb	r2, [r3, #0]
		BMS_CAN();// read data from the BMS through the can protocol
 8002c42:	f7ff fbc7 	bl	80023d4 <BMS_CAN>
		lcd_clear(0, 0, 127);
 8002c46:	227f      	movs	r2, #127	; 0x7f
 8002c48:	2100      	movs	r1, #0
 8002c4a:	2000      	movs	r0, #0
 8002c4c:	f7fe f90a 	bl	8000e64 <lcd_clear>
		lcd_clear(1, 0, 127);
 8002c50:	227f      	movs	r2, #127	; 0x7f
 8002c52:	2100      	movs	r1, #0
 8002c54:	2001      	movs	r0, #1
 8002c56:	f7fe f905 	bl	8000e64 <lcd_clear>
		lcd_clear(2, 0, 127);
 8002c5a:	227f      	movs	r2, #127	; 0x7f
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	2002      	movs	r0, #2
 8002c60:	f7fe f900 	bl	8000e64 <lcd_clear>
		lcd_clear(3, 0, 127);
 8002c64:	227f      	movs	r2, #127	; 0x7f
 8002c66:	2100      	movs	r1, #0
 8002c68:	2003      	movs	r0, #3
 8002c6a:	f7fe f8fb 	bl	8000e64 <lcd_clear>
		lcd_clear(4, 0, 127);
 8002c6e:	227f      	movs	r2, #127	; 0x7f
 8002c70:	2100      	movs	r1, #0
 8002c72:	2004      	movs	r0, #4
 8002c74:	f7fe f8f6 	bl	8000e64 <lcd_clear>
		lcd_clear(5, 0, 127);
 8002c78:	227f      	movs	r2, #127	; 0x7f
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	2005      	movs	r0, #5
 8002c7e:	f7fe f8f1 	bl	8000e64 <lcd_clear>
		lcd_clear(6, 0, 127);
 8002c82:	227f      	movs	r2, #127	; 0x7f
 8002c84:	2100      	movs	r1, #0
 8002c86:	2006      	movs	r0, #6
 8002c88:	f7fe f8ec 	bl	8000e64 <lcd_clear>
		lcd_clear(7, 0, 127);
 8002c8c:	227f      	movs	r2, #127	; 0x7f
 8002c8e:	2100      	movs	r1, #0
 8002c90:	2007      	movs	r0, #7
 8002c92:	f7fe f8e7 	bl	8000e64 <lcd_clear>
		battery_temp();
 8002c96:	f7ff f9f1 	bl	800207c <battery_temp>
		battery_soc();
 8002c9a:	f7ff fa5d 	bl	8002158 <battery_soc>
		line_print();
 8002c9e:	f7fe fa29 	bl	80010f4 <line_print>
		battery_bar_soc();
 8002ca2:	f7ff fbdd 	bl	8002460 <battery_bar_soc>
		ODO_calculation();
 8002ca6:	f7ff fc67 	bl	8002578 <ODO_calculation>
		Gear_Status();
 8002caa:	f7ff fadd 	bl	8002268 <Gear_Status>
		battery_voltage();
 8002cae:	f7ff f9ad 	bl	800200c <battery_voltage>
		Lcd_cmd(0xA2); // ADC select
 8002cb2:	20a2      	movs	r0, #162	; 0xa2
 8002cb4:	f7fd fd52 	bl	800075c <Lcd_cmd>
		Lcd_cmd(0xA0);// SHL select
 8002cb8:	20a0      	movs	r0, #160	; 0xa0
 8002cba:	f7fd fd4f 	bl	800075c <Lcd_cmd>
		Lcd_cmd(0xC0);// Initial display line
 8002cbe:	20c0      	movs	r0, #192	; 0xc0
 8002cc0:	f7fd fd4c 	bl	800075c <Lcd_cmd>
		Lcd_cmd(0x40);
 8002cc4:	2040      	movs	r0, #64	; 0x40
 8002cc6:	f7fd fd49 	bl	800075c <Lcd_cmd>
		lcd_invert_process();
 8002cca:	f7fd fe23 	bl	8000914 <lcd_invert_process>
		lcd_print_ram_1();
 8002cce:	f7fd fd73 	bl	80007b8 <lcd_print_ram_1>
  if(print_state)
 8002cd2:	e7af      	b.n	8002c34 <main+0xcc>
 8002cd4:	20001068 	.word	0x20001068
 8002cd8:	20001040 	.word	0x20001040
 8002cdc:	200010bc 	.word	0x200010bc
 8002ce0:	20001130 	.word	0x20001130
 8002ce4:	20001170 	.word	0x20001170
 8002ce8:	2000079c 	.word	0x2000079c
 8002cec:	2000112b 	.word	0x2000112b

08002cf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b090      	sub	sp, #64	; 0x40
 8002cf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cf6:	f107 0318 	add.w	r3, r7, #24
 8002cfa:	2228      	movs	r2, #40	; 0x28
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f003 fdbe 	bl	8006880 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d04:	1d3b      	adds	r3, r7, #4
 8002d06:	2200      	movs	r2, #0
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	605a      	str	r2, [r3, #4]
 8002d0c:	609a      	str	r2, [r3, #8]
 8002d0e:	60da      	str	r2, [r3, #12]
 8002d10:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002d12:	2301      	movs	r3, #1
 8002d14:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d1a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d20:	2301      	movs	r3, #1
 8002d22:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d24:	2302      	movs	r3, #2
 8002d26:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d2c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002d2e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002d32:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d34:	f107 0318 	add.w	r3, r7, #24
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f002 fda7 	bl	800588c <HAL_RCC_OscConfig>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002d44:	f000 fa04 	bl	8003150 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d48:	230f      	movs	r3, #15
 8002d4a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d50:	2300      	movs	r3, #0
 8002d52:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002d54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002d5e:	1d3b      	adds	r3, r7, #4
 8002d60:	2102      	movs	r1, #2
 8002d62:	4618      	mov	r0, r3
 8002d64:	f003 f814 	bl	8005d90 <HAL_RCC_ClockConfig>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002d6e:	f000 f9ef 	bl	8003150 <Error_Handler>
  }
}
 8002d72:	bf00      	nop
 8002d74:	3740      	adds	r7, #64	; 0x40
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
	...

08002d7c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b08a      	sub	sp, #40	; 0x28
 8002d80:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8002d82:	4b25      	ldr	r3, [pc, #148]	; (8002e18 <MX_CAN_Init+0x9c>)
 8002d84:	4a25      	ldr	r2, [pc, #148]	; (8002e1c <MX_CAN_Init+0xa0>)
 8002d86:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 8002d88:	4b23      	ldr	r3, [pc, #140]	; (8002e18 <MX_CAN_Init+0x9c>)
 8002d8a:	2208      	movs	r2, #8
 8002d8c:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8002d8e:	4b22      	ldr	r3, [pc, #136]	; (8002e18 <MX_CAN_Init+0x9c>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002d94:	4b20      	ldr	r3, [pc, #128]	; (8002e18 <MX_CAN_Init+0x9c>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8002d9a:	4b1f      	ldr	r3, [pc, #124]	; (8002e18 <MX_CAN_Init+0x9c>)
 8002d9c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002da0:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002da2:	4b1d      	ldr	r3, [pc, #116]	; (8002e18 <MX_CAN_Init+0x9c>)
 8002da4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002da8:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8002daa:	4b1b      	ldr	r3, [pc, #108]	; (8002e18 <MX_CAN_Init+0x9c>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8002db0:	4b19      	ldr	r3, [pc, #100]	; (8002e18 <MX_CAN_Init+0x9c>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8002db6:	4b18      	ldr	r3, [pc, #96]	; (8002e18 <MX_CAN_Init+0x9c>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8002dbc:	4b16      	ldr	r3, [pc, #88]	; (8002e18 <MX_CAN_Init+0x9c>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002dc2:	4b15      	ldr	r3, [pc, #84]	; (8002e18 <MX_CAN_Init+0x9c>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8002dc8:	4b13      	ldr	r3, [pc, #76]	; (8002e18 <MX_CAN_Init+0x9c>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002dce:	4812      	ldr	r0, [pc, #72]	; (8002e18 <MX_CAN_Init+0x9c>)
 8002dd0:	f000 fbb6 	bl	8003540 <HAL_CAN_Init>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8002dda:	f000 f9b9 	bl	8003150 <Error_Handler>
    * Filter ID and Filter Mask are used to compare and verify the incoming Identifier for receiving data
    * FIFO 0 is used for store the received data
    *In FiterID mask mode , two 32 bit registers (Filter ID and Filter Mask)
    */
	CAN_FilterTypeDef filtercon;// Need to add filter configuration for receiving data
	filtercon.FilterActivation = CAN_FILTER_ENABLE;//Enable Filter for receiving data
 8002dde:	2301      	movs	r3, #1
 8002de0:	623b      	str	r3, [r7, #32]
	filtercon.FilterBank = 1;//Here using filter bank 1 for receiving data(Controller- single CAN -14 filter bank)
 8002de2:	2301      	movs	r3, #1
 8002de4:	617b      	str	r3, [r7, #20]
	filtercon.FilterFIFOAssignment = CAN_FILTER_FIFO0;//using FIFO 0 for receiving data
 8002de6:	2300      	movs	r3, #0
 8002de8:	613b      	str	r3, [r7, #16]
	filtercon.FilterIdHigh = 0x0000;//controller receives all the identifier without any restriction if gives 0x0000
 8002dea:	2300      	movs	r3, #0
 8002dec:	603b      	str	r3, [r7, #0]
	filtercon.FilterIdLow = 0x0000;//controller receives all the identifier without any restriction if gives 0x0000
 8002dee:	2300      	movs	r3, #0
 8002df0:	607b      	str	r3, [r7, #4]
	filtercon.FilterMaskIdHigh = 0X0000;//controller receives all the identifier without any restriction if gives 0x0000
 8002df2:	2300      	movs	r3, #0
 8002df4:	60bb      	str	r3, [r7, #8]
	filtercon.FilterMaskIdLow = 0X0000;//controller receives all the identifier without any restriction if gives 0x0000
 8002df6:	2300      	movs	r3, #0
 8002df8:	60fb      	str	r3, [r7, #12]
	filtercon.FilterMode = CAN_FILTERMODE_IDMASK;//using ID mask mode receiving identifier
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	61bb      	str	r3, [r7, #24]
	filtercon.FilterScale = CAN_FILTERSCALE_32BIT;//32 bit register ID and Mask register
 8002dfe:	2301      	movs	r3, #1
 8002e00:	61fb      	str	r3, [r7, #28]
	filtercon.SlaveStartFilterBank = 0;// don't care if the controller has single CAN
 8002e02:	2300      	movs	r3, #0
 8002e04:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_CAN_ConfigFilter(&hcan,&filtercon);//Filter configuration declaration
 8002e06:	463b      	mov	r3, r7
 8002e08:	4619      	mov	r1, r3
 8002e0a:	4803      	ldr	r0, [pc, #12]	; (8002e18 <MX_CAN_Init+0x9c>)
 8002e0c:	f000 fc93 	bl	8003736 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 8002e10:	bf00      	nop
 8002e12:	3728      	adds	r7, #40	; 0x28
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	20001040 	.word	0x20001040
 8002e1c:	40006400 	.word	0x40006400

08002e20 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002e24:	4b12      	ldr	r3, [pc, #72]	; (8002e70 <MX_I2C1_Init+0x50>)
 8002e26:	4a13      	ldr	r2, [pc, #76]	; (8002e74 <MX_I2C1_Init+0x54>)
 8002e28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002e2a:	4b11      	ldr	r3, [pc, #68]	; (8002e70 <MX_I2C1_Init+0x50>)
 8002e2c:	4a12      	ldr	r2, [pc, #72]	; (8002e78 <MX_I2C1_Init+0x58>)
 8002e2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002e30:	4b0f      	ldr	r3, [pc, #60]	; (8002e70 <MX_I2C1_Init+0x50>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002e36:	4b0e      	ldr	r3, [pc, #56]	; (8002e70 <MX_I2C1_Init+0x50>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e3c:	4b0c      	ldr	r3, [pc, #48]	; (8002e70 <MX_I2C1_Init+0x50>)
 8002e3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e42:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e44:	4b0a      	ldr	r3, [pc, #40]	; (8002e70 <MX_I2C1_Init+0x50>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002e4a:	4b09      	ldr	r3, [pc, #36]	; (8002e70 <MX_I2C1_Init+0x50>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e50:	4b07      	ldr	r3, [pc, #28]	; (8002e70 <MX_I2C1_Init+0x50>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e56:	4b06      	ldr	r3, [pc, #24]	; (8002e70 <MX_I2C1_Init+0x50>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e5c:	4804      	ldr	r0, [pc, #16]	; (8002e70 <MX_I2C1_Init+0x50>)
 8002e5e:	f001 fcbb 	bl	80047d8 <HAL_I2C_Init>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002e68:	f000 f972 	bl	8003150 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002e6c:	bf00      	nop
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	20001068 	.word	0x20001068
 8002e74:	40005400 	.word	0x40005400
 8002e78:	00061a80 	.word	0x00061a80

08002e7c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e82:	f107 0308 	add.w	r3, r7, #8
 8002e86:	2200      	movs	r2, #0
 8002e88:	601a      	str	r2, [r3, #0]
 8002e8a:	605a      	str	r2, [r3, #4]
 8002e8c:	609a      	str	r2, [r3, #8]
 8002e8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e90:	463b      	mov	r3, r7
 8002e92:	2200      	movs	r2, #0
 8002e94:	601a      	str	r2, [r3, #0]
 8002e96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e98:	4b1d      	ldr	r3, [pc, #116]	; (8002f10 <MX_TIM2_Init+0x94>)
 8002e9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e9e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8002ea0:	4b1b      	ldr	r3, [pc, #108]	; (8002f10 <MX_TIM2_Init+0x94>)
 8002ea2:	2263      	movs	r2, #99	; 0x63
 8002ea4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ea6:	4b1a      	ldr	r3, [pc, #104]	; (8002f10 <MX_TIM2_Init+0x94>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 72-1;
 8002eac:	4b18      	ldr	r3, [pc, #96]	; (8002f10 <MX_TIM2_Init+0x94>)
 8002eae:	2247      	movs	r2, #71	; 0x47
 8002eb0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002eb2:	4b17      	ldr	r3, [pc, #92]	; (8002f10 <MX_TIM2_Init+0x94>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002eb8:	4b15      	ldr	r3, [pc, #84]	; (8002f10 <MX_TIM2_Init+0x94>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002ebe:	4814      	ldr	r0, [pc, #80]	; (8002f10 <MX_TIM2_Init+0x94>)
 8002ec0:	f003 f8e0 	bl	8006084 <HAL_TIM_Base_Init>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8002eca:	f000 f941 	bl	8003150 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ece:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ed2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002ed4:	f107 0308 	add.w	r3, r7, #8
 8002ed8:	4619      	mov	r1, r3
 8002eda:	480d      	ldr	r0, [pc, #52]	; (8002f10 <MX_TIM2_Init+0x94>)
 8002edc:	f003 fa7c 	bl	80063d8 <HAL_TIM_ConfigClockSource>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8002ee6:	f000 f933 	bl	8003150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002eea:	2300      	movs	r3, #0
 8002eec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ef2:	463b      	mov	r3, r7
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	4806      	ldr	r0, [pc, #24]	; (8002f10 <MX_TIM2_Init+0x94>)
 8002ef8:	f003 fc52 	bl	80067a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8002f02:	f000 f925 	bl	8003150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002f06:	bf00      	nop
 8002f08:	3718      	adds	r7, #24
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	200010bc 	.word	0x200010bc

08002f14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b088      	sub	sp, #32
 8002f18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f1a:	f107 0310 	add.w	r3, r7, #16
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	605a      	str	r2, [r3, #4]
 8002f24:	609a      	str	r2, [r3, #8]
 8002f26:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f28:	4b39      	ldr	r3, [pc, #228]	; (8003010 <MX_GPIO_Init+0xfc>)
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	4a38      	ldr	r2, [pc, #224]	; (8003010 <MX_GPIO_Init+0xfc>)
 8002f2e:	f043 0310 	orr.w	r3, r3, #16
 8002f32:	6193      	str	r3, [r2, #24]
 8002f34:	4b36      	ldr	r3, [pc, #216]	; (8003010 <MX_GPIO_Init+0xfc>)
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	f003 0310 	and.w	r3, r3, #16
 8002f3c:	60fb      	str	r3, [r7, #12]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f40:	4b33      	ldr	r3, [pc, #204]	; (8003010 <MX_GPIO_Init+0xfc>)
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	4a32      	ldr	r2, [pc, #200]	; (8003010 <MX_GPIO_Init+0xfc>)
 8002f46:	f043 0320 	orr.w	r3, r3, #32
 8002f4a:	6193      	str	r3, [r2, #24]
 8002f4c:	4b30      	ldr	r3, [pc, #192]	; (8003010 <MX_GPIO_Init+0xfc>)
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	f003 0320 	and.w	r3, r3, #32
 8002f54:	60bb      	str	r3, [r7, #8]
 8002f56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f58:	4b2d      	ldr	r3, [pc, #180]	; (8003010 <MX_GPIO_Init+0xfc>)
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	4a2c      	ldr	r2, [pc, #176]	; (8003010 <MX_GPIO_Init+0xfc>)
 8002f5e:	f043 0304 	orr.w	r3, r3, #4
 8002f62:	6193      	str	r3, [r2, #24]
 8002f64:	4b2a      	ldr	r3, [pc, #168]	; (8003010 <MX_GPIO_Init+0xfc>)
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	607b      	str	r3, [r7, #4]
 8002f6e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f70:	4b27      	ldr	r3, [pc, #156]	; (8003010 <MX_GPIO_Init+0xfc>)
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	4a26      	ldr	r2, [pc, #152]	; (8003010 <MX_GPIO_Init+0xfc>)
 8002f76:	f043 0308 	orr.w	r3, r3, #8
 8002f7a:	6193      	str	r3, [r2, #24]
 8002f7c:	4b24      	ldr	r3, [pc, #144]	; (8003010 <MX_GPIO_Init+0xfc>)
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	f003 0308 	and.w	r3, r3, #8
 8002f84:	603b      	str	r3, [r7, #0]
 8002f86:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002f8e:	4821      	ldr	r0, [pc, #132]	; (8003014 <MX_GPIO_Init+0x100>)
 8002f90:	f001 fbd9 	bl	8004746 <HAL_GPIO_WritePin>
                          |LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin
                          |Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, lcd_adr_Pin|LCD_RD_Pin|lcd_reset_Pin|lcd_chip_sel_Pin
 8002f94:	2200      	movs	r2, #0
 8002f96:	f640 4107 	movw	r1, #3079	; 0xc07
 8002f9a:	481f      	ldr	r0, [pc, #124]	; (8003018 <MX_GPIO_Init+0x104>)
 8002f9c:	f001 fbd3 	bl	8004746 <HAL_GPIO_WritePin>
                          |check_led_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : speed_sensor_Pin */
  GPIO_InitStruct.Pin = speed_sensor_Pin;
 8002fa0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fa4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002fa6:	4b1d      	ldr	r3, [pc, #116]	; (800301c <MX_GPIO_Init+0x108>)
 8002fa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002faa:	2301      	movs	r3, #1
 8002fac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(speed_sensor_GPIO_Port, &GPIO_InitStruct);
 8002fae:	f107 0310 	add.w	r3, r7, #16
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	481a      	ldr	r0, [pc, #104]	; (8003020 <MX_GPIO_Init+0x10c>)
 8002fb6:	f001 fa2b 	bl	8004410 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D0_Pin LCD_D1_Pin LCD_D2_Pin LCD_D3_Pin
                           LCD_D4_Pin LCD_D5_Pin LCD_D6_Pin LCD_D7_Pin
                           Buzzer_Pin */
  GPIO_InitStruct.Pin = LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin
 8002fba:	f240 13ff 	movw	r3, #511	; 0x1ff
 8002fbe:	613b      	str	r3, [r7, #16]
                          |LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin
                          |Buzzer_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc8:	2302      	movs	r3, #2
 8002fca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fcc:	f107 0310 	add.w	r3, r7, #16
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	4810      	ldr	r0, [pc, #64]	; (8003014 <MX_GPIO_Init+0x100>)
 8002fd4:	f001 fa1c 	bl	8004410 <HAL_GPIO_Init>

  /*Configure GPIO pins : lcd_adr_Pin LCD_RD_Pin lcd_reset_Pin lcd_chip_sel_Pin
                           check_led_Pin */
  GPIO_InitStruct.Pin = lcd_adr_Pin|LCD_RD_Pin|lcd_reset_Pin|lcd_chip_sel_Pin
 8002fd8:	f640 4307 	movw	r3, #3079	; 0xc07
 8002fdc:	613b      	str	r3, [r7, #16]
                          |check_led_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fea:	f107 0310 	add.w	r3, r7, #16
 8002fee:	4619      	mov	r1, r3
 8002ff0:	4809      	ldr	r0, [pc, #36]	; (8003018 <MX_GPIO_Init+0x104>)
 8002ff2:	f001 fa0d 	bl	8004410 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	2028      	movs	r0, #40	; 0x28
 8002ffc:	f001 f9cd 	bl	800439a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003000:	2028      	movs	r0, #40	; 0x28
 8003002:	f001 f9e6 	bl	80043d2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003006:	bf00      	nop
 8003008:	3720      	adds	r7, #32
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40021000 	.word	0x40021000
 8003014:	40010800 	.word	0x40010800
 8003018:	40010c00 	.word	0x40010c00
 800301c:	10210000 	.word	0x10210000
 8003020:	40011000 	.word	0x40011000

08003024 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
uint16_t speed_time=0,speed_count_avg=0,ttf_delay=0,sec=0,rev_buzzr_delay=0,temp_buzzr_delay=0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) // To create a every 100us timer Interrupt. prescalar value is 100 and ARR(Auto Reload Register) = 72.
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003034:	d159      	bne.n	80030ea <HAL_TIM_PeriodElapsedCallback+0xc6>
  {
	 timerCounter++; //It will incremented every timer interrupt occur with time.
 8003036:	4b2f      	ldr	r3, [pc, #188]	; (80030f4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8003038:	881b      	ldrh	r3, [r3, #0]
 800303a:	b29b      	uxth	r3, r3
 800303c:	3301      	adds	r3, #1
 800303e:	b29a      	uxth	r2, r3
 8003040:	4b2c      	ldr	r3, [pc, #176]	; (80030f4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8003042:	801a      	strh	r2, [r3, #0]
	 if(timerCounter==10)
 8003044:	4b2b      	ldr	r3, [pc, #172]	; (80030f4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8003046:	881b      	ldrh	r3, [r3, #0]
 8003048:	b29b      	uxth	r3, r3
 800304a:	2b0a      	cmp	r3, #10
 800304c:	d108      	bne.n	8003060 <HAL_TIM_PeriodElapsedCallback+0x3c>
	 {
		 m_sec++;
 800304e:	4b2a      	ldr	r3, [pc, #168]	; (80030f8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8003050:	881b      	ldrh	r3, [r3, #0]
 8003052:	3301      	adds	r3, #1
 8003054:	b29a      	uxth	r2, r3
 8003056:	4b28      	ldr	r3, [pc, #160]	; (80030f8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8003058:	801a      	strh	r2, [r3, #0]
		 timerCounter=0;
 800305a:	4b26      	ldr	r3, [pc, #152]	; (80030f4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800305c:	2200      	movs	r2, #0
 800305e:	801a      	strh	r2, [r3, #0]
	 }
	 if(m_sec==print_delay)
 8003060:	4b25      	ldr	r3, [pc, #148]	; (80030f8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8003062:	881a      	ldrh	r2, [r3, #0]
 8003064:	4b25      	ldr	r3, [pc, #148]	; (80030fc <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8003066:	881b      	ldrh	r3, [r3, #0]
 8003068:	429a      	cmp	r2, r3
 800306a:	d113      	bne.n	8003094 <HAL_TIM_PeriodElapsedCallback+0x70>
	 {
		 print_delay=m_sec+1000;
 800306c:	4b22      	ldr	r3, [pc, #136]	; (80030f8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800306e:	881b      	ldrh	r3, [r3, #0]
 8003070:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8003074:	b29a      	uxth	r2, r3
 8003076:	4b21      	ldr	r3, [pc, #132]	; (80030fc <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8003078:	801a      	strh	r2, [r3, #0]
		 print_state=1;
 800307a:	4b21      	ldr	r3, [pc, #132]	; (8003100 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800307c:	2201      	movs	r2, #1
 800307e:	701a      	strb	r2, [r3, #0]
		 speed_count=speed_count_temp;
 8003080:	4b20      	ldr	r3, [pc, #128]	; (8003104 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a20      	ldr	r2, [pc, #128]	; (8003108 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8003086:	6013      	str	r3, [r2, #0]
		 after_sec=1;
 8003088:	4b20      	ldr	r3, [pc, #128]	; (800310c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800308a:	2201      	movs	r2, #1
 800308c:	701a      	strb	r2, [r3, #0]
		 speed_count_temp=0;
 800308e:	4b1d      	ldr	r3, [pc, #116]	; (8003104 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8003090:	2200      	movs	r2, #0
 8003092:	601a      	str	r2, [r3, #0]
	 }

	 if(m_sec==rev_buzzr_delay){
 8003094:	4b18      	ldr	r3, [pc, #96]	; (80030f8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8003096:	881a      	ldrh	r2, [r3, #0]
 8003098:	4b1d      	ldr	r3, [pc, #116]	; (8003110 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800309a:	881b      	ldrh	r3, [r3, #0]
 800309c:	429a      	cmp	r2, r3
 800309e:	d10f      	bne.n	80030c0 <HAL_TIM_PeriodElapsedCallback+0x9c>
		 rev_buzzr_delay=m_sec+500;
 80030a0:	4b15      	ldr	r3, [pc, #84]	; (80030f8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80030a2:	881b      	ldrh	r3, [r3, #0]
 80030a4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	4b19      	ldr	r3, [pc, #100]	; (8003110 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80030ac:	801a      	strh	r2, [r3, #0]
		 if(Reverse_status==1){
 80030ae:	4b19      	ldr	r3, [pc, #100]	; (8003114 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d104      	bne.n	80030c0 <HAL_TIM_PeriodElapsedCallback+0x9c>
			 HAL_GPIO_TogglePin(GPIOA, Buzzer_Pin);
 80030b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030ba:	4817      	ldr	r0, [pc, #92]	; (8003118 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80030bc:	f001 fb5b 	bl	8004776 <HAL_GPIO_TogglePin>
		 }
	 }
	 if(m_sec==temp_buzzr_delay){
 80030c0:	4b0d      	ldr	r3, [pc, #52]	; (80030f8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80030c2:	881a      	ldrh	r2, [r3, #0]
 80030c4:	4b15      	ldr	r3, [pc, #84]	; (800311c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80030c6:	881b      	ldrh	r3, [r3, #0]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d10e      	bne.n	80030ea <HAL_TIM_PeriodElapsedCallback+0xc6>
		 temp_buzzr_delay=m_sec+100;
 80030cc:	4b0a      	ldr	r3, [pc, #40]	; (80030f8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80030ce:	881b      	ldrh	r3, [r3, #0]
 80030d0:	3364      	adds	r3, #100	; 0x64
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	4b11      	ldr	r3, [pc, #68]	; (800311c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80030d6:	801a      	strh	r2, [r3, #0]
		 if(Battery_high_Temp==1){
 80030d8:	4b11      	ldr	r3, [pc, #68]	; (8003120 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d104      	bne.n	80030ea <HAL_TIM_PeriodElapsedCallback+0xc6>
			 HAL_GPIO_TogglePin(GPIOA, Buzzer_Pin);
 80030e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030e4:	480c      	ldr	r0, [pc, #48]	; (8003118 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80030e6:	f001 fb46 	bl	8004776 <HAL_GPIO_TogglePin>
		 }
	}
  }
}
 80030ea:	bf00      	nop
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	20001104 	.word	0x20001104
 80030f8:	20001106 	.word	0x20001106
 80030fc:	2000079e 	.word	0x2000079e
 8003100:	2000112b 	.word	0x2000112b
 8003104:	2000111c 	.word	0x2000111c
 8003108:	20001118 	.word	0x20001118
 800310c:	20001120 	.word	0x20001120
 8003110:	20001176 	.word	0x20001176
 8003114:	20001171 	.word	0x20001171
 8003118:	40010800 	.word	0x40010800
 800311c:	20001178 	.word	0x20001178
 8003120:	2000112a 	.word	0x2000112a

08003124 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	4603      	mov	r3, r0
 800312c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==speed_sensor_Pin)
 800312e:	88fb      	ldrh	r3, [r7, #6]
 8003130:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003134:	d104      	bne.n	8003140 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		speed_count_temp++;
 8003136:	4b05      	ldr	r3, [pc, #20]	; (800314c <HAL_GPIO_EXTI_Callback+0x28>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	3301      	adds	r3, #1
 800313c:	4a03      	ldr	r2, [pc, #12]	; (800314c <HAL_GPIO_EXTI_Callback+0x28>)
 800313e:	6013      	str	r3, [r2, #0]
	}
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	bc80      	pop	{r7}
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	2000111c 	.word	0x2000111c

08003150 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003154:	b672      	cpsid	i
}
 8003156:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	    HAL_NVIC_SystemReset();
 8003158:	f001 f949 	bl	80043ee <HAL_NVIC_SystemReset>
 800315c:	e7fc      	b.n	8003158 <Error_Handler+0x8>
	...

08003160 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003166:	4b15      	ldr	r3, [pc, #84]	; (80031bc <HAL_MspInit+0x5c>)
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	4a14      	ldr	r2, [pc, #80]	; (80031bc <HAL_MspInit+0x5c>)
 800316c:	f043 0301 	orr.w	r3, r3, #1
 8003170:	6193      	str	r3, [r2, #24]
 8003172:	4b12      	ldr	r3, [pc, #72]	; (80031bc <HAL_MspInit+0x5c>)
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	60bb      	str	r3, [r7, #8]
 800317c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800317e:	4b0f      	ldr	r3, [pc, #60]	; (80031bc <HAL_MspInit+0x5c>)
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	4a0e      	ldr	r2, [pc, #56]	; (80031bc <HAL_MspInit+0x5c>)
 8003184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003188:	61d3      	str	r3, [r2, #28]
 800318a:	4b0c      	ldr	r3, [pc, #48]	; (80031bc <HAL_MspInit+0x5c>)
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003192:	607b      	str	r3, [r7, #4]
 8003194:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003196:	4b0a      	ldr	r3, [pc, #40]	; (80031c0 <HAL_MspInit+0x60>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	60fb      	str	r3, [r7, #12]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80031a2:	60fb      	str	r3, [r7, #12]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80031aa:	60fb      	str	r3, [r7, #12]
 80031ac:	4a04      	ldr	r2, [pc, #16]	; (80031c0 <HAL_MspInit+0x60>)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031b2:	bf00      	nop
 80031b4:	3714      	adds	r7, #20
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bc80      	pop	{r7}
 80031ba:	4770      	bx	lr
 80031bc:	40021000 	.word	0x40021000
 80031c0:	40010000 	.word	0x40010000

080031c4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b088      	sub	sp, #32
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031cc:	f107 0310 	add.w	r3, r7, #16
 80031d0:	2200      	movs	r2, #0
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	605a      	str	r2, [r3, #4]
 80031d6:	609a      	str	r2, [r3, #8]
 80031d8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a20      	ldr	r2, [pc, #128]	; (8003260 <HAL_CAN_MspInit+0x9c>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d139      	bne.n	8003258 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80031e4:	4b1f      	ldr	r3, [pc, #124]	; (8003264 <HAL_CAN_MspInit+0xa0>)
 80031e6:	69db      	ldr	r3, [r3, #28]
 80031e8:	4a1e      	ldr	r2, [pc, #120]	; (8003264 <HAL_CAN_MspInit+0xa0>)
 80031ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80031ee:	61d3      	str	r3, [r2, #28]
 80031f0:	4b1c      	ldr	r3, [pc, #112]	; (8003264 <HAL_CAN_MspInit+0xa0>)
 80031f2:	69db      	ldr	r3, [r3, #28]
 80031f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f8:	60fb      	str	r3, [r7, #12]
 80031fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031fc:	4b19      	ldr	r3, [pc, #100]	; (8003264 <HAL_CAN_MspInit+0xa0>)
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	4a18      	ldr	r2, [pc, #96]	; (8003264 <HAL_CAN_MspInit+0xa0>)
 8003202:	f043 0304 	orr.w	r3, r3, #4
 8003206:	6193      	str	r3, [r2, #24]
 8003208:	4b16      	ldr	r3, [pc, #88]	; (8003264 <HAL_CAN_MspInit+0xa0>)
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	60bb      	str	r3, [r7, #8]
 8003212:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003214:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003218:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800321a:	2300      	movs	r3, #0
 800321c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321e:	2300      	movs	r3, #0
 8003220:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003222:	f107 0310 	add.w	r3, r7, #16
 8003226:	4619      	mov	r1, r3
 8003228:	480f      	ldr	r0, [pc, #60]	; (8003268 <HAL_CAN_MspInit+0xa4>)
 800322a:	f001 f8f1 	bl	8004410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800322e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003232:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003234:	2302      	movs	r3, #2
 8003236:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003238:	2303      	movs	r3, #3
 800323a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800323c:	f107 0310 	add.w	r3, r7, #16
 8003240:	4619      	mov	r1, r3
 8003242:	4809      	ldr	r0, [pc, #36]	; (8003268 <HAL_CAN_MspInit+0xa4>)
 8003244:	f001 f8e4 	bl	8004410 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003248:	2200      	movs	r2, #0
 800324a:	2100      	movs	r1, #0
 800324c:	2014      	movs	r0, #20
 800324e:	f001 f8a4 	bl	800439a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8003252:	2014      	movs	r0, #20
 8003254:	f001 f8bd 	bl	80043d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8003258:	bf00      	nop
 800325a:	3720      	adds	r7, #32
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	40006400 	.word	0x40006400
 8003264:	40021000 	.word	0x40021000
 8003268:	40010800 	.word	0x40010800

0800326c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b08a      	sub	sp, #40	; 0x28
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003274:	f107 0314 	add.w	r3, r7, #20
 8003278:	2200      	movs	r2, #0
 800327a:	601a      	str	r2, [r3, #0]
 800327c:	605a      	str	r2, [r3, #4]
 800327e:	609a      	str	r2, [r3, #8]
 8003280:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a1d      	ldr	r2, [pc, #116]	; (80032fc <HAL_I2C_MspInit+0x90>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d132      	bne.n	80032f2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800328c:	4b1c      	ldr	r3, [pc, #112]	; (8003300 <HAL_I2C_MspInit+0x94>)
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	4a1b      	ldr	r2, [pc, #108]	; (8003300 <HAL_I2C_MspInit+0x94>)
 8003292:	f043 0308 	orr.w	r3, r3, #8
 8003296:	6193      	str	r3, [r2, #24]
 8003298:	4b19      	ldr	r3, [pc, #100]	; (8003300 <HAL_I2C_MspInit+0x94>)
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	f003 0308 	and.w	r3, r3, #8
 80032a0:	613b      	str	r3, [r7, #16]
 80032a2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80032a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80032a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032aa:	2312      	movs	r3, #18
 80032ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032ae:	2303      	movs	r3, #3
 80032b0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032b2:	f107 0314 	add.w	r3, r7, #20
 80032b6:	4619      	mov	r1, r3
 80032b8:	4812      	ldr	r0, [pc, #72]	; (8003304 <HAL_I2C_MspInit+0x98>)
 80032ba:	f001 f8a9 	bl	8004410 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80032be:	4b12      	ldr	r3, [pc, #72]	; (8003308 <HAL_I2C_MspInit+0x9c>)
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	627b      	str	r3, [r7, #36]	; 0x24
 80032c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80032ca:	627b      	str	r3, [r7, #36]	; 0x24
 80032cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ce:	f043 0302 	orr.w	r3, r3, #2
 80032d2:	627b      	str	r3, [r7, #36]	; 0x24
 80032d4:	4a0c      	ldr	r2, [pc, #48]	; (8003308 <HAL_I2C_MspInit+0x9c>)
 80032d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d8:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80032da:	4b09      	ldr	r3, [pc, #36]	; (8003300 <HAL_I2C_MspInit+0x94>)
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	4a08      	ldr	r2, [pc, #32]	; (8003300 <HAL_I2C_MspInit+0x94>)
 80032e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80032e4:	61d3      	str	r3, [r2, #28]
 80032e6:	4b06      	ldr	r3, [pc, #24]	; (8003300 <HAL_I2C_MspInit+0x94>)
 80032e8:	69db      	ldr	r3, [r3, #28]
 80032ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032ee:	60fb      	str	r3, [r7, #12]
 80032f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80032f2:	bf00      	nop
 80032f4:	3728      	adds	r7, #40	; 0x28
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	40005400 	.word	0x40005400
 8003300:	40021000 	.word	0x40021000
 8003304:	40010c00 	.word	0x40010c00
 8003308:	40010000 	.word	0x40010000

0800330c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800331c:	d113      	bne.n	8003346 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800331e:	4b0c      	ldr	r3, [pc, #48]	; (8003350 <HAL_TIM_Base_MspInit+0x44>)
 8003320:	69db      	ldr	r3, [r3, #28]
 8003322:	4a0b      	ldr	r2, [pc, #44]	; (8003350 <HAL_TIM_Base_MspInit+0x44>)
 8003324:	f043 0301 	orr.w	r3, r3, #1
 8003328:	61d3      	str	r3, [r2, #28]
 800332a:	4b09      	ldr	r3, [pc, #36]	; (8003350 <HAL_TIM_Base_MspInit+0x44>)
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	60fb      	str	r3, [r7, #12]
 8003334:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003336:	2200      	movs	r2, #0
 8003338:	2100      	movs	r1, #0
 800333a:	201c      	movs	r0, #28
 800333c:	f001 f82d 	bl	800439a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003340:	201c      	movs	r0, #28
 8003342:	f001 f846 	bl	80043d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003346:	bf00      	nop
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	40021000 	.word	0x40021000

08003354 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003358:	e7fe      	b.n	8003358 <NMI_Handler+0x4>

0800335a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800335a:	b480      	push	{r7}
 800335c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800335e:	e7fe      	b.n	800335e <HardFault_Handler+0x4>

08003360 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003364:	e7fe      	b.n	8003364 <MemManage_Handler+0x4>

08003366 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003366:	b480      	push	{r7}
 8003368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800336a:	e7fe      	b.n	800336a <BusFault_Handler+0x4>

0800336c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003370:	e7fe      	b.n	8003370 <UsageFault_Handler+0x4>

08003372 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003372:	b480      	push	{r7}
 8003374:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003376:	bf00      	nop
 8003378:	46bd      	mov	sp, r7
 800337a:	bc80      	pop	{r7}
 800337c:	4770      	bx	lr

0800337e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800337e:	b480      	push	{r7}
 8003380:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003382:	bf00      	nop
 8003384:	46bd      	mov	sp, r7
 8003386:	bc80      	pop	{r7}
 8003388:	4770      	bx	lr

0800338a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800338a:	b480      	push	{r7}
 800338c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800338e:	bf00      	nop
 8003390:	46bd      	mov	sp, r7
 8003392:	bc80      	pop	{r7}
 8003394:	4770      	bx	lr

08003396 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800339a:	f000 f891 	bl	80034c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800339e:	bf00      	nop
 80033a0:	bd80      	pop	{r7, pc}
	...

080033a4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80033a8:	4802      	ldr	r0, [pc, #8]	; (80033b4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80033aa:	f000 fce6 	bl	8003d7a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80033ae:	bf00      	nop
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	20001040 	.word	0x20001040

080033b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80033bc:	4802      	ldr	r0, [pc, #8]	; (80033c8 <TIM2_IRQHandler+0x10>)
 80033be:	f002 ff03 	bl	80061c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80033c2:	bf00      	nop
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	200010bc 	.word	0x200010bc

080033cc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(speed_sensor_Pin);
 80033d0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80033d4:	f001 f9e8 	bl	80047a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80033d8:	bf00      	nop
 80033da:	bd80      	pop	{r7, pc}

080033dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033e0:	bf00      	nop
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bc80      	pop	{r7}
 80033e6:	4770      	bx	lr

080033e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80033e8:	f7ff fff8 	bl	80033dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80033ec:	480b      	ldr	r0, [pc, #44]	; (800341c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80033ee:	490c      	ldr	r1, [pc, #48]	; (8003420 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80033f0:	4a0c      	ldr	r2, [pc, #48]	; (8003424 <LoopFillZerobss+0x16>)
  movs r3, #0
 80033f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033f4:	e002      	b.n	80033fc <LoopCopyDataInit>

080033f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033fa:	3304      	adds	r3, #4

080033fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003400:	d3f9      	bcc.n	80033f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003402:	4a09      	ldr	r2, [pc, #36]	; (8003428 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003404:	4c09      	ldr	r4, [pc, #36]	; (800342c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003406:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003408:	e001      	b.n	800340e <LoopFillZerobss>

0800340a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800340a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800340c:	3204      	adds	r2, #4

0800340e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800340e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003410:	d3fb      	bcc.n	800340a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003412:	f003 fa3d 	bl	8006890 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003416:	f7ff fba7 	bl	8002b68 <main>
  bx lr
 800341a:	4770      	bx	lr
  ldr r0, =_sdata
 800341c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003420:	200007d8 	.word	0x200007d8
  ldr r2, =_sidata
 8003424:	080086d8 	.word	0x080086d8
  ldr r2, =_sbss
 8003428:	200007d8 	.word	0x200007d8
  ldr r4, =_ebss
 800342c:	20001180 	.word	0x20001180

08003430 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003430:	e7fe      	b.n	8003430 <ADC1_2_IRQHandler>
	...

08003434 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003438:	4b08      	ldr	r3, [pc, #32]	; (800345c <HAL_Init+0x28>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a07      	ldr	r2, [pc, #28]	; (800345c <HAL_Init+0x28>)
 800343e:	f043 0310 	orr.w	r3, r3, #16
 8003442:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003444:	2003      	movs	r0, #3
 8003446:	f000 ff9d 	bl	8004384 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800344a:	200f      	movs	r0, #15
 800344c:	f000 f808 	bl	8003460 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003450:	f7ff fe86 	bl	8003160 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	40022000 	.word	0x40022000

08003460 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003468:	4b12      	ldr	r3, [pc, #72]	; (80034b4 <HAL_InitTick+0x54>)
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	4b12      	ldr	r3, [pc, #72]	; (80034b8 <HAL_InitTick+0x58>)
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	4619      	mov	r1, r3
 8003472:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003476:	fbb3 f3f1 	udiv	r3, r3, r1
 800347a:	fbb2 f3f3 	udiv	r3, r2, r3
 800347e:	4618      	mov	r0, r3
 8003480:	f000 ffb9 	bl	80043f6 <HAL_SYSTICK_Config>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e00e      	b.n	80034ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b0f      	cmp	r3, #15
 8003492:	d80a      	bhi.n	80034aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003494:	2200      	movs	r2, #0
 8003496:	6879      	ldr	r1, [r7, #4]
 8003498:	f04f 30ff 	mov.w	r0, #4294967295
 800349c:	f000 ff7d 	bl	800439a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034a0:	4a06      	ldr	r2, [pc, #24]	; (80034bc <HAL_InitTick+0x5c>)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
 80034a8:	e000      	b.n	80034ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3708      	adds	r7, #8
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	200007cc 	.word	0x200007cc
 80034b8:	200007d4 	.word	0x200007d4
 80034bc:	200007d0 	.word	0x200007d0

080034c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034c4:	4b05      	ldr	r3, [pc, #20]	; (80034dc <HAL_IncTick+0x1c>)
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	461a      	mov	r2, r3
 80034ca:	4b05      	ldr	r3, [pc, #20]	; (80034e0 <HAL_IncTick+0x20>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4413      	add	r3, r2
 80034d0:	4a03      	ldr	r2, [pc, #12]	; (80034e0 <HAL_IncTick+0x20>)
 80034d2:	6013      	str	r3, [r2, #0]
}
 80034d4:	bf00      	nop
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bc80      	pop	{r7}
 80034da:	4770      	bx	lr
 80034dc:	200007d4 	.word	0x200007d4
 80034e0:	2000117c 	.word	0x2000117c

080034e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
  return uwTick;
 80034e8:	4b02      	ldr	r3, [pc, #8]	; (80034f4 <HAL_GetTick+0x10>)
 80034ea:	681b      	ldr	r3, [r3, #0]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bc80      	pop	{r7}
 80034f2:	4770      	bx	lr
 80034f4:	2000117c 	.word	0x2000117c

080034f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003500:	f7ff fff0 	bl	80034e4 <HAL_GetTick>
 8003504:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003510:	d005      	beq.n	800351e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003512:	4b0a      	ldr	r3, [pc, #40]	; (800353c <HAL_Delay+0x44>)
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	461a      	mov	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	4413      	add	r3, r2
 800351c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800351e:	bf00      	nop
 8003520:	f7ff ffe0 	bl	80034e4 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	429a      	cmp	r2, r3
 800352e:	d8f7      	bhi.n	8003520 <HAL_Delay+0x28>
  {
  }
}
 8003530:	bf00      	nop
 8003532:	bf00      	nop
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	200007d4 	.word	0x200007d4

08003540 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e0ed      	b.n	800372e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d102      	bne.n	8003564 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f7ff fe30 	bl	80031c4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f042 0201 	orr.w	r2, r2, #1
 8003572:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003574:	f7ff ffb6 	bl	80034e4 <HAL_GetTick>
 8003578:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800357a:	e012      	b.n	80035a2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800357c:	f7ff ffb2 	bl	80034e4 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b0a      	cmp	r3, #10
 8003588:	d90b      	bls.n	80035a2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2205      	movs	r2, #5
 800359a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e0c5      	b.n	800372e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d0e5      	beq.n	800357c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 0202 	bic.w	r2, r2, #2
 80035be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035c0:	f7ff ff90 	bl	80034e4 <HAL_GetTick>
 80035c4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80035c6:	e012      	b.n	80035ee <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80035c8:	f7ff ff8c 	bl	80034e4 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b0a      	cmp	r3, #10
 80035d4:	d90b      	bls.n	80035ee <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035da:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2205      	movs	r2, #5
 80035e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e09f      	b.n	800372e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1e5      	bne.n	80035c8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	7e1b      	ldrb	r3, [r3, #24]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d108      	bne.n	8003616 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	e007      	b.n	8003626 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003624:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	7e5b      	ldrb	r3, [r3, #25]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d108      	bne.n	8003640 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	e007      	b.n	8003650 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800364e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	7e9b      	ldrb	r3, [r3, #26]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d108      	bne.n	800366a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f042 0220 	orr.w	r2, r2, #32
 8003666:	601a      	str	r2, [r3, #0]
 8003668:	e007      	b.n	800367a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 0220 	bic.w	r2, r2, #32
 8003678:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	7edb      	ldrb	r3, [r3, #27]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d108      	bne.n	8003694 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 0210 	bic.w	r2, r2, #16
 8003690:	601a      	str	r2, [r3, #0]
 8003692:	e007      	b.n	80036a4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f042 0210 	orr.w	r2, r2, #16
 80036a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	7f1b      	ldrb	r3, [r3, #28]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d108      	bne.n	80036be <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f042 0208 	orr.w	r2, r2, #8
 80036ba:	601a      	str	r2, [r3, #0]
 80036bc:	e007      	b.n	80036ce <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 0208 	bic.w	r2, r2, #8
 80036cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	7f5b      	ldrb	r3, [r3, #29]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d108      	bne.n	80036e8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f042 0204 	orr.w	r2, r2, #4
 80036e4:	601a      	str	r2, [r3, #0]
 80036e6:	e007      	b.n	80036f8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f022 0204 	bic.w	r2, r2, #4
 80036f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	431a      	orrs	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	431a      	orrs	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	ea42 0103 	orr.w	r1, r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	1e5a      	subs	r2, r3, #1
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	430a      	orrs	r2, r1
 800371c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003736:	b480      	push	{r7}
 8003738:	b087      	sub	sp, #28
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
 800373e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 3020 	ldrb.w	r3, [r3, #32]
 800374c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800374e:	7cfb      	ldrb	r3, [r7, #19]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d003      	beq.n	800375c <HAL_CAN_ConfigFilter+0x26>
 8003754:	7cfb      	ldrb	r3, [r7, #19]
 8003756:	2b02      	cmp	r3, #2
 8003758:	f040 80aa 	bne.w	80038b0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003762:	f043 0201 	orr.w	r2, r3, #1
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	f003 031f 	and.w	r3, r3, #31
 8003774:	2201      	movs	r2, #1
 8003776:	fa02 f303 	lsl.w	r3, r2, r3
 800377a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	43db      	mvns	r3, r3
 8003786:	401a      	ands	r2, r3
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	69db      	ldr	r3, [r3, #28]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d123      	bne.n	80037de <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	43db      	mvns	r3, r3
 80037a0:	401a      	ands	r2, r3
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80037b8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	3248      	adds	r2, #72	; 0x48
 80037be:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80037d2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80037d4:	6979      	ldr	r1, [r7, #20]
 80037d6:	3348      	adds	r3, #72	; 0x48
 80037d8:	00db      	lsls	r3, r3, #3
 80037da:	440b      	add	r3, r1
 80037dc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	69db      	ldr	r3, [r3, #28]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d122      	bne.n	800382c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	431a      	orrs	r2, r3
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003806:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	3248      	adds	r2, #72	; 0x48
 800380c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003820:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003822:	6979      	ldr	r1, [r7, #20]
 8003824:	3348      	adds	r3, #72	; 0x48
 8003826:	00db      	lsls	r3, r3, #3
 8003828:	440b      	add	r3, r1
 800382a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d109      	bne.n	8003848 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	43db      	mvns	r3, r3
 800383e:	401a      	ands	r2, r3
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003846:	e007      	b.n	8003858 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	431a      	orrs	r2, r3
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d109      	bne.n	8003874 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	43db      	mvns	r3, r3
 800386a:	401a      	ands	r2, r3
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003872:	e007      	b.n	8003884 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	431a      	orrs	r2, r3
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	2b01      	cmp	r3, #1
 800388a:	d107      	bne.n	800389c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	431a      	orrs	r2, r3
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80038a2:	f023 0201 	bic.w	r2, r3, #1
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80038ac:	2300      	movs	r3, #0
 80038ae:	e006      	b.n	80038be <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
  }
}
 80038be:	4618      	mov	r0, r3
 80038c0:	371c      	adds	r7, #28
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bc80      	pop	{r7}
 80038c6:	4770      	bx	lr

080038c8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d12e      	bne.n	800393a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2202      	movs	r2, #2
 80038e0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f022 0201 	bic.w	r2, r2, #1
 80038f2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80038f4:	f7ff fdf6 	bl	80034e4 <HAL_GetTick>
 80038f8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80038fa:	e012      	b.n	8003922 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80038fc:	f7ff fdf2 	bl	80034e4 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b0a      	cmp	r3, #10
 8003908:	d90b      	bls.n	8003922 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2205      	movs	r2, #5
 800391a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e012      	b.n	8003948 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f003 0301 	and.w	r3, r3, #1
 800392c:	2b00      	cmp	r3, #0
 800392e:	d1e5      	bne.n	80038fc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003936:	2300      	movs	r3, #0
 8003938:	e006      	b.n	8003948 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
  }
}
 8003948:	4618      	mov	r0, r3
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003950:	b480      	push	{r7}
 8003952:	b089      	sub	sp, #36	; 0x24
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
 800395c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003964:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800396e:	7ffb      	ldrb	r3, [r7, #31]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d003      	beq.n	800397c <HAL_CAN_AddTxMessage+0x2c>
 8003974:	7ffb      	ldrb	r3, [r7, #31]
 8003976:	2b02      	cmp	r3, #2
 8003978:	f040 80ad 	bne.w	8003ad6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10a      	bne.n	800399c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800398c:	2b00      	cmp	r3, #0
 800398e:	d105      	bne.n	800399c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003996:	2b00      	cmp	r3, #0
 8003998:	f000 8095 	beq.w	8003ac6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	0e1b      	lsrs	r3, r3, #24
 80039a0:	f003 0303 	and.w	r3, r3, #3
 80039a4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80039a6:	2201      	movs	r2, #1
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	409a      	lsls	r2, r3
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10d      	bne.n	80039d4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80039c2:	68f9      	ldr	r1, [r7, #12]
 80039c4:	6809      	ldr	r1, [r1, #0]
 80039c6:	431a      	orrs	r2, r3
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	3318      	adds	r3, #24
 80039cc:	011b      	lsls	r3, r3, #4
 80039ce:	440b      	add	r3, r1
 80039d0:	601a      	str	r2, [r3, #0]
 80039d2:	e00f      	b.n	80039f4 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80039de:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80039e4:	68f9      	ldr	r1, [r7, #12]
 80039e6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80039e8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	3318      	adds	r3, #24
 80039ee:	011b      	lsls	r3, r3, #4
 80039f0:	440b      	add	r3, r1
 80039f2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6819      	ldr	r1, [r3, #0]
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	691a      	ldr	r2, [r3, #16]
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	3318      	adds	r3, #24
 8003a00:	011b      	lsls	r3, r3, #4
 8003a02:	440b      	add	r3, r1
 8003a04:	3304      	adds	r3, #4
 8003a06:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	7d1b      	ldrb	r3, [r3, #20]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d111      	bne.n	8003a34 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	3318      	adds	r3, #24
 8003a18:	011b      	lsls	r3, r3, #4
 8003a1a:	4413      	add	r3, r2
 8003a1c:	3304      	adds	r3, #4
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	6811      	ldr	r1, [r2, #0]
 8003a24:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	3318      	adds	r3, #24
 8003a2c:	011b      	lsls	r3, r3, #4
 8003a2e:	440b      	add	r3, r1
 8003a30:	3304      	adds	r3, #4
 8003a32:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	3307      	adds	r3, #7
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	061a      	lsls	r2, r3, #24
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	3306      	adds	r3, #6
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	041b      	lsls	r3, r3, #16
 8003a44:	431a      	orrs	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	3305      	adds	r3, #5
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	021b      	lsls	r3, r3, #8
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	3204      	adds	r2, #4
 8003a54:	7812      	ldrb	r2, [r2, #0]
 8003a56:	4610      	mov	r0, r2
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	6811      	ldr	r1, [r2, #0]
 8003a5c:	ea43 0200 	orr.w	r2, r3, r0
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	011b      	lsls	r3, r3, #4
 8003a64:	440b      	add	r3, r1
 8003a66:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003a6a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3303      	adds	r3, #3
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	061a      	lsls	r2, r3, #24
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	3302      	adds	r3, #2
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	041b      	lsls	r3, r3, #16
 8003a7c:	431a      	orrs	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	3301      	adds	r3, #1
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	021b      	lsls	r3, r3, #8
 8003a86:	4313      	orrs	r3, r2
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	7812      	ldrb	r2, [r2, #0]
 8003a8c:	4610      	mov	r0, r2
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	6811      	ldr	r1, [r2, #0]
 8003a92:	ea43 0200 	orr.w	r2, r3, r0
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	011b      	lsls	r3, r3, #4
 8003a9a:	440b      	add	r3, r1
 8003a9c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003aa0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	3318      	adds	r3, #24
 8003aaa:	011b      	lsls	r3, r3, #4
 8003aac:	4413      	add	r3, r2
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	6811      	ldr	r1, [r2, #0]
 8003ab4:	f043 0201 	orr.w	r2, r3, #1
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	3318      	adds	r3, #24
 8003abc:	011b      	lsls	r3, r3, #4
 8003abe:	440b      	add	r3, r1
 8003ac0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	e00e      	b.n	8003ae4 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e006      	b.n	8003ae4 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ada:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
  }
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3724      	adds	r7, #36	; 0x24
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bc80      	pop	{r7}
 8003aec:	4770      	bx	lr

08003aee <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003aee:	b480      	push	{r7}
 8003af0:	b087      	sub	sp, #28
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	60f8      	str	r0, [r7, #12]
 8003af6:	60b9      	str	r1, [r7, #8]
 8003af8:	607a      	str	r2, [r7, #4]
 8003afa:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b02:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003b04:	7dfb      	ldrb	r3, [r7, #23]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d003      	beq.n	8003b12 <HAL_CAN_GetRxMessage+0x24>
 8003b0a:	7dfb      	ldrb	r3, [r7, #23]
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	f040 8103 	bne.w	8003d18 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10e      	bne.n	8003b36 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	f003 0303 	and.w	r3, r3, #3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d116      	bne.n	8003b54 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e0f7      	b.n	8003d26 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	f003 0303 	and.w	r3, r3, #3
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d107      	bne.n	8003b54 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b48:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e0e8      	b.n	8003d26 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	331b      	adds	r3, #27
 8003b5c:	011b      	lsls	r3, r3, #4
 8003b5e:	4413      	add	r3, r2
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0204 	and.w	r2, r3, #4
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10c      	bne.n	8003b8c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	331b      	adds	r3, #27
 8003b7a:	011b      	lsls	r3, r3, #4
 8003b7c:	4413      	add	r3, r2
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	0d5b      	lsrs	r3, r3, #21
 8003b82:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	601a      	str	r2, [r3, #0]
 8003b8a:	e00b      	b.n	8003ba4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	331b      	adds	r3, #27
 8003b94:	011b      	lsls	r3, r3, #4
 8003b96:	4413      	add	r3, r2
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	08db      	lsrs	r3, r3, #3
 8003b9c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	331b      	adds	r3, #27
 8003bac:	011b      	lsls	r3, r3, #4
 8003bae:	4413      	add	r3, r2
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0202 	and.w	r2, r3, #2
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	331b      	adds	r3, #27
 8003bc2:	011b      	lsls	r3, r3, #4
 8003bc4:	4413      	add	r3, r2
 8003bc6:	3304      	adds	r3, #4
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0308 	and.w	r3, r3, #8
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d003      	beq.n	8003bda <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2208      	movs	r2, #8
 8003bd6:	611a      	str	r2, [r3, #16]
 8003bd8:	e00b      	b.n	8003bf2 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	331b      	adds	r3, #27
 8003be2:	011b      	lsls	r3, r3, #4
 8003be4:	4413      	add	r3, r2
 8003be6:	3304      	adds	r3, #4
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 020f 	and.w	r2, r3, #15
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	331b      	adds	r3, #27
 8003bfa:	011b      	lsls	r3, r3, #4
 8003bfc:	4413      	add	r3, r2
 8003bfe:	3304      	adds	r3, #4
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	0a1b      	lsrs	r3, r3, #8
 8003c04:	b2da      	uxtb	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	331b      	adds	r3, #27
 8003c12:	011b      	lsls	r3, r3, #4
 8003c14:	4413      	add	r3, r2
 8003c16:	3304      	adds	r3, #4
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	0c1b      	lsrs	r3, r3, #16
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	011b      	lsls	r3, r3, #4
 8003c2a:	4413      	add	r3, r2
 8003c2c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	b2da      	uxtb	r2, r3
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	011b      	lsls	r3, r3, #4
 8003c40:	4413      	add	r3, r2
 8003c42:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	0a1a      	lsrs	r2, r3, #8
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	011b      	lsls	r3, r3, #4
 8003c5a:	4413      	add	r3, r2
 8003c5c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	0c1a      	lsrs	r2, r3, #16
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	3302      	adds	r3, #2
 8003c68:	b2d2      	uxtb	r2, r2
 8003c6a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	011b      	lsls	r3, r3, #4
 8003c74:	4413      	add	r3, r2
 8003c76:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	0e1a      	lsrs	r2, r3, #24
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	3303      	adds	r3, #3
 8003c82:	b2d2      	uxtb	r2, r2
 8003c84:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	011b      	lsls	r3, r3, #4
 8003c8e:	4413      	add	r3, r2
 8003c90:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	3304      	adds	r3, #4
 8003c9a:	b2d2      	uxtb	r2, r2
 8003c9c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	011b      	lsls	r3, r3, #4
 8003ca6:	4413      	add	r3, r2
 8003ca8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	0a1a      	lsrs	r2, r3, #8
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	3305      	adds	r3, #5
 8003cb4:	b2d2      	uxtb	r2, r2
 8003cb6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	011b      	lsls	r3, r3, #4
 8003cc0:	4413      	add	r3, r2
 8003cc2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	0c1a      	lsrs	r2, r3, #16
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	3306      	adds	r3, #6
 8003cce:	b2d2      	uxtb	r2, r2
 8003cd0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	011b      	lsls	r3, r3, #4
 8003cda:	4413      	add	r3, r2
 8003cdc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	0e1a      	lsrs	r2, r3, #24
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	3307      	adds	r3, #7
 8003ce8:	b2d2      	uxtb	r2, r2
 8003cea:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d108      	bne.n	8003d04 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68da      	ldr	r2, [r3, #12]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f042 0220 	orr.w	r2, r2, #32
 8003d00:	60da      	str	r2, [r3, #12]
 8003d02:	e007      	b.n	8003d14 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	691a      	ldr	r2, [r3, #16]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f042 0220 	orr.w	r2, r2, #32
 8003d12:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003d14:	2300      	movs	r3, #0
 8003d16:	e006      	b.n	8003d26 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
  }
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	371c      	adds	r7, #28
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bc80      	pop	{r7}
 8003d2e:	4770      	bx	lr

08003d30 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d40:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003d42:	7bfb      	ldrb	r3, [r7, #15]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d002      	beq.n	8003d4e <HAL_CAN_ActivateNotification+0x1e>
 8003d48:	7bfb      	ldrb	r3, [r7, #15]
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d109      	bne.n	8003d62 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	6959      	ldr	r1, [r3, #20]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	e006      	b.n	8003d70 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d66:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
  }
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bc80      	pop	{r7}
 8003d78:	4770      	bx	lr

08003d7a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b08a      	sub	sp, #40	; 0x28
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003d82:	2300      	movs	r3, #0
 8003d84:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003db6:	6a3b      	ldr	r3, [r7, #32]
 8003db8:	f003 0301 	and.w	r3, r3, #1
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d07c      	beq.n	8003eba <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d023      	beq.n	8003e12 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d003      	beq.n	8003de4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 f983 	bl	80040e8 <HAL_CAN_TxMailbox0CompleteCallback>
 8003de2:	e016      	b.n	8003e12 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	f003 0304 	and.w	r3, r3, #4
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d004      	beq.n	8003df8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003df4:	627b      	str	r3, [r7, #36]	; 0x24
 8003df6:	e00c      	b.n	8003e12 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	f003 0308 	and.w	r3, r3, #8
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d004      	beq.n	8003e0c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e08:	627b      	str	r3, [r7, #36]	; 0x24
 8003e0a:	e002      	b.n	8003e12 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 f986 	bl	800411e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d024      	beq.n	8003e66 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e24:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d003      	beq.n	8003e38 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 f962 	bl	80040fa <HAL_CAN_TxMailbox1CompleteCallback>
 8003e36:	e016      	b.n	8003e66 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d004      	beq.n	8003e4c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003e48:	627b      	str	r3, [r7, #36]	; 0x24
 8003e4a:	e00c      	b.n	8003e66 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d004      	beq.n	8003e60 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e5e:	e002      	b.n	8003e66 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 f965 	bl	8004130 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d024      	beq.n	8003eba <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003e78:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d003      	beq.n	8003e8c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 f941 	bl	800410c <HAL_CAN_TxMailbox2CompleteCallback>
 8003e8a:	e016      	b.n	8003eba <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d004      	beq.n	8003ea0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e9e:	e00c      	b.n	8003eba <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d004      	beq.n	8003eb4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8003eb2:	e002      	b.n	8003eba <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 f944 	bl	8004142 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003eba:	6a3b      	ldr	r3, [r7, #32]
 8003ebc:	f003 0308 	and.w	r3, r3, #8
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00c      	beq.n	8003ede <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	f003 0310 	and.w	r3, r3, #16
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d007      	beq.n	8003ede <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ed4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2210      	movs	r2, #16
 8003edc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003ede:	6a3b      	ldr	r3, [r7, #32]
 8003ee0:	f003 0304 	and.w	r3, r3, #4
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d00b      	beq.n	8003f00 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	f003 0308 	and.w	r3, r3, #8
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d006      	beq.n	8003f00 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2208      	movs	r2, #8
 8003ef8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f92a 	bl	8004154 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003f00:	6a3b      	ldr	r3, [r7, #32]
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d009      	beq.n	8003f1e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	f003 0303 	and.w	r3, r3, #3
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d002      	beq.n	8003f1e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f7fe fb0d 	bl	8002538 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003f1e:	6a3b      	ldr	r3, [r7, #32]
 8003f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00c      	beq.n	8003f42 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	f003 0310 	and.w	r3, r3, #16
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d007      	beq.n	8003f42 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f38:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2210      	movs	r2, #16
 8003f40:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003f42:	6a3b      	ldr	r3, [r7, #32]
 8003f44:	f003 0320 	and.w	r3, r3, #32
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00b      	beq.n	8003f64 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	f003 0308 	and.w	r3, r3, #8
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d006      	beq.n	8003f64 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2208      	movs	r2, #8
 8003f5c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f90a 	bl	8004178 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003f64:	6a3b      	ldr	r3, [r7, #32]
 8003f66:	f003 0310 	and.w	r3, r3, #16
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d009      	beq.n	8003f82 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	f003 0303 	and.w	r3, r3, #3
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d002      	beq.n	8003f82 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 f8f2 	bl	8004166 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003f82:	6a3b      	ldr	r3, [r7, #32]
 8003f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00b      	beq.n	8003fa4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	f003 0310 	and.w	r3, r3, #16
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d006      	beq.n	8003fa4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2210      	movs	r2, #16
 8003f9c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f8f3 	bl	800418a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003fa4:	6a3b      	ldr	r3, [r7, #32]
 8003fa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00b      	beq.n	8003fc6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	f003 0308 	and.w	r3, r3, #8
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d006      	beq.n	8003fc6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2208      	movs	r2, #8
 8003fbe:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 f8eb 	bl	800419c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003fc6:	6a3b      	ldr	r3, [r7, #32]
 8003fc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d07b      	beq.n	80040c8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	f003 0304 	and.w	r3, r3, #4
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d072      	beq.n	80040c0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003fda:	6a3b      	ldr	r3, [r7, #32]
 8003fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d008      	beq.n	8003ff6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d003      	beq.n	8003ff6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff0:	f043 0301 	orr.w	r3, r3, #1
 8003ff4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003ff6:	6a3b      	ldr	r3, [r7, #32]
 8003ff8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d008      	beq.n	8004012 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004006:	2b00      	cmp	r3, #0
 8004008:	d003      	beq.n	8004012 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400c:	f043 0302 	orr.w	r3, r3, #2
 8004010:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004012:	6a3b      	ldr	r3, [r7, #32]
 8004014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004018:	2b00      	cmp	r3, #0
 800401a:	d008      	beq.n	800402e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004022:	2b00      	cmp	r3, #0
 8004024:	d003      	beq.n	800402e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004028:	f043 0304 	orr.w	r3, r3, #4
 800402c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800402e:	6a3b      	ldr	r3, [r7, #32]
 8004030:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004034:	2b00      	cmp	r3, #0
 8004036:	d043      	beq.n	80040c0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800403e:	2b00      	cmp	r3, #0
 8004040:	d03e      	beq.n	80040c0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004048:	2b60      	cmp	r3, #96	; 0x60
 800404a:	d02b      	beq.n	80040a4 <HAL_CAN_IRQHandler+0x32a>
 800404c:	2b60      	cmp	r3, #96	; 0x60
 800404e:	d82e      	bhi.n	80040ae <HAL_CAN_IRQHandler+0x334>
 8004050:	2b50      	cmp	r3, #80	; 0x50
 8004052:	d022      	beq.n	800409a <HAL_CAN_IRQHandler+0x320>
 8004054:	2b50      	cmp	r3, #80	; 0x50
 8004056:	d82a      	bhi.n	80040ae <HAL_CAN_IRQHandler+0x334>
 8004058:	2b40      	cmp	r3, #64	; 0x40
 800405a:	d019      	beq.n	8004090 <HAL_CAN_IRQHandler+0x316>
 800405c:	2b40      	cmp	r3, #64	; 0x40
 800405e:	d826      	bhi.n	80040ae <HAL_CAN_IRQHandler+0x334>
 8004060:	2b30      	cmp	r3, #48	; 0x30
 8004062:	d010      	beq.n	8004086 <HAL_CAN_IRQHandler+0x30c>
 8004064:	2b30      	cmp	r3, #48	; 0x30
 8004066:	d822      	bhi.n	80040ae <HAL_CAN_IRQHandler+0x334>
 8004068:	2b10      	cmp	r3, #16
 800406a:	d002      	beq.n	8004072 <HAL_CAN_IRQHandler+0x2f8>
 800406c:	2b20      	cmp	r3, #32
 800406e:	d005      	beq.n	800407c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004070:	e01d      	b.n	80040ae <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004074:	f043 0308 	orr.w	r3, r3, #8
 8004078:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800407a:	e019      	b.n	80040b0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800407c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407e:	f043 0310 	orr.w	r3, r3, #16
 8004082:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004084:	e014      	b.n	80040b0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004088:	f043 0320 	orr.w	r3, r3, #32
 800408c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800408e:	e00f      	b.n	80040b0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004092:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004096:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004098:	e00a      	b.n	80040b0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040a0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040a2:	e005      	b.n	80040b0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80040a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040aa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040ac:	e000      	b.n	80040b0 <HAL_CAN_IRQHandler+0x336>
            break;
 80040ae:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	699a      	ldr	r2, [r3, #24]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80040be:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2204      	movs	r2, #4
 80040c6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80040c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d008      	beq.n	80040e0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d4:	431a      	orrs	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 f867 	bl	80041ae <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80040e0:	bf00      	nop
 80040e2:	3728      	adds	r7, #40	; 0x28
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80040f0:	bf00      	nop
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bc80      	pop	{r7}
 80040f8:	4770      	bx	lr

080040fa <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80040fa:	b480      	push	{r7}
 80040fc:	b083      	sub	sp, #12
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004102:	bf00      	nop
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	bc80      	pop	{r7}
 800410a:	4770      	bx	lr

0800410c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	bc80      	pop	{r7}
 800411c:	4770      	bx	lr

0800411e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800411e:	b480      	push	{r7}
 8004120:	b083      	sub	sp, #12
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004126:	bf00      	nop
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	bc80      	pop	{r7}
 800412e:	4770      	bx	lr

08004130 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	bc80      	pop	{r7}
 8004140:	4770      	bx	lr

08004142 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004142:	b480      	push	{r7}
 8004144:	b083      	sub	sp, #12
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800414a:	bf00      	nop
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	bc80      	pop	{r7}
 8004152:	4770      	bx	lr

08004154 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	bc80      	pop	{r7}
 8004164:	4770      	bx	lr

08004166 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004166:	b480      	push	{r7}
 8004168:	b083      	sub	sp, #12
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800416e:	bf00      	nop
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	bc80      	pop	{r7}
 8004176:	4770      	bx	lr

08004178 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	bc80      	pop	{r7}
 8004188:	4770      	bx	lr

0800418a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800418a:	b480      	push	{r7}
 800418c:	b083      	sub	sp, #12
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004192:	bf00      	nop
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	bc80      	pop	{r7}
 800419a:	4770      	bx	lr

0800419c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bc80      	pop	{r7}
 80041ac:	4770      	bx	lr

080041ae <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80041ae:	b480      	push	{r7}
 80041b0:	b083      	sub	sp, #12
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80041b6:	bf00      	nop
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bc80      	pop	{r7}
 80041be:	4770      	bx	lr

080041c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f003 0307 	and.w	r3, r3, #7
 80041ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041d0:	4b0c      	ldr	r3, [pc, #48]	; (8004204 <__NVIC_SetPriorityGrouping+0x44>)
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041d6:	68ba      	ldr	r2, [r7, #8]
 80041d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041dc:	4013      	ands	r3, r2
 80041de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80041ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041f2:	4a04      	ldr	r2, [pc, #16]	; (8004204 <__NVIC_SetPriorityGrouping+0x44>)
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	60d3      	str	r3, [r2, #12]
}
 80041f8:	bf00      	nop
 80041fa:	3714      	adds	r7, #20
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bc80      	pop	{r7}
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	e000ed00 	.word	0xe000ed00

08004208 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004208:	b480      	push	{r7}
 800420a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800420c:	4b04      	ldr	r3, [pc, #16]	; (8004220 <__NVIC_GetPriorityGrouping+0x18>)
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	0a1b      	lsrs	r3, r3, #8
 8004212:	f003 0307 	and.w	r3, r3, #7
}
 8004216:	4618      	mov	r0, r3
 8004218:	46bd      	mov	sp, r7
 800421a:	bc80      	pop	{r7}
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	e000ed00 	.word	0xe000ed00

08004224 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	4603      	mov	r3, r0
 800422c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800422e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004232:	2b00      	cmp	r3, #0
 8004234:	db0b      	blt.n	800424e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004236:	79fb      	ldrb	r3, [r7, #7]
 8004238:	f003 021f 	and.w	r2, r3, #31
 800423c:	4906      	ldr	r1, [pc, #24]	; (8004258 <__NVIC_EnableIRQ+0x34>)
 800423e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004242:	095b      	lsrs	r3, r3, #5
 8004244:	2001      	movs	r0, #1
 8004246:	fa00 f202 	lsl.w	r2, r0, r2
 800424a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800424e:	bf00      	nop
 8004250:	370c      	adds	r7, #12
 8004252:	46bd      	mov	sp, r7
 8004254:	bc80      	pop	{r7}
 8004256:	4770      	bx	lr
 8004258:	e000e100 	.word	0xe000e100

0800425c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	4603      	mov	r3, r0
 8004264:	6039      	str	r1, [r7, #0]
 8004266:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800426c:	2b00      	cmp	r3, #0
 800426e:	db0a      	blt.n	8004286 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	b2da      	uxtb	r2, r3
 8004274:	490c      	ldr	r1, [pc, #48]	; (80042a8 <__NVIC_SetPriority+0x4c>)
 8004276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800427a:	0112      	lsls	r2, r2, #4
 800427c:	b2d2      	uxtb	r2, r2
 800427e:	440b      	add	r3, r1
 8004280:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004284:	e00a      	b.n	800429c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	b2da      	uxtb	r2, r3
 800428a:	4908      	ldr	r1, [pc, #32]	; (80042ac <__NVIC_SetPriority+0x50>)
 800428c:	79fb      	ldrb	r3, [r7, #7]
 800428e:	f003 030f 	and.w	r3, r3, #15
 8004292:	3b04      	subs	r3, #4
 8004294:	0112      	lsls	r2, r2, #4
 8004296:	b2d2      	uxtb	r2, r2
 8004298:	440b      	add	r3, r1
 800429a:	761a      	strb	r2, [r3, #24]
}
 800429c:	bf00      	nop
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bc80      	pop	{r7}
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	e000e100 	.word	0xe000e100
 80042ac:	e000ed00 	.word	0xe000ed00

080042b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b089      	sub	sp, #36	; 0x24
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f003 0307 	and.w	r3, r3, #7
 80042c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	f1c3 0307 	rsb	r3, r3, #7
 80042ca:	2b04      	cmp	r3, #4
 80042cc:	bf28      	it	cs
 80042ce:	2304      	movcs	r3, #4
 80042d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	3304      	adds	r3, #4
 80042d6:	2b06      	cmp	r3, #6
 80042d8:	d902      	bls.n	80042e0 <NVIC_EncodePriority+0x30>
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	3b03      	subs	r3, #3
 80042de:	e000      	b.n	80042e2 <NVIC_EncodePriority+0x32>
 80042e0:	2300      	movs	r3, #0
 80042e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042e4:	f04f 32ff 	mov.w	r2, #4294967295
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	fa02 f303 	lsl.w	r3, r2, r3
 80042ee:	43da      	mvns	r2, r3
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	401a      	ands	r2, r3
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042f8:	f04f 31ff 	mov.w	r1, #4294967295
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004302:	43d9      	mvns	r1, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004308:	4313      	orrs	r3, r2
         );
}
 800430a:	4618      	mov	r0, r3
 800430c:	3724      	adds	r7, #36	; 0x24
 800430e:	46bd      	mov	sp, r7
 8004310:	bc80      	pop	{r7}
 8004312:	4770      	bx	lr

08004314 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004314:	b480      	push	{r7}
 8004316:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004318:	f3bf 8f4f 	dsb	sy
}
 800431c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800431e:	4b06      	ldr	r3, [pc, #24]	; (8004338 <__NVIC_SystemReset+0x24>)
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004326:	4904      	ldr	r1, [pc, #16]	; (8004338 <__NVIC_SystemReset+0x24>)
 8004328:	4b04      	ldr	r3, [pc, #16]	; (800433c <__NVIC_SystemReset+0x28>)
 800432a:	4313      	orrs	r3, r2
 800432c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800432e:	f3bf 8f4f 	dsb	sy
}
 8004332:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004334:	bf00      	nop
 8004336:	e7fd      	b.n	8004334 <__NVIC_SystemReset+0x20>
 8004338:	e000ed00 	.word	0xe000ed00
 800433c:	05fa0004 	.word	0x05fa0004

08004340 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	3b01      	subs	r3, #1
 800434c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004350:	d301      	bcc.n	8004356 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004352:	2301      	movs	r3, #1
 8004354:	e00f      	b.n	8004376 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004356:	4a0a      	ldr	r2, [pc, #40]	; (8004380 <SysTick_Config+0x40>)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	3b01      	subs	r3, #1
 800435c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800435e:	210f      	movs	r1, #15
 8004360:	f04f 30ff 	mov.w	r0, #4294967295
 8004364:	f7ff ff7a 	bl	800425c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004368:	4b05      	ldr	r3, [pc, #20]	; (8004380 <SysTick_Config+0x40>)
 800436a:	2200      	movs	r2, #0
 800436c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800436e:	4b04      	ldr	r3, [pc, #16]	; (8004380 <SysTick_Config+0x40>)
 8004370:	2207      	movs	r2, #7
 8004372:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	e000e010 	.word	0xe000e010

08004384 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f7ff ff17 	bl	80041c0 <__NVIC_SetPriorityGrouping>
}
 8004392:	bf00      	nop
 8004394:	3708      	adds	r7, #8
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800439a:	b580      	push	{r7, lr}
 800439c:	b086      	sub	sp, #24
 800439e:	af00      	add	r7, sp, #0
 80043a0:	4603      	mov	r3, r0
 80043a2:	60b9      	str	r1, [r7, #8]
 80043a4:	607a      	str	r2, [r7, #4]
 80043a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80043a8:	2300      	movs	r3, #0
 80043aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80043ac:	f7ff ff2c 	bl	8004208 <__NVIC_GetPriorityGrouping>
 80043b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	68b9      	ldr	r1, [r7, #8]
 80043b6:	6978      	ldr	r0, [r7, #20]
 80043b8:	f7ff ff7a 	bl	80042b0 <NVIC_EncodePriority>
 80043bc:	4602      	mov	r2, r0
 80043be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043c2:	4611      	mov	r1, r2
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7ff ff49 	bl	800425c <__NVIC_SetPriority>
}
 80043ca:	bf00      	nop
 80043cc:	3718      	adds	r7, #24
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b082      	sub	sp, #8
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	4603      	mov	r3, r0
 80043da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7ff ff1f 	bl	8004224 <__NVIC_EnableIRQ>
}
 80043e6:	bf00      	nop
 80043e8:	3708      	adds	r7, #8
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}

080043ee <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80043ee:	b580      	push	{r7, lr}
 80043f0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80043f2:	f7ff ff8f 	bl	8004314 <__NVIC_SystemReset>

080043f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b082      	sub	sp, #8
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f7ff ff9e 	bl	8004340 <SysTick_Config>
 8004404:	4603      	mov	r3, r0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
	...

08004410 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004410:	b480      	push	{r7}
 8004412:	b08b      	sub	sp, #44	; 0x2c
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800441a:	2300      	movs	r3, #0
 800441c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800441e:	2300      	movs	r3, #0
 8004420:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004422:	e169      	b.n	80046f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004424:	2201      	movs	r2, #1
 8004426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004428:	fa02 f303 	lsl.w	r3, r2, r3
 800442c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	69fa      	ldr	r2, [r7, #28]
 8004434:	4013      	ands	r3, r2
 8004436:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	429a      	cmp	r2, r3
 800443e:	f040 8158 	bne.w	80046f2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	4a9a      	ldr	r2, [pc, #616]	; (80046b0 <HAL_GPIO_Init+0x2a0>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d05e      	beq.n	800450a <HAL_GPIO_Init+0xfa>
 800444c:	4a98      	ldr	r2, [pc, #608]	; (80046b0 <HAL_GPIO_Init+0x2a0>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d875      	bhi.n	800453e <HAL_GPIO_Init+0x12e>
 8004452:	4a98      	ldr	r2, [pc, #608]	; (80046b4 <HAL_GPIO_Init+0x2a4>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d058      	beq.n	800450a <HAL_GPIO_Init+0xfa>
 8004458:	4a96      	ldr	r2, [pc, #600]	; (80046b4 <HAL_GPIO_Init+0x2a4>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d86f      	bhi.n	800453e <HAL_GPIO_Init+0x12e>
 800445e:	4a96      	ldr	r2, [pc, #600]	; (80046b8 <HAL_GPIO_Init+0x2a8>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d052      	beq.n	800450a <HAL_GPIO_Init+0xfa>
 8004464:	4a94      	ldr	r2, [pc, #592]	; (80046b8 <HAL_GPIO_Init+0x2a8>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d869      	bhi.n	800453e <HAL_GPIO_Init+0x12e>
 800446a:	4a94      	ldr	r2, [pc, #592]	; (80046bc <HAL_GPIO_Init+0x2ac>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d04c      	beq.n	800450a <HAL_GPIO_Init+0xfa>
 8004470:	4a92      	ldr	r2, [pc, #584]	; (80046bc <HAL_GPIO_Init+0x2ac>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d863      	bhi.n	800453e <HAL_GPIO_Init+0x12e>
 8004476:	4a92      	ldr	r2, [pc, #584]	; (80046c0 <HAL_GPIO_Init+0x2b0>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d046      	beq.n	800450a <HAL_GPIO_Init+0xfa>
 800447c:	4a90      	ldr	r2, [pc, #576]	; (80046c0 <HAL_GPIO_Init+0x2b0>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d85d      	bhi.n	800453e <HAL_GPIO_Init+0x12e>
 8004482:	2b12      	cmp	r3, #18
 8004484:	d82a      	bhi.n	80044dc <HAL_GPIO_Init+0xcc>
 8004486:	2b12      	cmp	r3, #18
 8004488:	d859      	bhi.n	800453e <HAL_GPIO_Init+0x12e>
 800448a:	a201      	add	r2, pc, #4	; (adr r2, 8004490 <HAL_GPIO_Init+0x80>)
 800448c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004490:	0800450b 	.word	0x0800450b
 8004494:	080044e5 	.word	0x080044e5
 8004498:	080044f7 	.word	0x080044f7
 800449c:	08004539 	.word	0x08004539
 80044a0:	0800453f 	.word	0x0800453f
 80044a4:	0800453f 	.word	0x0800453f
 80044a8:	0800453f 	.word	0x0800453f
 80044ac:	0800453f 	.word	0x0800453f
 80044b0:	0800453f 	.word	0x0800453f
 80044b4:	0800453f 	.word	0x0800453f
 80044b8:	0800453f 	.word	0x0800453f
 80044bc:	0800453f 	.word	0x0800453f
 80044c0:	0800453f 	.word	0x0800453f
 80044c4:	0800453f 	.word	0x0800453f
 80044c8:	0800453f 	.word	0x0800453f
 80044cc:	0800453f 	.word	0x0800453f
 80044d0:	0800453f 	.word	0x0800453f
 80044d4:	080044ed 	.word	0x080044ed
 80044d8:	08004501 	.word	0x08004501
 80044dc:	4a79      	ldr	r2, [pc, #484]	; (80046c4 <HAL_GPIO_Init+0x2b4>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d013      	beq.n	800450a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80044e2:	e02c      	b.n	800453e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	623b      	str	r3, [r7, #32]
          break;
 80044ea:	e029      	b.n	8004540 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	3304      	adds	r3, #4
 80044f2:	623b      	str	r3, [r7, #32]
          break;
 80044f4:	e024      	b.n	8004540 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	3308      	adds	r3, #8
 80044fc:	623b      	str	r3, [r7, #32]
          break;
 80044fe:	e01f      	b.n	8004540 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	330c      	adds	r3, #12
 8004506:	623b      	str	r3, [r7, #32]
          break;
 8004508:	e01a      	b.n	8004540 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d102      	bne.n	8004518 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004512:	2304      	movs	r3, #4
 8004514:	623b      	str	r3, [r7, #32]
          break;
 8004516:	e013      	b.n	8004540 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d105      	bne.n	800452c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004520:	2308      	movs	r3, #8
 8004522:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	69fa      	ldr	r2, [r7, #28]
 8004528:	611a      	str	r2, [r3, #16]
          break;
 800452a:	e009      	b.n	8004540 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800452c:	2308      	movs	r3, #8
 800452e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	69fa      	ldr	r2, [r7, #28]
 8004534:	615a      	str	r2, [r3, #20]
          break;
 8004536:	e003      	b.n	8004540 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004538:	2300      	movs	r3, #0
 800453a:	623b      	str	r3, [r7, #32]
          break;
 800453c:	e000      	b.n	8004540 <HAL_GPIO_Init+0x130>
          break;
 800453e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	2bff      	cmp	r3, #255	; 0xff
 8004544:	d801      	bhi.n	800454a <HAL_GPIO_Init+0x13a>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	e001      	b.n	800454e <HAL_GPIO_Init+0x13e>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	3304      	adds	r3, #4
 800454e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	2bff      	cmp	r3, #255	; 0xff
 8004554:	d802      	bhi.n	800455c <HAL_GPIO_Init+0x14c>
 8004556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	e002      	b.n	8004562 <HAL_GPIO_Init+0x152>
 800455c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455e:	3b08      	subs	r3, #8
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	210f      	movs	r1, #15
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	fa01 f303 	lsl.w	r3, r1, r3
 8004570:	43db      	mvns	r3, r3
 8004572:	401a      	ands	r2, r3
 8004574:	6a39      	ldr	r1, [r7, #32]
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	fa01 f303 	lsl.w	r3, r1, r3
 800457c:	431a      	orrs	r2, r3
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800458a:	2b00      	cmp	r3, #0
 800458c:	f000 80b1 	beq.w	80046f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004590:	4b4d      	ldr	r3, [pc, #308]	; (80046c8 <HAL_GPIO_Init+0x2b8>)
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	4a4c      	ldr	r2, [pc, #304]	; (80046c8 <HAL_GPIO_Init+0x2b8>)
 8004596:	f043 0301 	orr.w	r3, r3, #1
 800459a:	6193      	str	r3, [r2, #24]
 800459c:	4b4a      	ldr	r3, [pc, #296]	; (80046c8 <HAL_GPIO_Init+0x2b8>)
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	f003 0301 	and.w	r3, r3, #1
 80045a4:	60bb      	str	r3, [r7, #8]
 80045a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80045a8:	4a48      	ldr	r2, [pc, #288]	; (80046cc <HAL_GPIO_Init+0x2bc>)
 80045aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ac:	089b      	lsrs	r3, r3, #2
 80045ae:	3302      	adds	r3, #2
 80045b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80045b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b8:	f003 0303 	and.w	r3, r3, #3
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	220f      	movs	r2, #15
 80045c0:	fa02 f303 	lsl.w	r3, r2, r3
 80045c4:	43db      	mvns	r3, r3
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	4013      	ands	r3, r2
 80045ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a40      	ldr	r2, [pc, #256]	; (80046d0 <HAL_GPIO_Init+0x2c0>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d013      	beq.n	80045fc <HAL_GPIO_Init+0x1ec>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a3f      	ldr	r2, [pc, #252]	; (80046d4 <HAL_GPIO_Init+0x2c4>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d00d      	beq.n	80045f8 <HAL_GPIO_Init+0x1e8>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4a3e      	ldr	r2, [pc, #248]	; (80046d8 <HAL_GPIO_Init+0x2c8>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d007      	beq.n	80045f4 <HAL_GPIO_Init+0x1e4>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a3d      	ldr	r2, [pc, #244]	; (80046dc <HAL_GPIO_Init+0x2cc>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d101      	bne.n	80045f0 <HAL_GPIO_Init+0x1e0>
 80045ec:	2303      	movs	r3, #3
 80045ee:	e006      	b.n	80045fe <HAL_GPIO_Init+0x1ee>
 80045f0:	2304      	movs	r3, #4
 80045f2:	e004      	b.n	80045fe <HAL_GPIO_Init+0x1ee>
 80045f4:	2302      	movs	r3, #2
 80045f6:	e002      	b.n	80045fe <HAL_GPIO_Init+0x1ee>
 80045f8:	2301      	movs	r3, #1
 80045fa:	e000      	b.n	80045fe <HAL_GPIO_Init+0x1ee>
 80045fc:	2300      	movs	r3, #0
 80045fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004600:	f002 0203 	and.w	r2, r2, #3
 8004604:	0092      	lsls	r2, r2, #2
 8004606:	4093      	lsls	r3, r2
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	4313      	orrs	r3, r2
 800460c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800460e:	492f      	ldr	r1, [pc, #188]	; (80046cc <HAL_GPIO_Init+0x2bc>)
 8004610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004612:	089b      	lsrs	r3, r3, #2
 8004614:	3302      	adds	r3, #2
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d006      	beq.n	8004636 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004628:	4b2d      	ldr	r3, [pc, #180]	; (80046e0 <HAL_GPIO_Init+0x2d0>)
 800462a:	689a      	ldr	r2, [r3, #8]
 800462c:	492c      	ldr	r1, [pc, #176]	; (80046e0 <HAL_GPIO_Init+0x2d0>)
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	4313      	orrs	r3, r2
 8004632:	608b      	str	r3, [r1, #8]
 8004634:	e006      	b.n	8004644 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004636:	4b2a      	ldr	r3, [pc, #168]	; (80046e0 <HAL_GPIO_Init+0x2d0>)
 8004638:	689a      	ldr	r2, [r3, #8]
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	43db      	mvns	r3, r3
 800463e:	4928      	ldr	r1, [pc, #160]	; (80046e0 <HAL_GPIO_Init+0x2d0>)
 8004640:	4013      	ands	r3, r2
 8004642:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d006      	beq.n	800465e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004650:	4b23      	ldr	r3, [pc, #140]	; (80046e0 <HAL_GPIO_Init+0x2d0>)
 8004652:	68da      	ldr	r2, [r3, #12]
 8004654:	4922      	ldr	r1, [pc, #136]	; (80046e0 <HAL_GPIO_Init+0x2d0>)
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	4313      	orrs	r3, r2
 800465a:	60cb      	str	r3, [r1, #12]
 800465c:	e006      	b.n	800466c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800465e:	4b20      	ldr	r3, [pc, #128]	; (80046e0 <HAL_GPIO_Init+0x2d0>)
 8004660:	68da      	ldr	r2, [r3, #12]
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	43db      	mvns	r3, r3
 8004666:	491e      	ldr	r1, [pc, #120]	; (80046e0 <HAL_GPIO_Init+0x2d0>)
 8004668:	4013      	ands	r3, r2
 800466a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d006      	beq.n	8004686 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004678:	4b19      	ldr	r3, [pc, #100]	; (80046e0 <HAL_GPIO_Init+0x2d0>)
 800467a:	685a      	ldr	r2, [r3, #4]
 800467c:	4918      	ldr	r1, [pc, #96]	; (80046e0 <HAL_GPIO_Init+0x2d0>)
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	4313      	orrs	r3, r2
 8004682:	604b      	str	r3, [r1, #4]
 8004684:	e006      	b.n	8004694 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004686:	4b16      	ldr	r3, [pc, #88]	; (80046e0 <HAL_GPIO_Init+0x2d0>)
 8004688:	685a      	ldr	r2, [r3, #4]
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	43db      	mvns	r3, r3
 800468e:	4914      	ldr	r1, [pc, #80]	; (80046e0 <HAL_GPIO_Init+0x2d0>)
 8004690:	4013      	ands	r3, r2
 8004692:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d021      	beq.n	80046e4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80046a0:	4b0f      	ldr	r3, [pc, #60]	; (80046e0 <HAL_GPIO_Init+0x2d0>)
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	490e      	ldr	r1, [pc, #56]	; (80046e0 <HAL_GPIO_Init+0x2d0>)
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	600b      	str	r3, [r1, #0]
 80046ac:	e021      	b.n	80046f2 <HAL_GPIO_Init+0x2e2>
 80046ae:	bf00      	nop
 80046b0:	10320000 	.word	0x10320000
 80046b4:	10310000 	.word	0x10310000
 80046b8:	10220000 	.word	0x10220000
 80046bc:	10210000 	.word	0x10210000
 80046c0:	10120000 	.word	0x10120000
 80046c4:	10110000 	.word	0x10110000
 80046c8:	40021000 	.word	0x40021000
 80046cc:	40010000 	.word	0x40010000
 80046d0:	40010800 	.word	0x40010800
 80046d4:	40010c00 	.word	0x40010c00
 80046d8:	40011000 	.word	0x40011000
 80046dc:	40011400 	.word	0x40011400
 80046e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80046e4:	4b0b      	ldr	r3, [pc, #44]	; (8004714 <HAL_GPIO_Init+0x304>)
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	43db      	mvns	r3, r3
 80046ec:	4909      	ldr	r1, [pc, #36]	; (8004714 <HAL_GPIO_Init+0x304>)
 80046ee:	4013      	ands	r3, r2
 80046f0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80046f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f4:	3301      	adds	r3, #1
 80046f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	f47f ae8e 	bne.w	8004424 <HAL_GPIO_Init+0x14>
  }
}
 8004708:	bf00      	nop
 800470a:	bf00      	nop
 800470c:	372c      	adds	r7, #44	; 0x2c
 800470e:	46bd      	mov	sp, r7
 8004710:	bc80      	pop	{r7}
 8004712:	4770      	bx	lr
 8004714:	40010400 	.word	0x40010400

08004718 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	460b      	mov	r3, r1
 8004722:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	689a      	ldr	r2, [r3, #8]
 8004728:	887b      	ldrh	r3, [r7, #2]
 800472a:	4013      	ands	r3, r2
 800472c:	2b00      	cmp	r3, #0
 800472e:	d002      	beq.n	8004736 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004730:	2301      	movs	r3, #1
 8004732:	73fb      	strb	r3, [r7, #15]
 8004734:	e001      	b.n	800473a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004736:	2300      	movs	r3, #0
 8004738:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800473a:	7bfb      	ldrb	r3, [r7, #15]
}
 800473c:	4618      	mov	r0, r3
 800473e:	3714      	adds	r7, #20
 8004740:	46bd      	mov	sp, r7
 8004742:	bc80      	pop	{r7}
 8004744:	4770      	bx	lr

08004746 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004746:	b480      	push	{r7}
 8004748:	b083      	sub	sp, #12
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
 800474e:	460b      	mov	r3, r1
 8004750:	807b      	strh	r3, [r7, #2]
 8004752:	4613      	mov	r3, r2
 8004754:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004756:	787b      	ldrb	r3, [r7, #1]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d003      	beq.n	8004764 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800475c:	887a      	ldrh	r2, [r7, #2]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004762:	e003      	b.n	800476c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004764:	887b      	ldrh	r3, [r7, #2]
 8004766:	041a      	lsls	r2, r3, #16
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	611a      	str	r2, [r3, #16]
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	bc80      	pop	{r7}
 8004774:	4770      	bx	lr

08004776 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004776:	b480      	push	{r7}
 8004778:	b085      	sub	sp, #20
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
 800477e:	460b      	mov	r3, r1
 8004780:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004788:	887a      	ldrh	r2, [r7, #2]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	4013      	ands	r3, r2
 800478e:	041a      	lsls	r2, r3, #16
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	43d9      	mvns	r1, r3
 8004794:	887b      	ldrh	r3, [r7, #2]
 8004796:	400b      	ands	r3, r1
 8004798:	431a      	orrs	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	611a      	str	r2, [r3, #16]
}
 800479e:	bf00      	nop
 80047a0:	3714      	adds	r7, #20
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bc80      	pop	{r7}
 80047a6:	4770      	bx	lr

080047a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	4603      	mov	r3, r0
 80047b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80047b2:	4b08      	ldr	r3, [pc, #32]	; (80047d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047b4:	695a      	ldr	r2, [r3, #20]
 80047b6:	88fb      	ldrh	r3, [r7, #6]
 80047b8:	4013      	ands	r3, r2
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d006      	beq.n	80047cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80047be:	4a05      	ldr	r2, [pc, #20]	; (80047d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047c0:	88fb      	ldrh	r3, [r7, #6]
 80047c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80047c4:	88fb      	ldrh	r3, [r7, #6]
 80047c6:	4618      	mov	r0, r3
 80047c8:	f7fe fcac 	bl	8003124 <HAL_GPIO_EXTI_Callback>
  }
}
 80047cc:	bf00      	nop
 80047ce:	3708      	adds	r7, #8
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	40010400 	.word	0x40010400

080047d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e12b      	b.n	8004a42 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d106      	bne.n	8004804 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f7fe fd34 	bl	800326c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2224      	movs	r2, #36	; 0x24
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f022 0201 	bic.w	r2, r2, #1
 800481a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800482a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800483a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800483c:	f001 fbf0 	bl	8006020 <HAL_RCC_GetPCLK1Freq>
 8004840:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	4a81      	ldr	r2, [pc, #516]	; (8004a4c <HAL_I2C_Init+0x274>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d807      	bhi.n	800485c <HAL_I2C_Init+0x84>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	4a80      	ldr	r2, [pc, #512]	; (8004a50 <HAL_I2C_Init+0x278>)
 8004850:	4293      	cmp	r3, r2
 8004852:	bf94      	ite	ls
 8004854:	2301      	movls	r3, #1
 8004856:	2300      	movhi	r3, #0
 8004858:	b2db      	uxtb	r3, r3
 800485a:	e006      	b.n	800486a <HAL_I2C_Init+0x92>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	4a7d      	ldr	r2, [pc, #500]	; (8004a54 <HAL_I2C_Init+0x27c>)
 8004860:	4293      	cmp	r3, r2
 8004862:	bf94      	ite	ls
 8004864:	2301      	movls	r3, #1
 8004866:	2300      	movhi	r3, #0
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d001      	beq.n	8004872 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e0e7      	b.n	8004a42 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	4a78      	ldr	r2, [pc, #480]	; (8004a58 <HAL_I2C_Init+0x280>)
 8004876:	fba2 2303 	umull	r2, r3, r2, r3
 800487a:	0c9b      	lsrs	r3, r3, #18
 800487c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68ba      	ldr	r2, [r7, #8]
 800488e:	430a      	orrs	r2, r1
 8004890:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	6a1b      	ldr	r3, [r3, #32]
 8004898:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	4a6a      	ldr	r2, [pc, #424]	; (8004a4c <HAL_I2C_Init+0x274>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d802      	bhi.n	80048ac <HAL_I2C_Init+0xd4>
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	3301      	adds	r3, #1
 80048aa:	e009      	b.n	80048c0 <HAL_I2C_Init+0xe8>
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80048b2:	fb02 f303 	mul.w	r3, r2, r3
 80048b6:	4a69      	ldr	r2, [pc, #420]	; (8004a5c <HAL_I2C_Init+0x284>)
 80048b8:	fba2 2303 	umull	r2, r3, r2, r3
 80048bc:	099b      	lsrs	r3, r3, #6
 80048be:	3301      	adds	r3, #1
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	6812      	ldr	r2, [r2, #0]
 80048c4:	430b      	orrs	r3, r1
 80048c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	69db      	ldr	r3, [r3, #28]
 80048ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80048d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	495c      	ldr	r1, [pc, #368]	; (8004a4c <HAL_I2C_Init+0x274>)
 80048dc:	428b      	cmp	r3, r1
 80048de:	d819      	bhi.n	8004914 <HAL_I2C_Init+0x13c>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	1e59      	subs	r1, r3, #1
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	005b      	lsls	r3, r3, #1
 80048ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80048ee:	1c59      	adds	r1, r3, #1
 80048f0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80048f4:	400b      	ands	r3, r1
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00a      	beq.n	8004910 <HAL_I2C_Init+0x138>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	1e59      	subs	r1, r3, #1
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	005b      	lsls	r3, r3, #1
 8004904:	fbb1 f3f3 	udiv	r3, r1, r3
 8004908:	3301      	adds	r3, #1
 800490a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800490e:	e051      	b.n	80049b4 <HAL_I2C_Init+0x1dc>
 8004910:	2304      	movs	r3, #4
 8004912:	e04f      	b.n	80049b4 <HAL_I2C_Init+0x1dc>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d111      	bne.n	8004940 <HAL_I2C_Init+0x168>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	1e58      	subs	r0, r3, #1
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6859      	ldr	r1, [r3, #4]
 8004924:	460b      	mov	r3, r1
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	440b      	add	r3, r1
 800492a:	fbb0 f3f3 	udiv	r3, r0, r3
 800492e:	3301      	adds	r3, #1
 8004930:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004934:	2b00      	cmp	r3, #0
 8004936:	bf0c      	ite	eq
 8004938:	2301      	moveq	r3, #1
 800493a:	2300      	movne	r3, #0
 800493c:	b2db      	uxtb	r3, r3
 800493e:	e012      	b.n	8004966 <HAL_I2C_Init+0x18e>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	1e58      	subs	r0, r3, #1
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6859      	ldr	r1, [r3, #4]
 8004948:	460b      	mov	r3, r1
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	440b      	add	r3, r1
 800494e:	0099      	lsls	r1, r3, #2
 8004950:	440b      	add	r3, r1
 8004952:	fbb0 f3f3 	udiv	r3, r0, r3
 8004956:	3301      	adds	r3, #1
 8004958:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800495c:	2b00      	cmp	r3, #0
 800495e:	bf0c      	ite	eq
 8004960:	2301      	moveq	r3, #1
 8004962:	2300      	movne	r3, #0
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d001      	beq.n	800496e <HAL_I2C_Init+0x196>
 800496a:	2301      	movs	r3, #1
 800496c:	e022      	b.n	80049b4 <HAL_I2C_Init+0x1dc>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10e      	bne.n	8004994 <HAL_I2C_Init+0x1bc>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	1e58      	subs	r0, r3, #1
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6859      	ldr	r1, [r3, #4]
 800497e:	460b      	mov	r3, r1
 8004980:	005b      	lsls	r3, r3, #1
 8004982:	440b      	add	r3, r1
 8004984:	fbb0 f3f3 	udiv	r3, r0, r3
 8004988:	3301      	adds	r3, #1
 800498a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800498e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004992:	e00f      	b.n	80049b4 <HAL_I2C_Init+0x1dc>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	1e58      	subs	r0, r3, #1
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6859      	ldr	r1, [r3, #4]
 800499c:	460b      	mov	r3, r1
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	440b      	add	r3, r1
 80049a2:	0099      	lsls	r1, r3, #2
 80049a4:	440b      	add	r3, r1
 80049a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80049aa:	3301      	adds	r3, #1
 80049ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049b4:	6879      	ldr	r1, [r7, #4]
 80049b6:	6809      	ldr	r1, [r1, #0]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	69da      	ldr	r2, [r3, #28]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	431a      	orrs	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	430a      	orrs	r2, r1
 80049d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80049e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	6911      	ldr	r1, [r2, #16]
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	68d2      	ldr	r2, [r2, #12]
 80049ee:	4311      	orrs	r1, r2
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	6812      	ldr	r2, [r2, #0]
 80049f4:	430b      	orrs	r3, r1
 80049f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	695a      	ldr	r2, [r3, #20]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	430a      	orrs	r2, r1
 8004a12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f042 0201 	orr.w	r2, r2, #1
 8004a22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2220      	movs	r2, #32
 8004a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3710      	adds	r7, #16
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	000186a0 	.word	0x000186a0
 8004a50:	001e847f 	.word	0x001e847f
 8004a54:	003d08ff 	.word	0x003d08ff
 8004a58:	431bde83 	.word	0x431bde83
 8004a5c:	10624dd3 	.word	0x10624dd3

08004a60 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b088      	sub	sp, #32
 8004a64:	af02      	add	r7, sp, #8
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	4608      	mov	r0, r1
 8004a6a:	4611      	mov	r1, r2
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	4603      	mov	r3, r0
 8004a70:	817b      	strh	r3, [r7, #10]
 8004a72:	460b      	mov	r3, r1
 8004a74:	813b      	strh	r3, [r7, #8]
 8004a76:	4613      	mov	r3, r2
 8004a78:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a7a:	f7fe fd33 	bl	80034e4 <HAL_GetTick>
 8004a7e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2b20      	cmp	r3, #32
 8004a8a:	f040 80d9 	bne.w	8004c40 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	9300      	str	r3, [sp, #0]
 8004a92:	2319      	movs	r3, #25
 8004a94:	2201      	movs	r2, #1
 8004a96:	496d      	ldr	r1, [pc, #436]	; (8004c4c <HAL_I2C_Mem_Write+0x1ec>)
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f000 fcc1 	bl	8005420 <I2C_WaitOnFlagUntilTimeout>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d001      	beq.n	8004aa8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004aa4:	2302      	movs	r3, #2
 8004aa6:	e0cc      	b.n	8004c42 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d101      	bne.n	8004ab6 <HAL_I2C_Mem_Write+0x56>
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	e0c5      	b.n	8004c42 <HAL_I2C_Mem_Write+0x1e2>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0301 	and.w	r3, r3, #1
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d007      	beq.n	8004adc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f042 0201 	orr.w	r2, r2, #1
 8004ada:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004aea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2221      	movs	r2, #33	; 0x21
 8004af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2240      	movs	r2, #64	; 0x40
 8004af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2200      	movs	r2, #0
 8004b00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6a3a      	ldr	r2, [r7, #32]
 8004b06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004b0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	4a4d      	ldr	r2, [pc, #308]	; (8004c50 <HAL_I2C_Mem_Write+0x1f0>)
 8004b1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b1e:	88f8      	ldrh	r0, [r7, #6]
 8004b20:	893a      	ldrh	r2, [r7, #8]
 8004b22:	8979      	ldrh	r1, [r7, #10]
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	9301      	str	r3, [sp, #4]
 8004b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2a:	9300      	str	r3, [sp, #0]
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f000 faf8 	bl	8005124 <I2C_RequestMemoryWrite>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d052      	beq.n	8004be0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e081      	b.n	8004c42 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	f000 fd86 	bl	8005654 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d00d      	beq.n	8004b6a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b52:	2b04      	cmp	r3, #4
 8004b54:	d107      	bne.n	8004b66 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b64:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e06b      	b.n	8004c42 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6e:	781a      	ldrb	r2, [r3, #0]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7a:	1c5a      	adds	r2, r3, #1
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b84:	3b01      	subs	r3, #1
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	3b01      	subs	r3, #1
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	695b      	ldr	r3, [r3, #20]
 8004ba0:	f003 0304 	and.w	r3, r3, #4
 8004ba4:	2b04      	cmp	r3, #4
 8004ba6:	d11b      	bne.n	8004be0 <HAL_I2C_Mem_Write+0x180>
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d017      	beq.n	8004be0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb4:	781a      	ldrb	r2, [r3, #0]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc0:	1c5a      	adds	r2, r3, #1
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1aa      	bne.n	8004b3e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004be8:	697a      	ldr	r2, [r7, #20]
 8004bea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bec:	68f8      	ldr	r0, [r7, #12]
 8004bee:	f000 fd79 	bl	80056e4 <I2C_WaitOnBTFFlagUntilTimeout>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00d      	beq.n	8004c14 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfc:	2b04      	cmp	r3, #4
 8004bfe:	d107      	bne.n	8004c10 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c0e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e016      	b.n	8004c42 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2220      	movs	r2, #32
 8004c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	e000      	b.n	8004c42 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004c40:	2302      	movs	r3, #2
  }
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3718      	adds	r7, #24
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	00100002 	.word	0x00100002
 8004c50:	ffff0000 	.word	0xffff0000

08004c54 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b08c      	sub	sp, #48	; 0x30
 8004c58:	af02      	add	r7, sp, #8
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	4608      	mov	r0, r1
 8004c5e:	4611      	mov	r1, r2
 8004c60:	461a      	mov	r2, r3
 8004c62:	4603      	mov	r3, r0
 8004c64:	817b      	strh	r3, [r7, #10]
 8004c66:	460b      	mov	r3, r1
 8004c68:	813b      	strh	r3, [r7, #8]
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c72:	f7fe fc37 	bl	80034e4 <HAL_GetTick>
 8004c76:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	2b20      	cmp	r3, #32
 8004c82:	f040 8244 	bne.w	800510e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c88:	9300      	str	r3, [sp, #0]
 8004c8a:	2319      	movs	r3, #25
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	4982      	ldr	r1, [pc, #520]	; (8004e98 <HAL_I2C_Mem_Read+0x244>)
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f000 fbc5 	bl	8005420 <I2C_WaitOnFlagUntilTimeout>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d001      	beq.n	8004ca0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004c9c:	2302      	movs	r3, #2
 8004c9e:	e237      	b.n	8005110 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d101      	bne.n	8004cae <HAL_I2C_Mem_Read+0x5a>
 8004caa:	2302      	movs	r3, #2
 8004cac:	e230      	b.n	8005110 <HAL_I2C_Mem_Read+0x4bc>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0301 	and.w	r3, r3, #1
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d007      	beq.n	8004cd4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f042 0201 	orr.w	r2, r2, #1
 8004cd2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ce2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2222      	movs	r2, #34	; 0x22
 8004ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2240      	movs	r2, #64	; 0x40
 8004cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cfe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004d04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	4a62      	ldr	r2, [pc, #392]	; (8004e9c <HAL_I2C_Mem_Read+0x248>)
 8004d14:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d16:	88f8      	ldrh	r0, [r7, #6]
 8004d18:	893a      	ldrh	r2, [r7, #8]
 8004d1a:	8979      	ldrh	r1, [r7, #10]
 8004d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1e:	9301      	str	r3, [sp, #4]
 8004d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d22:	9300      	str	r3, [sp, #0]
 8004d24:	4603      	mov	r3, r0
 8004d26:	68f8      	ldr	r0, [r7, #12]
 8004d28:	f000 fa92 	bl	8005250 <I2C_RequestMemoryRead>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d001      	beq.n	8004d36 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e1ec      	b.n	8005110 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d113      	bne.n	8004d66 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d3e:	2300      	movs	r3, #0
 8004d40:	61fb      	str	r3, [r7, #28]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	695b      	ldr	r3, [r3, #20]
 8004d48:	61fb      	str	r3, [r7, #28]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	61fb      	str	r3, [r7, #28]
 8004d52:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d62:	601a      	str	r2, [r3, #0]
 8004d64:	e1c0      	b.n	80050e8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d11e      	bne.n	8004dac <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d7c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004d7e:	b672      	cpsid	i
}
 8004d80:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d82:	2300      	movs	r3, #0
 8004d84:	61bb      	str	r3, [r7, #24]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	695b      	ldr	r3, [r3, #20]
 8004d8c:	61bb      	str	r3, [r7, #24]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	699b      	ldr	r3, [r3, #24]
 8004d94:	61bb      	str	r3, [r7, #24]
 8004d96:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004da6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004da8:	b662      	cpsie	i
}
 8004daa:	e035      	b.n	8004e18 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d11e      	bne.n	8004df2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dc2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004dc4:	b672      	cpsid	i
}
 8004dc6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dc8:	2300      	movs	r3, #0
 8004dca:	617b      	str	r3, [r7, #20]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	617b      	str	r3, [r7, #20]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	699b      	ldr	r3, [r3, #24]
 8004dda:	617b      	str	r3, [r7, #20]
 8004ddc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004dee:	b662      	cpsie	i
}
 8004df0:	e012      	b.n	8004e18 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e00:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e02:	2300      	movs	r3, #0
 8004e04:	613b      	str	r3, [r7, #16]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	613b      	str	r3, [r7, #16]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	613b      	str	r3, [r7, #16]
 8004e16:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004e18:	e166      	b.n	80050e8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e1e:	2b03      	cmp	r3, #3
 8004e20:	f200 811f 	bhi.w	8005062 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d123      	bne.n	8004e74 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e2e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f000 fc9f 	bl	8005774 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d001      	beq.n	8004e40 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e167      	b.n	8005110 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	691a      	ldr	r2, [r3, #16]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4a:	b2d2      	uxtb	r2, r2
 8004e4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e52:	1c5a      	adds	r2, r3, #1
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e72:	e139      	b.n	80050e8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d152      	bne.n	8004f22 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7e:	9300      	str	r3, [sp, #0]
 8004e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e82:	2200      	movs	r2, #0
 8004e84:	4906      	ldr	r1, [pc, #24]	; (8004ea0 <HAL_I2C_Mem_Read+0x24c>)
 8004e86:	68f8      	ldr	r0, [r7, #12]
 8004e88:	f000 faca 	bl	8005420 <I2C_WaitOnFlagUntilTimeout>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d008      	beq.n	8004ea4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e13c      	b.n	8005110 <HAL_I2C_Mem_Read+0x4bc>
 8004e96:	bf00      	nop
 8004e98:	00100002 	.word	0x00100002
 8004e9c:	ffff0000 	.word	0xffff0000
 8004ea0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004ea4:	b672      	cpsid	i
}
 8004ea6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	691a      	ldr	r2, [r3, #16]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec2:	b2d2      	uxtb	r2, r2
 8004ec4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eca:	1c5a      	adds	r2, r3, #1
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004eea:	b662      	cpsie	i
}
 8004eec:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	691a      	ldr	r2, [r3, #16]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef8:	b2d2      	uxtb	r2, r2
 8004efa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f00:	1c5a      	adds	r2, r3, #1
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	b29a      	uxth	r2, r3
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f20:	e0e2      	b.n	80050e8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f24:	9300      	str	r3, [sp, #0]
 8004f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f28:	2200      	movs	r2, #0
 8004f2a:	497b      	ldr	r1, [pc, #492]	; (8005118 <HAL_I2C_Mem_Read+0x4c4>)
 8004f2c:	68f8      	ldr	r0, [r7, #12]
 8004f2e:	f000 fa77 	bl	8005420 <I2C_WaitOnFlagUntilTimeout>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d001      	beq.n	8004f3c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e0e9      	b.n	8005110 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f4a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004f4c:	b672      	cpsid	i
}
 8004f4e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	691a      	ldr	r2, [r3, #16]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5a:	b2d2      	uxtb	r2, r2
 8004f5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f62:	1c5a      	adds	r2, r3, #1
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	b29a      	uxth	r2, r3
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	b29a      	uxth	r2, r3
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004f82:	4b66      	ldr	r3, [pc, #408]	; (800511c <HAL_I2C_Mem_Read+0x4c8>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	08db      	lsrs	r3, r3, #3
 8004f88:	4a65      	ldr	r2, [pc, #404]	; (8005120 <HAL_I2C_Mem_Read+0x4cc>)
 8004f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f8e:	0a1a      	lsrs	r2, r3, #8
 8004f90:	4613      	mov	r3, r2
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	4413      	add	r3, r2
 8004f96:	00da      	lsls	r2, r3, #3
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004f9c:	6a3b      	ldr	r3, [r7, #32]
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004fa2:	6a3b      	ldr	r3, [r7, #32]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d118      	bne.n	8004fda <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2220      	movs	r2, #32
 8004fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc2:	f043 0220 	orr.w	r2, r3, #32
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004fca:	b662      	cpsie	i
}
 8004fcc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e09a      	b.n	8005110 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	695b      	ldr	r3, [r3, #20]
 8004fe0:	f003 0304 	and.w	r3, r3, #4
 8004fe4:	2b04      	cmp	r3, #4
 8004fe6:	d1d9      	bne.n	8004f9c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ff6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	691a      	ldr	r2, [r3, #16]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005002:	b2d2      	uxtb	r2, r2
 8005004:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500a:	1c5a      	adds	r2, r3, #1
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005014:	3b01      	subs	r3, #1
 8005016:	b29a      	uxth	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005020:	b29b      	uxth	r3, r3
 8005022:	3b01      	subs	r3, #1
 8005024:	b29a      	uxth	r2, r3
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800502a:	b662      	cpsie	i
}
 800502c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	691a      	ldr	r2, [r3, #16]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005038:	b2d2      	uxtb	r2, r2
 800503a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005040:	1c5a      	adds	r2, r3, #1
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800504a:	3b01      	subs	r3, #1
 800504c:	b29a      	uxth	r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005056:	b29b      	uxth	r3, r3
 8005058:	3b01      	subs	r3, #1
 800505a:	b29a      	uxth	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005060:	e042      	b.n	80050e8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005064:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f000 fb84 	bl	8005774 <I2C_WaitOnRXNEFlagUntilTimeout>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d001      	beq.n	8005076 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e04c      	b.n	8005110 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	691a      	ldr	r2, [r3, #16]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005080:	b2d2      	uxtb	r2, r2
 8005082:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005088:	1c5a      	adds	r2, r3, #1
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005092:	3b01      	subs	r3, #1
 8005094:	b29a      	uxth	r2, r3
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800509e:	b29b      	uxth	r3, r3
 80050a0:	3b01      	subs	r3, #1
 80050a2:	b29a      	uxth	r2, r3
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	f003 0304 	and.w	r3, r3, #4
 80050b2:	2b04      	cmp	r3, #4
 80050b4:	d118      	bne.n	80050e8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	691a      	ldr	r2, [r3, #16]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c0:	b2d2      	uxtb	r2, r2
 80050c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c8:	1c5a      	adds	r2, r3, #1
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050d2:	3b01      	subs	r3, #1
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050de:	b29b      	uxth	r3, r3
 80050e0:	3b01      	subs	r3, #1
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f47f ae94 	bne.w	8004e1a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2220      	movs	r2, #32
 80050f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800510a:	2300      	movs	r3, #0
 800510c:	e000      	b.n	8005110 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800510e:	2302      	movs	r3, #2
  }
}
 8005110:	4618      	mov	r0, r3
 8005112:	3728      	adds	r7, #40	; 0x28
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	00010004 	.word	0x00010004
 800511c:	200007cc 	.word	0x200007cc
 8005120:	14f8b589 	.word	0x14f8b589

08005124 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b088      	sub	sp, #32
 8005128:	af02      	add	r7, sp, #8
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	4608      	mov	r0, r1
 800512e:	4611      	mov	r1, r2
 8005130:	461a      	mov	r2, r3
 8005132:	4603      	mov	r3, r0
 8005134:	817b      	strh	r3, [r7, #10]
 8005136:	460b      	mov	r3, r1
 8005138:	813b      	strh	r3, [r7, #8]
 800513a:	4613      	mov	r3, r2
 800513c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800514c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800514e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005150:	9300      	str	r3, [sp, #0]
 8005152:	6a3b      	ldr	r3, [r7, #32]
 8005154:	2200      	movs	r2, #0
 8005156:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	f000 f960 	bl	8005420 <I2C_WaitOnFlagUntilTimeout>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00d      	beq.n	8005182 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005170:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005174:	d103      	bne.n	800517e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f44f 7200 	mov.w	r2, #512	; 0x200
 800517c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e05f      	b.n	8005242 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005182:	897b      	ldrh	r3, [r7, #10]
 8005184:	b2db      	uxtb	r3, r3
 8005186:	461a      	mov	r2, r3
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005190:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005194:	6a3a      	ldr	r2, [r7, #32]
 8005196:	492d      	ldr	r1, [pc, #180]	; (800524c <I2C_RequestMemoryWrite+0x128>)
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	f000 f9bb 	bl	8005514 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d001      	beq.n	80051a8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e04c      	b.n	8005242 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051a8:	2300      	movs	r3, #0
 80051aa:	617b      	str	r3, [r7, #20]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	617b      	str	r3, [r7, #20]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	617b      	str	r3, [r7, #20]
 80051bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051c0:	6a39      	ldr	r1, [r7, #32]
 80051c2:	68f8      	ldr	r0, [r7, #12]
 80051c4:	f000 fa46 	bl	8005654 <I2C_WaitOnTXEFlagUntilTimeout>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00d      	beq.n	80051ea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d2:	2b04      	cmp	r3, #4
 80051d4:	d107      	bne.n	80051e6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e02b      	b.n	8005242 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80051ea:	88fb      	ldrh	r3, [r7, #6]
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d105      	bne.n	80051fc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051f0:	893b      	ldrh	r3, [r7, #8]
 80051f2:	b2da      	uxtb	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	611a      	str	r2, [r3, #16]
 80051fa:	e021      	b.n	8005240 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80051fc:	893b      	ldrh	r3, [r7, #8]
 80051fe:	0a1b      	lsrs	r3, r3, #8
 8005200:	b29b      	uxth	r3, r3
 8005202:	b2da      	uxtb	r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800520a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800520c:	6a39      	ldr	r1, [r7, #32]
 800520e:	68f8      	ldr	r0, [r7, #12]
 8005210:	f000 fa20 	bl	8005654 <I2C_WaitOnTXEFlagUntilTimeout>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00d      	beq.n	8005236 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521e:	2b04      	cmp	r3, #4
 8005220:	d107      	bne.n	8005232 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005230:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e005      	b.n	8005242 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005236:	893b      	ldrh	r3, [r7, #8]
 8005238:	b2da      	uxtb	r2, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3718      	adds	r7, #24
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	00010002 	.word	0x00010002

08005250 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b088      	sub	sp, #32
 8005254:	af02      	add	r7, sp, #8
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	4608      	mov	r0, r1
 800525a:	4611      	mov	r1, r2
 800525c:	461a      	mov	r2, r3
 800525e:	4603      	mov	r3, r0
 8005260:	817b      	strh	r3, [r7, #10]
 8005262:	460b      	mov	r3, r1
 8005264:	813b      	strh	r3, [r7, #8]
 8005266:	4613      	mov	r3, r2
 8005268:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005278:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005288:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800528a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528c:	9300      	str	r3, [sp, #0]
 800528e:	6a3b      	ldr	r3, [r7, #32]
 8005290:	2200      	movs	r2, #0
 8005292:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005296:	68f8      	ldr	r0, [r7, #12]
 8005298:	f000 f8c2 	bl	8005420 <I2C_WaitOnFlagUntilTimeout>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00d      	beq.n	80052be <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052b0:	d103      	bne.n	80052ba <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e0aa      	b.n	8005414 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80052be:	897b      	ldrh	r3, [r7, #10]
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	461a      	mov	r2, r3
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80052cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	6a3a      	ldr	r2, [r7, #32]
 80052d2:	4952      	ldr	r1, [pc, #328]	; (800541c <I2C_RequestMemoryRead+0x1cc>)
 80052d4:	68f8      	ldr	r0, [r7, #12]
 80052d6:	f000 f91d 	bl	8005514 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d001      	beq.n	80052e4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e097      	b.n	8005414 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052e4:	2300      	movs	r3, #0
 80052e6:	617b      	str	r3, [r7, #20]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	617b      	str	r3, [r7, #20]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	617b      	str	r3, [r7, #20]
 80052f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052fc:	6a39      	ldr	r1, [r7, #32]
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f000 f9a8 	bl	8005654 <I2C_WaitOnTXEFlagUntilTimeout>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00d      	beq.n	8005326 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530e:	2b04      	cmp	r3, #4
 8005310:	d107      	bne.n	8005322 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005320:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e076      	b.n	8005414 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005326:	88fb      	ldrh	r3, [r7, #6]
 8005328:	2b01      	cmp	r3, #1
 800532a:	d105      	bne.n	8005338 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800532c:	893b      	ldrh	r3, [r7, #8]
 800532e:	b2da      	uxtb	r2, r3
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	611a      	str	r2, [r3, #16]
 8005336:	e021      	b.n	800537c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005338:	893b      	ldrh	r3, [r7, #8]
 800533a:	0a1b      	lsrs	r3, r3, #8
 800533c:	b29b      	uxth	r3, r3
 800533e:	b2da      	uxtb	r2, r3
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005348:	6a39      	ldr	r1, [r7, #32]
 800534a:	68f8      	ldr	r0, [r7, #12]
 800534c:	f000 f982 	bl	8005654 <I2C_WaitOnTXEFlagUntilTimeout>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00d      	beq.n	8005372 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535a:	2b04      	cmp	r3, #4
 800535c:	d107      	bne.n	800536e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800536c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e050      	b.n	8005414 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005372:	893b      	ldrh	r3, [r7, #8]
 8005374:	b2da      	uxtb	r2, r3
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800537c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800537e:	6a39      	ldr	r1, [r7, #32]
 8005380:	68f8      	ldr	r0, [r7, #12]
 8005382:	f000 f967 	bl	8005654 <I2C_WaitOnTXEFlagUntilTimeout>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d00d      	beq.n	80053a8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005390:	2b04      	cmp	r3, #4
 8005392:	d107      	bne.n	80053a4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053a2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e035      	b.n	8005414 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053b6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ba:	9300      	str	r3, [sp, #0]
 80053bc:	6a3b      	ldr	r3, [r7, #32]
 80053be:	2200      	movs	r2, #0
 80053c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053c4:	68f8      	ldr	r0, [r7, #12]
 80053c6:	f000 f82b 	bl	8005420 <I2C_WaitOnFlagUntilTimeout>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00d      	beq.n	80053ec <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053de:	d103      	bne.n	80053e8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	e013      	b.n	8005414 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80053ec:	897b      	ldrh	r3, [r7, #10]
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	f043 0301 	orr.w	r3, r3, #1
 80053f4:	b2da      	uxtb	r2, r3
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fe:	6a3a      	ldr	r2, [r7, #32]
 8005400:	4906      	ldr	r1, [pc, #24]	; (800541c <I2C_RequestMemoryRead+0x1cc>)
 8005402:	68f8      	ldr	r0, [r7, #12]
 8005404:	f000 f886 	bl	8005514 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d001      	beq.n	8005412 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e000      	b.n	8005414 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	3718      	adds	r7, #24
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	00010002 	.word	0x00010002

08005420 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	603b      	str	r3, [r7, #0]
 800542c:	4613      	mov	r3, r2
 800542e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005430:	e048      	b.n	80054c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005438:	d044      	beq.n	80054c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800543a:	f7fe f853 	bl	80034e4 <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	683a      	ldr	r2, [r7, #0]
 8005446:	429a      	cmp	r2, r3
 8005448:	d302      	bcc.n	8005450 <I2C_WaitOnFlagUntilTimeout+0x30>
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d139      	bne.n	80054c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	0c1b      	lsrs	r3, r3, #16
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b01      	cmp	r3, #1
 8005458:	d10d      	bne.n	8005476 <I2C_WaitOnFlagUntilTimeout+0x56>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	695b      	ldr	r3, [r3, #20]
 8005460:	43da      	mvns	r2, r3
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	4013      	ands	r3, r2
 8005466:	b29b      	uxth	r3, r3
 8005468:	2b00      	cmp	r3, #0
 800546a:	bf0c      	ite	eq
 800546c:	2301      	moveq	r3, #1
 800546e:	2300      	movne	r3, #0
 8005470:	b2db      	uxtb	r3, r3
 8005472:	461a      	mov	r2, r3
 8005474:	e00c      	b.n	8005490 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	699b      	ldr	r3, [r3, #24]
 800547c:	43da      	mvns	r2, r3
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	4013      	ands	r3, r2
 8005482:	b29b      	uxth	r3, r3
 8005484:	2b00      	cmp	r3, #0
 8005486:	bf0c      	ite	eq
 8005488:	2301      	moveq	r3, #1
 800548a:	2300      	movne	r3, #0
 800548c:	b2db      	uxtb	r3, r3
 800548e:	461a      	mov	r2, r3
 8005490:	79fb      	ldrb	r3, [r7, #7]
 8005492:	429a      	cmp	r2, r3
 8005494:	d116      	bne.n	80054c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2200      	movs	r2, #0
 800549a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2220      	movs	r2, #32
 80054a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b0:	f043 0220 	orr.w	r2, r3, #32
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e023      	b.n	800550c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	0c1b      	lsrs	r3, r3, #16
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d10d      	bne.n	80054ea <I2C_WaitOnFlagUntilTimeout+0xca>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	695b      	ldr	r3, [r3, #20]
 80054d4:	43da      	mvns	r2, r3
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	4013      	ands	r3, r2
 80054da:	b29b      	uxth	r3, r3
 80054dc:	2b00      	cmp	r3, #0
 80054de:	bf0c      	ite	eq
 80054e0:	2301      	moveq	r3, #1
 80054e2:	2300      	movne	r3, #0
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	461a      	mov	r2, r3
 80054e8:	e00c      	b.n	8005504 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	699b      	ldr	r3, [r3, #24]
 80054f0:	43da      	mvns	r2, r3
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	4013      	ands	r3, r2
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	bf0c      	ite	eq
 80054fc:	2301      	moveq	r3, #1
 80054fe:	2300      	movne	r3, #0
 8005500:	b2db      	uxtb	r3, r3
 8005502:	461a      	mov	r2, r3
 8005504:	79fb      	ldrb	r3, [r7, #7]
 8005506:	429a      	cmp	r2, r3
 8005508:	d093      	beq.n	8005432 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3710      	adds	r7, #16
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	607a      	str	r2, [r7, #4]
 8005520:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005522:	e071      	b.n	8005608 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800552e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005532:	d123      	bne.n	800557c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005542:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800554c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2220      	movs	r2, #32
 8005558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005568:	f043 0204 	orr.w	r2, r3, #4
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e067      	b.n	800564c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005582:	d041      	beq.n	8005608 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005584:	f7fd ffae 	bl	80034e4 <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	429a      	cmp	r2, r3
 8005592:	d302      	bcc.n	800559a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d136      	bne.n	8005608 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	0c1b      	lsrs	r3, r3, #16
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d10c      	bne.n	80055be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	43da      	mvns	r2, r3
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	4013      	ands	r3, r2
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	bf14      	ite	ne
 80055b6:	2301      	movne	r3, #1
 80055b8:	2300      	moveq	r3, #0
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	e00b      	b.n	80055d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	43da      	mvns	r2, r3
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	4013      	ands	r3, r2
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	bf14      	ite	ne
 80055d0:	2301      	movne	r3, #1
 80055d2:	2300      	moveq	r3, #0
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d016      	beq.n	8005608 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2200      	movs	r2, #0
 80055de:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2220      	movs	r2, #32
 80055e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f4:	f043 0220 	orr.w	r2, r3, #32
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e021      	b.n	800564c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	0c1b      	lsrs	r3, r3, #16
 800560c:	b2db      	uxtb	r3, r3
 800560e:	2b01      	cmp	r3, #1
 8005610:	d10c      	bne.n	800562c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	43da      	mvns	r2, r3
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	4013      	ands	r3, r2
 800561e:	b29b      	uxth	r3, r3
 8005620:	2b00      	cmp	r3, #0
 8005622:	bf14      	ite	ne
 8005624:	2301      	movne	r3, #1
 8005626:	2300      	moveq	r3, #0
 8005628:	b2db      	uxtb	r3, r3
 800562a:	e00b      	b.n	8005644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	43da      	mvns	r2, r3
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	4013      	ands	r3, r2
 8005638:	b29b      	uxth	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	bf14      	ite	ne
 800563e:	2301      	movne	r3, #1
 8005640:	2300      	moveq	r3, #0
 8005642:	b2db      	uxtb	r3, r3
 8005644:	2b00      	cmp	r3, #0
 8005646:	f47f af6d 	bne.w	8005524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	3710      	adds	r7, #16
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005660:	e034      	b.n	80056cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005662:	68f8      	ldr	r0, [r7, #12]
 8005664:	f000 f8e3 	bl	800582e <I2C_IsAcknowledgeFailed>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d001      	beq.n	8005672 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e034      	b.n	80056dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005678:	d028      	beq.n	80056cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800567a:	f7fd ff33 	bl	80034e4 <HAL_GetTick>
 800567e:	4602      	mov	r2, r0
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	68ba      	ldr	r2, [r7, #8]
 8005686:	429a      	cmp	r2, r3
 8005688:	d302      	bcc.n	8005690 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d11d      	bne.n	80056cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800569a:	2b80      	cmp	r3, #128	; 0x80
 800569c:	d016      	beq.n	80056cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2220      	movs	r2, #32
 80056a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b8:	f043 0220 	orr.w	r2, r3, #32
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e007      	b.n	80056dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	695b      	ldr	r3, [r3, #20]
 80056d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056d6:	2b80      	cmp	r3, #128	; 0x80
 80056d8:	d1c3      	bne.n	8005662 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80056da:	2300      	movs	r3, #0
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3710      	adds	r7, #16
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056f0:	e034      	b.n	800575c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056f2:	68f8      	ldr	r0, [r7, #12]
 80056f4:	f000 f89b 	bl	800582e <I2C_IsAcknowledgeFailed>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d001      	beq.n	8005702 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e034      	b.n	800576c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005708:	d028      	beq.n	800575c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800570a:	f7fd feeb 	bl	80034e4 <HAL_GetTick>
 800570e:	4602      	mov	r2, r0
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	429a      	cmp	r2, r3
 8005718:	d302      	bcc.n	8005720 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d11d      	bne.n	800575c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	f003 0304 	and.w	r3, r3, #4
 800572a:	2b04      	cmp	r3, #4
 800572c:	d016      	beq.n	800575c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2220      	movs	r2, #32
 8005738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005748:	f043 0220 	orr.w	r2, r3, #32
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e007      	b.n	800576c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	f003 0304 	and.w	r3, r3, #4
 8005766:	2b04      	cmp	r3, #4
 8005768:	d1c3      	bne.n	80056f2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800576a:	2300      	movs	r3, #0
}
 800576c:	4618      	mov	r0, r3
 800576e:	3710      	adds	r7, #16
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005780:	e049      	b.n	8005816 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	695b      	ldr	r3, [r3, #20]
 8005788:	f003 0310 	and.w	r3, r3, #16
 800578c:	2b10      	cmp	r3, #16
 800578e:	d119      	bne.n	80057c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f06f 0210 	mvn.w	r2, #16
 8005798:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2200      	movs	r2, #0
 800579e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2220      	movs	r2, #32
 80057a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e030      	b.n	8005826 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057c4:	f7fd fe8e 	bl	80034e4 <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	68ba      	ldr	r2, [r7, #8]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d302      	bcc.n	80057da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d11d      	bne.n	8005816 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	695b      	ldr	r3, [r3, #20]
 80057e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e4:	2b40      	cmp	r3, #64	; 0x40
 80057e6:	d016      	beq.n	8005816 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2220      	movs	r2, #32
 80057f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005802:	f043 0220 	orr.w	r2, r3, #32
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e007      	b.n	8005826 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	695b      	ldr	r3, [r3, #20]
 800581c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005820:	2b40      	cmp	r3, #64	; 0x40
 8005822:	d1ae      	bne.n	8005782 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3710      	adds	r7, #16
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}

0800582e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800582e:	b480      	push	{r7}
 8005830:	b083      	sub	sp, #12
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	695b      	ldr	r3, [r3, #20]
 800583c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005840:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005844:	d11b      	bne.n	800587e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800584e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2220      	movs	r2, #32
 800585a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586a:	f043 0204 	orr.w	r2, r3, #4
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e000      	b.n	8005880 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	bc80      	pop	{r7}
 8005888:	4770      	bx	lr
	...

0800588c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b086      	sub	sp, #24
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d101      	bne.n	800589e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e272      	b.n	8005d84 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0301 	and.w	r3, r3, #1
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	f000 8087 	beq.w	80059ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80058ac:	4b92      	ldr	r3, [pc, #584]	; (8005af8 <HAL_RCC_OscConfig+0x26c>)
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f003 030c 	and.w	r3, r3, #12
 80058b4:	2b04      	cmp	r3, #4
 80058b6:	d00c      	beq.n	80058d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80058b8:	4b8f      	ldr	r3, [pc, #572]	; (8005af8 <HAL_RCC_OscConfig+0x26c>)
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	f003 030c 	and.w	r3, r3, #12
 80058c0:	2b08      	cmp	r3, #8
 80058c2:	d112      	bne.n	80058ea <HAL_RCC_OscConfig+0x5e>
 80058c4:	4b8c      	ldr	r3, [pc, #560]	; (8005af8 <HAL_RCC_OscConfig+0x26c>)
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058d0:	d10b      	bne.n	80058ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058d2:	4b89      	ldr	r3, [pc, #548]	; (8005af8 <HAL_RCC_OscConfig+0x26c>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d06c      	beq.n	80059b8 <HAL_RCC_OscConfig+0x12c>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d168      	bne.n	80059b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e24c      	b.n	8005d84 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058f2:	d106      	bne.n	8005902 <HAL_RCC_OscConfig+0x76>
 80058f4:	4b80      	ldr	r3, [pc, #512]	; (8005af8 <HAL_RCC_OscConfig+0x26c>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a7f      	ldr	r2, [pc, #508]	; (8005af8 <HAL_RCC_OscConfig+0x26c>)
 80058fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058fe:	6013      	str	r3, [r2, #0]
 8005900:	e02e      	b.n	8005960 <HAL_RCC_OscConfig+0xd4>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d10c      	bne.n	8005924 <HAL_RCC_OscConfig+0x98>
 800590a:	4b7b      	ldr	r3, [pc, #492]	; (8005af8 <HAL_RCC_OscConfig+0x26c>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a7a      	ldr	r2, [pc, #488]	; (8005af8 <HAL_RCC_OscConfig+0x26c>)
 8005910:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005914:	6013      	str	r3, [r2, #0]
 8005916:	4b78      	ldr	r3, [pc, #480]	; (8005af8 <HAL_RCC_OscConfig+0x26c>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a77      	ldr	r2, [pc, #476]	; (8005af8 <HAL_RCC_OscConfig+0x26c>)
 800591c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005920:	6013      	str	r3, [r2, #0]
 8005922:	e01d      	b.n	8005960 <HAL_RCC_OscConfig+0xd4>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800592c:	d10c      	bne.n	8005948 <HAL_RCC_OscConfig+0xbc>
 800592e:	4b72      	ldr	r3, [pc, #456]	; (8005af8 <HAL_RCC_OscConfig+0x26c>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a71      	ldr	r2, [pc, #452]	; (8005af8 <HAL_RCC_OscConfig+0x26c>)
 8005934:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005938:	6013      	str	r3, [r2, #0]
 800593a:	4b6f      	ldr	r3, [pc, #444]	; (8005af8 <HAL_RCC_OscConfig+0x26c>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a6e      	ldr	r2, [pc, #440]	; (8005af8 <HAL_RCC_OscConfig+0x26c>)
 8005940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005944:	6013      	str	r3, [r2, #0]
 8005946:	e00b      	b.n	8005960 <HAL_RCC_OscConfig+0xd4>
 8005948:	4b6b      	ldr	r3, [pc, #428]	; (8005af8 <HAL_RCC_OscConfig+0x26c>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a6a      	ldr	r2, [pc, #424]	; (8005af8 <HAL_RCC_OscConfig+0x26c>)
 800594e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005952:	6013      	str	r3, [r2, #0]
 8005954:	4b68      	ldr	r3, [pc, #416]	; (8005af8 <HAL_RCC_OscConfig+0x26c>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a67      	ldr	r2, [pc, #412]	; (8005af8 <HAL_RCC_OscConfig+0x26c>)
 800595a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800595e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d013      	beq.n	8005990 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005968:	f7fd fdbc 	bl	80034e4 <HAL_GetTick>
 800596c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800596e:	e008      	b.n	8005982 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005970:	f7fd fdb8 	bl	80034e4 <HAL_GetTick>
 8005974:	4602      	mov	r2, r0
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	2b64      	cmp	r3, #100	; 0x64
 800597c:	d901      	bls.n	8005982 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	e200      	b.n	8005d84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005982:	4b5d      	ldr	r3, [pc, #372]	; (8005af8 <HAL_RCC_OscConfig+0x26c>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d0f0      	beq.n	8005970 <HAL_RCC_OscConfig+0xe4>
 800598e:	e014      	b.n	80059ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005990:	f7fd fda8 	bl	80034e4 <HAL_GetTick>
 8005994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005996:	e008      	b.n	80059aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005998:	f7fd fda4 	bl	80034e4 <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	2b64      	cmp	r3, #100	; 0x64
 80059a4:	d901      	bls.n	80059aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e1ec      	b.n	8005d84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059aa:	4b53      	ldr	r3, [pc, #332]	; (8005af8 <HAL_RCC_OscConfig+0x26c>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1f0      	bne.n	8005998 <HAL_RCC_OscConfig+0x10c>
 80059b6:	e000      	b.n	80059ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 0302 	and.w	r3, r3, #2
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d063      	beq.n	8005a8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80059c6:	4b4c      	ldr	r3, [pc, #304]	; (8005af8 <HAL_RCC_OscConfig+0x26c>)
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	f003 030c 	and.w	r3, r3, #12
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00b      	beq.n	80059ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80059d2:	4b49      	ldr	r3, [pc, #292]	; (8005af8 <HAL_RCC_OscConfig+0x26c>)
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	f003 030c 	and.w	r3, r3, #12
 80059da:	2b08      	cmp	r3, #8
 80059dc:	d11c      	bne.n	8005a18 <HAL_RCC_OscConfig+0x18c>
 80059de:	4b46      	ldr	r3, [pc, #280]	; (8005af8 <HAL_RCC_OscConfig+0x26c>)
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d116      	bne.n	8005a18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059ea:	4b43      	ldr	r3, [pc, #268]	; (8005af8 <HAL_RCC_OscConfig+0x26c>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0302 	and.w	r3, r3, #2
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d005      	beq.n	8005a02 <HAL_RCC_OscConfig+0x176>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d001      	beq.n	8005a02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e1c0      	b.n	8005d84 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a02:	4b3d      	ldr	r3, [pc, #244]	; (8005af8 <HAL_RCC_OscConfig+0x26c>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	00db      	lsls	r3, r3, #3
 8005a10:	4939      	ldr	r1, [pc, #228]	; (8005af8 <HAL_RCC_OscConfig+0x26c>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a16:	e03a      	b.n	8005a8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d020      	beq.n	8005a62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a20:	4b36      	ldr	r3, [pc, #216]	; (8005afc <HAL_RCC_OscConfig+0x270>)
 8005a22:	2201      	movs	r2, #1
 8005a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a26:	f7fd fd5d 	bl	80034e4 <HAL_GetTick>
 8005a2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a2c:	e008      	b.n	8005a40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a2e:	f7fd fd59 	bl	80034e4 <HAL_GetTick>
 8005a32:	4602      	mov	r2, r0
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d901      	bls.n	8005a40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e1a1      	b.n	8005d84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a40:	4b2d      	ldr	r3, [pc, #180]	; (8005af8 <HAL_RCC_OscConfig+0x26c>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 0302 	and.w	r3, r3, #2
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d0f0      	beq.n	8005a2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a4c:	4b2a      	ldr	r3, [pc, #168]	; (8005af8 <HAL_RCC_OscConfig+0x26c>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	695b      	ldr	r3, [r3, #20]
 8005a58:	00db      	lsls	r3, r3, #3
 8005a5a:	4927      	ldr	r1, [pc, #156]	; (8005af8 <HAL_RCC_OscConfig+0x26c>)
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	600b      	str	r3, [r1, #0]
 8005a60:	e015      	b.n	8005a8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a62:	4b26      	ldr	r3, [pc, #152]	; (8005afc <HAL_RCC_OscConfig+0x270>)
 8005a64:	2200      	movs	r2, #0
 8005a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a68:	f7fd fd3c 	bl	80034e4 <HAL_GetTick>
 8005a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a6e:	e008      	b.n	8005a82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a70:	f7fd fd38 	bl	80034e4 <HAL_GetTick>
 8005a74:	4602      	mov	r2, r0
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d901      	bls.n	8005a82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e180      	b.n	8005d84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a82:	4b1d      	ldr	r3, [pc, #116]	; (8005af8 <HAL_RCC_OscConfig+0x26c>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 0302 	and.w	r3, r3, #2
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1f0      	bne.n	8005a70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0308 	and.w	r3, r3, #8
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d03a      	beq.n	8005b10 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	699b      	ldr	r3, [r3, #24]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d019      	beq.n	8005ad6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005aa2:	4b17      	ldr	r3, [pc, #92]	; (8005b00 <HAL_RCC_OscConfig+0x274>)
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005aa8:	f7fd fd1c 	bl	80034e4 <HAL_GetTick>
 8005aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005aae:	e008      	b.n	8005ac2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ab0:	f7fd fd18 	bl	80034e4 <HAL_GetTick>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d901      	bls.n	8005ac2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e160      	b.n	8005d84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ac2:	4b0d      	ldr	r3, [pc, #52]	; (8005af8 <HAL_RCC_OscConfig+0x26c>)
 8005ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac6:	f003 0302 	and.w	r3, r3, #2
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d0f0      	beq.n	8005ab0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005ace:	2001      	movs	r0, #1
 8005ad0:	f000 faba 	bl	8006048 <RCC_Delay>
 8005ad4:	e01c      	b.n	8005b10 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ad6:	4b0a      	ldr	r3, [pc, #40]	; (8005b00 <HAL_RCC_OscConfig+0x274>)
 8005ad8:	2200      	movs	r2, #0
 8005ada:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005adc:	f7fd fd02 	bl	80034e4 <HAL_GetTick>
 8005ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ae2:	e00f      	b.n	8005b04 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ae4:	f7fd fcfe 	bl	80034e4 <HAL_GetTick>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	d908      	bls.n	8005b04 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e146      	b.n	8005d84 <HAL_RCC_OscConfig+0x4f8>
 8005af6:	bf00      	nop
 8005af8:	40021000 	.word	0x40021000
 8005afc:	42420000 	.word	0x42420000
 8005b00:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b04:	4b92      	ldr	r3, [pc, #584]	; (8005d50 <HAL_RCC_OscConfig+0x4c4>)
 8005b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b08:	f003 0302 	and.w	r3, r3, #2
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d1e9      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 0304 	and.w	r3, r3, #4
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	f000 80a6 	beq.w	8005c6a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b22:	4b8b      	ldr	r3, [pc, #556]	; (8005d50 <HAL_RCC_OscConfig+0x4c4>)
 8005b24:	69db      	ldr	r3, [r3, #28]
 8005b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d10d      	bne.n	8005b4a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b2e:	4b88      	ldr	r3, [pc, #544]	; (8005d50 <HAL_RCC_OscConfig+0x4c4>)
 8005b30:	69db      	ldr	r3, [r3, #28]
 8005b32:	4a87      	ldr	r2, [pc, #540]	; (8005d50 <HAL_RCC_OscConfig+0x4c4>)
 8005b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b38:	61d3      	str	r3, [r2, #28]
 8005b3a:	4b85      	ldr	r3, [pc, #532]	; (8005d50 <HAL_RCC_OscConfig+0x4c4>)
 8005b3c:	69db      	ldr	r3, [r3, #28]
 8005b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b42:	60bb      	str	r3, [r7, #8]
 8005b44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b46:	2301      	movs	r3, #1
 8005b48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b4a:	4b82      	ldr	r3, [pc, #520]	; (8005d54 <HAL_RCC_OscConfig+0x4c8>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d118      	bne.n	8005b88 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b56:	4b7f      	ldr	r3, [pc, #508]	; (8005d54 <HAL_RCC_OscConfig+0x4c8>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a7e      	ldr	r2, [pc, #504]	; (8005d54 <HAL_RCC_OscConfig+0x4c8>)
 8005b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b62:	f7fd fcbf 	bl	80034e4 <HAL_GetTick>
 8005b66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b68:	e008      	b.n	8005b7c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b6a:	f7fd fcbb 	bl	80034e4 <HAL_GetTick>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	1ad3      	subs	r3, r2, r3
 8005b74:	2b64      	cmp	r3, #100	; 0x64
 8005b76:	d901      	bls.n	8005b7c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	e103      	b.n	8005d84 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b7c:	4b75      	ldr	r3, [pc, #468]	; (8005d54 <HAL_RCC_OscConfig+0x4c8>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d0f0      	beq.n	8005b6a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d106      	bne.n	8005b9e <HAL_RCC_OscConfig+0x312>
 8005b90:	4b6f      	ldr	r3, [pc, #444]	; (8005d50 <HAL_RCC_OscConfig+0x4c4>)
 8005b92:	6a1b      	ldr	r3, [r3, #32]
 8005b94:	4a6e      	ldr	r2, [pc, #440]	; (8005d50 <HAL_RCC_OscConfig+0x4c4>)
 8005b96:	f043 0301 	orr.w	r3, r3, #1
 8005b9a:	6213      	str	r3, [r2, #32]
 8005b9c:	e02d      	b.n	8005bfa <HAL_RCC_OscConfig+0x36e>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d10c      	bne.n	8005bc0 <HAL_RCC_OscConfig+0x334>
 8005ba6:	4b6a      	ldr	r3, [pc, #424]	; (8005d50 <HAL_RCC_OscConfig+0x4c4>)
 8005ba8:	6a1b      	ldr	r3, [r3, #32]
 8005baa:	4a69      	ldr	r2, [pc, #420]	; (8005d50 <HAL_RCC_OscConfig+0x4c4>)
 8005bac:	f023 0301 	bic.w	r3, r3, #1
 8005bb0:	6213      	str	r3, [r2, #32]
 8005bb2:	4b67      	ldr	r3, [pc, #412]	; (8005d50 <HAL_RCC_OscConfig+0x4c4>)
 8005bb4:	6a1b      	ldr	r3, [r3, #32]
 8005bb6:	4a66      	ldr	r2, [pc, #408]	; (8005d50 <HAL_RCC_OscConfig+0x4c4>)
 8005bb8:	f023 0304 	bic.w	r3, r3, #4
 8005bbc:	6213      	str	r3, [r2, #32]
 8005bbe:	e01c      	b.n	8005bfa <HAL_RCC_OscConfig+0x36e>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	2b05      	cmp	r3, #5
 8005bc6:	d10c      	bne.n	8005be2 <HAL_RCC_OscConfig+0x356>
 8005bc8:	4b61      	ldr	r3, [pc, #388]	; (8005d50 <HAL_RCC_OscConfig+0x4c4>)
 8005bca:	6a1b      	ldr	r3, [r3, #32]
 8005bcc:	4a60      	ldr	r2, [pc, #384]	; (8005d50 <HAL_RCC_OscConfig+0x4c4>)
 8005bce:	f043 0304 	orr.w	r3, r3, #4
 8005bd2:	6213      	str	r3, [r2, #32]
 8005bd4:	4b5e      	ldr	r3, [pc, #376]	; (8005d50 <HAL_RCC_OscConfig+0x4c4>)
 8005bd6:	6a1b      	ldr	r3, [r3, #32]
 8005bd8:	4a5d      	ldr	r2, [pc, #372]	; (8005d50 <HAL_RCC_OscConfig+0x4c4>)
 8005bda:	f043 0301 	orr.w	r3, r3, #1
 8005bde:	6213      	str	r3, [r2, #32]
 8005be0:	e00b      	b.n	8005bfa <HAL_RCC_OscConfig+0x36e>
 8005be2:	4b5b      	ldr	r3, [pc, #364]	; (8005d50 <HAL_RCC_OscConfig+0x4c4>)
 8005be4:	6a1b      	ldr	r3, [r3, #32]
 8005be6:	4a5a      	ldr	r2, [pc, #360]	; (8005d50 <HAL_RCC_OscConfig+0x4c4>)
 8005be8:	f023 0301 	bic.w	r3, r3, #1
 8005bec:	6213      	str	r3, [r2, #32]
 8005bee:	4b58      	ldr	r3, [pc, #352]	; (8005d50 <HAL_RCC_OscConfig+0x4c4>)
 8005bf0:	6a1b      	ldr	r3, [r3, #32]
 8005bf2:	4a57      	ldr	r2, [pc, #348]	; (8005d50 <HAL_RCC_OscConfig+0x4c4>)
 8005bf4:	f023 0304 	bic.w	r3, r3, #4
 8005bf8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d015      	beq.n	8005c2e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c02:	f7fd fc6f 	bl	80034e4 <HAL_GetTick>
 8005c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c08:	e00a      	b.n	8005c20 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c0a:	f7fd fc6b 	bl	80034e4 <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d901      	bls.n	8005c20 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	e0b1      	b.n	8005d84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c20:	4b4b      	ldr	r3, [pc, #300]	; (8005d50 <HAL_RCC_OscConfig+0x4c4>)
 8005c22:	6a1b      	ldr	r3, [r3, #32]
 8005c24:	f003 0302 	and.w	r3, r3, #2
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d0ee      	beq.n	8005c0a <HAL_RCC_OscConfig+0x37e>
 8005c2c:	e014      	b.n	8005c58 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c2e:	f7fd fc59 	bl	80034e4 <HAL_GetTick>
 8005c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c34:	e00a      	b.n	8005c4c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c36:	f7fd fc55 	bl	80034e4 <HAL_GetTick>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d901      	bls.n	8005c4c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e09b      	b.n	8005d84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c4c:	4b40      	ldr	r3, [pc, #256]	; (8005d50 <HAL_RCC_OscConfig+0x4c4>)
 8005c4e:	6a1b      	ldr	r3, [r3, #32]
 8005c50:	f003 0302 	and.w	r3, r3, #2
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1ee      	bne.n	8005c36 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005c58:	7dfb      	ldrb	r3, [r7, #23]
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d105      	bne.n	8005c6a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c5e:	4b3c      	ldr	r3, [pc, #240]	; (8005d50 <HAL_RCC_OscConfig+0x4c4>)
 8005c60:	69db      	ldr	r3, [r3, #28]
 8005c62:	4a3b      	ldr	r2, [pc, #236]	; (8005d50 <HAL_RCC_OscConfig+0x4c4>)
 8005c64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c68:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	69db      	ldr	r3, [r3, #28]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	f000 8087 	beq.w	8005d82 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c74:	4b36      	ldr	r3, [pc, #216]	; (8005d50 <HAL_RCC_OscConfig+0x4c4>)
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	f003 030c 	and.w	r3, r3, #12
 8005c7c:	2b08      	cmp	r3, #8
 8005c7e:	d061      	beq.n	8005d44 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	69db      	ldr	r3, [r3, #28]
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	d146      	bne.n	8005d16 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c88:	4b33      	ldr	r3, [pc, #204]	; (8005d58 <HAL_RCC_OscConfig+0x4cc>)
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c8e:	f7fd fc29 	bl	80034e4 <HAL_GetTick>
 8005c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c94:	e008      	b.n	8005ca8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c96:	f7fd fc25 	bl	80034e4 <HAL_GetTick>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	1ad3      	subs	r3, r2, r3
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	d901      	bls.n	8005ca8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	e06d      	b.n	8005d84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ca8:	4b29      	ldr	r3, [pc, #164]	; (8005d50 <HAL_RCC_OscConfig+0x4c4>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d1f0      	bne.n	8005c96 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a1b      	ldr	r3, [r3, #32]
 8005cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cbc:	d108      	bne.n	8005cd0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005cbe:	4b24      	ldr	r3, [pc, #144]	; (8005d50 <HAL_RCC_OscConfig+0x4c4>)
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	4921      	ldr	r1, [pc, #132]	; (8005d50 <HAL_RCC_OscConfig+0x4c4>)
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005cd0:	4b1f      	ldr	r3, [pc, #124]	; (8005d50 <HAL_RCC_OscConfig+0x4c4>)
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a19      	ldr	r1, [r3, #32]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce0:	430b      	orrs	r3, r1
 8005ce2:	491b      	ldr	r1, [pc, #108]	; (8005d50 <HAL_RCC_OscConfig+0x4c4>)
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ce8:	4b1b      	ldr	r3, [pc, #108]	; (8005d58 <HAL_RCC_OscConfig+0x4cc>)
 8005cea:	2201      	movs	r2, #1
 8005cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cee:	f7fd fbf9 	bl	80034e4 <HAL_GetTick>
 8005cf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005cf4:	e008      	b.n	8005d08 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cf6:	f7fd fbf5 	bl	80034e4 <HAL_GetTick>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	1ad3      	subs	r3, r2, r3
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d901      	bls.n	8005d08 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005d04:	2303      	movs	r3, #3
 8005d06:	e03d      	b.n	8005d84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005d08:	4b11      	ldr	r3, [pc, #68]	; (8005d50 <HAL_RCC_OscConfig+0x4c4>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d0f0      	beq.n	8005cf6 <HAL_RCC_OscConfig+0x46a>
 8005d14:	e035      	b.n	8005d82 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d16:	4b10      	ldr	r3, [pc, #64]	; (8005d58 <HAL_RCC_OscConfig+0x4cc>)
 8005d18:	2200      	movs	r2, #0
 8005d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d1c:	f7fd fbe2 	bl	80034e4 <HAL_GetTick>
 8005d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d22:	e008      	b.n	8005d36 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d24:	f7fd fbde 	bl	80034e4 <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d901      	bls.n	8005d36 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e026      	b.n	8005d84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d36:	4b06      	ldr	r3, [pc, #24]	; (8005d50 <HAL_RCC_OscConfig+0x4c4>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d1f0      	bne.n	8005d24 <HAL_RCC_OscConfig+0x498>
 8005d42:	e01e      	b.n	8005d82 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	69db      	ldr	r3, [r3, #28]
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d107      	bne.n	8005d5c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e019      	b.n	8005d84 <HAL_RCC_OscConfig+0x4f8>
 8005d50:	40021000 	.word	0x40021000
 8005d54:	40007000 	.word	0x40007000
 8005d58:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005d5c:	4b0b      	ldr	r3, [pc, #44]	; (8005d8c <HAL_RCC_OscConfig+0x500>)
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a1b      	ldr	r3, [r3, #32]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d106      	bne.n	8005d7e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d001      	beq.n	8005d82 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e000      	b.n	8005d84 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3718      	adds	r7, #24
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	40021000 	.word	0x40021000

08005d90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d101      	bne.n	8005da4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e0d0      	b.n	8005f46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005da4:	4b6a      	ldr	r3, [pc, #424]	; (8005f50 <HAL_RCC_ClockConfig+0x1c0>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 0307 	and.w	r3, r3, #7
 8005dac:	683a      	ldr	r2, [r7, #0]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d910      	bls.n	8005dd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005db2:	4b67      	ldr	r3, [pc, #412]	; (8005f50 <HAL_RCC_ClockConfig+0x1c0>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f023 0207 	bic.w	r2, r3, #7
 8005dba:	4965      	ldr	r1, [pc, #404]	; (8005f50 <HAL_RCC_ClockConfig+0x1c0>)
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dc2:	4b63      	ldr	r3, [pc, #396]	; (8005f50 <HAL_RCC_ClockConfig+0x1c0>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 0307 	and.w	r3, r3, #7
 8005dca:	683a      	ldr	r2, [r7, #0]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d001      	beq.n	8005dd4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e0b8      	b.n	8005f46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 0302 	and.w	r3, r3, #2
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d020      	beq.n	8005e22 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 0304 	and.w	r3, r3, #4
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d005      	beq.n	8005df8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005dec:	4b59      	ldr	r3, [pc, #356]	; (8005f54 <HAL_RCC_ClockConfig+0x1c4>)
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	4a58      	ldr	r2, [pc, #352]	; (8005f54 <HAL_RCC_ClockConfig+0x1c4>)
 8005df2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005df6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0308 	and.w	r3, r3, #8
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d005      	beq.n	8005e10 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e04:	4b53      	ldr	r3, [pc, #332]	; (8005f54 <HAL_RCC_ClockConfig+0x1c4>)
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	4a52      	ldr	r2, [pc, #328]	; (8005f54 <HAL_RCC_ClockConfig+0x1c4>)
 8005e0a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005e0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e10:	4b50      	ldr	r3, [pc, #320]	; (8005f54 <HAL_RCC_ClockConfig+0x1c4>)
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	494d      	ldr	r1, [pc, #308]	; (8005f54 <HAL_RCC_ClockConfig+0x1c4>)
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 0301 	and.w	r3, r3, #1
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d040      	beq.n	8005eb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d107      	bne.n	8005e46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e36:	4b47      	ldr	r3, [pc, #284]	; (8005f54 <HAL_RCC_ClockConfig+0x1c4>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d115      	bne.n	8005e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e07f      	b.n	8005f46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	2b02      	cmp	r3, #2
 8005e4c:	d107      	bne.n	8005e5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e4e:	4b41      	ldr	r3, [pc, #260]	; (8005f54 <HAL_RCC_ClockConfig+0x1c4>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d109      	bne.n	8005e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e073      	b.n	8005f46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e5e:	4b3d      	ldr	r3, [pc, #244]	; (8005f54 <HAL_RCC_ClockConfig+0x1c4>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0302 	and.w	r3, r3, #2
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d101      	bne.n	8005e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e06b      	b.n	8005f46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e6e:	4b39      	ldr	r3, [pc, #228]	; (8005f54 <HAL_RCC_ClockConfig+0x1c4>)
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	f023 0203 	bic.w	r2, r3, #3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	4936      	ldr	r1, [pc, #216]	; (8005f54 <HAL_RCC_ClockConfig+0x1c4>)
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e80:	f7fd fb30 	bl	80034e4 <HAL_GetTick>
 8005e84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e86:	e00a      	b.n	8005e9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e88:	f7fd fb2c 	bl	80034e4 <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d901      	bls.n	8005e9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e053      	b.n	8005f46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e9e:	4b2d      	ldr	r3, [pc, #180]	; (8005f54 <HAL_RCC_ClockConfig+0x1c4>)
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	f003 020c 	and.w	r2, r3, #12
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d1eb      	bne.n	8005e88 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005eb0:	4b27      	ldr	r3, [pc, #156]	; (8005f50 <HAL_RCC_ClockConfig+0x1c0>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 0307 	and.w	r3, r3, #7
 8005eb8:	683a      	ldr	r2, [r7, #0]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d210      	bcs.n	8005ee0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ebe:	4b24      	ldr	r3, [pc, #144]	; (8005f50 <HAL_RCC_ClockConfig+0x1c0>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f023 0207 	bic.w	r2, r3, #7
 8005ec6:	4922      	ldr	r1, [pc, #136]	; (8005f50 <HAL_RCC_ClockConfig+0x1c0>)
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ece:	4b20      	ldr	r3, [pc, #128]	; (8005f50 <HAL_RCC_ClockConfig+0x1c0>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 0307 	and.w	r3, r3, #7
 8005ed6:	683a      	ldr	r2, [r7, #0]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d001      	beq.n	8005ee0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	e032      	b.n	8005f46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 0304 	and.w	r3, r3, #4
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d008      	beq.n	8005efe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005eec:	4b19      	ldr	r3, [pc, #100]	; (8005f54 <HAL_RCC_ClockConfig+0x1c4>)
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	4916      	ldr	r1, [pc, #88]	; (8005f54 <HAL_RCC_ClockConfig+0x1c4>)
 8005efa:	4313      	orrs	r3, r2
 8005efc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 0308 	and.w	r3, r3, #8
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d009      	beq.n	8005f1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005f0a:	4b12      	ldr	r3, [pc, #72]	; (8005f54 <HAL_RCC_ClockConfig+0x1c4>)
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	00db      	lsls	r3, r3, #3
 8005f18:	490e      	ldr	r1, [pc, #56]	; (8005f54 <HAL_RCC_ClockConfig+0x1c4>)
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005f1e:	f000 f821 	bl	8005f64 <HAL_RCC_GetSysClockFreq>
 8005f22:	4602      	mov	r2, r0
 8005f24:	4b0b      	ldr	r3, [pc, #44]	; (8005f54 <HAL_RCC_ClockConfig+0x1c4>)
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	091b      	lsrs	r3, r3, #4
 8005f2a:	f003 030f 	and.w	r3, r3, #15
 8005f2e:	490a      	ldr	r1, [pc, #40]	; (8005f58 <HAL_RCC_ClockConfig+0x1c8>)
 8005f30:	5ccb      	ldrb	r3, [r1, r3]
 8005f32:	fa22 f303 	lsr.w	r3, r2, r3
 8005f36:	4a09      	ldr	r2, [pc, #36]	; (8005f5c <HAL_RCC_ClockConfig+0x1cc>)
 8005f38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005f3a:	4b09      	ldr	r3, [pc, #36]	; (8005f60 <HAL_RCC_ClockConfig+0x1d0>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7fd fa8e 	bl	8003460 <HAL_InitTick>

  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3710      	adds	r7, #16
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	40022000 	.word	0x40022000
 8005f54:	40021000 	.word	0x40021000
 8005f58:	080086a4 	.word	0x080086a4
 8005f5c:	200007cc 	.word	0x200007cc
 8005f60:	200007d0 	.word	0x200007d0

08005f64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b087      	sub	sp, #28
 8005f68:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	60fb      	str	r3, [r7, #12]
 8005f6e:	2300      	movs	r3, #0
 8005f70:	60bb      	str	r3, [r7, #8]
 8005f72:	2300      	movs	r3, #0
 8005f74:	617b      	str	r3, [r7, #20]
 8005f76:	2300      	movs	r3, #0
 8005f78:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005f7e:	4b1e      	ldr	r3, [pc, #120]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f003 030c 	and.w	r3, r3, #12
 8005f8a:	2b04      	cmp	r3, #4
 8005f8c:	d002      	beq.n	8005f94 <HAL_RCC_GetSysClockFreq+0x30>
 8005f8e:	2b08      	cmp	r3, #8
 8005f90:	d003      	beq.n	8005f9a <HAL_RCC_GetSysClockFreq+0x36>
 8005f92:	e027      	b.n	8005fe4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005f94:	4b19      	ldr	r3, [pc, #100]	; (8005ffc <HAL_RCC_GetSysClockFreq+0x98>)
 8005f96:	613b      	str	r3, [r7, #16]
      break;
 8005f98:	e027      	b.n	8005fea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	0c9b      	lsrs	r3, r3, #18
 8005f9e:	f003 030f 	and.w	r3, r3, #15
 8005fa2:	4a17      	ldr	r2, [pc, #92]	; (8006000 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005fa4:	5cd3      	ldrb	r3, [r2, r3]
 8005fa6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d010      	beq.n	8005fd4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005fb2:	4b11      	ldr	r3, [pc, #68]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	0c5b      	lsrs	r3, r3, #17
 8005fb8:	f003 0301 	and.w	r3, r3, #1
 8005fbc:	4a11      	ldr	r2, [pc, #68]	; (8006004 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005fbe:	5cd3      	ldrb	r3, [r2, r3]
 8005fc0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a0d      	ldr	r2, [pc, #52]	; (8005ffc <HAL_RCC_GetSysClockFreq+0x98>)
 8005fc6:	fb03 f202 	mul.w	r2, r3, r2
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fd0:	617b      	str	r3, [r7, #20]
 8005fd2:	e004      	b.n	8005fde <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a0c      	ldr	r2, [pc, #48]	; (8006008 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005fd8:	fb02 f303 	mul.w	r3, r2, r3
 8005fdc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	613b      	str	r3, [r7, #16]
      break;
 8005fe2:	e002      	b.n	8005fea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005fe4:	4b05      	ldr	r3, [pc, #20]	; (8005ffc <HAL_RCC_GetSysClockFreq+0x98>)
 8005fe6:	613b      	str	r3, [r7, #16]
      break;
 8005fe8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005fea:	693b      	ldr	r3, [r7, #16]
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	371c      	adds	r7, #28
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bc80      	pop	{r7}
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	40021000 	.word	0x40021000
 8005ffc:	007a1200 	.word	0x007a1200
 8006000:	080086bc 	.word	0x080086bc
 8006004:	080086cc 	.word	0x080086cc
 8006008:	003d0900 	.word	0x003d0900

0800600c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800600c:	b480      	push	{r7}
 800600e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006010:	4b02      	ldr	r3, [pc, #8]	; (800601c <HAL_RCC_GetHCLKFreq+0x10>)
 8006012:	681b      	ldr	r3, [r3, #0]
}
 8006014:	4618      	mov	r0, r3
 8006016:	46bd      	mov	sp, r7
 8006018:	bc80      	pop	{r7}
 800601a:	4770      	bx	lr
 800601c:	200007cc 	.word	0x200007cc

08006020 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006024:	f7ff fff2 	bl	800600c <HAL_RCC_GetHCLKFreq>
 8006028:	4602      	mov	r2, r0
 800602a:	4b05      	ldr	r3, [pc, #20]	; (8006040 <HAL_RCC_GetPCLK1Freq+0x20>)
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	0a1b      	lsrs	r3, r3, #8
 8006030:	f003 0307 	and.w	r3, r3, #7
 8006034:	4903      	ldr	r1, [pc, #12]	; (8006044 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006036:	5ccb      	ldrb	r3, [r1, r3]
 8006038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800603c:	4618      	mov	r0, r3
 800603e:	bd80      	pop	{r7, pc}
 8006040:	40021000 	.word	0x40021000
 8006044:	080086b4 	.word	0x080086b4

08006048 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006048:	b480      	push	{r7}
 800604a:	b085      	sub	sp, #20
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006050:	4b0a      	ldr	r3, [pc, #40]	; (800607c <RCC_Delay+0x34>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a0a      	ldr	r2, [pc, #40]	; (8006080 <RCC_Delay+0x38>)
 8006056:	fba2 2303 	umull	r2, r3, r2, r3
 800605a:	0a5b      	lsrs	r3, r3, #9
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	fb02 f303 	mul.w	r3, r2, r3
 8006062:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006064:	bf00      	nop
  }
  while (Delay --);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	1e5a      	subs	r2, r3, #1
 800606a:	60fa      	str	r2, [r7, #12]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d1f9      	bne.n	8006064 <RCC_Delay+0x1c>
}
 8006070:	bf00      	nop
 8006072:	bf00      	nop
 8006074:	3714      	adds	r7, #20
 8006076:	46bd      	mov	sp, r7
 8006078:	bc80      	pop	{r7}
 800607a:	4770      	bx	lr
 800607c:	200007cc 	.word	0x200007cc
 8006080:	10624dd3 	.word	0x10624dd3

08006084 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d101      	bne.n	8006096 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e041      	b.n	800611a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800609c:	b2db      	uxtb	r3, r3
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d106      	bne.n	80060b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f7fd f92e 	bl	800330c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2202      	movs	r2, #2
 80060b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	3304      	adds	r3, #4
 80060c0:	4619      	mov	r1, r3
 80060c2:	4610      	mov	r0, r2
 80060c4:	f000 fa74 	bl	80065b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3708      	adds	r7, #8
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
	...

08006124 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006124:	b480      	push	{r7}
 8006126:	b085      	sub	sp, #20
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006132:	b2db      	uxtb	r3, r3
 8006134:	2b01      	cmp	r3, #1
 8006136:	d001      	beq.n	800613c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	e03a      	b.n	80061b2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2202      	movs	r2, #2
 8006140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68da      	ldr	r2, [r3, #12]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f042 0201 	orr.w	r2, r2, #1
 8006152:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a18      	ldr	r2, [pc, #96]	; (80061bc <HAL_TIM_Base_Start_IT+0x98>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d00e      	beq.n	800617c <HAL_TIM_Base_Start_IT+0x58>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006166:	d009      	beq.n	800617c <HAL_TIM_Base_Start_IT+0x58>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a14      	ldr	r2, [pc, #80]	; (80061c0 <HAL_TIM_Base_Start_IT+0x9c>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d004      	beq.n	800617c <HAL_TIM_Base_Start_IT+0x58>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a13      	ldr	r2, [pc, #76]	; (80061c4 <HAL_TIM_Base_Start_IT+0xa0>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d111      	bne.n	80061a0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	f003 0307 	and.w	r3, r3, #7
 8006186:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2b06      	cmp	r3, #6
 800618c:	d010      	beq.n	80061b0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f042 0201 	orr.w	r2, r2, #1
 800619c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800619e:	e007      	b.n	80061b0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f042 0201 	orr.w	r2, r2, #1
 80061ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3714      	adds	r7, #20
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bc80      	pop	{r7}
 80061ba:	4770      	bx	lr
 80061bc:	40012c00 	.word	0x40012c00
 80061c0:	40000400 	.word	0x40000400
 80061c4:	40000800 	.word	0x40000800

080061c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	f003 0302 	and.w	r3, r3, #2
 80061da:	2b02      	cmp	r3, #2
 80061dc:	d122      	bne.n	8006224 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	f003 0302 	and.w	r3, r3, #2
 80061e8:	2b02      	cmp	r3, #2
 80061ea:	d11b      	bne.n	8006224 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f06f 0202 	mvn.w	r2, #2
 80061f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2201      	movs	r2, #1
 80061fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	699b      	ldr	r3, [r3, #24]
 8006202:	f003 0303 	and.w	r3, r3, #3
 8006206:	2b00      	cmp	r3, #0
 8006208:	d003      	beq.n	8006212 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 f9b4 	bl	8006578 <HAL_TIM_IC_CaptureCallback>
 8006210:	e005      	b.n	800621e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 f9a7 	bl	8006566 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 f9b6 	bl	800658a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	f003 0304 	and.w	r3, r3, #4
 800622e:	2b04      	cmp	r3, #4
 8006230:	d122      	bne.n	8006278 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	f003 0304 	and.w	r3, r3, #4
 800623c:	2b04      	cmp	r3, #4
 800623e:	d11b      	bne.n	8006278 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f06f 0204 	mvn.w	r2, #4
 8006248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2202      	movs	r2, #2
 800624e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	699b      	ldr	r3, [r3, #24]
 8006256:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800625a:	2b00      	cmp	r3, #0
 800625c:	d003      	beq.n	8006266 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f98a 	bl	8006578 <HAL_TIM_IC_CaptureCallback>
 8006264:	e005      	b.n	8006272 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 f97d 	bl	8006566 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 f98c 	bl	800658a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	f003 0308 	and.w	r3, r3, #8
 8006282:	2b08      	cmp	r3, #8
 8006284:	d122      	bne.n	80062cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	f003 0308 	and.w	r3, r3, #8
 8006290:	2b08      	cmp	r3, #8
 8006292:	d11b      	bne.n	80062cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f06f 0208 	mvn.w	r2, #8
 800629c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2204      	movs	r2, #4
 80062a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	69db      	ldr	r3, [r3, #28]
 80062aa:	f003 0303 	and.w	r3, r3, #3
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d003      	beq.n	80062ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 f960 	bl	8006578 <HAL_TIM_IC_CaptureCallback>
 80062b8:	e005      	b.n	80062c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 f953 	bl	8006566 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 f962 	bl	800658a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	f003 0310 	and.w	r3, r3, #16
 80062d6:	2b10      	cmp	r3, #16
 80062d8:	d122      	bne.n	8006320 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	f003 0310 	and.w	r3, r3, #16
 80062e4:	2b10      	cmp	r3, #16
 80062e6:	d11b      	bne.n	8006320 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f06f 0210 	mvn.w	r2, #16
 80062f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2208      	movs	r2, #8
 80062f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	69db      	ldr	r3, [r3, #28]
 80062fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006302:	2b00      	cmp	r3, #0
 8006304:	d003      	beq.n	800630e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 f936 	bl	8006578 <HAL_TIM_IC_CaptureCallback>
 800630c:	e005      	b.n	800631a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 f929 	bl	8006566 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 f938 	bl	800658a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	f003 0301 	and.w	r3, r3, #1
 800632a:	2b01      	cmp	r3, #1
 800632c:	d10e      	bne.n	800634c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	f003 0301 	and.w	r3, r3, #1
 8006338:	2b01      	cmp	r3, #1
 800633a:	d107      	bne.n	800634c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f06f 0201 	mvn.w	r2, #1
 8006344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f7fc fe6c 	bl	8003024 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006356:	2b80      	cmp	r3, #128	; 0x80
 8006358:	d10e      	bne.n	8006378 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006364:	2b80      	cmp	r3, #128	; 0x80
 8006366:	d107      	bne.n	8006378 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 fa7b 	bl	800686e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006382:	2b40      	cmp	r3, #64	; 0x40
 8006384:	d10e      	bne.n	80063a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006390:	2b40      	cmp	r3, #64	; 0x40
 8006392:	d107      	bne.n	80063a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800639c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 f8fc 	bl	800659c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	f003 0320 	and.w	r3, r3, #32
 80063ae:	2b20      	cmp	r3, #32
 80063b0:	d10e      	bne.n	80063d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	f003 0320 	and.w	r3, r3, #32
 80063bc:	2b20      	cmp	r3, #32
 80063be:	d107      	bne.n	80063d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f06f 0220 	mvn.w	r2, #32
 80063c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 fa46 	bl	800685c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80063d0:	bf00      	nop
 80063d2:	3708      	adds	r7, #8
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063e2:	2300      	movs	r3, #0
 80063e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d101      	bne.n	80063f4 <HAL_TIM_ConfigClockSource+0x1c>
 80063f0:	2302      	movs	r3, #2
 80063f2:	e0b4      	b.n	800655e <HAL_TIM_ConfigClockSource+0x186>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2202      	movs	r2, #2
 8006400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006412:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800641a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68ba      	ldr	r2, [r7, #8]
 8006422:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800642c:	d03e      	beq.n	80064ac <HAL_TIM_ConfigClockSource+0xd4>
 800642e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006432:	f200 8087 	bhi.w	8006544 <HAL_TIM_ConfigClockSource+0x16c>
 8006436:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800643a:	f000 8086 	beq.w	800654a <HAL_TIM_ConfigClockSource+0x172>
 800643e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006442:	d87f      	bhi.n	8006544 <HAL_TIM_ConfigClockSource+0x16c>
 8006444:	2b70      	cmp	r3, #112	; 0x70
 8006446:	d01a      	beq.n	800647e <HAL_TIM_ConfigClockSource+0xa6>
 8006448:	2b70      	cmp	r3, #112	; 0x70
 800644a:	d87b      	bhi.n	8006544 <HAL_TIM_ConfigClockSource+0x16c>
 800644c:	2b60      	cmp	r3, #96	; 0x60
 800644e:	d050      	beq.n	80064f2 <HAL_TIM_ConfigClockSource+0x11a>
 8006450:	2b60      	cmp	r3, #96	; 0x60
 8006452:	d877      	bhi.n	8006544 <HAL_TIM_ConfigClockSource+0x16c>
 8006454:	2b50      	cmp	r3, #80	; 0x50
 8006456:	d03c      	beq.n	80064d2 <HAL_TIM_ConfigClockSource+0xfa>
 8006458:	2b50      	cmp	r3, #80	; 0x50
 800645a:	d873      	bhi.n	8006544 <HAL_TIM_ConfigClockSource+0x16c>
 800645c:	2b40      	cmp	r3, #64	; 0x40
 800645e:	d058      	beq.n	8006512 <HAL_TIM_ConfigClockSource+0x13a>
 8006460:	2b40      	cmp	r3, #64	; 0x40
 8006462:	d86f      	bhi.n	8006544 <HAL_TIM_ConfigClockSource+0x16c>
 8006464:	2b30      	cmp	r3, #48	; 0x30
 8006466:	d064      	beq.n	8006532 <HAL_TIM_ConfigClockSource+0x15a>
 8006468:	2b30      	cmp	r3, #48	; 0x30
 800646a:	d86b      	bhi.n	8006544 <HAL_TIM_ConfigClockSource+0x16c>
 800646c:	2b20      	cmp	r3, #32
 800646e:	d060      	beq.n	8006532 <HAL_TIM_ConfigClockSource+0x15a>
 8006470:	2b20      	cmp	r3, #32
 8006472:	d867      	bhi.n	8006544 <HAL_TIM_ConfigClockSource+0x16c>
 8006474:	2b00      	cmp	r3, #0
 8006476:	d05c      	beq.n	8006532 <HAL_TIM_ConfigClockSource+0x15a>
 8006478:	2b10      	cmp	r3, #16
 800647a:	d05a      	beq.n	8006532 <HAL_TIM_ConfigClockSource+0x15a>
 800647c:	e062      	b.n	8006544 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800648e:	f000 f968 	bl	8006762 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80064a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68ba      	ldr	r2, [r7, #8]
 80064a8:	609a      	str	r2, [r3, #8]
      break;
 80064aa:	e04f      	b.n	800654c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80064bc:	f000 f951 	bl	8006762 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	689a      	ldr	r2, [r3, #8]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064ce:	609a      	str	r2, [r3, #8]
      break;
 80064d0:	e03c      	b.n	800654c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064de:	461a      	mov	r2, r3
 80064e0:	f000 f8c8 	bl	8006674 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2150      	movs	r1, #80	; 0x50
 80064ea:	4618      	mov	r0, r3
 80064ec:	f000 f91f 	bl	800672e <TIM_ITRx_SetConfig>
      break;
 80064f0:	e02c      	b.n	800654c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80064fe:	461a      	mov	r2, r3
 8006500:	f000 f8e6 	bl	80066d0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2160      	movs	r1, #96	; 0x60
 800650a:	4618      	mov	r0, r3
 800650c:	f000 f90f 	bl	800672e <TIM_ITRx_SetConfig>
      break;
 8006510:	e01c      	b.n	800654c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800651e:	461a      	mov	r2, r3
 8006520:	f000 f8a8 	bl	8006674 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2140      	movs	r1, #64	; 0x40
 800652a:	4618      	mov	r0, r3
 800652c:	f000 f8ff 	bl	800672e <TIM_ITRx_SetConfig>
      break;
 8006530:	e00c      	b.n	800654c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4619      	mov	r1, r3
 800653c:	4610      	mov	r0, r2
 800653e:	f000 f8f6 	bl	800672e <TIM_ITRx_SetConfig>
      break;
 8006542:	e003      	b.n	800654c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	73fb      	strb	r3, [r7, #15]
      break;
 8006548:	e000      	b.n	800654c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800654a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800655c:	7bfb      	ldrb	r3, [r7, #15]
}
 800655e:	4618      	mov	r0, r3
 8006560:	3710      	adds	r7, #16
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006566:	b480      	push	{r7}
 8006568:	b083      	sub	sp, #12
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800656e:	bf00      	nop
 8006570:	370c      	adds	r7, #12
 8006572:	46bd      	mov	sp, r7
 8006574:	bc80      	pop	{r7}
 8006576:	4770      	bx	lr

08006578 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006580:	bf00      	nop
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	bc80      	pop	{r7}
 8006588:	4770      	bx	lr

0800658a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800658a:	b480      	push	{r7}
 800658c:	b083      	sub	sp, #12
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006592:	bf00      	nop
 8006594:	370c      	adds	r7, #12
 8006596:	46bd      	mov	sp, r7
 8006598:	bc80      	pop	{r7}
 800659a:	4770      	bx	lr

0800659c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80065a4:	bf00      	nop
 80065a6:	370c      	adds	r7, #12
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bc80      	pop	{r7}
 80065ac:	4770      	bx	lr
	...

080065b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a29      	ldr	r2, [pc, #164]	; (8006668 <TIM_Base_SetConfig+0xb8>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d00b      	beq.n	80065e0 <TIM_Base_SetConfig+0x30>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065ce:	d007      	beq.n	80065e0 <TIM_Base_SetConfig+0x30>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a26      	ldr	r2, [pc, #152]	; (800666c <TIM_Base_SetConfig+0xbc>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d003      	beq.n	80065e0 <TIM_Base_SetConfig+0x30>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a25      	ldr	r2, [pc, #148]	; (8006670 <TIM_Base_SetConfig+0xc0>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d108      	bne.n	80065f2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a1c      	ldr	r2, [pc, #112]	; (8006668 <TIM_Base_SetConfig+0xb8>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d00b      	beq.n	8006612 <TIM_Base_SetConfig+0x62>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006600:	d007      	beq.n	8006612 <TIM_Base_SetConfig+0x62>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a19      	ldr	r2, [pc, #100]	; (800666c <TIM_Base_SetConfig+0xbc>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d003      	beq.n	8006612 <TIM_Base_SetConfig+0x62>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a18      	ldr	r2, [pc, #96]	; (8006670 <TIM_Base_SetConfig+0xc0>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d108      	bne.n	8006624 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006618:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	4313      	orrs	r3, r2
 8006622:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	695b      	ldr	r3, [r3, #20]
 800662e:	4313      	orrs	r3, r2
 8006630:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	689a      	ldr	r2, [r3, #8]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a07      	ldr	r2, [pc, #28]	; (8006668 <TIM_Base_SetConfig+0xb8>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d103      	bne.n	8006658 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	691a      	ldr	r2, [r3, #16]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2201      	movs	r2, #1
 800665c:	615a      	str	r2, [r3, #20]
}
 800665e:	bf00      	nop
 8006660:	3714      	adds	r7, #20
 8006662:	46bd      	mov	sp, r7
 8006664:	bc80      	pop	{r7}
 8006666:	4770      	bx	lr
 8006668:	40012c00 	.word	0x40012c00
 800666c:	40000400 	.word	0x40000400
 8006670:	40000800 	.word	0x40000800

08006674 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006674:	b480      	push	{r7}
 8006676:	b087      	sub	sp, #28
 8006678:	af00      	add	r7, sp, #0
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6a1b      	ldr	r3, [r3, #32]
 8006684:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	6a1b      	ldr	r3, [r3, #32]
 800668a:	f023 0201 	bic.w	r2, r3, #1
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	699b      	ldr	r3, [r3, #24]
 8006696:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800669e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	011b      	lsls	r3, r3, #4
 80066a4:	693a      	ldr	r2, [r7, #16]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	f023 030a 	bic.w	r3, r3, #10
 80066b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066b2:	697a      	ldr	r2, [r7, #20]
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	693a      	ldr	r2, [r7, #16]
 80066be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	697a      	ldr	r2, [r7, #20]
 80066c4:	621a      	str	r2, [r3, #32]
}
 80066c6:	bf00      	nop
 80066c8:	371c      	adds	r7, #28
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bc80      	pop	{r7}
 80066ce:	4770      	bx	lr

080066d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b087      	sub	sp, #28
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6a1b      	ldr	r3, [r3, #32]
 80066e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6a1b      	ldr	r3, [r3, #32]
 80066e6:	f023 0210 	bic.w	r2, r3, #16
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	699b      	ldr	r3, [r3, #24]
 80066f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	031b      	lsls	r3, r3, #12
 8006700:	693a      	ldr	r2, [r7, #16]
 8006702:	4313      	orrs	r3, r2
 8006704:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800670c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	011b      	lsls	r3, r3, #4
 8006712:	697a      	ldr	r2, [r7, #20]
 8006714:	4313      	orrs	r3, r2
 8006716:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	693a      	ldr	r2, [r7, #16]
 800671c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	697a      	ldr	r2, [r7, #20]
 8006722:	621a      	str	r2, [r3, #32]
}
 8006724:	bf00      	nop
 8006726:	371c      	adds	r7, #28
 8006728:	46bd      	mov	sp, r7
 800672a:	bc80      	pop	{r7}
 800672c:	4770      	bx	lr

0800672e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800672e:	b480      	push	{r7}
 8006730:	b085      	sub	sp, #20
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
 8006736:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006744:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006746:	683a      	ldr	r2, [r7, #0]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	4313      	orrs	r3, r2
 800674c:	f043 0307 	orr.w	r3, r3, #7
 8006750:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	609a      	str	r2, [r3, #8]
}
 8006758:	bf00      	nop
 800675a:	3714      	adds	r7, #20
 800675c:	46bd      	mov	sp, r7
 800675e:	bc80      	pop	{r7}
 8006760:	4770      	bx	lr

08006762 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006762:	b480      	push	{r7}
 8006764:	b087      	sub	sp, #28
 8006766:	af00      	add	r7, sp, #0
 8006768:	60f8      	str	r0, [r7, #12]
 800676a:	60b9      	str	r1, [r7, #8]
 800676c:	607a      	str	r2, [r7, #4]
 800676e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800677c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	021a      	lsls	r2, r3, #8
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	431a      	orrs	r2, r3
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	4313      	orrs	r3, r2
 800678a:	697a      	ldr	r2, [r7, #20]
 800678c:	4313      	orrs	r3, r2
 800678e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	697a      	ldr	r2, [r7, #20]
 8006794:	609a      	str	r2, [r3, #8]
}
 8006796:	bf00      	nop
 8006798:	371c      	adds	r7, #28
 800679a:	46bd      	mov	sp, r7
 800679c:	bc80      	pop	{r7}
 800679e:	4770      	bx	lr

080067a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b085      	sub	sp, #20
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d101      	bne.n	80067b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067b4:	2302      	movs	r3, #2
 80067b6:	e046      	b.n	8006846 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2202      	movs	r2, #2
 80067c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a16      	ldr	r2, [pc, #88]	; (8006850 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d00e      	beq.n	800681a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006804:	d009      	beq.n	800681a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a12      	ldr	r2, [pc, #72]	; (8006854 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d004      	beq.n	800681a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a10      	ldr	r2, [pc, #64]	; (8006858 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d10c      	bne.n	8006834 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006820:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	68ba      	ldr	r2, [r7, #8]
 8006828:	4313      	orrs	r3, r2
 800682a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68ba      	ldr	r2, [r7, #8]
 8006832:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3714      	adds	r7, #20
 800684a:	46bd      	mov	sp, r7
 800684c:	bc80      	pop	{r7}
 800684e:	4770      	bx	lr
 8006850:	40012c00 	.word	0x40012c00
 8006854:	40000400 	.word	0x40000400
 8006858:	40000800 	.word	0x40000800

0800685c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006864:	bf00      	nop
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	bc80      	pop	{r7}
 800686c:	4770      	bx	lr

0800686e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800686e:	b480      	push	{r7}
 8006870:	b083      	sub	sp, #12
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006876:	bf00      	nop
 8006878:	370c      	adds	r7, #12
 800687a:	46bd      	mov	sp, r7
 800687c:	bc80      	pop	{r7}
 800687e:	4770      	bx	lr

08006880 <memset>:
 8006880:	4603      	mov	r3, r0
 8006882:	4402      	add	r2, r0
 8006884:	4293      	cmp	r3, r2
 8006886:	d100      	bne.n	800688a <memset+0xa>
 8006888:	4770      	bx	lr
 800688a:	f803 1b01 	strb.w	r1, [r3], #1
 800688e:	e7f9      	b.n	8006884 <memset+0x4>

08006890 <__libc_init_array>:
 8006890:	b570      	push	{r4, r5, r6, lr}
 8006892:	2600      	movs	r6, #0
 8006894:	4d0c      	ldr	r5, [pc, #48]	; (80068c8 <__libc_init_array+0x38>)
 8006896:	4c0d      	ldr	r4, [pc, #52]	; (80068cc <__libc_init_array+0x3c>)
 8006898:	1b64      	subs	r4, r4, r5
 800689a:	10a4      	asrs	r4, r4, #2
 800689c:	42a6      	cmp	r6, r4
 800689e:	d109      	bne.n	80068b4 <__libc_init_array+0x24>
 80068a0:	f000 f81a 	bl	80068d8 <_init>
 80068a4:	2600      	movs	r6, #0
 80068a6:	4d0a      	ldr	r5, [pc, #40]	; (80068d0 <__libc_init_array+0x40>)
 80068a8:	4c0a      	ldr	r4, [pc, #40]	; (80068d4 <__libc_init_array+0x44>)
 80068aa:	1b64      	subs	r4, r4, r5
 80068ac:	10a4      	asrs	r4, r4, #2
 80068ae:	42a6      	cmp	r6, r4
 80068b0:	d105      	bne.n	80068be <__libc_init_array+0x2e>
 80068b2:	bd70      	pop	{r4, r5, r6, pc}
 80068b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80068b8:	4798      	blx	r3
 80068ba:	3601      	adds	r6, #1
 80068bc:	e7ee      	b.n	800689c <__libc_init_array+0xc>
 80068be:	f855 3b04 	ldr.w	r3, [r5], #4
 80068c2:	4798      	blx	r3
 80068c4:	3601      	adds	r6, #1
 80068c6:	e7f2      	b.n	80068ae <__libc_init_array+0x1e>
 80068c8:	080086d0 	.word	0x080086d0
 80068cc:	080086d0 	.word	0x080086d0
 80068d0:	080086d0 	.word	0x080086d0
 80068d4:	080086d4 	.word	0x080086d4

080068d8 <_init>:
 80068d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068da:	bf00      	nop
 80068dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068de:	bc08      	pop	{r3}
 80068e0:	469e      	mov	lr, r3
 80068e2:	4770      	bx	lr

080068e4 <_fini>:
 80068e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068e6:	bf00      	nop
 80068e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068ea:	bc08      	pop	{r3}
 80068ec:	469e      	mov	lr, r3
 80068ee:	4770      	bx	lr

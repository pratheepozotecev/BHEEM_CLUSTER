
Bheem_110.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008348  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e0c  08008458  08008458  00009458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a264  0800a264  0000c7f0  2**0
                  CONTENTS
  4 .ARM          00000000  0800a264  0800a264  0000c7f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a264  0800a264  0000c7f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a264  0800a264  0000b264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a268  0800a268  0000b268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000007f0  20000000  0800a26c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011a8  200007f0  0800aa5c  0000c7f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001998  0800aa5c  0000c998  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c7f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000100f5  00000000  00000000  0000c819  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024fc  00000000  00000000  0001c90e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff0  00000000  00000000  0001ee10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c70  00000000  00000000  0001fe00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001fd1  00000000  00000000  00020a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000129ca  00000000  00000000  00022a41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bcd7  00000000  00000000  0003540b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c10e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004528  00000000  00000000  000c1128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000c5650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200007f0 	.word	0x200007f0
 800012c:	00000000 	.word	0x00000000
 8000130:	08008440 	.word	0x08008440

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200007f4 	.word	0x200007f4
 800014c:	08008440 	.word	0x08008440

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <__aeabi_d2uiz>:
 800093c:	004a      	lsls	r2, r1, #1
 800093e:	d211      	bcs.n	8000964 <__aeabi_d2uiz+0x28>
 8000940:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000944:	d211      	bcs.n	800096a <__aeabi_d2uiz+0x2e>
 8000946:	d50d      	bpl.n	8000964 <__aeabi_d2uiz+0x28>
 8000948:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800094c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000950:	d40e      	bmi.n	8000970 <__aeabi_d2uiz+0x34>
 8000952:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000956:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800095a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800095e:	fa23 f002 	lsr.w	r0, r3, r2
 8000962:	4770      	bx	lr
 8000964:	f04f 0000 	mov.w	r0, #0
 8000968:	4770      	bx	lr
 800096a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800096e:	d102      	bne.n	8000976 <__aeabi_d2uiz+0x3a>
 8000970:	f04f 30ff 	mov.w	r0, #4294967295
 8000974:	4770      	bx	lr
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	4770      	bx	lr

0800097c <__aeabi_d2f>:
 800097c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000980:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000984:	bf24      	itt	cs
 8000986:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800098a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800098e:	d90d      	bls.n	80009ac <__aeabi_d2f+0x30>
 8000990:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000994:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000998:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800099c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009a0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009a4:	bf08      	it	eq
 80009a6:	f020 0001 	biceq.w	r0, r0, #1
 80009aa:	4770      	bx	lr
 80009ac:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009b0:	d121      	bne.n	80009f6 <__aeabi_d2f+0x7a>
 80009b2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009b6:	bfbc      	itt	lt
 80009b8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009bc:	4770      	bxlt	lr
 80009be:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009c2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009c6:	f1c2 0218 	rsb	r2, r2, #24
 80009ca:	f1c2 0c20 	rsb	ip, r2, #32
 80009ce:	fa10 f30c 	lsls.w	r3, r0, ip
 80009d2:	fa20 f002 	lsr.w	r0, r0, r2
 80009d6:	bf18      	it	ne
 80009d8:	f040 0001 	orrne.w	r0, r0, #1
 80009dc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009e4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e8:	ea40 000c 	orr.w	r0, r0, ip
 80009ec:	fa23 f302 	lsr.w	r3, r3, r2
 80009f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009f4:	e7cc      	b.n	8000990 <__aeabi_d2f+0x14>
 80009f6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009fa:	d107      	bne.n	8000a0c <__aeabi_d2f+0x90>
 80009fc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a00:	bf1e      	ittt	ne
 8000a02:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a06:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a0a:	4770      	bxne	lr
 8000a0c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a10:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a14:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop

08000a1c <__aeabi_frsub>:
 8000a1c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a20:	e002      	b.n	8000a28 <__addsf3>
 8000a22:	bf00      	nop

08000a24 <__aeabi_fsub>:
 8000a24:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a28 <__addsf3>:
 8000a28:	0042      	lsls	r2, r0, #1
 8000a2a:	bf1f      	itttt	ne
 8000a2c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a30:	ea92 0f03 	teqne	r2, r3
 8000a34:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a38:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a3c:	d06a      	beq.n	8000b14 <__addsf3+0xec>
 8000a3e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a42:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a46:	bfc1      	itttt	gt
 8000a48:	18d2      	addgt	r2, r2, r3
 8000a4a:	4041      	eorgt	r1, r0
 8000a4c:	4048      	eorgt	r0, r1
 8000a4e:	4041      	eorgt	r1, r0
 8000a50:	bfb8      	it	lt
 8000a52:	425b      	neglt	r3, r3
 8000a54:	2b19      	cmp	r3, #25
 8000a56:	bf88      	it	hi
 8000a58:	4770      	bxhi	lr
 8000a5a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000a5e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a62:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000a66:	bf18      	it	ne
 8000a68:	4240      	negne	r0, r0
 8000a6a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a6e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000a72:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000a76:	bf18      	it	ne
 8000a78:	4249      	negne	r1, r1
 8000a7a:	ea92 0f03 	teq	r2, r3
 8000a7e:	d03f      	beq.n	8000b00 <__addsf3+0xd8>
 8000a80:	f1a2 0201 	sub.w	r2, r2, #1
 8000a84:	fa41 fc03 	asr.w	ip, r1, r3
 8000a88:	eb10 000c 	adds.w	r0, r0, ip
 8000a8c:	f1c3 0320 	rsb	r3, r3, #32
 8000a90:	fa01 f103 	lsl.w	r1, r1, r3
 8000a94:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a98:	d502      	bpl.n	8000aa0 <__addsf3+0x78>
 8000a9a:	4249      	negs	r1, r1
 8000a9c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000aa0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000aa4:	d313      	bcc.n	8000ace <__addsf3+0xa6>
 8000aa6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000aaa:	d306      	bcc.n	8000aba <__addsf3+0x92>
 8000aac:	0840      	lsrs	r0, r0, #1
 8000aae:	ea4f 0131 	mov.w	r1, r1, rrx
 8000ab2:	f102 0201 	add.w	r2, r2, #1
 8000ab6:	2afe      	cmp	r2, #254	@ 0xfe
 8000ab8:	d251      	bcs.n	8000b5e <__addsf3+0x136>
 8000aba:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000abe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ac2:	bf08      	it	eq
 8000ac4:	f020 0001 	biceq.w	r0, r0, #1
 8000ac8:	ea40 0003 	orr.w	r0, r0, r3
 8000acc:	4770      	bx	lr
 8000ace:	0049      	lsls	r1, r1, #1
 8000ad0:	eb40 0000 	adc.w	r0, r0, r0
 8000ad4:	3a01      	subs	r2, #1
 8000ad6:	bf28      	it	cs
 8000ad8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000adc:	d2ed      	bcs.n	8000aba <__addsf3+0x92>
 8000ade:	fab0 fc80 	clz	ip, r0
 8000ae2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ae6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aea:	fa00 f00c 	lsl.w	r0, r0, ip
 8000aee:	bfaa      	itet	ge
 8000af0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000af4:	4252      	neglt	r2, r2
 8000af6:	4318      	orrge	r0, r3
 8000af8:	bfbc      	itt	lt
 8000afa:	40d0      	lsrlt	r0, r2
 8000afc:	4318      	orrlt	r0, r3
 8000afe:	4770      	bx	lr
 8000b00:	f092 0f00 	teq	r2, #0
 8000b04:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b08:	bf06      	itte	eq
 8000b0a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b0e:	3201      	addeq	r2, #1
 8000b10:	3b01      	subne	r3, #1
 8000b12:	e7b5      	b.n	8000a80 <__addsf3+0x58>
 8000b14:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b1c:	bf18      	it	ne
 8000b1e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b22:	d021      	beq.n	8000b68 <__addsf3+0x140>
 8000b24:	ea92 0f03 	teq	r2, r3
 8000b28:	d004      	beq.n	8000b34 <__addsf3+0x10c>
 8000b2a:	f092 0f00 	teq	r2, #0
 8000b2e:	bf08      	it	eq
 8000b30:	4608      	moveq	r0, r1
 8000b32:	4770      	bx	lr
 8000b34:	ea90 0f01 	teq	r0, r1
 8000b38:	bf1c      	itt	ne
 8000b3a:	2000      	movne	r0, #0
 8000b3c:	4770      	bxne	lr
 8000b3e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000b42:	d104      	bne.n	8000b4e <__addsf3+0x126>
 8000b44:	0040      	lsls	r0, r0, #1
 8000b46:	bf28      	it	cs
 8000b48:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000b4c:	4770      	bx	lr
 8000b4e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000b52:	bf3c      	itt	cc
 8000b54:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000b58:	4770      	bxcc	lr
 8000b5a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b5e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000b62:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b66:	4770      	bx	lr
 8000b68:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b6c:	bf16      	itet	ne
 8000b6e:	4608      	movne	r0, r1
 8000b70:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b74:	4601      	movne	r1, r0
 8000b76:	0242      	lsls	r2, r0, #9
 8000b78:	bf06      	itte	eq
 8000b7a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b7e:	ea90 0f01 	teqeq	r0, r1
 8000b82:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_ui2f>:
 8000b88:	f04f 0300 	mov.w	r3, #0
 8000b8c:	e004      	b.n	8000b98 <__aeabi_i2f+0x8>
 8000b8e:	bf00      	nop

08000b90 <__aeabi_i2f>:
 8000b90:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000b94:	bf48      	it	mi
 8000b96:	4240      	negmi	r0, r0
 8000b98:	ea5f 0c00 	movs.w	ip, r0
 8000b9c:	bf08      	it	eq
 8000b9e:	4770      	bxeq	lr
 8000ba0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ba4:	4601      	mov	r1, r0
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	e01c      	b.n	8000be6 <__aeabi_l2f+0x2a>

08000bac <__aeabi_ul2f>:
 8000bac:	ea50 0201 	orrs.w	r2, r0, r1
 8000bb0:	bf08      	it	eq
 8000bb2:	4770      	bxeq	lr
 8000bb4:	f04f 0300 	mov.w	r3, #0
 8000bb8:	e00a      	b.n	8000bd0 <__aeabi_l2f+0x14>
 8000bba:	bf00      	nop

08000bbc <__aeabi_l2f>:
 8000bbc:	ea50 0201 	orrs.w	r2, r0, r1
 8000bc0:	bf08      	it	eq
 8000bc2:	4770      	bxeq	lr
 8000bc4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000bc8:	d502      	bpl.n	8000bd0 <__aeabi_l2f+0x14>
 8000bca:	4240      	negs	r0, r0
 8000bcc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bd0:	ea5f 0c01 	movs.w	ip, r1
 8000bd4:	bf02      	ittt	eq
 8000bd6:	4684      	moveq	ip, r0
 8000bd8:	4601      	moveq	r1, r0
 8000bda:	2000      	moveq	r0, #0
 8000bdc:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000be0:	bf08      	it	eq
 8000be2:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000be6:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000bea:	fabc f28c 	clz	r2, ip
 8000bee:	3a08      	subs	r2, #8
 8000bf0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bf4:	db10      	blt.n	8000c18 <__aeabi_l2f+0x5c>
 8000bf6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bfa:	4463      	add	r3, ip
 8000bfc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c00:	f1c2 0220 	rsb	r2, r2, #32
 8000c04:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c08:	fa20 f202 	lsr.w	r2, r0, r2
 8000c0c:	eb43 0002 	adc.w	r0, r3, r2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f102 0220 	add.w	r2, r2, #32
 8000c1c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c20:	f1c2 0220 	rsb	r2, r2, #32
 8000c24:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c28:	fa21 f202 	lsr.w	r2, r1, r2
 8000c2c:	eb43 0002 	adc.w	r0, r3, r2
 8000c30:	bf08      	it	eq
 8000c32:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_fmul>:
 8000c38:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000c3c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c40:	bf1e      	ittt	ne
 8000c42:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c46:	ea92 0f0c 	teqne	r2, ip
 8000c4a:	ea93 0f0c 	teqne	r3, ip
 8000c4e:	d06f      	beq.n	8000d30 <__aeabi_fmul+0xf8>
 8000c50:	441a      	add	r2, r3
 8000c52:	ea80 0c01 	eor.w	ip, r0, r1
 8000c56:	0240      	lsls	r0, r0, #9
 8000c58:	bf18      	it	ne
 8000c5a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c5e:	d01e      	beq.n	8000c9e <__aeabi_fmul+0x66>
 8000c60:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000c64:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c68:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c6c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c70:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000c74:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000c78:	bf3e      	ittt	cc
 8000c7a:	0049      	lslcc	r1, r1, #1
 8000c7c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c80:	005b      	lslcc	r3, r3, #1
 8000c82:	ea40 0001 	orr.w	r0, r0, r1
 8000c86:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000c8a:	2afd      	cmp	r2, #253	@ 0xfd
 8000c8c:	d81d      	bhi.n	8000cca <__aeabi_fmul+0x92>
 8000c8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000c92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c96:	bf08      	it	eq
 8000c98:	f020 0001 	biceq.w	r0, r0, #1
 8000c9c:	4770      	bx	lr
 8000c9e:	f090 0f00 	teq	r0, #0
 8000ca2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ca6:	bf08      	it	eq
 8000ca8:	0249      	lsleq	r1, r1, #9
 8000caa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cae:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000cb2:	3a7f      	subs	r2, #127	@ 0x7f
 8000cb4:	bfc2      	ittt	gt
 8000cb6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000cba:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cbe:	4770      	bxgt	lr
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	3a01      	subs	r2, #1
 8000cca:	dc5d      	bgt.n	8000d88 <__aeabi_fmul+0x150>
 8000ccc:	f112 0f19 	cmn.w	r2, #25
 8000cd0:	bfdc      	itt	le
 8000cd2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000cd6:	4770      	bxle	lr
 8000cd8:	f1c2 0200 	rsb	r2, r2, #0
 8000cdc:	0041      	lsls	r1, r0, #1
 8000cde:	fa21 f102 	lsr.w	r1, r1, r2
 8000ce2:	f1c2 0220 	rsb	r2, r2, #32
 8000ce6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cea:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cee:	f140 0000 	adc.w	r0, r0, #0
 8000cf2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cf6:	bf08      	it	eq
 8000cf8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cfc:	4770      	bx	lr
 8000cfe:	f092 0f00 	teq	r2, #0
 8000d02:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d06:	bf02      	ittt	eq
 8000d08:	0040      	lsleq	r0, r0, #1
 8000d0a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d0e:	3a01      	subeq	r2, #1
 8000d10:	d0f9      	beq.n	8000d06 <__aeabi_fmul+0xce>
 8000d12:	ea40 000c 	orr.w	r0, r0, ip
 8000d16:	f093 0f00 	teq	r3, #0
 8000d1a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d1e:	bf02      	ittt	eq
 8000d20:	0049      	lsleq	r1, r1, #1
 8000d22:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d26:	3b01      	subeq	r3, #1
 8000d28:	d0f9      	beq.n	8000d1e <__aeabi_fmul+0xe6>
 8000d2a:	ea41 010c 	orr.w	r1, r1, ip
 8000d2e:	e78f      	b.n	8000c50 <__aeabi_fmul+0x18>
 8000d30:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d34:	ea92 0f0c 	teq	r2, ip
 8000d38:	bf18      	it	ne
 8000d3a:	ea93 0f0c 	teqne	r3, ip
 8000d3e:	d00a      	beq.n	8000d56 <__aeabi_fmul+0x11e>
 8000d40:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000d44:	bf18      	it	ne
 8000d46:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000d4a:	d1d8      	bne.n	8000cfe <__aeabi_fmul+0xc6>
 8000d4c:	ea80 0001 	eor.w	r0, r0, r1
 8000d50:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d54:	4770      	bx	lr
 8000d56:	f090 0f00 	teq	r0, #0
 8000d5a:	bf17      	itett	ne
 8000d5c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000d60:	4608      	moveq	r0, r1
 8000d62:	f091 0f00 	teqne	r1, #0
 8000d66:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000d6a:	d014      	beq.n	8000d96 <__aeabi_fmul+0x15e>
 8000d6c:	ea92 0f0c 	teq	r2, ip
 8000d70:	d101      	bne.n	8000d76 <__aeabi_fmul+0x13e>
 8000d72:	0242      	lsls	r2, r0, #9
 8000d74:	d10f      	bne.n	8000d96 <__aeabi_fmul+0x15e>
 8000d76:	ea93 0f0c 	teq	r3, ip
 8000d7a:	d103      	bne.n	8000d84 <__aeabi_fmul+0x14c>
 8000d7c:	024b      	lsls	r3, r1, #9
 8000d7e:	bf18      	it	ne
 8000d80:	4608      	movne	r0, r1
 8000d82:	d108      	bne.n	8000d96 <__aeabi_fmul+0x15e>
 8000d84:	ea80 0001 	eor.w	r0, r0, r1
 8000d88:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d94:	4770      	bx	lr
 8000d96:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d9a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000d9e:	4770      	bx	lr

08000da0 <__aeabi_fdiv>:
 8000da0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000da4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da8:	bf1e      	ittt	ne
 8000daa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dae:	ea92 0f0c 	teqne	r2, ip
 8000db2:	ea93 0f0c 	teqne	r3, ip
 8000db6:	d069      	beq.n	8000e8c <__aeabi_fdiv+0xec>
 8000db8:	eba2 0203 	sub.w	r2, r2, r3
 8000dbc:	ea80 0c01 	eor.w	ip, r0, r1
 8000dc0:	0249      	lsls	r1, r1, #9
 8000dc2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000dc6:	d037      	beq.n	8000e38 <__aeabi_fdiv+0x98>
 8000dc8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000dcc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000dd0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000dd4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	bf38      	it	cc
 8000ddc:	005b      	lslcc	r3, r3, #1
 8000dde:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000de2:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000de6:	428b      	cmp	r3, r1
 8000de8:	bf24      	itt	cs
 8000dea:	1a5b      	subcs	r3, r3, r1
 8000dec:	ea40 000c 	orrcs.w	r0, r0, ip
 8000df0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000df4:	bf24      	itt	cs
 8000df6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dfa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dfe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e02:	bf24      	itt	cs
 8000e04:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e08:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e0c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e10:	bf24      	itt	cs
 8000e12:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e16:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e1a:	011b      	lsls	r3, r3, #4
 8000e1c:	bf18      	it	ne
 8000e1e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e22:	d1e0      	bne.n	8000de6 <__aeabi_fdiv+0x46>
 8000e24:	2afd      	cmp	r2, #253	@ 0xfd
 8000e26:	f63f af50 	bhi.w	8000cca <__aeabi_fmul+0x92>
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e30:	bf08      	it	eq
 8000e32:	f020 0001 	biceq.w	r0, r0, #1
 8000e36:	4770      	bx	lr
 8000e38:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e3c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e40:	327f      	adds	r2, #127	@ 0x7f
 8000e42:	bfc2      	ittt	gt
 8000e44:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e48:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e4c:	4770      	bxgt	lr
 8000e4e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e52:	f04f 0300 	mov.w	r3, #0
 8000e56:	3a01      	subs	r2, #1
 8000e58:	e737      	b.n	8000cca <__aeabi_fmul+0x92>
 8000e5a:	f092 0f00 	teq	r2, #0
 8000e5e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e62:	bf02      	ittt	eq
 8000e64:	0040      	lsleq	r0, r0, #1
 8000e66:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e6a:	3a01      	subeq	r2, #1
 8000e6c:	d0f9      	beq.n	8000e62 <__aeabi_fdiv+0xc2>
 8000e6e:	ea40 000c 	orr.w	r0, r0, ip
 8000e72:	f093 0f00 	teq	r3, #0
 8000e76:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e7a:	bf02      	ittt	eq
 8000e7c:	0049      	lsleq	r1, r1, #1
 8000e7e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e82:	3b01      	subeq	r3, #1
 8000e84:	d0f9      	beq.n	8000e7a <__aeabi_fdiv+0xda>
 8000e86:	ea41 010c 	orr.w	r1, r1, ip
 8000e8a:	e795      	b.n	8000db8 <__aeabi_fdiv+0x18>
 8000e8c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e90:	ea92 0f0c 	teq	r2, ip
 8000e94:	d108      	bne.n	8000ea8 <__aeabi_fdiv+0x108>
 8000e96:	0242      	lsls	r2, r0, #9
 8000e98:	f47f af7d 	bne.w	8000d96 <__aeabi_fmul+0x15e>
 8000e9c:	ea93 0f0c 	teq	r3, ip
 8000ea0:	f47f af70 	bne.w	8000d84 <__aeabi_fmul+0x14c>
 8000ea4:	4608      	mov	r0, r1
 8000ea6:	e776      	b.n	8000d96 <__aeabi_fmul+0x15e>
 8000ea8:	ea93 0f0c 	teq	r3, ip
 8000eac:	d104      	bne.n	8000eb8 <__aeabi_fdiv+0x118>
 8000eae:	024b      	lsls	r3, r1, #9
 8000eb0:	f43f af4c 	beq.w	8000d4c <__aeabi_fmul+0x114>
 8000eb4:	4608      	mov	r0, r1
 8000eb6:	e76e      	b.n	8000d96 <__aeabi_fmul+0x15e>
 8000eb8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ebc:	bf18      	it	ne
 8000ebe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ec2:	d1ca      	bne.n	8000e5a <__aeabi_fdiv+0xba>
 8000ec4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000ec8:	f47f af5c 	bne.w	8000d84 <__aeabi_fmul+0x14c>
 8000ecc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000ed0:	f47f af3c 	bne.w	8000d4c <__aeabi_fmul+0x114>
 8000ed4:	e75f      	b.n	8000d96 <__aeabi_fmul+0x15e>
 8000ed6:	bf00      	nop

08000ed8 <__aeabi_f2iz>:
 8000ed8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000edc:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000ee0:	d30f      	bcc.n	8000f02 <__aeabi_f2iz+0x2a>
 8000ee2:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000ee6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000eea:	d90d      	bls.n	8000f08 <__aeabi_f2iz+0x30>
 8000eec:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ef0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ef4:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000ef8:	fa23 f002 	lsr.w	r0, r3, r2
 8000efc:	bf18      	it	ne
 8000efe:	4240      	negne	r0, r0
 8000f00:	4770      	bx	lr
 8000f02:	f04f 0000 	mov.w	r0, #0
 8000f06:	4770      	bx	lr
 8000f08:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f0c:	d101      	bne.n	8000f12 <__aeabi_f2iz+0x3a>
 8000f0e:	0242      	lsls	r2, r0, #9
 8000f10:	d105      	bne.n	8000f1e <__aeabi_f2iz+0x46>
 8000f12:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000f16:	bf08      	it	eq
 8000f18:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000f1c:	4770      	bx	lr
 8000f1e:	f04f 0000 	mov.w	r0, #0
 8000f22:	4770      	bx	lr

08000f24 <__aeabi_f2uiz>:
 8000f24:	0042      	lsls	r2, r0, #1
 8000f26:	d20e      	bcs.n	8000f46 <__aeabi_f2uiz+0x22>
 8000f28:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f2c:	d30b      	bcc.n	8000f46 <__aeabi_f2uiz+0x22>
 8000f2e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f32:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f36:	d409      	bmi.n	8000f4c <__aeabi_f2uiz+0x28>
 8000f38:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f3c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f40:	fa23 f002 	lsr.w	r0, r3, r2
 8000f44:	4770      	bx	lr
 8000f46:	f04f 0000 	mov.w	r0, #0
 8000f4a:	4770      	bx	lr
 8000f4c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f50:	d101      	bne.n	8000f56 <__aeabi_f2uiz+0x32>
 8000f52:	0242      	lsls	r2, r0, #9
 8000f54:	d102      	bne.n	8000f5c <__aeabi_f2uiz+0x38>
 8000f56:	f04f 30ff 	mov.w	r0, #4294967295
 8000f5a:	4770      	bx	lr
 8000f5c:	f04f 0000 	mov.w	r0, #0
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <Lcd_cmd>:

extern uint8_t print_state;
//uint8_t cmd_rx;
//uint64_t cmd_count;
void Lcd_cmd(uint8_t cmd)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
	GPIOA->CRL=0X22222222;
 8000f6e:	4b15      	ldr	r3, [pc, #84]	@ (8000fc4 <Lcd_cmd+0x60>)
 8000f70:	f04f 3222 	mov.w	r2, #572662306	@ 0x22222222
 8000f74:	601a      	str	r2, [r3, #0]
	GPIOB->BRR|=lcd_adr_Pin;  //Address(RESET);
 8000f76:	4b14      	ldr	r3, [pc, #80]	@ (8000fc8 <Lcd_cmd+0x64>)
 8000f78:	695b      	ldr	r3, [r3, #20]
 8000f7a:	4a13      	ldr	r2, [pc, #76]	@ (8000fc8 <Lcd_cmd+0x64>)
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	6153      	str	r3, [r2, #20]
	GPIOB->BRR|=lcd_chip_sel_Pin;  //CS_1(RESET);
 8000f82:	4b11      	ldr	r3, [pc, #68]	@ (8000fc8 <Lcd_cmd+0x64>)
 8000f84:	695b      	ldr	r3, [r3, #20]
 8000f86:	4a10      	ldr	r2, [pc, #64]	@ (8000fc8 <Lcd_cmd+0x64>)
 8000f88:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f8c:	6153      	str	r3, [r2, #20]
//	GPIOB->BRR|=LCD_RW_Pin;
	parllel_transmit(cmd&0xFF);
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f001 fced 	bl	8002970 <parllel_transmit>
	GPIOB->ODR|=LCD_RD_Pin;
 8000f96:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc8 <Lcd_cmd+0x64>)
 8000f98:	68db      	ldr	r3, [r3, #12]
 8000f9a:	4a0b      	ldr	r2, [pc, #44]	@ (8000fc8 <Lcd_cmd+0x64>)
 8000f9c:	f043 0302 	orr.w	r3, r3, #2
 8000fa0:	60d3      	str	r3, [r2, #12]
	GPIOB->BRR|=LCD_RD_Pin;
 8000fa2:	4b09      	ldr	r3, [pc, #36]	@ (8000fc8 <Lcd_cmd+0x64>)
 8000fa4:	695b      	ldr	r3, [r3, #20]
 8000fa6:	4a08      	ldr	r2, [pc, #32]	@ (8000fc8 <Lcd_cmd+0x64>)
 8000fa8:	f043 0302 	orr.w	r3, r3, #2
 8000fac:	6153      	str	r3, [r2, #20]
	GPIOB->ODR|=lcd_chip_sel_Pin;   //CS_1(SET);
 8000fae:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <Lcd_cmd+0x64>)
 8000fb0:	68db      	ldr	r3, [r3, #12]
 8000fb2:	4a05      	ldr	r2, [pc, #20]	@ (8000fc8 <Lcd_cmd+0x64>)
 8000fb4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fb8:	60d3      	str	r3, [r2, #12]
//		cmd_count=0;
////	}
//	GPIOB->BRR|=lcd_adr_Pin;
//	GPIOB->BRR|=LCD_RD_Pin;

}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40010800 	.word	0x40010800
 8000fc8:	40010c00 	.word	0x40010c00

08000fcc <lcd_print_ram_1>:
uint16_t Display_error=0;
uint8_t temp_dot_1,temp_dot;
uint8_t status_rd;

void lcd_print_ram_1()
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b088      	sub	sp, #32
 8000fd0:	af00      	add	r7, sp, #0
	for(int y_axsis=0;y_axsis<=7;y_axsis++)
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61fb      	str	r3, [r7, #28]
 8000fd6:	e048      	b.n	800106a <lcd_print_ram_1+0x9e>
	{
		for(int x_axsis=0;x_axsis<=127;x_axsis++)
 8000fd8:	2300      	movs	r3, #0
 8000fda:	61bb      	str	r3, [r7, #24]
 8000fdc:	e03f      	b.n	800105e <lcd_print_ram_1+0x92>
		{
			GPIOA->CRL=0X22222222;
 8000fde:	4b77      	ldr	r3, [pc, #476]	@ (80011bc <lcd_print_ram_1+0x1f0>)
 8000fe0:	f04f 3222 	mov.w	r2, #572662306	@ 0x22222222
 8000fe4:	601a      	str	r2, [r3, #0]
			Lcd_cmd(y_axsis+0xB0);
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	3b50      	subs	r3, #80	@ 0x50
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff ffb8 	bl	8000f64 <Lcd_cmd>
			lcd_x_axis(x_axsis);
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f000 f935 	bl	8001268 <lcd_x_axis>
			GPIOB->BRR|=lcd_chip_sel_Pin;  //CS_1(RESET);
 8000ffe:	4b70      	ldr	r3, [pc, #448]	@ (80011c0 <lcd_print_ram_1+0x1f4>)
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	4a6f      	ldr	r2, [pc, #444]	@ (80011c0 <lcd_print_ram_1+0x1f4>)
 8001004:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001008:	6153      	str	r3, [r2, #20]
			GPIOB->ODR|=lcd_adr_Pin;  //Address(RESET);
 800100a:	4b6d      	ldr	r3, [pc, #436]	@ (80011c0 <lcd_print_ram_1+0x1f4>)
 800100c:	68db      	ldr	r3, [r3, #12]
 800100e:	4a6c      	ldr	r2, [pc, #432]	@ (80011c0 <lcd_print_ram_1+0x1f4>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	60d3      	str	r3, [r2, #12]
			GPIOB->BRR|=LCD_RW_Pin;
 8001016:	4b6a      	ldr	r3, [pc, #424]	@ (80011c0 <lcd_print_ram_1+0x1f4>)
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	4a69      	ldr	r2, [pc, #420]	@ (80011c0 <lcd_print_ram_1+0x1f4>)
 800101c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001020:	6153      	str	r3, [r2, #20]
			GPIOA->ODR=0X00|((lcd_temp_ram_1[y_axsis][x_axsis])& 0XFF);
 8001022:	4a68      	ldr	r2, [pc, #416]	@ (80011c4 <lcd_print_ram_1+0x1f8>)
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	01db      	lsls	r3, r3, #7
 8001028:	441a      	add	r2, r3
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	4413      	add	r3, r2
 800102e:	781a      	ldrb	r2, [r3, #0]
 8001030:	4b62      	ldr	r3, [pc, #392]	@ (80011bc <lcd_print_ram_1+0x1f0>)
 8001032:	60da      	str	r2, [r3, #12]
			GPIOB->ODR|=LCD_RD_Pin;
 8001034:	4b62      	ldr	r3, [pc, #392]	@ (80011c0 <lcd_print_ram_1+0x1f4>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	4a61      	ldr	r2, [pc, #388]	@ (80011c0 <lcd_print_ram_1+0x1f4>)
 800103a:	f043 0302 	orr.w	r3, r3, #2
 800103e:	60d3      	str	r3, [r2, #12]
			GPIOB->BRR|=LCD_RD_Pin;//CS_1(SET);
 8001040:	4b5f      	ldr	r3, [pc, #380]	@ (80011c0 <lcd_print_ram_1+0x1f4>)
 8001042:	695b      	ldr	r3, [r3, #20]
 8001044:	4a5e      	ldr	r2, [pc, #376]	@ (80011c0 <lcd_print_ram_1+0x1f4>)
 8001046:	f043 0302 	orr.w	r3, r3, #2
 800104a:	6153      	str	r3, [r2, #20]
			GPIOB->ODR|=lcd_chip_sel_Pin;
 800104c:	4b5c      	ldr	r3, [pc, #368]	@ (80011c0 <lcd_print_ram_1+0x1f4>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	4a5b      	ldr	r2, [pc, #364]	@ (80011c0 <lcd_print_ram_1+0x1f4>)
 8001052:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001056:	60d3      	str	r3, [r2, #12]
		for(int x_axsis=0;x_axsis<=127;x_axsis++)
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	3301      	adds	r3, #1
 800105c:	61bb      	str	r3, [r7, #24]
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	2b7f      	cmp	r3, #127	@ 0x7f
 8001062:	ddbc      	ble.n	8000fde <lcd_print_ram_1+0x12>
	for(int y_axsis=0;y_axsis<=7;y_axsis++)
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	3301      	adds	r3, #1
 8001068:	61fb      	str	r3, [r7, #28]
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	2b07      	cmp	r3, #7
 800106e:	ddb3      	ble.n	8000fd8 <lcd_print_ram_1+0xc>
		}
	}

	for(int y_axsis=0;y_axsis<=7;y_axsis++)
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
 8001074:	e05c      	b.n	8001130 <lcd_print_ram_1+0x164>
	{
		uint8_t axsis=0; uint8_t dummy_read=1;
 8001076:	2300      	movs	r3, #0
 8001078:	70fb      	strb	r3, [r7, #3]
 800107a:	2301      	movs	r3, #1
 800107c:	74fb      	strb	r3, [r7, #19]
		for(int x_axsis=0;x_axsis<=128;x_axsis++)
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	e049      	b.n	8001118 <lcd_print_ram_1+0x14c>
		{
			Lcd_cmd(y_axsis+0xB0);
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	b2db      	uxtb	r3, r3
 8001088:	3b50      	subs	r3, #80	@ 0x50
 800108a:	b2db      	uxtb	r3, r3
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff ff69 	bl	8000f64 <Lcd_cmd>
			lcd_x_axis(x_axsis);
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	b2db      	uxtb	r3, r3
 8001096:	4618      	mov	r0, r3
 8001098:	f000 f8e6 	bl	8001268 <lcd_x_axis>
			GPIOA->CRL=0X88888888;
 800109c:	4b47      	ldr	r3, [pc, #284]	@ (80011bc <lcd_print_ram_1+0x1f0>)
 800109e:	f04f 3288 	mov.w	r2, #2290649224	@ 0x88888888
 80010a2:	601a      	str	r2, [r3, #0]
			GPIOB->BRR|=lcd_chip_sel_Pin;
 80010a4:	4b46      	ldr	r3, [pc, #280]	@ (80011c0 <lcd_print_ram_1+0x1f4>)
 80010a6:	695b      	ldr	r3, [r3, #20]
 80010a8:	4a45      	ldr	r2, [pc, #276]	@ (80011c0 <lcd_print_ram_1+0x1f4>)
 80010aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010ae:	6153      	str	r3, [r2, #20]
			GPIOB->ODR|=lcd_adr_Pin;  //Address(RESET);
 80010b0:	4b43      	ldr	r3, [pc, #268]	@ (80011c0 <lcd_print_ram_1+0x1f4>)
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	4a42      	ldr	r2, [pc, #264]	@ (80011c0 <lcd_print_ram_1+0x1f4>)
 80010b6:	f043 0301 	orr.w	r3, r3, #1
 80010ba:	60d3      	str	r3, [r2, #12]
			GPIOB->ODR|=LCD_RW_Pin;	  //Read write pin
 80010bc:	4b40      	ldr	r3, [pc, #256]	@ (80011c0 <lcd_print_ram_1+0x1f4>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	4a3f      	ldr	r2, [pc, #252]	@ (80011c0 <lcd_print_ram_1+0x1f4>)
 80010c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010c6:	60d3      	str	r3, [r2, #12]
			GPIOB->ODR|=LCD_RD_Pin;   //Enable pin
 80010c8:	4b3d      	ldr	r3, [pc, #244]	@ (80011c0 <lcd_print_ram_1+0x1f4>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	4a3c      	ldr	r2, [pc, #240]	@ (80011c0 <lcd_print_ram_1+0x1f4>)
 80010ce:	f043 0302 	orr.w	r3, r3, #2
 80010d2:	60d3      	str	r3, [r2, #12]
			//HAL_Delay(1);
			if(dummy_read==1)
 80010d4:	7cfb      	ldrb	r3, [r7, #19]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d103      	bne.n	80010e2 <lcd_print_ram_1+0x116>
			{
				dummy_read++;
 80010da:	7cfb      	ldrb	r3, [r7, #19]
 80010dc:	3301      	adds	r3, #1
 80010de:	74fb      	strb	r3, [r7, #19]
 80010e0:	e00b      	b.n	80010fa <lcd_print_ram_1+0x12e>
			}
			else
			{
				Read_data[y_axsis][x_axsis-1]=GPIOA->IDR & 0xFF; // Read data from the data port
 80010e2:	4b36      	ldr	r3, [pc, #216]	@ (80011bc <lcd_print_ram_1+0x1f0>)
 80010e4:	689a      	ldr	r2, [r3, #8]
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	3b01      	subs	r3, #1
 80010ea:	b2d0      	uxtb	r0, r2
 80010ec:	4936      	ldr	r1, [pc, #216]	@ (80011c8 <lcd_print_ram_1+0x1fc>)
 80010ee:	697a      	ldr	r2, [r7, #20]
 80010f0:	01d2      	lsls	r2, r2, #7
 80010f2:	440a      	add	r2, r1
 80010f4:	4413      	add	r3, r2
 80010f6:	4602      	mov	r2, r0
 80010f8:	701a      	strb	r2, [r3, #0]
			}
			GPIOB->BRR|=LCD_RD_Pin;//Enable pin reset
 80010fa:	4b31      	ldr	r3, [pc, #196]	@ (80011c0 <lcd_print_ram_1+0x1f4>)
 80010fc:	695b      	ldr	r3, [r3, #20]
 80010fe:	4a30      	ldr	r2, [pc, #192]	@ (80011c0 <lcd_print_ram_1+0x1f4>)
 8001100:	f043 0302 	orr.w	r3, r3, #2
 8001104:	6153      	str	r3, [r2, #20]
			GPIOB->ODR|=lcd_chip_sel_Pin;   //CS_1(SET);
 8001106:	4b2e      	ldr	r3, [pc, #184]	@ (80011c0 <lcd_print_ram_1+0x1f4>)
 8001108:	68db      	ldr	r3, [r3, #12]
 800110a:	4a2d      	ldr	r2, [pc, #180]	@ (80011c0 <lcd_print_ram_1+0x1f4>)
 800110c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001110:	60d3      	str	r3, [r2, #12]
		for(int x_axsis=0;x_axsis<=128;x_axsis++)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	3301      	adds	r3, #1
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	2b80      	cmp	r3, #128	@ 0x80
 800111c:	ddb2      	ble.n	8001084 <lcd_print_ram_1+0xb8>
		}
		GPIOB->BRR|=LCD_RW_Pin;
 800111e:	4b28      	ldr	r3, [pc, #160]	@ (80011c0 <lcd_print_ram_1+0x1f4>)
 8001120:	695b      	ldr	r3, [r3, #20]
 8001122:	4a27      	ldr	r2, [pc, #156]	@ (80011c0 <lcd_print_ram_1+0x1f4>)
 8001124:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001128:	6153      	str	r3, [r2, #20]
	for(int y_axsis=0;y_axsis<=7;y_axsis++)
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	3301      	adds	r3, #1
 800112e:	617b      	str	r3, [r7, #20]
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	2b07      	cmp	r3, #7
 8001134:	dd9f      	ble.n	8001076 <lcd_print_ram_1+0xaa>
	}

	for(int y_axsis=0;y_axsis<=7;y_axsis++)
 8001136:	2300      	movs	r3, #0
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	e036      	b.n	80011aa <lcd_print_ram_1+0x1de>
	{
		for(int x_axsis=0;x_axsis<=127;x_axsis++)
 800113c:	2300      	movs	r3, #0
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	e02d      	b.n	800119e <lcd_print_ram_1+0x1d2>
		{
			if((lcd_temp_ram_1[y_axsis][x_axsis])!=(Read_data[y_axsis][x_axsis]))
 8001142:	4a20      	ldr	r2, [pc, #128]	@ (80011c4 <lcd_print_ram_1+0x1f8>)
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	01db      	lsls	r3, r3, #7
 8001148:	441a      	add	r2, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4413      	add	r3, r2
 800114e:	781a      	ldrb	r2, [r3, #0]
 8001150:	491d      	ldr	r1, [pc, #116]	@ (80011c8 <lcd_print_ram_1+0x1fc>)
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	01db      	lsls	r3, r3, #7
 8001156:	4419      	add	r1, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	440b      	add	r3, r1
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	429a      	cmp	r2, r3
 8001160:	d017      	beq.n	8001192 <lcd_print_ram_1+0x1c6>
			{
				Display_error++;
 8001162:	4b1a      	ldr	r3, [pc, #104]	@ (80011cc <lcd_print_ram_1+0x200>)
 8001164:	881b      	ldrh	r3, [r3, #0]
 8001166:	3301      	adds	r3, #1
 8001168:	b29a      	uxth	r2, r3
 800116a:	4b18      	ldr	r3, [pc, #96]	@ (80011cc <lcd_print_ram_1+0x200>)
 800116c:	801a      	strh	r2, [r3, #0]
				temp_dot=x_axsis;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	b2da      	uxtb	r2, r3
 8001172:	4b17      	ldr	r3, [pc, #92]	@ (80011d0 <lcd_print_ram_1+0x204>)
 8001174:	701a      	strb	r2, [r3, #0]
				temp_dot_1=y_axsis;
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	b2da      	uxtb	r2, r3
 800117a:	4b16      	ldr	r3, [pc, #88]	@ (80011d4 <lcd_print_ram_1+0x208>)
 800117c:	701a      	strb	r2, [r3, #0]
				if(Display_error>=10)
 800117e:	4b13      	ldr	r3, [pc, #76]	@ (80011cc <lcd_print_ram_1+0x200>)
 8001180:	881b      	ldrh	r3, [r3, #0]
 8001182:	2b09      	cmp	r3, #9
 8001184:	d908      	bls.n	8001198 <lcd_print_ram_1+0x1cc>
				{
					print_state=1;
 8001186:	4b14      	ldr	r3, [pc, #80]	@ (80011d8 <lcd_print_ram_1+0x20c>)
 8001188:	2201      	movs	r2, #1
 800118a:	701a      	strb	r2, [r3, #0]
					lcd_init();
 800118c:	f000 f826 	bl	80011dc <lcd_init>
					break;
 8001190:	e008      	b.n	80011a4 <lcd_print_ram_1+0x1d8>
				}
			}
			else
			{
				Display_error=0;
 8001192:	4b0e      	ldr	r3, [pc, #56]	@ (80011cc <lcd_print_ram_1+0x200>)
 8001194:	2200      	movs	r2, #0
 8001196:	801a      	strh	r2, [r3, #0]
		for(int x_axsis=0;x_axsis<=127;x_axsis++)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3301      	adds	r3, #1
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b7f      	cmp	r3, #127	@ 0x7f
 80011a2:	ddce      	ble.n	8001142 <lcd_print_ram_1+0x176>
	for(int y_axsis=0;y_axsis<=7;y_axsis++)
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	3301      	adds	r3, #1
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	2b07      	cmp	r3, #7
 80011ae:	ddc5      	ble.n	800113c <lcd_print_ram_1+0x170>
			}
		}
	}
}
 80011b0:	bf00      	nop
 80011b2:	bf00      	nop
 80011b4:	3720      	adds	r7, #32
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40010800 	.word	0x40010800
 80011c0:	40010c00 	.word	0x40010c00
 80011c4:	20000c0c 	.word	0x20000c0c
 80011c8:	2000100c 	.word	0x2000100c
 80011cc:	2000140c 	.word	0x2000140c
 80011d0:	2000140f 	.word	0x2000140f
 80011d4:	2000140e 	.word	0x2000140e
 80011d8:	200007a0 	.word	0x200007a0

080011dc <lcd_init>:
void lcd_init(){
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
	GPIOA->CRL=0X22222222;
 80011e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001260 <lcd_init+0x84>)
 80011e2:	f04f 3222 	mov.w	r2, #572662306	@ 0x22222222
 80011e6:	601a      	str	r2, [r3, #0]
	GPIOB->BRR|=lcd_chip_sel_Pin;	 				//HAL_GPIO_WritePin(GPIOA,  CS_1_Pin,RESET);// low the cs pin to listen the controller
 80011e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001264 <lcd_init+0x88>)
 80011ea:	695b      	ldr	r3, [r3, #20]
 80011ec:	4a1d      	ldr	r2, [pc, #116]	@ (8001264 <lcd_init+0x88>)
 80011ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011f2:	6153      	str	r3, [r2, #20]
	HAL_GPIO_WritePin(GPIOB, lcd_reset_Pin,RESET); // low reset button
 80011f4:	2200      	movs	r2, #0
 80011f6:	2104      	movs	r1, #4
 80011f8:	481a      	ldr	r0, [pc, #104]	@ (8001264 <lcd_init+0x88>)
 80011fa:	f004 ff8a 	bl	8006112 <HAL_GPIO_WritePin>
	HAL_Delay(50); // wait for 500ms
 80011fe:	2032      	movs	r0, #50	@ 0x32
 8001200:	f003 fe60 	bl	8004ec4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, lcd_reset_Pin,SET); // high the reset button for initial reset
 8001204:	2201      	movs	r2, #1
 8001206:	2104      	movs	r1, #4
 8001208:	4816      	ldr	r0, [pc, #88]	@ (8001264 <lcd_init+0x88>)
 800120a:	f004 ff82 	bl	8006112 <HAL_GPIO_WritePin>

	  // LCD bias select
	  Lcd_cmd(CMD_SET_BIAS_9);
 800120e:	20a2      	movs	r0, #162	@ 0xa2
 8001210:	f7ff fea8 	bl	8000f64 <Lcd_cmd>
	  // ADC select
	  Lcd_cmd(CMD_SET_ADC_NORMAL);
 8001214:	20a0      	movs	r0, #160	@ 0xa0
 8001216:	f7ff fea5 	bl	8000f64 <Lcd_cmd>
	  // SHL select
	  Lcd_cmd(CMD_SET_COM_NORMAL);
 800121a:	20c0      	movs	r0, #192	@ 0xc0
 800121c:	f7ff fea2 	bl	8000f64 <Lcd_cmd>
	  // Initial display line
	  Lcd_cmd(CMD_SET_DISP_START_LINE);
 8001220:	2040      	movs	r0, #64	@ 0x40
 8001222:	f7ff fe9f 	bl	8000f64 <Lcd_cmd>

	  // turn on voltage converter (VC=1, VR=0, VF=0)
	  Lcd_cmd(CMD_SET_POWER_CONTROL | 0x4);
 8001226:	202c      	movs	r0, #44	@ 0x2c
 8001228:	f7ff fe9c 	bl	8000f64 <Lcd_cmd>
	  // wait for 50% rising
	  HAL_Delay(50);
 800122c:	2032      	movs	r0, #50	@ 0x32
 800122e:	f003 fe49 	bl	8004ec4 <HAL_Delay>

	  // turn on voltage regulator (VC=1, VR=1, VF=0)
	  Lcd_cmd(CMD_SET_POWER_CONTROL | 0x6);
 8001232:	202e      	movs	r0, #46	@ 0x2e
 8001234:	f7ff fe96 	bl	8000f64 <Lcd_cmd>
	  // wait >=50ms
	  HAL_Delay(50);
 8001238:	2032      	movs	r0, #50	@ 0x32
 800123a:	f003 fe43 	bl	8004ec4 <HAL_Delay>

	  // turn on voltage follower (VC=1, VR=1, VF=1)
	  Lcd_cmd(CMD_SET_POWER_CONTROL | 0x7);
 800123e:	202f      	movs	r0, #47	@ 0x2f
 8001240:	f7ff fe90 	bl	8000f64 <Lcd_cmd>
	  // wait
	  HAL_Delay(50);
 8001244:	2032      	movs	r0, #50	@ 0x32
 8001246:	f003 fe3d 	bl	8004ec4 <HAL_Delay>

	  // set lcd operating voltage (regulator resistor, ref voltage resistor)
	  Lcd_cmd(CMD_SET_RESISTOR_RATIO | 0x4);// contrast CHANGE OPTION USING EEPROM
 800124a:	2024      	movs	r0, #36	@ 0x24
 800124c:	f7ff fe8a 	bl	8000f64 <Lcd_cmd>
	  // set page address
	  // set column address
	  // write display data
	  // set up a bounding box for screen updates

	  Lcd_cmd(0xAF);    //Display on
 8001250:	20af      	movs	r0, #175	@ 0xaf
 8001252:	f7ff fe87 	bl	8000f64 <Lcd_cmd>
	  Lcd_cmd(0XA4);  // Display clear all
 8001256:	20a4      	movs	r0, #164	@ 0xa4
 8001258:	f7ff fe84 	bl	8000f64 <Lcd_cmd>
	}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40010800 	.word	0x40010800
 8001264:	40010c00 	.word	0x40010c00

08001268 <lcd_x_axis>:

void lcd_x_axis(uint8_t value){
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]

    Lcd_cmd(0x10|((value&0xF0)>>4));//Setting  y-address  Msb
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	091b      	lsrs	r3, r3, #4
 8001276:	b2db      	uxtb	r3, r3
 8001278:	f043 0310 	orr.w	r3, r3, #16
 800127c:	b2db      	uxtb	r3, r3
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff fe70 	bl	8000f64 <Lcd_cmd>
    Lcd_cmd(value&0x0F); //Setting  y-address  Lsb
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	f003 030f 	and.w	r3, r3, #15
 800128a:	b2db      	uxtb	r3, r3
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff fe69 	bl	8000f64 <Lcd_cmd>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <lcd_invert_process>:

void lcd_invert_process()
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
	for(int y_axsis=0;y_axsis<=7;y_axsis++){
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	e01f      	b.n	80012e8 <lcd_invert_process+0x4c>
		uint8_t temp_x_axsis=0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	72fb      	strb	r3, [r7, #11]
		for(int x_axsis=127;x_axsis>=0;x_axsis--)
 80012ac:	237f      	movs	r3, #127	@ 0x7f
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	e014      	b.n	80012dc <lcd_invert_process+0x40>
		{
			lcd_temp_ram_1[y_axsis][temp_x_axsis++]=(lcd_temp_ram[y_axsis][x_axsis]);
 80012b2:	7afb      	ldrb	r3, [r7, #11]
 80012b4:	1c5a      	adds	r2, r3, #1
 80012b6:	72fa      	strb	r2, [r7, #11]
 80012b8:	4618      	mov	r0, r3
 80012ba:	4a10      	ldr	r2, [pc, #64]	@ (80012fc <lcd_invert_process+0x60>)
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	01db      	lsls	r3, r3, #7
 80012c0:	441a      	add	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4413      	add	r3, r2
 80012c6:	7819      	ldrb	r1, [r3, #0]
 80012c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001300 <lcd_invert_process+0x64>)
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	01db      	lsls	r3, r3, #7
 80012ce:	4413      	add	r3, r2
 80012d0:	4403      	add	r3, r0
 80012d2:	460a      	mov	r2, r1
 80012d4:	701a      	strb	r2, [r3, #0]
		for(int x_axsis=127;x_axsis>=0;x_axsis--)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	3b01      	subs	r3, #1
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	dae7      	bge.n	80012b2 <lcd_invert_process+0x16>
	for(int y_axsis=0;y_axsis<=7;y_axsis++){
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	3301      	adds	r3, #1
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	2b07      	cmp	r3, #7
 80012ec:	dddc      	ble.n	80012a8 <lcd_invert_process+0xc>
		}
	}
}
 80012ee:	bf00      	nop
 80012f0:	bf00      	nop
 80012f2:	3714      	adds	r7, #20
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bc80      	pop	{r7}
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	2000080c 	.word	0x2000080c
 8001300:	20000c0c 	.word	0x20000c0c

08001304 <lcd_speed>:

void lcd_speed(uint8_t num,uint8_t sen_type)
{
 8001304:	b5b0      	push	{r4, r5, r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	460a      	mov	r2, r1
 800130e:	71fb      	strb	r3, [r7, #7]
 8001310:	4613      	mov	r3, r2
 8001312:	71bb      	strb	r3, [r7, #6]
	uint8_t x_axis,y_axis,value_num=0,first_num,second_num,third_num;
 8001314:	2300      	movs	r3, #0
 8001316:	737b      	strb	r3, [r7, #13]
    first_num=num/100;
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	4a63      	ldr	r2, [pc, #396]	@ (80014a8 <lcd_speed+0x1a4>)
 800131c:	fba2 2303 	umull	r2, r3, r2, r3
 8001320:	095b      	lsrs	r3, r3, #5
 8001322:	733b      	strb	r3, [r7, #12]
    second_num=((num%100)/10);
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	4a60      	ldr	r2, [pc, #384]	@ (80014a8 <lcd_speed+0x1a4>)
 8001328:	fba2 1203 	umull	r1, r2, r2, r3
 800132c:	0952      	lsrs	r2, r2, #5
 800132e:	2164      	movs	r1, #100	@ 0x64
 8001330:	fb01 f202 	mul.w	r2, r1, r2
 8001334:	1a9b      	subs	r3, r3, r2
 8001336:	b2db      	uxtb	r3, r3
 8001338:	4a5c      	ldr	r2, [pc, #368]	@ (80014ac <lcd_speed+0x1a8>)
 800133a:	fba2 2303 	umull	r2, r3, r2, r3
 800133e:	08db      	lsrs	r3, r3, #3
 8001340:	72fb      	strb	r3, [r7, #11]
    third_num=((num%100)%10);
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	4a58      	ldr	r2, [pc, #352]	@ (80014a8 <lcd_speed+0x1a4>)
 8001346:	fba2 1203 	umull	r1, r2, r2, r3
 800134a:	0952      	lsrs	r2, r2, #5
 800134c:	2164      	movs	r1, #100	@ 0x64
 800134e:	fb01 f202 	mul.w	r2, r1, r2
 8001352:	1a9b      	subs	r3, r3, r2
 8001354:	b2da      	uxtb	r2, r3
 8001356:	4b55      	ldr	r3, [pc, #340]	@ (80014ac <lcd_speed+0x1a8>)
 8001358:	fba3 1302 	umull	r1, r3, r3, r2
 800135c:	08d9      	lsrs	r1, r3, #3
 800135e:	460b      	mov	r3, r1
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	440b      	add	r3, r1
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	72bb      	strb	r3, [r7, #10]
    value_num=0;
 800136a:	2300      	movs	r3, #0
 800136c:	737b      	strb	r3, [r7, #13]

   for(y_axis=0;y_axis<4;y_axis++)
 800136e:	2300      	movs	r3, #0
 8001370:	73bb      	strb	r3, [r7, #14]
 8001372:	e020      	b.n	80013b6 <lcd_speed+0xb2>
	{
		for(x_axis=0;x_axis<16;x_axis++)
 8001374:	2300      	movs	r3, #0
 8001376:	73fb      	strb	r3, [r7, #15]
 8001378:	e017      	b.n	80013aa <lcd_speed+0xa6>
		{
			lcd_print_convert((0+(y_axis)),(x_axis+46),(font16x32_digits[second_num][value_num]));
 800137a:	7bb8      	ldrb	r0, [r7, #14]
 800137c:	7bfb      	ldrb	r3, [r7, #15]
 800137e:	f103 042e 	add.w	r4, r3, #46	@ 0x2e
 8001382:	7afa      	ldrb	r2, [r7, #11]
 8001384:	7b79      	ldrb	r1, [r7, #13]
 8001386:	4d4a      	ldr	r5, [pc, #296]	@ (80014b0 <lcd_speed+0x1ac>)
 8001388:	4613      	mov	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4413      	add	r3, r2
 800138e:	01db      	lsls	r3, r3, #7
 8001390:	442b      	add	r3, r5
 8001392:	440b      	add	r3, r1
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	461a      	mov	r2, r3
 8001398:	4621      	mov	r1, r4
 800139a:	f000 fb81 	bl	8001aa0 <lcd_print_convert>
			value_num++;
 800139e:	7b7b      	ldrb	r3, [r7, #13]
 80013a0:	3301      	adds	r3, #1
 80013a2:	737b      	strb	r3, [r7, #13]
		for(x_axis=0;x_axis<16;x_axis++)
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
 80013a6:	3301      	adds	r3, #1
 80013a8:	73fb      	strb	r3, [r7, #15]
 80013aa:	7bfb      	ldrb	r3, [r7, #15]
 80013ac:	2b0f      	cmp	r3, #15
 80013ae:	d9e4      	bls.n	800137a <lcd_speed+0x76>
   for(y_axis=0;y_axis<4;y_axis++)
 80013b0:	7bbb      	ldrb	r3, [r7, #14]
 80013b2:	3301      	adds	r3, #1
 80013b4:	73bb      	strb	r3, [r7, #14]
 80013b6:	7bbb      	ldrb	r3, [r7, #14]
 80013b8:	2b03      	cmp	r3, #3
 80013ba:	d9db      	bls.n	8001374 <lcd_speed+0x70>
		}
	}
   value_num=0;
 80013bc:	2300      	movs	r3, #0
 80013be:	737b      	strb	r3, [r7, #13]
    for(y_axis=0;y_axis<4;y_axis++)
 80013c0:	2300      	movs	r3, #0
 80013c2:	73bb      	strb	r3, [r7, #14]
 80013c4:	e020      	b.n	8001408 <lcd_speed+0x104>
     {
         for(x_axis=0;x_axis<16;x_axis++)
 80013c6:	2300      	movs	r3, #0
 80013c8:	73fb      	strb	r3, [r7, #15]
 80013ca:	e017      	b.n	80013fc <lcd_speed+0xf8>
         {

             lcd_print_convert((0+(y_axis)),(x_axis+64),(font16x32_digits[third_num][value_num]));
 80013cc:	7bb8      	ldrb	r0, [r7, #14]
 80013ce:	7bfb      	ldrb	r3, [r7, #15]
 80013d0:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 80013d4:	7aba      	ldrb	r2, [r7, #10]
 80013d6:	7b79      	ldrb	r1, [r7, #13]
 80013d8:	4d35      	ldr	r5, [pc, #212]	@ (80014b0 <lcd_speed+0x1ac>)
 80013da:	4613      	mov	r3, r2
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	4413      	add	r3, r2
 80013e0:	01db      	lsls	r3, r3, #7
 80013e2:	442b      	add	r3, r5
 80013e4:	440b      	add	r3, r1
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	461a      	mov	r2, r3
 80013ea:	4621      	mov	r1, r4
 80013ec:	f000 fb58 	bl	8001aa0 <lcd_print_convert>
             value_num++;
 80013f0:	7b7b      	ldrb	r3, [r7, #13]
 80013f2:	3301      	adds	r3, #1
 80013f4:	737b      	strb	r3, [r7, #13]
         for(x_axis=0;x_axis<16;x_axis++)
 80013f6:	7bfb      	ldrb	r3, [r7, #15]
 80013f8:	3301      	adds	r3, #1
 80013fa:	73fb      	strb	r3, [r7, #15]
 80013fc:	7bfb      	ldrb	r3, [r7, #15]
 80013fe:	2b0f      	cmp	r3, #15
 8001400:	d9e4      	bls.n	80013cc <lcd_speed+0xc8>
    for(y_axis=0;y_axis<4;y_axis++)
 8001402:	7bbb      	ldrb	r3, [r7, #14]
 8001404:	3301      	adds	r3, #1
 8001406:	73bb      	strb	r3, [r7, #14]
 8001408:	7bbb      	ldrb	r3, [r7, #14]
 800140a:	2b03      	cmp	r3, #3
 800140c:	d9db      	bls.n	80013c6 <lcd_speed+0xc2>
         }
     }
    value_num=0;
 800140e:	2300      	movs	r3, #0
 8001410:	737b      	strb	r3, [r7, #13]

    if(sen_type==1)
 8001412:	79bb      	ldrb	r3, [r7, #6]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d11f      	bne.n	8001458 <lcd_speed+0x154>
    {
        for(y_axis=0;y_axis<1;y_axis++)
 8001418:	2300      	movs	r3, #0
 800141a:	73bb      	strb	r3, [r7, #14]
 800141c:	e019      	b.n	8001452 <lcd_speed+0x14e>
    	{
    		for(x_axis=0;x_axis<21;x_axis++)
 800141e:	2300      	movs	r3, #0
 8001420:	73fb      	strb	r3, [r7, #15]
 8001422:	e010      	b.n	8001446 <lcd_speed+0x142>
    		{
    			lcd_print_convert((4+(y_axis)),(x_axis+52),kmph[value_num]);
 8001424:	7bbb      	ldrb	r3, [r7, #14]
 8001426:	1d18      	adds	r0, r3, #4
 8001428:	7bfb      	ldrb	r3, [r7, #15]
 800142a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800142e:	7b7b      	ldrb	r3, [r7, #13]
 8001430:	4a20      	ldr	r2, [pc, #128]	@ (80014b4 <lcd_speed+0x1b0>)
 8001432:	5cd3      	ldrb	r3, [r2, r3]
 8001434:	461a      	mov	r2, r3
 8001436:	f000 fb33 	bl	8001aa0 <lcd_print_convert>
    			value_num++;
 800143a:	7b7b      	ldrb	r3, [r7, #13]
 800143c:	3301      	adds	r3, #1
 800143e:	737b      	strb	r3, [r7, #13]
    		for(x_axis=0;x_axis<21;x_axis++)
 8001440:	7bfb      	ldrb	r3, [r7, #15]
 8001442:	3301      	adds	r3, #1
 8001444:	73fb      	strb	r3, [r7, #15]
 8001446:	7bfb      	ldrb	r3, [r7, #15]
 8001448:	2b14      	cmp	r3, #20
 800144a:	d9eb      	bls.n	8001424 <lcd_speed+0x120>
        for(y_axis=0;y_axis<1;y_axis++)
 800144c:	7bbb      	ldrb	r3, [r7, #14]
 800144e:	3301      	adds	r3, #1
 8001450:	73bb      	strb	r3, [r7, #14]
 8001452:	7bbb      	ldrb	r3, [r7, #14]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d0e2      	beq.n	800141e <lcd_speed+0x11a>
    		}
    	}
    }

    if(sen_type==2)
 8001458:	79bb      	ldrb	r3, [r7, #6]
 800145a:	2b02      	cmp	r3, #2
 800145c:	d11f      	bne.n	800149e <lcd_speed+0x19a>
    {
        for(y_axis=0;y_axis<1;y_axis++)
 800145e:	2300      	movs	r3, #0
 8001460:	73bb      	strb	r3, [r7, #14]
 8001462:	e019      	b.n	8001498 <lcd_speed+0x194>
    	{
    		for(x_axis=0;x_axis<24;x_axis++)
 8001464:	2300      	movs	r3, #0
 8001466:	73fb      	strb	r3, [r7, #15]
 8001468:	e010      	b.n	800148c <lcd_speed+0x188>
    		{
    			lcd_print_convert((4+(y_axis)),(x_axis+52),kmph[value_num]);
 800146a:	7bbb      	ldrb	r3, [r7, #14]
 800146c:	1d18      	adds	r0, r3, #4
 800146e:	7bfb      	ldrb	r3, [r7, #15]
 8001470:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8001474:	7b7b      	ldrb	r3, [r7, #13]
 8001476:	4a0f      	ldr	r2, [pc, #60]	@ (80014b4 <lcd_speed+0x1b0>)
 8001478:	5cd3      	ldrb	r3, [r2, r3]
 800147a:	461a      	mov	r2, r3
 800147c:	f000 fb10 	bl	8001aa0 <lcd_print_convert>
    			value_num++;
 8001480:	7b7b      	ldrb	r3, [r7, #13]
 8001482:	3301      	adds	r3, #1
 8001484:	737b      	strb	r3, [r7, #13]
    		for(x_axis=0;x_axis<24;x_axis++)
 8001486:	7bfb      	ldrb	r3, [r7, #15]
 8001488:	3301      	adds	r3, #1
 800148a:	73fb      	strb	r3, [r7, #15]
 800148c:	7bfb      	ldrb	r3, [r7, #15]
 800148e:	2b17      	cmp	r3, #23
 8001490:	d9eb      	bls.n	800146a <lcd_speed+0x166>
        for(y_axis=0;y_axis<1;y_axis++)
 8001492:	7bbb      	ldrb	r3, [r7, #14]
 8001494:	3301      	adds	r3, #1
 8001496:	73bb      	strb	r3, [r7, #14]
 8001498:	7bbb      	ldrb	r3, [r7, #14]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d0e2      	beq.n	8001464 <lcd_speed+0x160>
    		}
    	}
    }
}
 800149e:	bf00      	nop
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bdb0      	pop	{r4, r5, r7, pc}
 80014a6:	bf00      	nop
 80014a8:	51eb851f 	.word	0x51eb851f
 80014ac:	cccccccd 	.word	0xcccccccd
 80014b0:	08008654 	.word	0x08008654
 80014b4:	0800a1d4 	.word	0x0800a1d4

080014b8 <gear_status_print>:
		 }
	 }
}

void gear_status_print(uint8_t data_gear)
{
 80014b8:	b5b0      	push	{r4, r5, r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	71fb      	strb	r3, [r7, #7]
	uint8_t temp_gear=0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	73fb      	strb	r3, [r7, #15]
	if(data_gear==0)
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d11d      	bne.n	8001508 <gear_status_print+0x50>
	{
		for(uint8_t y_axsis=3;y_axsis<4;y_axsis++)
 80014cc:	2303      	movs	r3, #3
 80014ce:	73bb      	strb	r3, [r7, #14]
 80014d0:	e016      	b.n	8001500 <gear_status_print+0x48>
		{
			for(uint8_t x_axsis=0;x_axsis<29;x_axsis++)
 80014d2:	2300      	movs	r3, #0
 80014d4:	737b      	strb	r3, [r7, #13]
 80014d6:	e00d      	b.n	80014f4 <gear_status_print+0x3c>
			{
				lcd_print_convert(y_axsis,x_axsis,reverse_icon[temp_gear++]);
 80014d8:	7bb8      	ldrb	r0, [r7, #14]
 80014da:	7b79      	ldrb	r1, [r7, #13]
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
 80014de:	1c5a      	adds	r2, r3, #1
 80014e0:	73fa      	strb	r2, [r7, #15]
 80014e2:	461a      	mov	r2, r3
 80014e4:	4b1d      	ldr	r3, [pc, #116]	@ (800155c <gear_status_print+0xa4>)
 80014e6:	5c9b      	ldrb	r3, [r3, r2]
 80014e8:	461a      	mov	r2, r3
 80014ea:	f000 fad9 	bl	8001aa0 <lcd_print_convert>
			for(uint8_t x_axsis=0;x_axsis<29;x_axsis++)
 80014ee:	7b7b      	ldrb	r3, [r7, #13]
 80014f0:	3301      	adds	r3, #1
 80014f2:	737b      	strb	r3, [r7, #13]
 80014f4:	7b7b      	ldrb	r3, [r7, #13]
 80014f6:	2b1c      	cmp	r3, #28
 80014f8:	d9ee      	bls.n	80014d8 <gear_status_print+0x20>
		for(uint8_t y_axsis=3;y_axsis<4;y_axsis++)
 80014fa:	7bbb      	ldrb	r3, [r7, #14]
 80014fc:	3301      	adds	r3, #1
 80014fe:	73bb      	strb	r3, [r7, #14]
 8001500:	7bbb      	ldrb	r3, [r7, #14]
 8001502:	2b03      	cmp	r3, #3
 8001504:	d9e5      	bls.n	80014d2 <gear_status_print+0x1a>
			{
				lcd_print_convert(y_axsis,x_axsis,gear_print[data_gear-1][temp_gear++]);
			}
		}
	}
}
 8001506:	e025      	b.n	8001554 <gear_status_print+0x9c>
	 for(uint8_t y_axsis=3;y_axsis<4;y_axsis++)
 8001508:	2303      	movs	r3, #3
 800150a:	733b      	strb	r3, [r7, #12]
 800150c:	e01f      	b.n	800154e <gear_status_print+0x96>
			for(uint8_t x_axsis=0;x_axsis<21;x_axsis++)
 800150e:	2300      	movs	r3, #0
 8001510:	72fb      	strb	r3, [r7, #11]
 8001512:	e016      	b.n	8001542 <gear_status_print+0x8a>
				lcd_print_convert(y_axsis,x_axsis,gear_print[data_gear-1][temp_gear++]);
 8001514:	7b38      	ldrb	r0, [r7, #12]
 8001516:	7af9      	ldrb	r1, [r7, #11]
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	1e5a      	subs	r2, r3, #1
 800151c:	7bfb      	ldrb	r3, [r7, #15]
 800151e:	1c5c      	adds	r4, r3, #1
 8001520:	73fc      	strb	r4, [r7, #15]
 8001522:	461d      	mov	r5, r3
 8001524:	4c0e      	ldr	r4, [pc, #56]	@ (8001560 <gear_status_print+0xa8>)
 8001526:	4613      	mov	r3, r2
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	4413      	add	r3, r2
 800152c:	00da      	lsls	r2, r3, #3
 800152e:	1ad2      	subs	r2, r2, r3
 8001530:	18a3      	adds	r3, r4, r2
 8001532:	442b      	add	r3, r5
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	461a      	mov	r2, r3
 8001538:	f000 fab2 	bl	8001aa0 <lcd_print_convert>
			for(uint8_t x_axsis=0;x_axsis<21;x_axsis++)
 800153c:	7afb      	ldrb	r3, [r7, #11]
 800153e:	3301      	adds	r3, #1
 8001540:	72fb      	strb	r3, [r7, #11]
 8001542:	7afb      	ldrb	r3, [r7, #11]
 8001544:	2b14      	cmp	r3, #20
 8001546:	d9e5      	bls.n	8001514 <gear_status_print+0x5c>
	 for(uint8_t y_axsis=3;y_axsis<4;y_axsis++)
 8001548:	7b3b      	ldrb	r3, [r7, #12]
 800154a:	3301      	adds	r3, #1
 800154c:	733b      	strb	r3, [r7, #12]
 800154e:	7b3b      	ldrb	r3, [r7, #12]
 8001550:	2b03      	cmp	r3, #3
 8001552:	d9dc      	bls.n	800150e <gear_status_print+0x56>
}
 8001554:	bf00      	nop
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bdb0      	pop	{r4, r5, r7, pc}
 800155c:	08008634 	.word	0x08008634
 8001560:	080085f4 	.word	0x080085f4

08001564 <battery_bar_print>:

void battery_bar_print(uint8_t battery_temp)
{
 8001564:	b5b0      	push	{r4, r5, r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	71fb      	strb	r3, [r7, #7]
	uint8_t temp_bat=0;
 800156e:	2300      	movs	r3, #0
 8001570:	73fb      	strb	r3, [r7, #15]
	 for(uint8_t y_axsis=6;y_axsis<=7;y_axsis++)
 8001572:	2306      	movs	r3, #6
 8001574:	73bb      	strb	r3, [r7, #14]
 8001576:	e01c      	b.n	80015b2 <battery_bar_print+0x4e>
		{
			for(uint8_t x_axsis=26;x_axsis<=102;x_axsis++)
 8001578:	231a      	movs	r3, #26
 800157a:	737b      	strb	r3, [r7, #13]
 800157c:	e013      	b.n	80015a6 <battery_bar_print+0x42>
			{
				lcd_print_convert(y_axsis,x_axsis,Battery_bar[battery_temp][temp_bat++]);
 800157e:	7bb8      	ldrb	r0, [r7, #14]
 8001580:	7b79      	ldrb	r1, [r7, #13]
 8001582:	79fa      	ldrb	r2, [r7, #7]
 8001584:	7bfb      	ldrb	r3, [r7, #15]
 8001586:	1c5c      	adds	r4, r3, #1
 8001588:	73fc      	strb	r4, [r7, #15]
 800158a:	461d      	mov	r5, r3
 800158c:	4c0d      	ldr	r4, [pc, #52]	@ (80015c4 <battery_bar_print+0x60>)
 800158e:	239a      	movs	r3, #154	@ 0x9a
 8001590:	fb02 f303 	mul.w	r3, r2, r3
 8001594:	4423      	add	r3, r4
 8001596:	442b      	add	r3, r5
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	461a      	mov	r2, r3
 800159c:	f000 fa80 	bl	8001aa0 <lcd_print_convert>
			for(uint8_t x_axsis=26;x_axsis<=102;x_axsis++)
 80015a0:	7b7b      	ldrb	r3, [r7, #13]
 80015a2:	3301      	adds	r3, #1
 80015a4:	737b      	strb	r3, [r7, #13]
 80015a6:	7b7b      	ldrb	r3, [r7, #13]
 80015a8:	2b66      	cmp	r3, #102	@ 0x66
 80015aa:	d9e8      	bls.n	800157e <battery_bar_print+0x1a>
	 for(uint8_t y_axsis=6;y_axsis<=7;y_axsis++)
 80015ac:	7bbb      	ldrb	r3, [r7, #14]
 80015ae:	3301      	adds	r3, #1
 80015b0:	73bb      	strb	r3, [r7, #14]
 80015b2:	7bbb      	ldrb	r3, [r7, #14]
 80015b4:	2b07      	cmp	r3, #7
 80015b6:	d9df      	bls.n	8001578 <battery_bar_print+0x14>
			}
		}
	 temp_bat=0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	73fb      	strb	r3, [r7, #15]
}
 80015bc:	bf00      	nop
 80015be:	3710      	adds	r7, #16
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bdb0      	pop	{r4, r5, r7, pc}
 80015c4:	20000400 	.word	0x20000400

080015c8 <odo_icon_print>:
		}
	 temp_gear=0;
}

void odo_icon_print()
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
	uint8_t temp_gear=0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	71fb      	strb	r3, [r7, #7]
	for(uint8_t x_axsis=32;x_axsis<=47;x_axsis++)
 80015d2:	2320      	movs	r3, #32
 80015d4:	71bb      	strb	r3, [r7, #6]
 80015d6:	e00d      	b.n	80015f4 <odo_icon_print+0x2c>
		{
		 	 lcd_print_convert(5,x_axsis,ODO_ICON[temp_gear++]);
 80015d8:	79b9      	ldrb	r1, [r7, #6]
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	1c5a      	adds	r2, r3, #1
 80015de:	71fa      	strb	r2, [r7, #7]
 80015e0:	461a      	mov	r2, r3
 80015e2:	4b08      	ldr	r3, [pc, #32]	@ (8001604 <odo_icon_print+0x3c>)
 80015e4:	5c9b      	ldrb	r3, [r3, r2]
 80015e6:	461a      	mov	r2, r3
 80015e8:	2005      	movs	r0, #5
 80015ea:	f000 fa59 	bl	8001aa0 <lcd_print_convert>
	for(uint8_t x_axsis=32;x_axsis<=47;x_axsis++)
 80015ee:	79bb      	ldrb	r3, [r7, #6]
 80015f0:	3301      	adds	r3, #1
 80015f2:	71bb      	strb	r3, [r7, #6]
 80015f4:	79bb      	ldrb	r3, [r7, #6]
 80015f6:	2b2f      	cmp	r3, #47	@ 0x2f
 80015f8:	d9ee      	bls.n	80015d8 <odo_icon_print+0x10>
		}
}
 80015fa:	bf00      	nop
 80015fc:	bf00      	nop
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	0800a1ec 	.word	0x0800a1ec

08001608 <dte_icon_print>:

void dte_icon_print()
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
	uint8_t temp_gear=0;
 800160e:	2300      	movs	r3, #0
 8001610:	71fb      	strb	r3, [r7, #7]
	for(uint8_t x_axsis=84;x_axsis<=96;x_axsis++)
 8001612:	2354      	movs	r3, #84	@ 0x54
 8001614:	71bb      	strb	r3, [r7, #6]
 8001616:	e00d      	b.n	8001634 <dte_icon_print+0x2c>
	{
	 lcd_print_convert(0,x_axsis,DTE_ICON[temp_gear++]);
 8001618:	79b9      	ldrb	r1, [r7, #6]
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	1c5a      	adds	r2, r3, #1
 800161e:	71fa      	strb	r2, [r7, #7]
 8001620:	461a      	mov	r2, r3
 8001622:	4b08      	ldr	r3, [pc, #32]	@ (8001644 <dte_icon_print+0x3c>)
 8001624:	5c9b      	ldrb	r3, [r3, r2]
 8001626:	461a      	mov	r2, r3
 8001628:	2000      	movs	r0, #0
 800162a:	f000 fa39 	bl	8001aa0 <lcd_print_convert>
	for(uint8_t x_axsis=84;x_axsis<=96;x_axsis++)
 800162e:	79bb      	ldrb	r3, [r7, #6]
 8001630:	3301      	adds	r3, #1
 8001632:	71bb      	strb	r3, [r7, #6]
 8001634:	79bb      	ldrb	r3, [r7, #6]
 8001636:	2b60      	cmp	r3, #96	@ 0x60
 8001638:	d9ee      	bls.n	8001618 <dte_icon_print+0x10>
	}
}
 800163a:	bf00      	nop
 800163c:	bf00      	nop
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	0800a1fc 	.word	0x0800a1fc

08001648 <charge_cycle_print>:
	{
	 lcd_print_convert(5,x_axsis,TRP_ICON[temp_gear++]);
	}
}
void charge_cycle_print()
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
	uint8_t temp_gear=0;
 800164e:	2300      	movs	r3, #0
 8001650:	71fb      	strb	r3, [r7, #7]
	for(uint8_t x_axsis=107;x_axsis<=123;x_axsis++)
 8001652:	236b      	movs	r3, #107	@ 0x6b
 8001654:	71bb      	strb	r3, [r7, #6]
 8001656:	e00d      	b.n	8001674 <charge_cycle_print+0x2c>
	{
	 lcd_print_convert(2,x_axsis,cgc_icon[temp_gear++]);
 8001658:	79b9      	ldrb	r1, [r7, #6]
 800165a:	79fb      	ldrb	r3, [r7, #7]
 800165c:	1c5a      	adds	r2, r3, #1
 800165e:	71fa      	strb	r2, [r7, #7]
 8001660:	461a      	mov	r2, r3
 8001662:	4b08      	ldr	r3, [pc, #32]	@ (8001684 <charge_cycle_print+0x3c>)
 8001664:	5c9b      	ldrb	r3, [r3, r2]
 8001666:	461a      	mov	r2, r3
 8001668:	2002      	movs	r0, #2
 800166a:	f000 fa19 	bl	8001aa0 <lcd_print_convert>
	for(uint8_t x_axsis=107;x_axsis<=123;x_axsis++)
 800166e:	79bb      	ldrb	r3, [r7, #6]
 8001670:	3301      	adds	r3, #1
 8001672:	71bb      	strb	r3, [r7, #6]
 8001674:	79bb      	ldrb	r3, [r7, #6]
 8001676:	2b7b      	cmp	r3, #123	@ 0x7b
 8001678:	d9ee      	bls.n	8001658 <charge_cycle_print+0x10>
	}
}
 800167a:	bf00      	nop
 800167c:	bf00      	nop
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	0800a20c 	.word	0x0800a20c

08001688 <lcd_print_char>:
	}
}

uint8_t print_value_int=0;
void lcd_print_char(uint8_t y_axis_start, uint8_t x_axis_start, char* print_value)//(x_axis_start, y_axis_start, icon_width, icon_height, *print_value
{
 8001688:	b590      	push	{r4, r7, lr}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	603a      	str	r2, [r7, #0]
 8001692:	71fb      	strb	r3, [r7, #7]
 8001694:	460b      	mov	r3, r1
 8001696:	71bb      	strb	r3, [r7, #6]
	uint8_t space=1;
 8001698:	2301      	movs	r3, #1
 800169a:	73fb      	strb	r3, [r7, #15]
	Lcd_cmd((0xB0|(y_axis_start)));
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff fc5d 	bl	8000f64 <Lcd_cmd>
	lcd_x_axis(x_axis_start);
 80016aa:	79bb      	ldrb	r3, [r7, #6]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff fddb 	bl	8001268 <lcd_x_axis>
	while(*print_value)
 80016b2:	e0b1      	b.n	8001818 <lcd_print_char+0x190>
	{
	 for(int temp1=0;temp1<5;temp1++)
 80016b4:	2300      	movs	r3, #0
 80016b6:	60bb      	str	r3, [r7, #8]
 80016b8:	e09a      	b.n	80017f0 <lcd_print_char+0x168>
			{
			 if((*print_value>=65)&&(*print_value<=90))
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b40      	cmp	r3, #64	@ 0x40
 80016c0:	d91f      	bls.n	8001702 <lcd_print_char+0x7a>
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	2b5a      	cmp	r3, #90	@ 0x5a
 80016c8:	d81b      	bhi.n	8001702 <lcd_print_char+0x7a>
				{
				 print_value_int=*print_value;
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	781a      	ldrb	r2, [r3, #0]
 80016ce:	4b57      	ldr	r3, [pc, #348]	@ (800182c <lcd_print_char+0x1a4>)
 80016d0:	701a      	strb	r2, [r3, #0]
				// lcd_print(alphabet[print_value_int-65][temp1]);
				 lcd_print_convert(y_axis_start, x_axis_start++, (alphabet[print_value_int-65][temp1])<<1);
 80016d2:	79f8      	ldrb	r0, [r7, #7]
 80016d4:	79bb      	ldrb	r3, [r7, #6]
 80016d6:	1c5a      	adds	r2, r3, #1
 80016d8:	71ba      	strb	r2, [r7, #6]
 80016da:	461c      	mov	r4, r3
 80016dc:	4b53      	ldr	r3, [pc, #332]	@ (800182c <lcd_print_char+0x1a4>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80016e4:	4952      	ldr	r1, [pc, #328]	@ (8001830 <lcd_print_char+0x1a8>)
 80016e6:	4613      	mov	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4413      	add	r3, r2
 80016ec:	18ca      	adds	r2, r1, r3
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	4413      	add	r3, r2
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	461a      	mov	r2, r3
 80016f8:	4621      	mov	r1, r4
 80016fa:	f000 f9d1 	bl	8001aa0 <lcd_print_convert>
				 space=1;
 80016fe:	2301      	movs	r3, #1
 8001700:	73fb      	strb	r3, [r7, #15]
				}

			 if((*print_value>=97)&&(*print_value<=124))
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b60      	cmp	r3, #96	@ 0x60
 8001708:	d91f      	bls.n	800174a <lcd_print_char+0xc2>
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	2b7c      	cmp	r3, #124	@ 0x7c
 8001710:	d81b      	bhi.n	800174a <lcd_print_char+0xc2>
				{
				 print_value_int=*print_value;
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	781a      	ldrb	r2, [r3, #0]
 8001716:	4b45      	ldr	r3, [pc, #276]	@ (800182c <lcd_print_char+0x1a4>)
 8001718:	701a      	strb	r2, [r3, #0]
				 //lcd_print(alphabet[print_value_int-71][temp1]);

				 lcd_print_convert(y_axis_start,x_axis_start++, (alphabet[print_value_int-71][temp1])<<1);
 800171a:	79f8      	ldrb	r0, [r7, #7]
 800171c:	79bb      	ldrb	r3, [r7, #6]
 800171e:	1c5a      	adds	r2, r3, #1
 8001720:	71ba      	strb	r2, [r7, #6]
 8001722:	461c      	mov	r4, r3
 8001724:	4b41      	ldr	r3, [pc, #260]	@ (800182c <lcd_print_char+0x1a4>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	f1a3 0247 	sub.w	r2, r3, #71	@ 0x47
 800172c:	4940      	ldr	r1, [pc, #256]	@ (8001830 <lcd_print_char+0x1a8>)
 800172e:	4613      	mov	r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4413      	add	r3, r2
 8001734:	18ca      	adds	r2, r1, r3
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	4413      	add	r3, r2
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	461a      	mov	r2, r3
 8001740:	4621      	mov	r1, r4
 8001742:	f000 f9ad 	bl	8001aa0 <lcd_print_convert>
				 space=0;
 8001746:	2300      	movs	r3, #0
 8001748:	73fb      	strb	r3, [r7, #15]
				}

			 if((*print_value>=48)&&(*print_value<=57))
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b2f      	cmp	r3, #47	@ 0x2f
 8001750:	d920      	bls.n	8001794 <lcd_print_char+0x10c>
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b39      	cmp	r3, #57	@ 0x39
 8001758:	d81c      	bhi.n	8001794 <lcd_print_char+0x10c>
				{
				 print_value_int=*print_value;
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	781a      	ldrb	r2, [r3, #0]
 800175e:	4b33      	ldr	r3, [pc, #204]	@ (800182c <lcd_print_char+0x1a4>)
 8001760:	701a      	strb	r2, [r3, #0]
				 //lcd_print(digit[print_value_int-48][temp1]);

				 lcd_print_convert(y_axis_start, x_axis_start++, (digit[print_value_int-48][temp1])<<1);
 8001762:	79f8      	ldrb	r0, [r7, #7]
 8001764:	79bb      	ldrb	r3, [r7, #6]
 8001766:	1c5a      	adds	r2, r3, #1
 8001768:	71ba      	strb	r2, [r7, #6]
 800176a:	461c      	mov	r4, r3
 800176c:	4b2f      	ldr	r3, [pc, #188]	@ (800182c <lcd_print_char+0x1a4>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001774:	492f      	ldr	r1, [pc, #188]	@ (8001834 <lcd_print_char+0x1ac>)
 8001776:	4613      	mov	r3, r2
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	4413      	add	r3, r2
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	18ca      	adds	r2, r1, r3
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	4413      	add	r3, r2
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	461a      	mov	r2, r3
 800178a:	4621      	mov	r1, r4
 800178c:	f000 f988 	bl	8001aa0 <lcd_print_convert>
				 space=1;
 8001790:	2301      	movs	r3, #1
 8001792:	73fb      	strb	r3, [r7, #15]
				}
			 if(*print_value==46)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	2b2e      	cmp	r3, #46	@ 0x2e
 800179a:	d108      	bne.n	80017ae <lcd_print_char+0x126>
				 {
				 // lcd_print(0x00);
				  lcd_print_convert(y_axis_start, x_axis_start++, 0x40 );
 800179c:	79f8      	ldrb	r0, [r7, #7]
 800179e:	79bb      	ldrb	r3, [r7, #6]
 80017a0:	1c5a      	adds	r2, r3, #1
 80017a2:	71ba      	strb	r2, [r7, #6]
 80017a4:	2240      	movs	r2, #64	@ 0x40
 80017a6:	4619      	mov	r1, r3
 80017a8:	f000 f97a 	bl	8001aa0 <lcd_print_convert>
				  break;
 80017ac:	e024      	b.n	80017f8 <lcd_print_char+0x170>
				 }
			 if(*print_value==32)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	2b20      	cmp	r3, #32
 80017b4:	d108      	bne.n	80017c8 <lcd_print_char+0x140>
				 {
				 // lcd_print(0x00);
				  lcd_print_convert(y_axis_start, x_axis_start++, 0x00 );
 80017b6:	79f8      	ldrb	r0, [r7, #7]
 80017b8:	79bb      	ldrb	r3, [r7, #6]
 80017ba:	1c5a      	adds	r2, r3, #1
 80017bc:	71ba      	strb	r2, [r7, #6]
 80017be:	2200      	movs	r2, #0
 80017c0:	4619      	mov	r1, r3
 80017c2:	f000 f96d 	bl	8001aa0 <lcd_print_convert>
				  break;
 80017c6:	e017      	b.n	80017f8 <lcd_print_char+0x170>
				 }

			 if(*print_value==37)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b25      	cmp	r3, #37	@ 0x25
 80017ce:	d10c      	bne.n	80017ea <lcd_print_char+0x162>
			 {
				 lcd_print_convert(y_axis_start, x_axis_start++,persentage[temp1]<<1);
 80017d0:	79f8      	ldrb	r0, [r7, #7]
 80017d2:	79bb      	ldrb	r3, [r7, #6]
 80017d4:	1c5a      	adds	r2, r3, #1
 80017d6:	71ba      	strb	r2, [r7, #6]
 80017d8:	4619      	mov	r1, r3
 80017da:	4a17      	ldr	r2, [pc, #92]	@ (8001838 <lcd_print_char+0x1b0>)
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	4413      	add	r3, r2
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	461a      	mov	r2, r3
 80017e6:	f000 f95b 	bl	8001aa0 <lcd_print_convert>
	 for(int temp1=0;temp1<5;temp1++)
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	3301      	adds	r3, #1
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	2b04      	cmp	r3, #4
 80017f4:	f77f af61 	ble.w	80016ba <lcd_print_char+0x32>
			 }
		 }
	 print_value++;
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	3301      	adds	r3, #1
 80017fc:	603b      	str	r3, [r7, #0]
	 //lcd_print(0x00);
	 if(space)
 80017fe:	7bfb      	ldrb	r3, [r7, #15]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d009      	beq.n	8001818 <lcd_print_char+0x190>
	 {
		 lcd_print_convert(y_axis_start, x_axis_start++, 0x00 );
 8001804:	79f8      	ldrb	r0, [r7, #7]
 8001806:	79bb      	ldrb	r3, [r7, #6]
 8001808:	1c5a      	adds	r2, r3, #1
 800180a:	71ba      	strb	r2, [r7, #6]
 800180c:	2200      	movs	r2, #0
 800180e:	4619      	mov	r1, r3
 8001810:	f000 f946 	bl	8001aa0 <lcd_print_convert>
		 space=0;
 8001814:	2300      	movs	r3, #0
 8001816:	73fb      	strb	r3, [r7, #15]
	while(*print_value)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	f47f af49 	bne.w	80016b4 <lcd_print_char+0x2c>
	 }
	}
}
 8001822:	bf00      	nop
 8001824:	bf00      	nop
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	bd90      	pop	{r4, r7, pc}
 800182c:	20001410 	.word	0x20001410
 8001830:	080084c0 	.word	0x080084c0
 8001834:	08008484 	.word	0x08008484
 8001838:	0800847c 	.word	0x0800847c

0800183c <lcd_clear>:
void lcd_clear(uint8_t y_axsis,uint8_t x_axsis, uint8_t count)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	71fb      	strb	r3, [r7, #7]
 8001846:	460b      	mov	r3, r1
 8001848:	71bb      	strb	r3, [r7, #6]
 800184a:	4613      	mov	r3, r2
 800184c:	717b      	strb	r3, [r7, #5]
	for(uint8_t x_axis_start=0;x_axis_start<=count;x_axis_start++)
 800184e:	2300      	movs	r3, #0
 8001850:	73fb      	strb	r3, [r7, #15]
 8001852:	e00d      	b.n	8001870 <lcd_clear+0x34>
	{
		lcd_temp_ram[y_axsis][x_axsis++]=0x00;
 8001854:	79fa      	ldrb	r2, [r7, #7]
 8001856:	79bb      	ldrb	r3, [r7, #6]
 8001858:	1c59      	adds	r1, r3, #1
 800185a:	71b9      	strb	r1, [r7, #6]
 800185c:	4618      	mov	r0, r3
 800185e:	4909      	ldr	r1, [pc, #36]	@ (8001884 <lcd_clear+0x48>)
 8001860:	01d3      	lsls	r3, r2, #7
 8001862:	440b      	add	r3, r1
 8001864:	4403      	add	r3, r0
 8001866:	2200      	movs	r2, #0
 8001868:	701a      	strb	r2, [r3, #0]
	for(uint8_t x_axis_start=0;x_axis_start<=count;x_axis_start++)
 800186a:	7bfb      	ldrb	r3, [r7, #15]
 800186c:	3301      	adds	r3, #1
 800186e:	73fb      	strb	r3, [r7, #15]
 8001870:	7bfa      	ldrb	r2, [r7, #15]
 8001872:	797b      	ldrb	r3, [r7, #5]
 8001874:	429a      	cmp	r2, r3
 8001876:	d9ed      	bls.n	8001854 <lcd_clear+0x18>
	}
}
 8001878:	bf00      	nop
 800187a:	bf00      	nop
 800187c:	3714      	adds	r7, #20
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr
 8001884:	2000080c 	.word	0x2000080c

08001888 <lcd_print_digit_wos>:
void lcd_print_digit_wos(uint8_t y_axis_start, uint8_t x_axis_start,uint8_t print_value)//(x_axis_start, y_axis_start, icon_width, icon_height, *print_value
{
 8001888:	b590      	push	{r4, r7, lr}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	71fb      	strb	r3, [r7, #7]
 8001892:	460b      	mov	r3, r1
 8001894:	71bb      	strb	r3, [r7, #6]
 8001896:	4613      	mov	r3, r2
 8001898:	717b      	strb	r3, [r7, #5]
	Lcd_cmd((0xB0|(y_axis_start)));
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff fb5e 	bl	8000f64 <Lcd_cmd>
	lcd_x_axis(x_axis_start);
 80018a8:	79bb      	ldrb	r3, [r7, #6]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff fcdc 	bl	8001268 <lcd_x_axis>
	for(int temp1=0;temp1<5;temp1++)
 80018b0:	2300      	movs	r3, #0
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	e016      	b.n	80018e4 <lcd_print_digit_wos+0x5c>
	{
		//lcd_print(digit[currentDigit][temp1]);
		lcd_print_convert(y_axis_start, x_axis_start++, (digit[print_value][temp1])<<1);
 80018b6:	79f8      	ldrb	r0, [r7, #7]
 80018b8:	79bb      	ldrb	r3, [r7, #6]
 80018ba:	1c5a      	adds	r2, r3, #1
 80018bc:	71ba      	strb	r2, [r7, #6]
 80018be:	461c      	mov	r4, r3
 80018c0:	797a      	ldrb	r2, [r7, #5]
 80018c2:	4910      	ldr	r1, [pc, #64]	@ (8001904 <lcd_print_digit_wos+0x7c>)
 80018c4:	4613      	mov	r3, r2
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	4413      	add	r3, r2
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	18ca      	adds	r2, r1, r3
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	4413      	add	r3, r2
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	461a      	mov	r2, r3
 80018d8:	4621      	mov	r1, r4
 80018da:	f000 f8e1 	bl	8001aa0 <lcd_print_convert>
	for(int temp1=0;temp1<5;temp1++)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	3301      	adds	r3, #1
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2b04      	cmp	r3, #4
 80018e8:	dde5      	ble.n	80018b6 <lcd_print_digit_wos+0x2e>
	}
	lcd_print_convert(y_axis_start, x_axis_start++, 0X00);
 80018ea:	79f8      	ldrb	r0, [r7, #7]
 80018ec:	79bb      	ldrb	r3, [r7, #6]
 80018ee:	1c5a      	adds	r2, r3, #1
 80018f0:	71ba      	strb	r2, [r7, #6]
 80018f2:	2200      	movs	r2, #0
 80018f4:	4619      	mov	r1, r3
 80018f6:	f000 f8d3 	bl	8001aa0 <lcd_print_convert>
}
 80018fa:	bf00      	nop
 80018fc:	3714      	adds	r7, #20
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd90      	pop	{r4, r7, pc}
 8001902:	bf00      	nop
 8001904:	08008484 	.word	0x08008484

08001908 <lcd_print_digit>:
void lcd_print_digit(uint8_t y_axis_start, uint8_t x_axis_start,uint16_t print_value)//(x_axis_start, y_axis_start, icon_width, icon_height, *print_value
{
 8001908:	b590      	push	{r4, r7, lr}
 800190a:	b08b      	sub	sp, #44	@ 0x2c
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	71fb      	strb	r3, [r7, #7]
 8001912:	460b      	mov	r3, r1
 8001914:	71bb      	strb	r3, [r7, #6]
 8001916:	4613      	mov	r3, r2
 8001918:	80bb      	strh	r3, [r7, #4]
  uint8_t digitCount=0;
 800191a:	2300      	movs	r3, #0
 800191c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int originalNumber = print_value;
 8001920:	88bb      	ldrh	r3, [r7, #4]
 8001922:	623b      	str	r3, [r7, #32]
	Lcd_cmd((0xB0|(y_axis_start)));
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 800192a:	b2db      	uxtb	r3, r3
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff fb19 	bl	8000f64 <Lcd_cmd>
	lcd_x_axis(x_axis_start);
 8001932:	79bb      	ldrb	r3, [r7, #6]
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff fc97 	bl	8001268 <lcd_x_axis>
	int num_digit=0;
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
	while (originalNumber > 0)
 800193e:	e00c      	b.n	800195a <lcd_print_digit+0x52>
		{
			digitCount++;
 8001940:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001944:	3301      	adds	r3, #1
 8001946:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			originalNumber /= 10;
 800194a:	6a3b      	ldr	r3, [r7, #32]
 800194c:	4a34      	ldr	r2, [pc, #208]	@ (8001a20 <lcd_print_digit+0x118>)
 800194e:	fb82 1203 	smull	r1, r2, r2, r3
 8001952:	1092      	asrs	r2, r2, #2
 8001954:	17db      	asrs	r3, r3, #31
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	623b      	str	r3, [r7, #32]
	while (originalNumber > 0)
 800195a:	6a3b      	ldr	r3, [r7, #32]
 800195c:	2b00      	cmp	r3, #0
 800195e:	dcef      	bgt.n	8001940 <lcd_print_digit+0x38>
		}

	for (int8_t temp_flag_1 = digitCount - 1; temp_flag_1 >= 0; temp_flag_1--)
 8001960:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001964:	3b01      	subs	r3, #1
 8001966:	b2db      	uxtb	r3, r3
 8001968:	77fb      	strb	r3, [r7, #31]
 800196a:	e04e      	b.n	8001a0a <lcd_print_digit+0x102>
	{
		  // Extract the digit at position i
		  int divisor = 1;
 800196c:	2301      	movs	r3, #1
 800196e:	61bb      	str	r3, [r7, #24]
		  for (uint8_t temp_flag_2 = 0; temp_flag_2 < temp_flag_1; temp_flag_2++) {
 8001970:	2300      	movs	r3, #0
 8001972:	75fb      	strb	r3, [r7, #23]
 8001974:	e008      	b.n	8001988 <lcd_print_digit+0x80>
			  divisor *= 10;
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	4613      	mov	r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	4413      	add	r3, r2
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	61bb      	str	r3, [r7, #24]
		  for (uint8_t temp_flag_2 = 0; temp_flag_2 < temp_flag_1; temp_flag_2++) {
 8001982:	7dfb      	ldrb	r3, [r7, #23]
 8001984:	3301      	adds	r3, #1
 8001986:	75fb      	strb	r3, [r7, #23]
 8001988:	7dfa      	ldrb	r2, [r7, #23]
 800198a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800198e:	429a      	cmp	r2, r3
 8001990:	dbf1      	blt.n	8001976 <lcd_print_digit+0x6e>
	}
	  uint8_t currentDigit = (print_value / divisor) % 10;
 8001992:	88ba      	ldrh	r2, [r7, #4]
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	fb92 f2f3 	sdiv	r2, r2, r3
 800199a:	4b21      	ldr	r3, [pc, #132]	@ (8001a20 <lcd_print_digit+0x118>)
 800199c:	fb83 1302 	smull	r1, r3, r3, r2
 80019a0:	1099      	asrs	r1, r3, #2
 80019a2:	17d3      	asrs	r3, r2, #31
 80019a4:	1ac9      	subs	r1, r1, r3
 80019a6:	460b      	mov	r3, r1
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	440b      	add	r3, r1
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	1ad1      	subs	r1, r2, r3
 80019b0:	460b      	mov	r3, r1
 80019b2:	72bb      	strb	r3, [r7, #10]
		for(int temp1=0;temp1<5;temp1++)
 80019b4:	2300      	movs	r3, #0
 80019b6:	613b      	str	r3, [r7, #16]
 80019b8:	e016      	b.n	80019e8 <lcd_print_digit+0xe0>
		{
			//lcd_print(digit[currentDigit][temp1]);
			lcd_print_convert(y_axis_start, x_axis_start++, (digit[currentDigit][temp1])<<1);
 80019ba:	79f8      	ldrb	r0, [r7, #7]
 80019bc:	79bb      	ldrb	r3, [r7, #6]
 80019be:	1c5a      	adds	r2, r3, #1
 80019c0:	71ba      	strb	r2, [r7, #6]
 80019c2:	461c      	mov	r4, r3
 80019c4:	7aba      	ldrb	r2, [r7, #10]
 80019c6:	4917      	ldr	r1, [pc, #92]	@ (8001a24 <lcd_print_digit+0x11c>)
 80019c8:	4613      	mov	r3, r2
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	4413      	add	r3, r2
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	18ca      	adds	r2, r1, r3
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	4413      	add	r3, r2
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	461a      	mov	r2, r3
 80019dc:	4621      	mov	r1, r4
 80019de:	f000 f85f 	bl	8001aa0 <lcd_print_convert>
		for(int temp1=0;temp1<5;temp1++)
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	3301      	adds	r3, #1
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	2b04      	cmp	r3, #4
 80019ec:	dde5      	ble.n	80019ba <lcd_print_digit+0xb2>
		}
		lcd_print_convert(y_axis_start, x_axis_start++, 0X00);
 80019ee:	79f8      	ldrb	r0, [r7, #7]
 80019f0:	79bb      	ldrb	r3, [r7, #6]
 80019f2:	1c5a      	adds	r2, r3, #1
 80019f4:	71ba      	strb	r2, [r7, #6]
 80019f6:	2200      	movs	r2, #0
 80019f8:	4619      	mov	r1, r3
 80019fa:	f000 f851 	bl	8001aa0 <lcd_print_convert>
	for (int8_t temp_flag_1 = digitCount - 1; temp_flag_1 >= 0; temp_flag_1--)
 80019fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	3b01      	subs	r3, #1
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	77fb      	strb	r3, [r7, #31]
 8001a0a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	daac      	bge.n	800196c <lcd_print_digit+0x64>
}
uint8_t print_value_int=0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	72fb      	strb	r3, [r7, #11]
}
 8001a16:	bf00      	nop
 8001a18:	372c      	adds	r7, #44	@ 0x2c
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd90      	pop	{r4, r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	66666667 	.word	0x66666667
 8001a24:	08008484 	.word	0x08008484

08001a28 <lcd_into>:

void lcd_into()
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
	uint16_t temp=0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	80fb      	strh	r3, [r7, #6]
	for(uint8_t y_axsis=0;y_axsis<=7;y_axsis++)
 8001a32:	2300      	movs	r3, #0
 8001a34:	717b      	strb	r3, [r7, #5]
 8001a36:	e017      	b.n	8001a68 <lcd_into+0x40>
		{
			for(uint8_t x_axsis=0;x_axsis<=127;x_axsis++)
 8001a38:	2300      	movs	r3, #0
 8001a3a:	713b      	strb	r3, [r7, #4]
 8001a3c:	e00d      	b.n	8001a5a <lcd_into+0x32>
			{
				lcd_print_convert(y_axsis,x_axsis,intro1[temp++]);
 8001a3e:	7978      	ldrb	r0, [r7, #5]
 8001a40:	7939      	ldrb	r1, [r7, #4]
 8001a42:	88fb      	ldrh	r3, [r7, #6]
 8001a44:	1c5a      	adds	r2, r3, #1
 8001a46:	80fa      	strh	r2, [r7, #6]
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4b14      	ldr	r3, [pc, #80]	@ (8001a9c <lcd_into+0x74>)
 8001a4c:	5c9b      	ldrb	r3, [r3, r2]
 8001a4e:	461a      	mov	r2, r3
 8001a50:	f000 f826 	bl	8001aa0 <lcd_print_convert>
			for(uint8_t x_axsis=0;x_axsis<=127;x_axsis++)
 8001a54:	793b      	ldrb	r3, [r7, #4]
 8001a56:	3301      	adds	r3, #1
 8001a58:	713b      	strb	r3, [r7, #4]
 8001a5a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	daed      	bge.n	8001a3e <lcd_into+0x16>
	for(uint8_t y_axsis=0;y_axsis<=7;y_axsis++)
 8001a62:	797b      	ldrb	r3, [r7, #5]
 8001a64:	3301      	adds	r3, #1
 8001a66:	717b      	strb	r3, [r7, #5]
 8001a68:	797b      	ldrb	r3, [r7, #5]
 8001a6a:	2b07      	cmp	r3, #7
 8001a6c:	d9e4      	bls.n	8001a38 <lcd_into+0x10>
			}
		}
	  version_print();
 8001a6e:	f001 f8c3 	bl	8002bf8 <version_print>
	 Lcd_cmd(0xA2);// ADC select
 8001a72:	20a2      	movs	r0, #162	@ 0xa2
 8001a74:	f7ff fa76 	bl	8000f64 <Lcd_cmd>
	 Lcd_cmd(0xA0);// SHL select
 8001a78:	20a0      	movs	r0, #160	@ 0xa0
 8001a7a:	f7ff fa73 	bl	8000f64 <Lcd_cmd>
	 Lcd_cmd(0xC0);// Initial display line
 8001a7e:	20c0      	movs	r0, #192	@ 0xc0
 8001a80:	f7ff fa70 	bl	8000f64 <Lcd_cmd>
	 Lcd_cmd(0x40);
 8001a84:	2040      	movs	r0, #64	@ 0x40
 8001a86:	f7ff fa6d 	bl	8000f64 <Lcd_cmd>
	 lcd_invert_process();
 8001a8a:	f7ff fc07 	bl	800129c <lcd_invert_process>
	 lcd_print_ram_1();
 8001a8e:	f7ff fa9d 	bl	8000fcc <lcd_print_ram_1>
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000000 	.word	0x20000000

08001aa0 <lcd_print_convert>:


void lcd_print_convert(uint8_t y_axsis,uint8_t x_axsis,uint8_t data)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	71fb      	strb	r3, [r7, #7]
 8001aaa:	460b      	mov	r3, r1
 8001aac:	71bb      	strb	r3, [r7, #6]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	717b      	strb	r3, [r7, #5]
	lcd_temp_ram[y_axsis][x_axsis]=data;
 8001ab2:	79fa      	ldrb	r2, [r7, #7]
 8001ab4:	79bb      	ldrb	r3, [r7, #6]
 8001ab6:	4905      	ldr	r1, [pc, #20]	@ (8001acc <lcd_print_convert+0x2c>)
 8001ab8:	01d2      	lsls	r2, r2, #7
 8001aba:	440a      	add	r2, r1
 8001abc:	4413      	add	r3, r2
 8001abe:	797a      	ldrb	r2, [r7, #5]
 8001ac0:	701a      	strb	r2, [r3, #0]
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr
 8001acc:	2000080c 	.word	0x2000080c

08001ad0 <over_temperature_print>:


void over_temperature_print()
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
	uint8_t temp_gear = 0;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	71fb      	strb	r3, [r7, #7]
	for(uint8_t y_axsis=1;y_axsis<=2;y_axsis++)
 8001ada:	2301      	movs	r3, #1
 8001adc:	71bb      	strb	r3, [r7, #6]
 8001ade:	e016      	b.n	8001b0e <over_temperature_print+0x3e>
	{
		for(uint8_t x_axsis=25; x_axsis<=38;x_axsis++)
 8001ae0:	2319      	movs	r3, #25
 8001ae2:	717b      	strb	r3, [r7, #5]
 8001ae4:	e00d      	b.n	8001b02 <over_temperature_print+0x32>
		{
			lcd_print_convert(y_axsis,x_axsis,High_temperature[temp_gear++]);
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	1c5a      	adds	r2, r3, #1
 8001aea:	71fa      	strb	r2, [r7, #7]
 8001aec:	461a      	mov	r2, r3
 8001aee:	4b0c      	ldr	r3, [pc, #48]	@ (8001b20 <over_temperature_print+0x50>)
 8001af0:	5c9a      	ldrb	r2, [r3, r2]
 8001af2:	7979      	ldrb	r1, [r7, #5]
 8001af4:	79bb      	ldrb	r3, [r7, #6]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff ffd2 	bl	8001aa0 <lcd_print_convert>
		for(uint8_t x_axsis=25; x_axsis<=38;x_axsis++)
 8001afc:	797b      	ldrb	r3, [r7, #5]
 8001afe:	3301      	adds	r3, #1
 8001b00:	717b      	strb	r3, [r7, #5]
 8001b02:	797b      	ldrb	r3, [r7, #5]
 8001b04:	2b26      	cmp	r3, #38	@ 0x26
 8001b06:	d9ee      	bls.n	8001ae6 <over_temperature_print+0x16>
	for(uint8_t y_axsis=1;y_axsis<=2;y_axsis++)
 8001b08:	79bb      	ldrb	r3, [r7, #6]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	71bb      	strb	r3, [r7, #6]
 8001b0e:	79bb      	ldrb	r3, [r7, #6]
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d9e5      	bls.n	8001ae0 <over_temperature_print+0x10>
		}
	}
}
 8001b14:	bf00      	nop
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	0800a21c 	.word	0x0800a21c

08001b24 <line_print>:

void line_print()
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
	 for(uint8_t y_axis=0;y_axis<1;y_axis++)
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	71fb      	strb	r3, [r7, #7]
 8001b2e:	e014      	b.n	8001b5a <line_print+0x36>
			   {
		for(uint8_t x_axis=0;x_axis<=127;x_axis++)
 8001b30:	2300      	movs	r3, #0
 8001b32:	71bb      	strb	r3, [r7, #6]
 8001b34:	e00a      	b.n	8001b4c <line_print+0x28>
		   {
			//if(x_axis==26){x_axis=102;}
			   lcd_print_convert((6+(y_axis)),(x_axis),0x04);
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	3306      	adds	r3, #6
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	79b9      	ldrb	r1, [r7, #6]
 8001b3e:	2204      	movs	r2, #4
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff ffad 	bl	8001aa0 <lcd_print_convert>
		for(uint8_t x_axis=0;x_axis<=127;x_axis++)
 8001b46:	79bb      	ldrb	r3, [r7, #6]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	71bb      	strb	r3, [r7, #6]
 8001b4c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	daf0      	bge.n	8001b36 <line_print+0x12>
	 for(uint8_t y_axis=0;y_axis<1;y_axis++)
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	3301      	adds	r3, #1
 8001b58:	71fb      	strb	r3, [r7, #7]
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d0e7      	beq.n	8001b30 <line_print+0xc>
		   }
	   }
}
 8001b60:	bf00      	nop
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
	...

08001b6c <merge>:
 * Data will be splitting and merging  based on the requirement and stored in a corresponding variable
 * It likely disassembles larger data units into smaller parts or combines smaller parts to form larger data entities.s
 */
extern uint8_t sensor_change;
void merge(uint32_t Id)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
switch(Id)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4a7c      	ldr	r2, [pc, #496]	@ (8001d68 <merge+0x1fc>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	f000 842b 	beq.w	80023d4 <merge+0x868>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a79      	ldr	r2, [pc, #484]	@ (8001d68 <merge+0x1fc>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	f200 86e2 	bhi.w	800294c <merge+0xde0>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4a78      	ldr	r2, [pc, #480]	@ (8001d6c <merge+0x200>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	f000 81a7 	beq.w	8001ee0 <merge+0x374>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a75      	ldr	r2, [pc, #468]	@ (8001d6c <merge+0x200>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	f200 86d8 	bhi.w	800294c <merge+0xde0>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4a74      	ldr	r2, [pc, #464]	@ (8001d70 <merge+0x204>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	f000 817b 	beq.w	8001e9c <merge+0x330>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a71      	ldr	r2, [pc, #452]	@ (8001d70 <merge+0x204>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	f200 86ce 	bhi.w	800294c <merge+0xde0>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a70      	ldr	r2, [pc, #448]	@ (8001d74 <merge+0x208>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	f000 86cb 	beq.w	8002950 <merge+0xde4>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a6d      	ldr	r2, [pc, #436]	@ (8001d74 <merge+0x208>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	f200 86c4 	bhi.w	800294c <merge+0xde0>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4a6c      	ldr	r2, [pc, #432]	@ (8001d78 <merge+0x20c>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	f000 80e9 	beq.w	8001da0 <merge+0x234>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a69      	ldr	r2, [pc, #420]	@ (8001d78 <merge+0x20c>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	f200 86ba 	bhi.w	800294c <merge+0xde0>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4a68      	ldr	r2, [pc, #416]	@ (8001d7c <merge+0x210>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	f000 80a0 	beq.w	8001d22 <merge+0x1b6>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a65      	ldr	r2, [pc, #404]	@ (8001d7c <merge+0x210>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	f200 86b0 	bhi.w	800294c <merge+0xde0>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a64      	ldr	r2, [pc, #400]	@ (8001d80 <merge+0x214>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	f000 8084 	beq.w	8001cfe <merge+0x192>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a61      	ldr	r2, [pc, #388]	@ (8001d80 <merge+0x214>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	f200 86a6 	bhi.w	800294c <merge+0xde0>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4a60      	ldr	r2, [pc, #384]	@ (8001d84 <merge+0x218>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d058      	beq.n	8001cba <merge+0x14e>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4a5e      	ldr	r2, [pc, #376]	@ (8001d84 <merge+0x218>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	f200 869d 	bhi.w	800294c <merge+0xde0>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a5c      	ldr	r2, [pc, #368]	@ (8001d88 <merge+0x21c>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d01a      	beq.n	8001c50 <merge+0xe4>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a5a      	ldr	r2, [pc, #360]	@ (8001d88 <merge+0x21c>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	f200 8694 	bhi.w	800294c <merge+0xde0>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a59      	ldr	r2, [pc, #356]	@ (8001d8c <merge+0x220>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	f000 864d 	beq.w	80028c8 <merge+0xd5c>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a56      	ldr	r2, [pc, #344]	@ (8001d8c <merge+0x220>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	f200 868a 	bhi.w	800294c <merge+0xde0>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a55      	ldr	r2, [pc, #340]	@ (8001d90 <merge+0x224>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	f000 8669 	beq.w	8002914 <merge+0xda8>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a53      	ldr	r2, [pc, #332]	@ (8001d94 <merge+0x228>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	f000 8650 	beq.w	80028ec <merge+0xd80>
	             OBD.speed_sensor_type=Received_Data[4]; //2-> Speed read from controller 1-> speed from front when sensor
	             sensor_change=1;
	             break;
default:

	break;
 8001c4c:	f000 be7e 	b.w	800294c <merge+0xde0>
				 BMS.Cumulative_Total_Voltage = (Received_Data[0]<<8)|Received_Data[1];//Cumulative total voltage of BMS
 8001c50:	4b51      	ldr	r3, [pc, #324]	@ (8001d98 <merge+0x22c>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	021b      	lsls	r3, r3, #8
 8001c56:	b21a      	sxth	r2, r3
 8001c58:	4b4f      	ldr	r3, [pc, #316]	@ (8001d98 <merge+0x22c>)
 8001c5a:	785b      	ldrb	r3, [r3, #1]
 8001c5c:	b21b      	sxth	r3, r3
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	b21b      	sxth	r3, r3
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	4b4d      	ldr	r3, [pc, #308]	@ (8001d9c <merge+0x230>)
 8001c66:	801a      	strh	r2, [r3, #0]
				 BMS.Gather_Total_Voltage = (Received_Data[2]<<8)|Received_Data[3];//Gather total voltage of BMS
 8001c68:	4b4b      	ldr	r3, [pc, #300]	@ (8001d98 <merge+0x22c>)
 8001c6a:	789b      	ldrb	r3, [r3, #2]
 8001c6c:	021b      	lsls	r3, r3, #8
 8001c6e:	b21a      	sxth	r2, r3
 8001c70:	4b49      	ldr	r3, [pc, #292]	@ (8001d98 <merge+0x22c>)
 8001c72:	78db      	ldrb	r3, [r3, #3]
 8001c74:	b21b      	sxth	r3, r3
 8001c76:	4313      	orrs	r3, r2
 8001c78:	b21b      	sxth	r3, r3
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	4b47      	ldr	r3, [pc, #284]	@ (8001d9c <merge+0x230>)
 8001c7e:	805a      	strh	r2, [r3, #2]
				 BMS.Current = ((Received_Data[4]<<8)|Received_Data[5])-30000;//Total Current of BMS
 8001c80:	4b45      	ldr	r3, [pc, #276]	@ (8001d98 <merge+0x22c>)
 8001c82:	791b      	ldrb	r3, [r3, #4]
 8001c84:	021b      	lsls	r3, r3, #8
 8001c86:	b21a      	sxth	r2, r3
 8001c88:	4b43      	ldr	r3, [pc, #268]	@ (8001d98 <merge+0x22c>)
 8001c8a:	795b      	ldrb	r3, [r3, #5]
 8001c8c:	b21b      	sxth	r3, r3
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	b21b      	sxth	r3, r3
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	f5a3 43ea 	sub.w	r3, r3, #29952	@ 0x7500
 8001c98:	3b30      	subs	r3, #48	@ 0x30
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	4b3f      	ldr	r3, [pc, #252]	@ (8001d9c <merge+0x230>)
 8001c9e:	809a      	strh	r2, [r3, #4]
				 BMS.SOC = (Received_Data[6]<<8)|Received_Data[7];//state of charge of BMS
 8001ca0:	4b3d      	ldr	r3, [pc, #244]	@ (8001d98 <merge+0x22c>)
 8001ca2:	799b      	ldrb	r3, [r3, #6]
 8001ca4:	021b      	lsls	r3, r3, #8
 8001ca6:	b21a      	sxth	r2, r3
 8001ca8:	4b3b      	ldr	r3, [pc, #236]	@ (8001d98 <merge+0x22c>)
 8001caa:	79db      	ldrb	r3, [r3, #7]
 8001cac:	b21b      	sxth	r3, r3
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	b21a      	sxth	r2, r3
 8001cb2:	4b3a      	ldr	r3, [pc, #232]	@ (8001d9c <merge+0x230>)
 8001cb4:	819a      	strh	r2, [r3, #12]
                 break;
 8001cb6:	f000 be4c 	b.w	8002952 <merge+0xde6>
                 BMS.Max_Cell_Voltage = (Received_Data[0]<<8)|Received_Data[1];//Maximum Voltage value among all the cells
 8001cba:	4b37      	ldr	r3, [pc, #220]	@ (8001d98 <merge+0x22c>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	021b      	lsls	r3, r3, #8
 8001cc0:	b21a      	sxth	r2, r3
 8001cc2:	4b35      	ldr	r3, [pc, #212]	@ (8001d98 <merge+0x22c>)
 8001cc4:	785b      	ldrb	r3, [r3, #1]
 8001cc6:	b21b      	sxth	r3, r3
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	b21b      	sxth	r3, r3
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	4b33      	ldr	r3, [pc, #204]	@ (8001d9c <merge+0x230>)
 8001cd0:	81da      	strh	r2, [r3, #14]
			     BMS.Max_Cell_Voltage_No = Received_Data[2];//Maximum voltage cell number among all the cells
 8001cd2:	4b31      	ldr	r3, [pc, #196]	@ (8001d98 <merge+0x22c>)
 8001cd4:	789a      	ldrb	r2, [r3, #2]
 8001cd6:	4b31      	ldr	r3, [pc, #196]	@ (8001d9c <merge+0x230>)
 8001cd8:	741a      	strb	r2, [r3, #16]
			     BMS.Min_Cell_Voltage = (Received_Data[3]<<8)|Received_Data[4];//Minimum voltage value among all the cells
 8001cda:	4b2f      	ldr	r3, [pc, #188]	@ (8001d98 <merge+0x22c>)
 8001cdc:	78db      	ldrb	r3, [r3, #3]
 8001cde:	021b      	lsls	r3, r3, #8
 8001ce0:	b21a      	sxth	r2, r3
 8001ce2:	4b2d      	ldr	r3, [pc, #180]	@ (8001d98 <merge+0x22c>)
 8001ce4:	791b      	ldrb	r3, [r3, #4]
 8001ce6:	b21b      	sxth	r3, r3
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	b21b      	sxth	r3, r3
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	4b2b      	ldr	r3, [pc, #172]	@ (8001d9c <merge+0x230>)
 8001cf0:	825a      	strh	r2, [r3, #18]
			     BMS.Min_Cell_Voltage_No =  Received_Data[5];//Minimum voltage cell number among all the cells
 8001cf2:	4b29      	ldr	r3, [pc, #164]	@ (8001d98 <merge+0x22c>)
 8001cf4:	795a      	ldrb	r2, [r3, #5]
 8001cf6:	4b29      	ldr	r3, [pc, #164]	@ (8001d9c <merge+0x230>)
 8001cf8:	751a      	strb	r2, [r3, #20]
			     break;
 8001cfa:	f000 be2a 	b.w	8002952 <merge+0xde6>
                 BMS.Max_Temp = (Received_Data[0]);//Maximum temperature sensor value among all the sensor
 8001cfe:	4b26      	ldr	r3, [pc, #152]	@ (8001d98 <merge+0x22c>)
 8001d00:	781a      	ldrb	r2, [r3, #0]
 8001d02:	4b26      	ldr	r3, [pc, #152]	@ (8001d9c <merge+0x230>)
 8001d04:	755a      	strb	r2, [r3, #21]
			     BMS.Max_Temp_Sensor_No = Received_Data[1];//Number of the sensor that has the highest temperature value among the sensors
 8001d06:	4b24      	ldr	r3, [pc, #144]	@ (8001d98 <merge+0x22c>)
 8001d08:	785a      	ldrb	r2, [r3, #1]
 8001d0a:	4b24      	ldr	r3, [pc, #144]	@ (8001d9c <merge+0x230>)
 8001d0c:	759a      	strb	r2, [r3, #22]
		         BMS.Min_Temp = (Received_Data[2]);//Minimum temperature value among all the sensors
 8001d0e:	4b22      	ldr	r3, [pc, #136]	@ (8001d98 <merge+0x22c>)
 8001d10:	789a      	ldrb	r2, [r3, #2]
 8001d12:	4b22      	ldr	r3, [pc, #136]	@ (8001d9c <merge+0x230>)
 8001d14:	75da      	strb	r2, [r3, #23]
		         BMS.Min_Temp_Sensor_No = Received_Data[3];//Number of the sensor that has the lowest temperature value among the sensors
 8001d16:	4b20      	ldr	r3, [pc, #128]	@ (8001d98 <merge+0x22c>)
 8001d18:	78da      	ldrb	r2, [r3, #3]
 8001d1a:	4b20      	ldr	r3, [pc, #128]	@ (8001d9c <merge+0x230>)
 8001d1c:	761a      	strb	r2, [r3, #24]
                 break;
 8001d1e:	f000 be18 	b.w	8002952 <merge+0xde6>
                 BMS.Charger_State = Received_Data[0];//0:stationary 1:charge 2:discharge
 8001d22:	4b1d      	ldr	r3, [pc, #116]	@ (8001d98 <merge+0x22c>)
 8001d24:	781a      	ldrb	r2, [r3, #0]
 8001d26:	4b1d      	ldr	r3, [pc, #116]	@ (8001d9c <merge+0x230>)
 8001d28:	765a      	strb	r2, [r3, #25]
 		  	     BMS.Charge_MOS_State= Received_Data[1];//0:stationary 1:charge 2:discharge
 8001d2a:	4b1b      	ldr	r3, [pc, #108]	@ (8001d98 <merge+0x22c>)
 8001d2c:	785a      	ldrb	r2, [r3, #1]
 8001d2e:	4b1b      	ldr	r3, [pc, #108]	@ (8001d9c <merge+0x230>)
 8001d30:	769a      	strb	r2, [r3, #26]
 		  	     BMS.Discharge_MOS_State= Received_Data[2];//0:stationary 1:charge 2:discharge
 8001d32:	4b19      	ldr	r3, [pc, #100]	@ (8001d98 <merge+0x22c>)
 8001d34:	789a      	ldrb	r2, [r3, #2]
 8001d36:	4b19      	ldr	r3, [pc, #100]	@ (8001d9c <merge+0x230>)
 8001d38:	76da      	strb	r2, [r3, #27]
 		  		 BMS.BMS_Life = Received_Data[3];//Count of charge-discharge cycles
 8001d3a:	4b17      	ldr	r3, [pc, #92]	@ (8001d98 <merge+0x22c>)
 8001d3c:	78da      	ldrb	r2, [r3, #3]
 8001d3e:	4b17      	ldr	r3, [pc, #92]	@ (8001d9c <merge+0x230>)
 8001d40:	771a      	strb	r2, [r3, #28]
 		  	     BMS.Capacity = Received_Data[4]<<24|(Received_Data[5]<<16)|(Received_Data[6]<<8)|(Received_Data[7]);//Remaining capacity of BMS
 8001d42:	4b15      	ldr	r3, [pc, #84]	@ (8001d98 <merge+0x22c>)
 8001d44:	791b      	ldrb	r3, [r3, #4]
 8001d46:	061a      	lsls	r2, r3, #24
 8001d48:	4b13      	ldr	r3, [pc, #76]	@ (8001d98 <merge+0x22c>)
 8001d4a:	795b      	ldrb	r3, [r3, #5]
 8001d4c:	041b      	lsls	r3, r3, #16
 8001d4e:	431a      	orrs	r2, r3
 8001d50:	4b11      	ldr	r3, [pc, #68]	@ (8001d98 <merge+0x22c>)
 8001d52:	799b      	ldrb	r3, [r3, #6]
 8001d54:	021b      	lsls	r3, r3, #8
 8001d56:	4313      	orrs	r3, r2
 8001d58:	4a0f      	ldr	r2, [pc, #60]	@ (8001d98 <merge+0x22c>)
 8001d5a:	79d2      	ldrb	r2, [r2, #7]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	461a      	mov	r2, r3
 8001d60:	4b0e      	ldr	r3, [pc, #56]	@ (8001d9c <merge+0x230>)
 8001d62:	621a      	str	r2, [r3, #32]
                 break;
 8001d64:	f000 bdf5 	b.w	8002952 <merge+0xde6>
 8001d68:	18984001 	.word	0x18984001
 8001d6c:	18974001 	.word	0x18974001
 8001d70:	18964001 	.word	0x18964001
 8001d74:	18954001 	.word	0x18954001
 8001d78:	18944001 	.word	0x18944001
 8001d7c:	18934001 	.word	0x18934001
 8001d80:	18924001 	.word	0x18924001
 8001d84:	18914001 	.word	0x18914001
 8001d88:	18904001 	.word	0x18904001
 8001d8c:	18524001 	.word	0x18524001
 8001d90:	09012024 	.word	0x09012024
 8001d94:	18504001 	.word	0x18504001
 8001d98:	20001414 	.word	0x20001414
 8001d9c:	2000141c 	.word	0x2000141c
	             BMS.No_Of_Battery = Received_Data[0];//Total number cells connected in BMS
 8001da0:	4b4d      	ldr	r3, [pc, #308]	@ (8001ed8 <merge+0x36c>)
 8001da2:	781a      	ldrb	r2, [r3, #0]
 8001da4:	4b4d      	ldr	r3, [pc, #308]	@ (8001edc <merge+0x370>)
 8001da6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 			     BMS.No_Of_Temp_Sensor = Received_Data[1];//Total Number of temperature sensor connected in BMS
 8001daa:	4b4b      	ldr	r3, [pc, #300]	@ (8001ed8 <merge+0x36c>)
 8001dac:	785a      	ldrb	r2, [r3, #1]
 8001dae:	4b4b      	ldr	r3, [pc, #300]	@ (8001edc <merge+0x370>)
 8001db0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 			     BMS.Charger_Status = Received_Data[2];//0:disconnect,1:connect
 8001db4:	4b48      	ldr	r3, [pc, #288]	@ (8001ed8 <merge+0x36c>)
 8001db6:	789a      	ldrb	r2, [r3, #2]
 8001db8:	4b48      	ldr	r3, [pc, #288]	@ (8001edc <merge+0x370>)
 8001dba:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 			     BMS.Load_Status = Received_Data[3];//0:disconnect,1:connect
 8001dbe:	4b46      	ldr	r3, [pc, #280]	@ (8001ed8 <merge+0x36c>)
 8001dc0:	78da      	ldrb	r2, [r3, #3]
 8001dc2:	4b46      	ldr	r3, [pc, #280]	@ (8001edc <merge+0x370>)
 8001dc4:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
 			     BMS.DI1state = (Received_Data[4] & 0X01)>>0;
 8001dc8:	4b43      	ldr	r3, [pc, #268]	@ (8001ed8 <merge+0x36c>)
 8001dca:	791b      	ldrb	r3, [r3, #4]
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	b2d9      	uxtb	r1, r3
 8001dd2:	4a42      	ldr	r2, [pc, #264]	@ (8001edc <merge+0x370>)
 8001dd4:	f892 3028 	ldrb.w	r3, [r2, #40]	@ 0x28
 8001dd8:	f361 0300 	bfi	r3, r1, #0, #1
 8001ddc:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
 			     BMS.DI2state = (Received_Data[4] & 0X02)>>1;
 8001de0:	4b3d      	ldr	r3, [pc, #244]	@ (8001ed8 <merge+0x36c>)
 8001de2:	791b      	ldrb	r3, [r3, #4]
 8001de4:	105b      	asrs	r3, r3, #1
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	b2d9      	uxtb	r1, r3
 8001dec:	4a3b      	ldr	r2, [pc, #236]	@ (8001edc <merge+0x370>)
 8001dee:	f892 3028 	ldrb.w	r3, [r2, #40]	@ 0x28
 8001df2:	f361 0341 	bfi	r3, r1, #1, #1
 8001df6:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
 		         BMS.DI3state = (Received_Data[4] & 0X04)>>2;
 8001dfa:	4b37      	ldr	r3, [pc, #220]	@ (8001ed8 <merge+0x36c>)
 8001dfc:	791b      	ldrb	r3, [r3, #4]
 8001dfe:	109b      	asrs	r3, r3, #2
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	b2d9      	uxtb	r1, r3
 8001e06:	4a35      	ldr	r2, [pc, #212]	@ (8001edc <merge+0x370>)
 8001e08:	f892 3028 	ldrb.w	r3, [r2, #40]	@ 0x28
 8001e0c:	f361 0382 	bfi	r3, r1, #2, #1
 8001e10:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
 			     BMS.DI4state = (Received_Data[4] & 0X08)>>3;
 8001e14:	4b30      	ldr	r3, [pc, #192]	@ (8001ed8 <merge+0x36c>)
 8001e16:	791b      	ldrb	r3, [r3, #4]
 8001e18:	10db      	asrs	r3, r3, #3
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	b2d9      	uxtb	r1, r3
 8001e20:	4a2e      	ldr	r2, [pc, #184]	@ (8001edc <merge+0x370>)
 8001e22:	f892 3028 	ldrb.w	r3, [r2, #40]	@ 0x28
 8001e26:	f361 03c3 	bfi	r3, r1, #3, #1
 8001e2a:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
 			     BMS.DO1state = (Received_Data[4] & 0X10)>>4;
 8001e2e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ed8 <merge+0x36c>)
 8001e30:	791b      	ldrb	r3, [r3, #4]
 8001e32:	111b      	asrs	r3, r3, #4
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	b2d9      	uxtb	r1, r3
 8001e3a:	4a28      	ldr	r2, [pc, #160]	@ (8001edc <merge+0x370>)
 8001e3c:	f892 3028 	ldrb.w	r3, [r2, #40]	@ 0x28
 8001e40:	f361 1304 	bfi	r3, r1, #4, #1
 8001e44:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
 			     BMS.DO2state = (Received_Data[4] & 0X20)>>5;
 8001e48:	4b23      	ldr	r3, [pc, #140]	@ (8001ed8 <merge+0x36c>)
 8001e4a:	791b      	ldrb	r3, [r3, #4]
 8001e4c:	115b      	asrs	r3, r3, #5
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	b2d9      	uxtb	r1, r3
 8001e54:	4a21      	ldr	r2, [pc, #132]	@ (8001edc <merge+0x370>)
 8001e56:	f892 3028 	ldrb.w	r3, [r2, #40]	@ 0x28
 8001e5a:	f361 1345 	bfi	r3, r1, #5, #1
 8001e5e:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
 			     BMS.DO3state = (Received_Data[4] & 0X40)>>6;
 8001e62:	4b1d      	ldr	r3, [pc, #116]	@ (8001ed8 <merge+0x36c>)
 8001e64:	791b      	ldrb	r3, [r3, #4]
 8001e66:	119b      	asrs	r3, r3, #6
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	b2d9      	uxtb	r1, r3
 8001e6e:	4a1b      	ldr	r2, [pc, #108]	@ (8001edc <merge+0x370>)
 8001e70:	f892 3028 	ldrb.w	r3, [r2, #40]	@ 0x28
 8001e74:	f361 1386 	bfi	r3, r1, #6, #1
 8001e78:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
 			     BMS.DO4state = (Received_Data[4] & 0X80)>>7;
 8001e7c:	4b16      	ldr	r3, [pc, #88]	@ (8001ed8 <merge+0x36c>)
 8001e7e:	791b      	ldrb	r3, [r3, #4]
 8001e80:	09db      	lsrs	r3, r3, #7
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	b2d9      	uxtb	r1, r3
 8001e8a:	4a14      	ldr	r2, [pc, #80]	@ (8001edc <merge+0x370>)
 8001e8c:	f892 3028 	ldrb.w	r3, [r2, #40]	@ 0x28
 8001e90:	f361 13c7 	bfi	r3, r1, #7, #1
 8001e94:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
                 break;
 8001e98:	f000 bd5b 	b.w	8002952 <merge+0xde6>
	             BMS.Temp_Sensor1 = (Received_Data[1])-40;//1st temperature sensor value
 8001e9c:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed8 <merge+0x36c>)
 8001e9e:	785b      	ldrb	r3, [r3, #1]
 8001ea0:	3b28      	subs	r3, #40	@ 0x28
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	4b0d      	ldr	r3, [pc, #52]	@ (8001edc <merge+0x370>)
 8001ea6:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	 			 BMS.Temp_Sensor2 = (Received_Data[2])-40;//2nd temperature sensor value
 8001eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8001ed8 <merge+0x36c>)
 8001eac:	789b      	ldrb	r3, [r3, #2]
 8001eae:	3b28      	subs	r3, #40	@ 0x28
 8001eb0:	b2da      	uxtb	r2, r3
 8001eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8001edc <merge+0x370>)
 8001eb4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	 			 BMS.Temp_Sensor3 = (Received_Data[3])-40;//3rd temperature sensor value
 8001eb8:	4b07      	ldr	r3, [pc, #28]	@ (8001ed8 <merge+0x36c>)
 8001eba:	78db      	ldrb	r3, [r3, #3]
 8001ebc:	3b28      	subs	r3, #40	@ 0x28
 8001ebe:	b2da      	uxtb	r2, r3
 8001ec0:	4b06      	ldr	r3, [pc, #24]	@ (8001edc <merge+0x370>)
 8001ec2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	 			 BMS.Temp_Sensor4 = (Received_Data[4])-40;//4th temperature sensor value
 8001ec6:	4b04      	ldr	r3, [pc, #16]	@ (8001ed8 <merge+0x36c>)
 8001ec8:	791b      	ldrb	r3, [r3, #4]
 8001eca:	3b28      	subs	r3, #40	@ 0x28
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	4b03      	ldr	r3, [pc, #12]	@ (8001edc <merge+0x370>)
 8001ed0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
	 			 break;
 8001ed4:	f000 bd3d 	b.w	8002952 <merge+0xde6>
 8001ed8:	20001414 	.word	0x20001414
 8001edc:	2000141c 	.word	0x2000141c
	             BMS.Cell1_Balance_State = (Received_Data[0] & 0x01)>>0;//0： Closed,1： Open
 8001ee0:	4bc0      	ldr	r3, [pc, #768]	@ (80021e4 <merge+0x678>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	b2d9      	uxtb	r1, r3
 8001eea:	4abf      	ldr	r2, [pc, #764]	@ (80021e8 <merge+0x67c>)
 8001eec:	f892 3032 	ldrb.w	r3, [r2, #50]	@ 0x32
 8001ef0:	f361 0300 	bfi	r3, r1, #0, #1
 8001ef4:	f882 3032 	strb.w	r3, [r2, #50]	@ 0x32
	 		     BMS.Cell2_Balance_State = (Received_Data[0] & 0x02)>>1;
 8001ef8:	4bba      	ldr	r3, [pc, #744]	@ (80021e4 <merge+0x678>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	105b      	asrs	r3, r3, #1
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	b2d9      	uxtb	r1, r3
 8001f04:	4ab8      	ldr	r2, [pc, #736]	@ (80021e8 <merge+0x67c>)
 8001f06:	f892 3032 	ldrb.w	r3, [r2, #50]	@ 0x32
 8001f0a:	f361 0341 	bfi	r3, r1, #1, #1
 8001f0e:	f882 3032 	strb.w	r3, [r2, #50]	@ 0x32
	 			 BMS.Cell3_Balance_State = (Received_Data[0] & 0x04)>>2;
 8001f12:	4bb4      	ldr	r3, [pc, #720]	@ (80021e4 <merge+0x678>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	109b      	asrs	r3, r3, #2
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	b2d9      	uxtb	r1, r3
 8001f1e:	4ab2      	ldr	r2, [pc, #712]	@ (80021e8 <merge+0x67c>)
 8001f20:	f892 3032 	ldrb.w	r3, [r2, #50]	@ 0x32
 8001f24:	f361 0382 	bfi	r3, r1, #2, #1
 8001f28:	f882 3032 	strb.w	r3, [r2, #50]	@ 0x32
	 			 BMS.Cell4_Balance_State = (Received_Data[0] & 0x08)>>3;
 8001f2c:	4bad      	ldr	r3, [pc, #692]	@ (80021e4 <merge+0x678>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	10db      	asrs	r3, r3, #3
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	b2d9      	uxtb	r1, r3
 8001f38:	4aab      	ldr	r2, [pc, #684]	@ (80021e8 <merge+0x67c>)
 8001f3a:	f892 3032 	ldrb.w	r3, [r2, #50]	@ 0x32
 8001f3e:	f361 03c3 	bfi	r3, r1, #3, #1
 8001f42:	f882 3032 	strb.w	r3, [r2, #50]	@ 0x32
	 			 BMS.Cell5_Balance_State = (Received_Data[0] & 0x10)>>4;
 8001f46:	4ba7      	ldr	r3, [pc, #668]	@ (80021e4 <merge+0x678>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	111b      	asrs	r3, r3, #4
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	b2d9      	uxtb	r1, r3
 8001f52:	4aa5      	ldr	r2, [pc, #660]	@ (80021e8 <merge+0x67c>)
 8001f54:	f892 3032 	ldrb.w	r3, [r2, #50]	@ 0x32
 8001f58:	f361 1304 	bfi	r3, r1, #4, #1
 8001f5c:	f882 3032 	strb.w	r3, [r2, #50]	@ 0x32
	 			 BMS.Cell6_Balance_State = (Received_Data[0] & 0x20)>>5;
 8001f60:	4ba0      	ldr	r3, [pc, #640]	@ (80021e4 <merge+0x678>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	115b      	asrs	r3, r3, #5
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	b2d9      	uxtb	r1, r3
 8001f6c:	4a9e      	ldr	r2, [pc, #632]	@ (80021e8 <merge+0x67c>)
 8001f6e:	f892 3032 	ldrb.w	r3, [r2, #50]	@ 0x32
 8001f72:	f361 1345 	bfi	r3, r1, #5, #1
 8001f76:	f882 3032 	strb.w	r3, [r2, #50]	@ 0x32
	 			 BMS.Cell7_Balance_State = (Received_Data[0] & 0x40)>>6;
 8001f7a:	4b9a      	ldr	r3, [pc, #616]	@ (80021e4 <merge+0x678>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	119b      	asrs	r3, r3, #6
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	b2d9      	uxtb	r1, r3
 8001f86:	4a98      	ldr	r2, [pc, #608]	@ (80021e8 <merge+0x67c>)
 8001f88:	f892 3032 	ldrb.w	r3, [r2, #50]	@ 0x32
 8001f8c:	f361 1386 	bfi	r3, r1, #6, #1
 8001f90:	f882 3032 	strb.w	r3, [r2, #50]	@ 0x32
	 			 BMS.Cell8_Balance_State = (Received_Data[0] & 0x80)>>7;
 8001f94:	4b93      	ldr	r3, [pc, #588]	@ (80021e4 <merge+0x678>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	09db      	lsrs	r3, r3, #7
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	b2d9      	uxtb	r1, r3
 8001fa2:	4a91      	ldr	r2, [pc, #580]	@ (80021e8 <merge+0x67c>)
 8001fa4:	f892 3032 	ldrb.w	r3, [r2, #50]	@ 0x32
 8001fa8:	f361 13c7 	bfi	r3, r1, #7, #1
 8001fac:	f882 3032 	strb.w	r3, [r2, #50]	@ 0x32
	 			 BMS.Cell9_Balance_State = (Received_Data[1] & 0x01)>>0;
 8001fb0:	4b8c      	ldr	r3, [pc, #560]	@ (80021e4 <merge+0x678>)
 8001fb2:	785b      	ldrb	r3, [r3, #1]
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	b2d9      	uxtb	r1, r3
 8001fba:	4a8b      	ldr	r2, [pc, #556]	@ (80021e8 <merge+0x67c>)
 8001fbc:	f892 3033 	ldrb.w	r3, [r2, #51]	@ 0x33
 8001fc0:	f361 0300 	bfi	r3, r1, #0, #1
 8001fc4:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
	 			 BMS.Cell10_Balance_State = (Received_Data[1] & 0x02)>>1;
 8001fc8:	4b86      	ldr	r3, [pc, #536]	@ (80021e4 <merge+0x678>)
 8001fca:	785b      	ldrb	r3, [r3, #1]
 8001fcc:	105b      	asrs	r3, r3, #1
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	b2d9      	uxtb	r1, r3
 8001fd4:	4a84      	ldr	r2, [pc, #528]	@ (80021e8 <merge+0x67c>)
 8001fd6:	f892 3033 	ldrb.w	r3, [r2, #51]	@ 0x33
 8001fda:	f361 0341 	bfi	r3, r1, #1, #1
 8001fde:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
	 			 BMS.Cell11_Balance_State = (Received_Data[1] & 0x04)>>2;
 8001fe2:	4b80      	ldr	r3, [pc, #512]	@ (80021e4 <merge+0x678>)
 8001fe4:	785b      	ldrb	r3, [r3, #1]
 8001fe6:	109b      	asrs	r3, r3, #2
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	b2d9      	uxtb	r1, r3
 8001fee:	4a7e      	ldr	r2, [pc, #504]	@ (80021e8 <merge+0x67c>)
 8001ff0:	f892 3033 	ldrb.w	r3, [r2, #51]	@ 0x33
 8001ff4:	f361 0382 	bfi	r3, r1, #2, #1
 8001ff8:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
	 			 BMS.Cell12_Balance_State = (Received_Data[1] & 0x08)>>3;
 8001ffc:	4b79      	ldr	r3, [pc, #484]	@ (80021e4 <merge+0x678>)
 8001ffe:	785b      	ldrb	r3, [r3, #1]
 8002000:	10db      	asrs	r3, r3, #3
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	b2d9      	uxtb	r1, r3
 8002008:	4a77      	ldr	r2, [pc, #476]	@ (80021e8 <merge+0x67c>)
 800200a:	f892 3033 	ldrb.w	r3, [r2, #51]	@ 0x33
 800200e:	f361 03c3 	bfi	r3, r1, #3, #1
 8002012:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
	 			 BMS.Cell13_Balance_State = (Received_Data[1] & 0x10)>>4;
 8002016:	4b73      	ldr	r3, [pc, #460]	@ (80021e4 <merge+0x678>)
 8002018:	785b      	ldrb	r3, [r3, #1]
 800201a:	111b      	asrs	r3, r3, #4
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	b2d9      	uxtb	r1, r3
 8002022:	4a71      	ldr	r2, [pc, #452]	@ (80021e8 <merge+0x67c>)
 8002024:	f892 3033 	ldrb.w	r3, [r2, #51]	@ 0x33
 8002028:	f361 1304 	bfi	r3, r1, #4, #1
 800202c:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
	 			 BMS.Cell14_Balance_State = (Received_Data[1] & 0x20)>>5;
 8002030:	4b6c      	ldr	r3, [pc, #432]	@ (80021e4 <merge+0x678>)
 8002032:	785b      	ldrb	r3, [r3, #1]
 8002034:	115b      	asrs	r3, r3, #5
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	b2d9      	uxtb	r1, r3
 800203c:	4a6a      	ldr	r2, [pc, #424]	@ (80021e8 <merge+0x67c>)
 800203e:	f892 3033 	ldrb.w	r3, [r2, #51]	@ 0x33
 8002042:	f361 1345 	bfi	r3, r1, #5, #1
 8002046:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
	 			 BMS.Cell15_Balance_State = (Received_Data[1] & 0x40)>>6;
 800204a:	4b66      	ldr	r3, [pc, #408]	@ (80021e4 <merge+0x678>)
 800204c:	785b      	ldrb	r3, [r3, #1]
 800204e:	119b      	asrs	r3, r3, #6
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	b2d9      	uxtb	r1, r3
 8002056:	4a64      	ldr	r2, [pc, #400]	@ (80021e8 <merge+0x67c>)
 8002058:	f892 3033 	ldrb.w	r3, [r2, #51]	@ 0x33
 800205c:	f361 1386 	bfi	r3, r1, #6, #1
 8002060:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
	 			 BMS.Cell16_Balance_State = (Received_Data[1] & 0x80)>>7;
 8002064:	4b5f      	ldr	r3, [pc, #380]	@ (80021e4 <merge+0x678>)
 8002066:	785b      	ldrb	r3, [r3, #1]
 8002068:	09db      	lsrs	r3, r3, #7
 800206a:	b2db      	uxtb	r3, r3
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	b2d9      	uxtb	r1, r3
 8002072:	4a5d      	ldr	r2, [pc, #372]	@ (80021e8 <merge+0x67c>)
 8002074:	f892 3033 	ldrb.w	r3, [r2, #51]	@ 0x33
 8002078:	f361 13c7 	bfi	r3, r1, #7, #1
 800207c:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
	 			 BMS.Cell17_Balance_State = (Received_Data[2] & 0x01)>>0;
 8002080:	4b58      	ldr	r3, [pc, #352]	@ (80021e4 <merge+0x678>)
 8002082:	789b      	ldrb	r3, [r3, #2]
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	b2d9      	uxtb	r1, r3
 800208a:	4a57      	ldr	r2, [pc, #348]	@ (80021e8 <merge+0x67c>)
 800208c:	f892 3034 	ldrb.w	r3, [r2, #52]	@ 0x34
 8002090:	f361 0300 	bfi	r3, r1, #0, #1
 8002094:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
	 			 BMS.Cell18_Balance_State = (Received_Data[2] & 0x02)>>1;
 8002098:	4b52      	ldr	r3, [pc, #328]	@ (80021e4 <merge+0x678>)
 800209a:	789b      	ldrb	r3, [r3, #2]
 800209c:	105b      	asrs	r3, r3, #1
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	b2d9      	uxtb	r1, r3
 80020a4:	4a50      	ldr	r2, [pc, #320]	@ (80021e8 <merge+0x67c>)
 80020a6:	f892 3034 	ldrb.w	r3, [r2, #52]	@ 0x34
 80020aa:	f361 0341 	bfi	r3, r1, #1, #1
 80020ae:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
	 			 BMS.Cell19_Balance_State = (Received_Data[2] & 0x04)>>2;
 80020b2:	4b4c      	ldr	r3, [pc, #304]	@ (80021e4 <merge+0x678>)
 80020b4:	789b      	ldrb	r3, [r3, #2]
 80020b6:	109b      	asrs	r3, r3, #2
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	b2d9      	uxtb	r1, r3
 80020be:	4a4a      	ldr	r2, [pc, #296]	@ (80021e8 <merge+0x67c>)
 80020c0:	f892 3034 	ldrb.w	r3, [r2, #52]	@ 0x34
 80020c4:	f361 0382 	bfi	r3, r1, #2, #1
 80020c8:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
	 			 BMS.Cell20_Balance_State = (Received_Data[2] & 0x08)>>3;
 80020cc:	4b45      	ldr	r3, [pc, #276]	@ (80021e4 <merge+0x678>)
 80020ce:	789b      	ldrb	r3, [r3, #2]
 80020d0:	10db      	asrs	r3, r3, #3
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	b2d9      	uxtb	r1, r3
 80020d8:	4a43      	ldr	r2, [pc, #268]	@ (80021e8 <merge+0x67c>)
 80020da:	f892 3034 	ldrb.w	r3, [r2, #52]	@ 0x34
 80020de:	f361 03c3 	bfi	r3, r1, #3, #1
 80020e2:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
	 			 BMS.Cell21_Balance_State = (Received_Data[2] & 0x10)>>4;
 80020e6:	4b3f      	ldr	r3, [pc, #252]	@ (80021e4 <merge+0x678>)
 80020e8:	789b      	ldrb	r3, [r3, #2]
 80020ea:	111b      	asrs	r3, r3, #4
 80020ec:	f003 0301 	and.w	r3, r3, #1
 80020f0:	b2d9      	uxtb	r1, r3
 80020f2:	4a3d      	ldr	r2, [pc, #244]	@ (80021e8 <merge+0x67c>)
 80020f4:	f892 3034 	ldrb.w	r3, [r2, #52]	@ 0x34
 80020f8:	f361 1304 	bfi	r3, r1, #4, #1
 80020fc:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
	 			 BMS.Cell22_Balance_State = (Received_Data[2] & 0x20)>>5;
 8002100:	4b38      	ldr	r3, [pc, #224]	@ (80021e4 <merge+0x678>)
 8002102:	789b      	ldrb	r3, [r3, #2]
 8002104:	115b      	asrs	r3, r3, #5
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	b2d9      	uxtb	r1, r3
 800210c:	4a36      	ldr	r2, [pc, #216]	@ (80021e8 <merge+0x67c>)
 800210e:	f892 3034 	ldrb.w	r3, [r2, #52]	@ 0x34
 8002112:	f361 1345 	bfi	r3, r1, #5, #1
 8002116:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
	 			 BMS.Cell23_Balance_State = (Received_Data[2] & 0x40)>>6;
 800211a:	4b32      	ldr	r3, [pc, #200]	@ (80021e4 <merge+0x678>)
 800211c:	789b      	ldrb	r3, [r3, #2]
 800211e:	119b      	asrs	r3, r3, #6
 8002120:	f003 0301 	and.w	r3, r3, #1
 8002124:	b2d9      	uxtb	r1, r3
 8002126:	4a30      	ldr	r2, [pc, #192]	@ (80021e8 <merge+0x67c>)
 8002128:	f892 3034 	ldrb.w	r3, [r2, #52]	@ 0x34
 800212c:	f361 1386 	bfi	r3, r1, #6, #1
 8002130:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
	 			 BMS.Cell24_Balance_State = (Received_Data[2] & 0x80)>>7;
 8002134:	4b2b      	ldr	r3, [pc, #172]	@ (80021e4 <merge+0x678>)
 8002136:	789b      	ldrb	r3, [r3, #2]
 8002138:	09db      	lsrs	r3, r3, #7
 800213a:	b2db      	uxtb	r3, r3
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	b2d9      	uxtb	r1, r3
 8002142:	4a29      	ldr	r2, [pc, #164]	@ (80021e8 <merge+0x67c>)
 8002144:	f892 3034 	ldrb.w	r3, [r2, #52]	@ 0x34
 8002148:	f361 13c7 	bfi	r3, r1, #7, #1
 800214c:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
	 			 BMS.Cell25_Balance_State = (Received_Data[3] & 0x01)>>0;
 8002150:	4b24      	ldr	r3, [pc, #144]	@ (80021e4 <merge+0x678>)
 8002152:	78db      	ldrb	r3, [r3, #3]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	b2d9      	uxtb	r1, r3
 800215a:	4a23      	ldr	r2, [pc, #140]	@ (80021e8 <merge+0x67c>)
 800215c:	f892 3035 	ldrb.w	r3, [r2, #53]	@ 0x35
 8002160:	f361 0300 	bfi	r3, r1, #0, #1
 8002164:	f882 3035 	strb.w	r3, [r2, #53]	@ 0x35
	 			 BMS.Cell26_Balance_State = (Received_Data[3] & 0x02)>>1;
 8002168:	4b1e      	ldr	r3, [pc, #120]	@ (80021e4 <merge+0x678>)
 800216a:	78db      	ldrb	r3, [r3, #3]
 800216c:	105b      	asrs	r3, r3, #1
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	b2d9      	uxtb	r1, r3
 8002174:	4a1c      	ldr	r2, [pc, #112]	@ (80021e8 <merge+0x67c>)
 8002176:	f892 3035 	ldrb.w	r3, [r2, #53]	@ 0x35
 800217a:	f361 0341 	bfi	r3, r1, #1, #1
 800217e:	f882 3035 	strb.w	r3, [r2, #53]	@ 0x35
	 			 BMS.Cell27_Balance_State = (Received_Data[3] & 0x04)>>2;
 8002182:	4b18      	ldr	r3, [pc, #96]	@ (80021e4 <merge+0x678>)
 8002184:	78db      	ldrb	r3, [r3, #3]
 8002186:	109b      	asrs	r3, r3, #2
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	b2d9      	uxtb	r1, r3
 800218e:	4a16      	ldr	r2, [pc, #88]	@ (80021e8 <merge+0x67c>)
 8002190:	f892 3035 	ldrb.w	r3, [r2, #53]	@ 0x35
 8002194:	f361 0382 	bfi	r3, r1, #2, #1
 8002198:	f882 3035 	strb.w	r3, [r2, #53]	@ 0x35
	 			 BMS.Cell28_Balance_State = (Received_Data[3] & 0x08)>>3;
 800219c:	4b11      	ldr	r3, [pc, #68]	@ (80021e4 <merge+0x678>)
 800219e:	78db      	ldrb	r3, [r3, #3]
 80021a0:	10db      	asrs	r3, r3, #3
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	b2d9      	uxtb	r1, r3
 80021a8:	4a0f      	ldr	r2, [pc, #60]	@ (80021e8 <merge+0x67c>)
 80021aa:	f892 3035 	ldrb.w	r3, [r2, #53]	@ 0x35
 80021ae:	f361 03c3 	bfi	r3, r1, #3, #1
 80021b2:	f882 3035 	strb.w	r3, [r2, #53]	@ 0x35
	 			 BMS.Cell29_Balance_State = (Received_Data[3] & 0x10)>>4;
 80021b6:	4b0b      	ldr	r3, [pc, #44]	@ (80021e4 <merge+0x678>)
 80021b8:	78db      	ldrb	r3, [r3, #3]
 80021ba:	111b      	asrs	r3, r3, #4
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	b2d9      	uxtb	r1, r3
 80021c2:	4a09      	ldr	r2, [pc, #36]	@ (80021e8 <merge+0x67c>)
 80021c4:	f892 3035 	ldrb.w	r3, [r2, #53]	@ 0x35
 80021c8:	f361 1304 	bfi	r3, r1, #4, #1
 80021cc:	f882 3035 	strb.w	r3, [r2, #53]	@ 0x35
	 			 BMS.Cell30_Balance_State = (Received_Data[3] & 0x20)>>5;
 80021d0:	4b04      	ldr	r3, [pc, #16]	@ (80021e4 <merge+0x678>)
 80021d2:	78db      	ldrb	r3, [r3, #3]
 80021d4:	115b      	asrs	r3, r3, #5
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	b2d9      	uxtb	r1, r3
 80021dc:	4a02      	ldr	r2, [pc, #8]	@ (80021e8 <merge+0x67c>)
 80021de:	f892 3035 	ldrb.w	r3, [r2, #53]	@ 0x35
 80021e2:	e003      	b.n	80021ec <merge+0x680>
 80021e4:	20001414 	.word	0x20001414
 80021e8:	2000141c 	.word	0x2000141c
 80021ec:	f361 1345 	bfi	r3, r1, #5, #1
 80021f0:	f882 3035 	strb.w	r3, [r2, #53]	@ 0x35
	 			 BMS.Cell31_Balance_State = (Received_Data[3] & 0x40)>>6;
 80021f4:	4b75      	ldr	r3, [pc, #468]	@ (80023cc <merge+0x860>)
 80021f6:	78db      	ldrb	r3, [r3, #3]
 80021f8:	119b      	asrs	r3, r3, #6
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	b2d9      	uxtb	r1, r3
 8002200:	4a73      	ldr	r2, [pc, #460]	@ (80023d0 <merge+0x864>)
 8002202:	f892 3035 	ldrb.w	r3, [r2, #53]	@ 0x35
 8002206:	f361 1386 	bfi	r3, r1, #6, #1
 800220a:	f882 3035 	strb.w	r3, [r2, #53]	@ 0x35
	 			 BMS.Cell32_Balance_State = (Received_Data[3] & 0x80)>>7;
 800220e:	4b6f      	ldr	r3, [pc, #444]	@ (80023cc <merge+0x860>)
 8002210:	78db      	ldrb	r3, [r3, #3]
 8002212:	09db      	lsrs	r3, r3, #7
 8002214:	b2db      	uxtb	r3, r3
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	b2d9      	uxtb	r1, r3
 800221c:	4a6c      	ldr	r2, [pc, #432]	@ (80023d0 <merge+0x864>)
 800221e:	f892 3035 	ldrb.w	r3, [r2, #53]	@ 0x35
 8002222:	f361 13c7 	bfi	r3, r1, #7, #1
 8002226:	f882 3035 	strb.w	r3, [r2, #53]	@ 0x35
	 			 BMS.Cell33_Balance_State = (Received_Data[4] & 0x01)>>0;
 800222a:	4b68      	ldr	r3, [pc, #416]	@ (80023cc <merge+0x860>)
 800222c:	791b      	ldrb	r3, [r3, #4]
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	b2d9      	uxtb	r1, r3
 8002234:	4a66      	ldr	r2, [pc, #408]	@ (80023d0 <merge+0x864>)
 8002236:	f892 3036 	ldrb.w	r3, [r2, #54]	@ 0x36
 800223a:	f361 0300 	bfi	r3, r1, #0, #1
 800223e:	f882 3036 	strb.w	r3, [r2, #54]	@ 0x36
	 			 BMS.Cell34_Balance_State = (Received_Data[4] & 0x02)>>1;
 8002242:	4b62      	ldr	r3, [pc, #392]	@ (80023cc <merge+0x860>)
 8002244:	791b      	ldrb	r3, [r3, #4]
 8002246:	105b      	asrs	r3, r3, #1
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	b2d9      	uxtb	r1, r3
 800224e:	4a60      	ldr	r2, [pc, #384]	@ (80023d0 <merge+0x864>)
 8002250:	f892 3036 	ldrb.w	r3, [r2, #54]	@ 0x36
 8002254:	f361 0341 	bfi	r3, r1, #1, #1
 8002258:	f882 3036 	strb.w	r3, [r2, #54]	@ 0x36
	 			 BMS.Cell35_Balance_State = (Received_Data[4] & 0x04)>>2;
 800225c:	4b5b      	ldr	r3, [pc, #364]	@ (80023cc <merge+0x860>)
 800225e:	791b      	ldrb	r3, [r3, #4]
 8002260:	109b      	asrs	r3, r3, #2
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	b2d9      	uxtb	r1, r3
 8002268:	4a59      	ldr	r2, [pc, #356]	@ (80023d0 <merge+0x864>)
 800226a:	f892 3036 	ldrb.w	r3, [r2, #54]	@ 0x36
 800226e:	f361 0382 	bfi	r3, r1, #2, #1
 8002272:	f882 3036 	strb.w	r3, [r2, #54]	@ 0x36
	 			 BMS.Cell36_Balance_State = (Received_Data[4] & 0x08)>>3;
 8002276:	4b55      	ldr	r3, [pc, #340]	@ (80023cc <merge+0x860>)
 8002278:	791b      	ldrb	r3, [r3, #4]
 800227a:	10db      	asrs	r3, r3, #3
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	b2d9      	uxtb	r1, r3
 8002282:	4a53      	ldr	r2, [pc, #332]	@ (80023d0 <merge+0x864>)
 8002284:	f892 3036 	ldrb.w	r3, [r2, #54]	@ 0x36
 8002288:	f361 03c3 	bfi	r3, r1, #3, #1
 800228c:	f882 3036 	strb.w	r3, [r2, #54]	@ 0x36
	 			 BMS.Cell37_Balance_State = (Received_Data[4] & 0x10)>>4;
 8002290:	4b4e      	ldr	r3, [pc, #312]	@ (80023cc <merge+0x860>)
 8002292:	791b      	ldrb	r3, [r3, #4]
 8002294:	111b      	asrs	r3, r3, #4
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	b2d9      	uxtb	r1, r3
 800229c:	4a4c      	ldr	r2, [pc, #304]	@ (80023d0 <merge+0x864>)
 800229e:	f892 3036 	ldrb.w	r3, [r2, #54]	@ 0x36
 80022a2:	f361 1304 	bfi	r3, r1, #4, #1
 80022a6:	f882 3036 	strb.w	r3, [r2, #54]	@ 0x36
	 			 BMS.Cell38_Balance_State = (Received_Data[4] & 0x20)>>5;
 80022aa:	4b48      	ldr	r3, [pc, #288]	@ (80023cc <merge+0x860>)
 80022ac:	791b      	ldrb	r3, [r3, #4]
 80022ae:	115b      	asrs	r3, r3, #5
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	b2d9      	uxtb	r1, r3
 80022b6:	4a46      	ldr	r2, [pc, #280]	@ (80023d0 <merge+0x864>)
 80022b8:	f892 3036 	ldrb.w	r3, [r2, #54]	@ 0x36
 80022bc:	f361 1345 	bfi	r3, r1, #5, #1
 80022c0:	f882 3036 	strb.w	r3, [r2, #54]	@ 0x36
	 			 BMS.Cell39_Balance_State = (Received_Data[4] & 0x40)>>6;
 80022c4:	4b41      	ldr	r3, [pc, #260]	@ (80023cc <merge+0x860>)
 80022c6:	791b      	ldrb	r3, [r3, #4]
 80022c8:	119b      	asrs	r3, r3, #6
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	b2d9      	uxtb	r1, r3
 80022d0:	4a3f      	ldr	r2, [pc, #252]	@ (80023d0 <merge+0x864>)
 80022d2:	f892 3036 	ldrb.w	r3, [r2, #54]	@ 0x36
 80022d6:	f361 1386 	bfi	r3, r1, #6, #1
 80022da:	f882 3036 	strb.w	r3, [r2, #54]	@ 0x36
	 			 BMS.Cell40_Balance_State = (Received_Data[4] & 0x80)>>7;
 80022de:	4b3b      	ldr	r3, [pc, #236]	@ (80023cc <merge+0x860>)
 80022e0:	791b      	ldrb	r3, [r3, #4]
 80022e2:	09db      	lsrs	r3, r3, #7
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	b2d9      	uxtb	r1, r3
 80022ec:	4a38      	ldr	r2, [pc, #224]	@ (80023d0 <merge+0x864>)
 80022ee:	f892 3036 	ldrb.w	r3, [r2, #54]	@ 0x36
 80022f2:	f361 13c7 	bfi	r3, r1, #7, #1
 80022f6:	f882 3036 	strb.w	r3, [r2, #54]	@ 0x36
	 			 BMS.Cell41_Balance_State = (Received_Data[5] & 0x01)>>0;
 80022fa:	4b34      	ldr	r3, [pc, #208]	@ (80023cc <merge+0x860>)
 80022fc:	795b      	ldrb	r3, [r3, #5]
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	b2d9      	uxtb	r1, r3
 8002304:	4a32      	ldr	r2, [pc, #200]	@ (80023d0 <merge+0x864>)
 8002306:	f892 3037 	ldrb.w	r3, [r2, #55]	@ 0x37
 800230a:	f361 0300 	bfi	r3, r1, #0, #1
 800230e:	f882 3037 	strb.w	r3, [r2, #55]	@ 0x37
	 			 BMS.Cell42_Balance_State = (Received_Data[5] & 0x02)>>1;
 8002312:	4b2e      	ldr	r3, [pc, #184]	@ (80023cc <merge+0x860>)
 8002314:	795b      	ldrb	r3, [r3, #5]
 8002316:	105b      	asrs	r3, r3, #1
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	b2d9      	uxtb	r1, r3
 800231e:	4a2c      	ldr	r2, [pc, #176]	@ (80023d0 <merge+0x864>)
 8002320:	f892 3037 	ldrb.w	r3, [r2, #55]	@ 0x37
 8002324:	f361 0341 	bfi	r3, r1, #1, #1
 8002328:	f882 3037 	strb.w	r3, [r2, #55]	@ 0x37
	 			 BMS.Cell43_Balance_State = (Received_Data[5] & 0x04)>>2;
 800232c:	4b27      	ldr	r3, [pc, #156]	@ (80023cc <merge+0x860>)
 800232e:	795b      	ldrb	r3, [r3, #5]
 8002330:	109b      	asrs	r3, r3, #2
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	b2d9      	uxtb	r1, r3
 8002338:	4a25      	ldr	r2, [pc, #148]	@ (80023d0 <merge+0x864>)
 800233a:	f892 3037 	ldrb.w	r3, [r2, #55]	@ 0x37
 800233e:	f361 0382 	bfi	r3, r1, #2, #1
 8002342:	f882 3037 	strb.w	r3, [r2, #55]	@ 0x37
	 			 BMS.Cell44_Balance_State = (Received_Data[5] & 0x08)>>3;
 8002346:	4b21      	ldr	r3, [pc, #132]	@ (80023cc <merge+0x860>)
 8002348:	795b      	ldrb	r3, [r3, #5]
 800234a:	10db      	asrs	r3, r3, #3
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	b2d9      	uxtb	r1, r3
 8002352:	4a1f      	ldr	r2, [pc, #124]	@ (80023d0 <merge+0x864>)
 8002354:	f892 3037 	ldrb.w	r3, [r2, #55]	@ 0x37
 8002358:	f361 03c3 	bfi	r3, r1, #3, #1
 800235c:	f882 3037 	strb.w	r3, [r2, #55]	@ 0x37
	 			 BMS.Cell45_Balance_State = (Received_Data[5] & 0x10)>>4;
 8002360:	4b1a      	ldr	r3, [pc, #104]	@ (80023cc <merge+0x860>)
 8002362:	795b      	ldrb	r3, [r3, #5]
 8002364:	111b      	asrs	r3, r3, #4
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	b2d9      	uxtb	r1, r3
 800236c:	4a18      	ldr	r2, [pc, #96]	@ (80023d0 <merge+0x864>)
 800236e:	f892 3037 	ldrb.w	r3, [r2, #55]	@ 0x37
 8002372:	f361 1304 	bfi	r3, r1, #4, #1
 8002376:	f882 3037 	strb.w	r3, [r2, #55]	@ 0x37
	 			 BMS.Cell46_Balance_State = (Received_Data[5] & 0x20)>>5;
 800237a:	4b14      	ldr	r3, [pc, #80]	@ (80023cc <merge+0x860>)
 800237c:	795b      	ldrb	r3, [r3, #5]
 800237e:	115b      	asrs	r3, r3, #5
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	b2d9      	uxtb	r1, r3
 8002386:	4a12      	ldr	r2, [pc, #72]	@ (80023d0 <merge+0x864>)
 8002388:	f892 3037 	ldrb.w	r3, [r2, #55]	@ 0x37
 800238c:	f361 1345 	bfi	r3, r1, #5, #1
 8002390:	f882 3037 	strb.w	r3, [r2, #55]	@ 0x37
	 			 BMS.Cell47_Balance_State = (Received_Data[5] & 0x40)>>6;
 8002394:	4b0d      	ldr	r3, [pc, #52]	@ (80023cc <merge+0x860>)
 8002396:	795b      	ldrb	r3, [r3, #5]
 8002398:	119b      	asrs	r3, r3, #6
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	b2d9      	uxtb	r1, r3
 80023a0:	4a0b      	ldr	r2, [pc, #44]	@ (80023d0 <merge+0x864>)
 80023a2:	f892 3037 	ldrb.w	r3, [r2, #55]	@ 0x37
 80023a6:	f361 1386 	bfi	r3, r1, #6, #1
 80023aa:	f882 3037 	strb.w	r3, [r2, #55]	@ 0x37
	 			 BMS.Cell48_Balance_State = (Received_Data[5] & 0x80)>>7;
 80023ae:	4b07      	ldr	r3, [pc, #28]	@ (80023cc <merge+0x860>)
 80023b0:	795b      	ldrb	r3, [r3, #5]
 80023b2:	09db      	lsrs	r3, r3, #7
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	b2d9      	uxtb	r1, r3
 80023bc:	4a04      	ldr	r2, [pc, #16]	@ (80023d0 <merge+0x864>)
 80023be:	f892 3037 	ldrb.w	r3, [r2, #55]	@ 0x37
 80023c2:	f361 13c7 	bfi	r3, r1, #7, #1
 80023c6:	f882 3037 	strb.w	r3, [r2, #55]	@ 0x37
	 			 break;
 80023ca:	e2c2      	b.n	8002952 <merge+0xde6>
 80023cc:	20001414 	.word	0x20001414
 80023d0:	2000141c 	.word	0x2000141c
	             BMS.Cell_Volt_High_Level_1 = (Received_Data[0] & 0x01)>>0;//0:No error,1:Error
 80023d4:	4bc0      	ldr	r3, [pc, #768]	@ (80026d8 <merge+0xb6c>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	b2d9      	uxtb	r1, r3
 80023de:	4abf      	ldr	r2, [pc, #764]	@ (80026dc <merge+0xb70>)
 80023e0:	f892 3038 	ldrb.w	r3, [r2, #56]	@ 0x38
 80023e4:	f361 0300 	bfi	r3, r1, #0, #1
 80023e8:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
	 		     BMS.Cell_Volt_High_Level_2 = (Received_Data[0] & 0x02)>>1;
 80023ec:	4bba      	ldr	r3, [pc, #744]	@ (80026d8 <merge+0xb6c>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	105b      	asrs	r3, r3, #1
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	b2d9      	uxtb	r1, r3
 80023f8:	4ab8      	ldr	r2, [pc, #736]	@ (80026dc <merge+0xb70>)
 80023fa:	f892 3038 	ldrb.w	r3, [r2, #56]	@ 0x38
 80023fe:	f361 0341 	bfi	r3, r1, #1, #1
 8002402:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
	 	         BMS.Cell_Volt_Low_Level_1 = (Received_Data[0] & 0x04)>>2;
 8002406:	4bb4      	ldr	r3, [pc, #720]	@ (80026d8 <merge+0xb6c>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	109b      	asrs	r3, r3, #2
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	b2d9      	uxtb	r1, r3
 8002412:	4ab2      	ldr	r2, [pc, #712]	@ (80026dc <merge+0xb70>)
 8002414:	f892 3038 	ldrb.w	r3, [r2, #56]	@ 0x38
 8002418:	f361 0382 	bfi	r3, r1, #2, #1
 800241c:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
	 		     BMS.Cell_Volt_Low_Level_2 = (Received_Data[0] & 0x08)>>3;
 8002420:	4bad      	ldr	r3, [pc, #692]	@ (80026d8 <merge+0xb6c>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	10db      	asrs	r3, r3, #3
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	b2d9      	uxtb	r1, r3
 800242c:	4aab      	ldr	r2, [pc, #684]	@ (80026dc <merge+0xb70>)
 800242e:	f892 3038 	ldrb.w	r3, [r2, #56]	@ 0x38
 8002432:	f361 03c3 	bfi	r3, r1, #3, #1
 8002436:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
	 		     BMS.Sum_Volt_High_Level_1 = (Received_Data[0] & 0x10)>>4;
 800243a:	4ba7      	ldr	r3, [pc, #668]	@ (80026d8 <merge+0xb6c>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	111b      	asrs	r3, r3, #4
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	b2d9      	uxtb	r1, r3
 8002446:	4aa5      	ldr	r2, [pc, #660]	@ (80026dc <merge+0xb70>)
 8002448:	f892 3038 	ldrb.w	r3, [r2, #56]	@ 0x38
 800244c:	f361 1304 	bfi	r3, r1, #4, #1
 8002450:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
	 			 BMS.Sum_Volt_High_Level_2 = (Received_Data[0] & 0x20)>>5;
 8002454:	4ba0      	ldr	r3, [pc, #640]	@ (80026d8 <merge+0xb6c>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	115b      	asrs	r3, r3, #5
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	b2d9      	uxtb	r1, r3
 8002460:	4a9e      	ldr	r2, [pc, #632]	@ (80026dc <merge+0xb70>)
 8002462:	f892 3038 	ldrb.w	r3, [r2, #56]	@ 0x38
 8002466:	f361 1345 	bfi	r3, r1, #5, #1
 800246a:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
	 			 BMS.Sum_Volt_Low_Level_1 = (Received_Data[0] & 0x40)>>6;
 800246e:	4b9a      	ldr	r3, [pc, #616]	@ (80026d8 <merge+0xb6c>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	119b      	asrs	r3, r3, #6
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	b2d9      	uxtb	r1, r3
 800247a:	4a98      	ldr	r2, [pc, #608]	@ (80026dc <merge+0xb70>)
 800247c:	f892 3038 	ldrb.w	r3, [r2, #56]	@ 0x38
 8002480:	f361 1386 	bfi	r3, r1, #6, #1
 8002484:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
	 			 BMS.Sum_Volt_Low_Level_2 = (Received_Data[0] & 0x80)>>7;
 8002488:	4b93      	ldr	r3, [pc, #588]	@ (80026d8 <merge+0xb6c>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	09db      	lsrs	r3, r3, #7
 800248e:	b2db      	uxtb	r3, r3
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	b2d9      	uxtb	r1, r3
 8002496:	4a91      	ldr	r2, [pc, #580]	@ (80026dc <merge+0xb70>)
 8002498:	f892 3038 	ldrb.w	r3, [r2, #56]	@ 0x38
 800249c:	f361 13c7 	bfi	r3, r1, #7, #1
 80024a0:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
	 			 BMS.Chg_Temp_High_Level_1 = (Received_Data[1] & 0x01)>>0;
 80024a4:	4b8c      	ldr	r3, [pc, #560]	@ (80026d8 <merge+0xb6c>)
 80024a6:	785b      	ldrb	r3, [r3, #1]
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	b2d9      	uxtb	r1, r3
 80024ae:	4a8b      	ldr	r2, [pc, #556]	@ (80026dc <merge+0xb70>)
 80024b0:	f892 3039 	ldrb.w	r3, [r2, #57]	@ 0x39
 80024b4:	f361 0300 	bfi	r3, r1, #0, #1
 80024b8:	f882 3039 	strb.w	r3, [r2, #57]	@ 0x39
	 			 BMS.Chg_Temp_High_Level_2 = (Received_Data[1] & 0x02)>>1;
 80024bc:	4b86      	ldr	r3, [pc, #536]	@ (80026d8 <merge+0xb6c>)
 80024be:	785b      	ldrb	r3, [r3, #1]
 80024c0:	105b      	asrs	r3, r3, #1
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	b2d9      	uxtb	r1, r3
 80024c8:	4a84      	ldr	r2, [pc, #528]	@ (80026dc <merge+0xb70>)
 80024ca:	f892 3039 	ldrb.w	r3, [r2, #57]	@ 0x39
 80024ce:	f361 0341 	bfi	r3, r1, #1, #1
 80024d2:	f882 3039 	strb.w	r3, [r2, #57]	@ 0x39
	 		     BMS.Chg_Temp_Low_Level_1 = (Received_Data[1] & 0x04)>>2;
 80024d6:	4b80      	ldr	r3, [pc, #512]	@ (80026d8 <merge+0xb6c>)
 80024d8:	785b      	ldrb	r3, [r3, #1]
 80024da:	109b      	asrs	r3, r3, #2
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	b2d9      	uxtb	r1, r3
 80024e2:	4a7e      	ldr	r2, [pc, #504]	@ (80026dc <merge+0xb70>)
 80024e4:	f892 3039 	ldrb.w	r3, [r2, #57]	@ 0x39
 80024e8:	f361 0382 	bfi	r3, r1, #2, #1
 80024ec:	f882 3039 	strb.w	r3, [r2, #57]	@ 0x39
	 		     BMS.Chg_Temp_Low_Level_2 = (Received_Data[1] & 0x08)>>3;
 80024f0:	4b79      	ldr	r3, [pc, #484]	@ (80026d8 <merge+0xb6c>)
 80024f2:	785b      	ldrb	r3, [r3, #1]
 80024f4:	10db      	asrs	r3, r3, #3
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	b2d9      	uxtb	r1, r3
 80024fc:	4a77      	ldr	r2, [pc, #476]	@ (80026dc <merge+0xb70>)
 80024fe:	f892 3039 	ldrb.w	r3, [r2, #57]	@ 0x39
 8002502:	f361 03c3 	bfi	r3, r1, #3, #1
 8002506:	f882 3039 	strb.w	r3, [r2, #57]	@ 0x39
	 		     BMS.Dischg_Temp_High_Level_1 = (Received_Data[1] & 0x10)>>4;
 800250a:	4b73      	ldr	r3, [pc, #460]	@ (80026d8 <merge+0xb6c>)
 800250c:	785b      	ldrb	r3, [r3, #1]
 800250e:	111b      	asrs	r3, r3, #4
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	b2d9      	uxtb	r1, r3
 8002516:	4a71      	ldr	r2, [pc, #452]	@ (80026dc <merge+0xb70>)
 8002518:	f892 3039 	ldrb.w	r3, [r2, #57]	@ 0x39
 800251c:	f361 1304 	bfi	r3, r1, #4, #1
 8002520:	f882 3039 	strb.w	r3, [r2, #57]	@ 0x39
	 			 BMS.Dischg_Temp_High_Level_2 = (Received_Data[1] & 0x20)>>5;
 8002524:	4b6c      	ldr	r3, [pc, #432]	@ (80026d8 <merge+0xb6c>)
 8002526:	785b      	ldrb	r3, [r3, #1]
 8002528:	115b      	asrs	r3, r3, #5
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	b2d9      	uxtb	r1, r3
 8002530:	4a6a      	ldr	r2, [pc, #424]	@ (80026dc <merge+0xb70>)
 8002532:	f892 3039 	ldrb.w	r3, [r2, #57]	@ 0x39
 8002536:	f361 1345 	bfi	r3, r1, #5, #1
 800253a:	f882 3039 	strb.w	r3, [r2, #57]	@ 0x39
	 			 BMS.Dischg_Temp_Low_Level_1 = (Received_Data[1] & 0x40)>>6;
 800253e:	4b66      	ldr	r3, [pc, #408]	@ (80026d8 <merge+0xb6c>)
 8002540:	785b      	ldrb	r3, [r3, #1]
 8002542:	119b      	asrs	r3, r3, #6
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	b2d9      	uxtb	r1, r3
 800254a:	4a64      	ldr	r2, [pc, #400]	@ (80026dc <merge+0xb70>)
 800254c:	f892 3039 	ldrb.w	r3, [r2, #57]	@ 0x39
 8002550:	f361 1386 	bfi	r3, r1, #6, #1
 8002554:	f882 3039 	strb.w	r3, [r2, #57]	@ 0x39
	 			 BMS.Dischg_Temp_Low_Level_2 = (Received_Data[1] & 0x80)>>7;
 8002558:	4b5f      	ldr	r3, [pc, #380]	@ (80026d8 <merge+0xb6c>)
 800255a:	785b      	ldrb	r3, [r3, #1]
 800255c:	09db      	lsrs	r3, r3, #7
 800255e:	b2db      	uxtb	r3, r3
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	b2d9      	uxtb	r1, r3
 8002566:	4a5d      	ldr	r2, [pc, #372]	@ (80026dc <merge+0xb70>)
 8002568:	f892 3039 	ldrb.w	r3, [r2, #57]	@ 0x39
 800256c:	f361 13c7 	bfi	r3, r1, #7, #1
 8002570:	f882 3039 	strb.w	r3, [r2, #57]	@ 0x39
	 			 BMS.Chg_Overcurrent_Level_1 = (Received_Data[2] & 0x01)>>0;
 8002574:	4b58      	ldr	r3, [pc, #352]	@ (80026d8 <merge+0xb6c>)
 8002576:	789b      	ldrb	r3, [r3, #2]
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	b2d9      	uxtb	r1, r3
 800257e:	4a57      	ldr	r2, [pc, #348]	@ (80026dc <merge+0xb70>)
 8002580:	f892 303a 	ldrb.w	r3, [r2, #58]	@ 0x3a
 8002584:	f361 0300 	bfi	r3, r1, #0, #1
 8002588:	f882 303a 	strb.w	r3, [r2, #58]	@ 0x3a
	 		     BMS.Chg_Overcurrent_Level_2 = (Received_Data[2] & 0x02)>>1;
 800258c:	4b52      	ldr	r3, [pc, #328]	@ (80026d8 <merge+0xb6c>)
 800258e:	789b      	ldrb	r3, [r3, #2]
 8002590:	105b      	asrs	r3, r3, #1
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	b2d9      	uxtb	r1, r3
 8002598:	4a50      	ldr	r2, [pc, #320]	@ (80026dc <merge+0xb70>)
 800259a:	f892 303a 	ldrb.w	r3, [r2, #58]	@ 0x3a
 800259e:	f361 0341 	bfi	r3, r1, #1, #1
 80025a2:	f882 303a 	strb.w	r3, [r2, #58]	@ 0x3a
	 			 BMS.Dischg_Overcurrent_Level_1 = (Received_Data[2] & 0x04)>>2;
 80025a6:	4b4c      	ldr	r3, [pc, #304]	@ (80026d8 <merge+0xb6c>)
 80025a8:	789b      	ldrb	r3, [r3, #2]
 80025aa:	109b      	asrs	r3, r3, #2
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	b2d9      	uxtb	r1, r3
 80025b2:	4a4a      	ldr	r2, [pc, #296]	@ (80026dc <merge+0xb70>)
 80025b4:	f892 303a 	ldrb.w	r3, [r2, #58]	@ 0x3a
 80025b8:	f361 0382 	bfi	r3, r1, #2, #1
 80025bc:	f882 303a 	strb.w	r3, [r2, #58]	@ 0x3a
	 			 BMS.Dischg_Overcurrent_Level_2 = (Received_Data[2] & 0x08)>>3;
 80025c0:	4b45      	ldr	r3, [pc, #276]	@ (80026d8 <merge+0xb6c>)
 80025c2:	789b      	ldrb	r3, [r3, #2]
 80025c4:	10db      	asrs	r3, r3, #3
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	b2d9      	uxtb	r1, r3
 80025cc:	4a43      	ldr	r2, [pc, #268]	@ (80026dc <merge+0xb70>)
 80025ce:	f892 303a 	ldrb.w	r3, [r2, #58]	@ 0x3a
 80025d2:	f361 03c3 	bfi	r3, r1, #3, #1
 80025d6:	f882 303a 	strb.w	r3, [r2, #58]	@ 0x3a
	 		     BMS.SOC_High_Level_1 = (Received_Data[2] & 0x10)>>4;
 80025da:	4b3f      	ldr	r3, [pc, #252]	@ (80026d8 <merge+0xb6c>)
 80025dc:	789b      	ldrb	r3, [r3, #2]
 80025de:	111b      	asrs	r3, r3, #4
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	b2d9      	uxtb	r1, r3
 80025e6:	4a3d      	ldr	r2, [pc, #244]	@ (80026dc <merge+0xb70>)
 80025e8:	f892 303a 	ldrb.w	r3, [r2, #58]	@ 0x3a
 80025ec:	f361 1304 	bfi	r3, r1, #4, #1
 80025f0:	f882 303a 	strb.w	r3, [r2, #58]	@ 0x3a
	 		     BMS.SOC_High_Level_2 = (Received_Data[2] & 0x20)>>5;
 80025f4:	4b38      	ldr	r3, [pc, #224]	@ (80026d8 <merge+0xb6c>)
 80025f6:	789b      	ldrb	r3, [r3, #2]
 80025f8:	115b      	asrs	r3, r3, #5
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	b2d9      	uxtb	r1, r3
 8002600:	4a36      	ldr	r2, [pc, #216]	@ (80026dc <merge+0xb70>)
 8002602:	f892 303a 	ldrb.w	r3, [r2, #58]	@ 0x3a
 8002606:	f361 1345 	bfi	r3, r1, #5, #1
 800260a:	f882 303a 	strb.w	r3, [r2, #58]	@ 0x3a
	 		     BMS.SOC_Low_Level_1 = (Received_Data[2] & 0x40)>>6;
 800260e:	4b32      	ldr	r3, [pc, #200]	@ (80026d8 <merge+0xb6c>)
 8002610:	789b      	ldrb	r3, [r3, #2]
 8002612:	119b      	asrs	r3, r3, #6
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	b2d9      	uxtb	r1, r3
 800261a:	4a30      	ldr	r2, [pc, #192]	@ (80026dc <merge+0xb70>)
 800261c:	f892 303a 	ldrb.w	r3, [r2, #58]	@ 0x3a
 8002620:	f361 1386 	bfi	r3, r1, #6, #1
 8002624:	f882 303a 	strb.w	r3, [r2, #58]	@ 0x3a
	 			 BMS.SOC_Low_Level_2 = (Received_Data[2] & 0x80)>>7;
 8002628:	4b2b      	ldr	r3, [pc, #172]	@ (80026d8 <merge+0xb6c>)
 800262a:	789b      	ldrb	r3, [r3, #2]
 800262c:	09db      	lsrs	r3, r3, #7
 800262e:	b2db      	uxtb	r3, r3
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	b2d9      	uxtb	r1, r3
 8002636:	4a29      	ldr	r2, [pc, #164]	@ (80026dc <merge+0xb70>)
 8002638:	f892 303a 	ldrb.w	r3, [r2, #58]	@ 0x3a
 800263c:	f361 13c7 	bfi	r3, r1, #7, #1
 8002640:	f882 303a 	strb.w	r3, [r2, #58]	@ 0x3a
	 			 BMS.Diff_Volt_Level_1 = (Received_Data[3] & 0x01)>>0;
 8002644:	4b24      	ldr	r3, [pc, #144]	@ (80026d8 <merge+0xb6c>)
 8002646:	78db      	ldrb	r3, [r3, #3]
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	b2d9      	uxtb	r1, r3
 800264e:	4a23      	ldr	r2, [pc, #140]	@ (80026dc <merge+0xb70>)
 8002650:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8002654:	f361 0300 	bfi	r3, r1, #0, #1
 8002658:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
	 			 BMS.Diff_Volt_Level_2 = (Received_Data[3] & 0x02)>>1;
 800265c:	4b1e      	ldr	r3, [pc, #120]	@ (80026d8 <merge+0xb6c>)
 800265e:	78db      	ldrb	r3, [r3, #3]
 8002660:	105b      	asrs	r3, r3, #1
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	b2d9      	uxtb	r1, r3
 8002668:	4a1c      	ldr	r2, [pc, #112]	@ (80026dc <merge+0xb70>)
 800266a:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 800266e:	f361 0341 	bfi	r3, r1, #1, #1
 8002672:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
	 			 BMS.Diff_Temp_Level_1 = (Received_Data[3] & 0x04)>>2;
 8002676:	4b18      	ldr	r3, [pc, #96]	@ (80026d8 <merge+0xb6c>)
 8002678:	78db      	ldrb	r3, [r3, #3]
 800267a:	109b      	asrs	r3, r3, #2
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	b2d9      	uxtb	r1, r3
 8002682:	4a16      	ldr	r2, [pc, #88]	@ (80026dc <merge+0xb70>)
 8002684:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 8002688:	f361 0382 	bfi	r3, r1, #2, #1
 800268c:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
	 			 BMS.Diff_Temp_Level_2 = (Received_Data[3] & 0x08)>>3;
 8002690:	4b11      	ldr	r3, [pc, #68]	@ (80026d8 <merge+0xb6c>)
 8002692:	78db      	ldrb	r3, [r3, #3]
 8002694:	10db      	asrs	r3, r3, #3
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	b2d9      	uxtb	r1, r3
 800269c:	4a0f      	ldr	r2, [pc, #60]	@ (80026dc <merge+0xb70>)
 800269e:	f892 303b 	ldrb.w	r3, [r2, #59]	@ 0x3b
 80026a2:	f361 03c3 	bfi	r3, r1, #3, #1
 80026a6:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
	 			 BMS.Chg_MOS_Temp_High_Alarm = (Received_Data[4] & 0x01)>>0;//Alarm condition related to a high temperature in the charging MOSFET
 80026aa:	4b0b      	ldr	r3, [pc, #44]	@ (80026d8 <merge+0xb6c>)
 80026ac:	791b      	ldrb	r3, [r3, #4]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	b2d9      	uxtb	r1, r3
 80026b4:	4a09      	ldr	r2, [pc, #36]	@ (80026dc <merge+0xb70>)
 80026b6:	f892 303c 	ldrb.w	r3, [r2, #60]	@ 0x3c
 80026ba:	f361 0300 	bfi	r3, r1, #0, #1
 80026be:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
	 			 BMS.Dischg_MOS_Temp_High_Alarm = (Received_Data[4] & 0x02)>>1;//Alarm condition related to a high temperature in the discharging MOSFET
 80026c2:	4b05      	ldr	r3, [pc, #20]	@ (80026d8 <merge+0xb6c>)
 80026c4:	791b      	ldrb	r3, [r3, #4]
 80026c6:	105b      	asrs	r3, r3, #1
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	b2d9      	uxtb	r1, r3
 80026ce:	4a03      	ldr	r2, [pc, #12]	@ (80026dc <merge+0xb70>)
 80026d0:	f892 303c 	ldrb.w	r3, [r2, #60]	@ 0x3c
 80026d4:	e004      	b.n	80026e0 <merge+0xb74>
 80026d6:	bf00      	nop
 80026d8:	20001414 	.word	0x20001414
 80026dc:	2000141c 	.word	0x2000141c
 80026e0:	f361 0341 	bfi	r3, r1, #1, #1
 80026e4:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
	 		     BMS.Chg_MOS_Temp_Sensor_Err = (Received_Data[4] & 0x04)>>2;//Error related to the temperature sensor(s) monitoring the charging MOSFET
 80026e8:	4b9c      	ldr	r3, [pc, #624]	@ (800295c <merge+0xdf0>)
 80026ea:	791b      	ldrb	r3, [r3, #4]
 80026ec:	109b      	asrs	r3, r3, #2
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	b2d9      	uxtb	r1, r3
 80026f4:	4a9a      	ldr	r2, [pc, #616]	@ (8002960 <merge+0xdf4>)
 80026f6:	f892 303c 	ldrb.w	r3, [r2, #60]	@ 0x3c
 80026fa:	f361 0382 	bfi	r3, r1, #2, #1
 80026fe:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
	 			 BMS.Dischg_MOS_Temp_Sensor_Err = (Received_Data[4] & 0x08)>>3;//Error related to the temperature sensor(s) monitoring the discharging MOSFET
 8002702:	4b96      	ldr	r3, [pc, #600]	@ (800295c <merge+0xdf0>)
 8002704:	791b      	ldrb	r3, [r3, #4]
 8002706:	10db      	asrs	r3, r3, #3
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	b2d9      	uxtb	r1, r3
 800270e:	4a94      	ldr	r2, [pc, #592]	@ (8002960 <merge+0xdf4>)
 8002710:	f892 303c 	ldrb.w	r3, [r2, #60]	@ 0x3c
 8002714:	f361 03c3 	bfi	r3, r1, #3, #1
 8002718:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
	 			 BMS.Chg_MOS_Adhesion_Err = (Received_Data[4] & 0x10)>>4;//Fault condition associated with the adhesion or attachment of components related to the Charging MOSFET
 800271c:	4b8f      	ldr	r3, [pc, #572]	@ (800295c <merge+0xdf0>)
 800271e:	791b      	ldrb	r3, [r3, #4]
 8002720:	111b      	asrs	r3, r3, #4
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	b2d9      	uxtb	r1, r3
 8002728:	4a8d      	ldr	r2, [pc, #564]	@ (8002960 <merge+0xdf4>)
 800272a:	f892 303c 	ldrb.w	r3, [r2, #60]	@ 0x3c
 800272e:	f361 1304 	bfi	r3, r1, #4, #1
 8002732:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
	 			 BMS.Dischg_MOS_Adhesion_Err = (Received_Data[4] & 0x20)>>5;//Fault condition associated with the adhesion or attachment of components related to the discharging MOSFET
 8002736:	4b89      	ldr	r3, [pc, #548]	@ (800295c <merge+0xdf0>)
 8002738:	791b      	ldrb	r3, [r3, #4]
 800273a:	115b      	asrs	r3, r3, #5
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	b2d9      	uxtb	r1, r3
 8002742:	4a87      	ldr	r2, [pc, #540]	@ (8002960 <merge+0xdf4>)
 8002744:	f892 303c 	ldrb.w	r3, [r2, #60]	@ 0x3c
 8002748:	f361 1345 	bfi	r3, r1, #5, #1
 800274c:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
	 		     BMS.Chg_MOS_Open_Circuit_Err = (Received_Data[4] & 0x40)>>6;//Error condition associated with an open circuit or an open-circuit fault detected in the Charging MOSFET
 8002750:	4b82      	ldr	r3, [pc, #520]	@ (800295c <merge+0xdf0>)
 8002752:	791b      	ldrb	r3, [r3, #4]
 8002754:	119b      	asrs	r3, r3, #6
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	b2d9      	uxtb	r1, r3
 800275c:	4a80      	ldr	r2, [pc, #512]	@ (8002960 <merge+0xdf4>)
 800275e:	f892 303c 	ldrb.w	r3, [r2, #60]	@ 0x3c
 8002762:	f361 1386 	bfi	r3, r1, #6, #1
 8002766:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
	 			 BMS.Discrg_MOS_Open_Circuit_Err = (Received_Data[4] & 0x80)>>7;//Error condition associated with an open circuit or an open-circuit fault detected in the discharging MOSFET
 800276a:	4b7c      	ldr	r3, [pc, #496]	@ (800295c <merge+0xdf0>)
 800276c:	791b      	ldrb	r3, [r3, #4]
 800276e:	09db      	lsrs	r3, r3, #7
 8002770:	b2db      	uxtb	r3, r3
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	b2d9      	uxtb	r1, r3
 8002778:	4a79      	ldr	r2, [pc, #484]	@ (8002960 <merge+0xdf4>)
 800277a:	f892 303c 	ldrb.w	r3, [r2, #60]	@ 0x3c
 800277e:	f361 13c7 	bfi	r3, r1, #7, #1
 8002782:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
	 			 BMS.AFE_Collect_Chip_Err = (Received_Data[5] & 0x01)>>0;//Error condition associated with the Analog Front-End (AFE) chip or circuitry responsible for collecting and processing analog signals from various sensors or measurement points within the battery system
 8002786:	4b75      	ldr	r3, [pc, #468]	@ (800295c <merge+0xdf0>)
 8002788:	795b      	ldrb	r3, [r3, #5]
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	b2d9      	uxtb	r1, r3
 8002790:	4a73      	ldr	r2, [pc, #460]	@ (8002960 <merge+0xdf4>)
 8002792:	f892 303d 	ldrb.w	r3, [r2, #61]	@ 0x3d
 8002796:	f361 0300 	bfi	r3, r1, #0, #1
 800279a:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
	 			 BMS.Voltage_Collect_Dropped = (Received_Data[5] & 0x02)>>1;//Alert, condition, or indication within the BMS that detects a significant and sudden drop in the collected voltage readings from sensors
 800279e:	4b6f      	ldr	r3, [pc, #444]	@ (800295c <merge+0xdf0>)
 80027a0:	795b      	ldrb	r3, [r3, #5]
 80027a2:	105b      	asrs	r3, r3, #1
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	b2d9      	uxtb	r1, r3
 80027aa:	4a6d      	ldr	r2, [pc, #436]	@ (8002960 <merge+0xdf4>)
 80027ac:	f892 303d 	ldrb.w	r3, [r2, #61]	@ 0x3d
 80027b0:	f361 0341 	bfi	r3, r1, #1, #1
 80027b4:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
	 			 BMS.Cell_Temp_Sensor_Err = (Received_Data[5] & 0x04)>>2;//Error or fault condition associated with temperature sensors
 80027b8:	4b68      	ldr	r3, [pc, #416]	@ (800295c <merge+0xdf0>)
 80027ba:	795b      	ldrb	r3, [r3, #5]
 80027bc:	109b      	asrs	r3, r3, #2
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	b2d9      	uxtb	r1, r3
 80027c4:	4a66      	ldr	r2, [pc, #408]	@ (8002960 <merge+0xdf4>)
 80027c6:	f892 303d 	ldrb.w	r3, [r2, #61]	@ 0x3d
 80027ca:	f361 0382 	bfi	r3, r1, #2, #1
 80027ce:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
	 			 BMS.EEPROM_Err = (Received_Data[5] & 0x08)>>3;//Error condition or fault related to the Electrically Erasable Programmable Read-Only Memory (EEPROM) used within the BMS circuitry or microcontroller.
 80027d2:	4b62      	ldr	r3, [pc, #392]	@ (800295c <merge+0xdf0>)
 80027d4:	795b      	ldrb	r3, [r3, #5]
 80027d6:	10db      	asrs	r3, r3, #3
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	b2d9      	uxtb	r1, r3
 80027de:	4a60      	ldr	r2, [pc, #384]	@ (8002960 <merge+0xdf4>)
 80027e0:	f892 303d 	ldrb.w	r3, [r2, #61]	@ 0x3d
 80027e4:	f361 03c3 	bfi	r3, r1, #3, #1
 80027e8:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
	 			 BMS.RTC_Err = (Received_Data[5] & 0x10)>>4;//Error condition related to the Real-Time Clock (RTC) component or module within the BMS.
 80027ec:	4b5b      	ldr	r3, [pc, #364]	@ (800295c <merge+0xdf0>)
 80027ee:	795b      	ldrb	r3, [r3, #5]
 80027f0:	111b      	asrs	r3, r3, #4
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	b2d9      	uxtb	r1, r3
 80027f8:	4a59      	ldr	r2, [pc, #356]	@ (8002960 <merge+0xdf4>)
 80027fa:	f892 303d 	ldrb.w	r3, [r2, #61]	@ 0x3d
 80027fe:	f361 1304 	bfi	r3, r1, #4, #1
 8002802:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
	 			 BMS.Precharge_Failure = (Received_Data[5] & 0x20)>>5;//fault where the precharging process within the battery system has encountered
 8002806:	4b55      	ldr	r3, [pc, #340]	@ (800295c <merge+0xdf0>)
 8002808:	795b      	ldrb	r3, [r3, #5]
 800280a:	115b      	asrs	r3, r3, #5
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	b2d9      	uxtb	r1, r3
 8002812:	4a53      	ldr	r2, [pc, #332]	@ (8002960 <merge+0xdf4>)
 8002814:	f892 303d 	ldrb.w	r3, [r2, #61]	@ 0x3d
 8002818:	f361 1345 	bfi	r3, r1, #5, #1
 800281c:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
	 			 BMS.Communication_Failure = (Received_Data[5] & 0x40)>>6;//disruptions in communication between various components, modules, or external devices within the battery system.
 8002820:	4b4e      	ldr	r3, [pc, #312]	@ (800295c <merge+0xdf0>)
 8002822:	795b      	ldrb	r3, [r3, #5]
 8002824:	119b      	asrs	r3, r3, #6
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	b2d9      	uxtb	r1, r3
 800282c:	4a4c      	ldr	r2, [pc, #304]	@ (8002960 <merge+0xdf4>)
 800282e:	f892 303d 	ldrb.w	r3, [r2, #61]	@ 0x3d
 8002832:	f361 1386 	bfi	r3, r1, #6, #1
 8002836:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
	 			 BMS.Internal_Communication_Failure = (Received_Data[5] & 0x80)>>7;//disruptions in the internal communication between various components, modules, or subsystems within the BMS itself.
 800283a:	4b48      	ldr	r3, [pc, #288]	@ (800295c <merge+0xdf0>)
 800283c:	795b      	ldrb	r3, [r3, #5]
 800283e:	09db      	lsrs	r3, r3, #7
 8002840:	b2db      	uxtb	r3, r3
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	b2d9      	uxtb	r1, r3
 8002848:	4a45      	ldr	r2, [pc, #276]	@ (8002960 <merge+0xdf4>)
 800284a:	f892 303d 	ldrb.w	r3, [r2, #61]	@ 0x3d
 800284e:	f361 13c7 	bfi	r3, r1, #7, #1
 8002852:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
	 			 BMS.Current_Module_Fault = (Received_Data[6] & 0x01)>>0;//Fault condition related to the current measurement module within the BMS.
 8002856:	4b41      	ldr	r3, [pc, #260]	@ (800295c <merge+0xdf0>)
 8002858:	799b      	ldrb	r3, [r3, #6]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	b2d9      	uxtb	r1, r3
 8002860:	4a3f      	ldr	r2, [pc, #252]	@ (8002960 <merge+0xdf4>)
 8002862:	f892 303e 	ldrb.w	r3, [r2, #62]	@ 0x3e
 8002866:	f361 0300 	bfi	r3, r1, #0, #1
 800286a:	f882 303e 	strb.w	r3, [r2, #62]	@ 0x3e
	 			 BMS.Sum_Voltage_Detect_Fault = (Received_Data[6] & 0x02)>>1;//Fault condition related to the detection or measurement of the total sum voltage across the battery cells or modules within the system.
 800286e:	4b3b      	ldr	r3, [pc, #236]	@ (800295c <merge+0xdf0>)
 8002870:	799b      	ldrb	r3, [r3, #6]
 8002872:	105b      	asrs	r3, r3, #1
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	b2d9      	uxtb	r1, r3
 800287a:	4a39      	ldr	r2, [pc, #228]	@ (8002960 <merge+0xdf4>)
 800287c:	f892 303e 	ldrb.w	r3, [r2, #62]	@ 0x3e
 8002880:	f361 0341 	bfi	r3, r1, #1, #1
 8002884:	f882 303e 	strb.w	r3, [r2, #62]	@ 0x3e
	 			 BMS.Short_Circuit_Protect_Fault = (Received_Data[6] & 0x04)>>2;//fault condition related to the protective mechanisms within the BMS that are designed to detect and respond to short-circuit events occurring within the battery system.
 8002888:	4b34      	ldr	r3, [pc, #208]	@ (800295c <merge+0xdf0>)
 800288a:	799b      	ldrb	r3, [r3, #6]
 800288c:	109b      	asrs	r3, r3, #2
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	b2d9      	uxtb	r1, r3
 8002894:	4a32      	ldr	r2, [pc, #200]	@ (8002960 <merge+0xdf4>)
 8002896:	f892 303e 	ldrb.w	r3, [r2, #62]	@ 0x3e
 800289a:	f361 0382 	bfi	r3, r1, #2, #1
 800289e:	f882 303e 	strb.w	r3, [r2, #62]	@ 0x3e
	 			 BMS.Low_Volt_Forbidden_Chg_Fault = (Received_Data[6] & 0x08)>>3;// fault condition where charging is forbidden due to low voltage detected in the battery cells or pack, preventing the charging process from initiating or continuing.
 80028a2:	4b2e      	ldr	r3, [pc, #184]	@ (800295c <merge+0xdf0>)
 80028a4:	799b      	ldrb	r3, [r3, #6]
 80028a6:	10db      	asrs	r3, r3, #3
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	b2d9      	uxtb	r1, r3
 80028ae:	4a2c      	ldr	r2, [pc, #176]	@ (8002960 <merge+0xdf4>)
 80028b0:	f892 303e 	ldrb.w	r3, [r2, #62]	@ 0x3e
 80028b4:	f361 03c3 	bfi	r3, r1, #3, #1
 80028b8:	f882 303e 	strb.w	r3, [r2, #62]	@ 0x3e
	 			 BMS.Faultcode = Received_Data[7];//Fault code that represents an error, fault, or abnormal condition detected by the BMS
 80028bc:	4b27      	ldr	r3, [pc, #156]	@ (800295c <merge+0xdf0>)
 80028be:	79da      	ldrb	r2, [r3, #7]
 80028c0:	4b27      	ldr	r3, [pc, #156]	@ (8002960 <merge+0xdf4>)
 80028c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
	 			 break;
 80028c6:	e044      	b.n	8002952 <merge+0xde6>
	             BMS.Cumulative_Charge = ((Received_Data[0]<<24)|(Received_Data[1]<<16)|(Received_Data[2]<<8)|(Received_Data[3]));//The total amount of charge that has been delivered or supplied to a battery
 80028c8:	4b24      	ldr	r3, [pc, #144]	@ (800295c <merge+0xdf0>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	061a      	lsls	r2, r3, #24
 80028ce:	4b23      	ldr	r3, [pc, #140]	@ (800295c <merge+0xdf0>)
 80028d0:	785b      	ldrb	r3, [r3, #1]
 80028d2:	041b      	lsls	r3, r3, #16
 80028d4:	431a      	orrs	r2, r3
 80028d6:	4b21      	ldr	r3, [pc, #132]	@ (800295c <merge+0xdf0>)
 80028d8:	789b      	ldrb	r3, [r3, #2]
 80028da:	021b      	lsls	r3, r3, #8
 80028dc:	4313      	orrs	r3, r2
 80028de:	4a1f      	ldr	r2, [pc, #124]	@ (800295c <merge+0xdf0>)
 80028e0:	78d2      	ldrb	r2, [r2, #3]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	461a      	mov	r2, r3
 80028e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002960 <merge+0xdf4>)
 80028e8:	641a      	str	r2, [r3, #64]	@ 0x40
	             break;
 80028ea:	e032      	b.n	8002952 <merge+0xde6>
	             BMS.Battery_capacity = (((Received_Data[1]<<16)|(Received_Data[2]<<8)|Received_Data[3])/1000);//The battery rated capacity in Ah eg(58 Ah)
 80028ec:	4b1b      	ldr	r3, [pc, #108]	@ (800295c <merge+0xdf0>)
 80028ee:	785b      	ldrb	r3, [r3, #1]
 80028f0:	041a      	lsls	r2, r3, #16
 80028f2:	4b1a      	ldr	r3, [pc, #104]	@ (800295c <merge+0xdf0>)
 80028f4:	789b      	ldrb	r3, [r3, #2]
 80028f6:	021b      	lsls	r3, r3, #8
 80028f8:	4313      	orrs	r3, r2
 80028fa:	4a18      	ldr	r2, [pc, #96]	@ (800295c <merge+0xdf0>)
 80028fc:	78d2      	ldrb	r2, [r2, #3]
 80028fe:	4313      	orrs	r3, r2
 8002900:	4a18      	ldr	r2, [pc, #96]	@ (8002964 <merge+0xdf8>)
 8002902:	fb82 1203 	smull	r1, r2, r2, r3
 8002906:	1192      	asrs	r2, r2, #6
 8002908:	17db      	asrs	r3, r3, #31
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	461a      	mov	r2, r3
 800290e:	4b14      	ldr	r3, [pc, #80]	@ (8002960 <merge+0xdf4>)
 8002910:	609a      	str	r2, [r3, #8]
	             break;
 8002912:	e01e      	b.n	8002952 <merge+0xde6>
	             OBD.Gear_ratio=((Received_Data[0]<<24)|(Received_Data[1]<<16)|(Received_Data[2]<<8)|(Received_Data[3]));//this value for CONTROLLER SPEED VALUE MULTIPLIYER
 8002914:	4b11      	ldr	r3, [pc, #68]	@ (800295c <merge+0xdf0>)
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	061a      	lsls	r2, r3, #24
 800291a:	4b10      	ldr	r3, [pc, #64]	@ (800295c <merge+0xdf0>)
 800291c:	785b      	ldrb	r3, [r3, #1]
 800291e:	041b      	lsls	r3, r3, #16
 8002920:	431a      	orrs	r2, r3
 8002922:	4b0e      	ldr	r3, [pc, #56]	@ (800295c <merge+0xdf0>)
 8002924:	789b      	ldrb	r3, [r3, #2]
 8002926:	021b      	lsls	r3, r3, #8
 8002928:	4313      	orrs	r3, r2
 800292a:	4a0c      	ldr	r2, [pc, #48]	@ (800295c <merge+0xdf0>)
 800292c:	78d2      	ldrb	r2, [r2, #3]
 800292e:	4313      	orrs	r3, r2
 8002930:	4618      	mov	r0, r3
 8002932:	f7fe f92d 	bl	8000b90 <__aeabi_i2f>
 8002936:	4603      	mov	r3, r0
 8002938:	4a0b      	ldr	r2, [pc, #44]	@ (8002968 <merge+0xdfc>)
 800293a:	6013      	str	r3, [r2, #0]
	             OBD.speed_sensor_type=Received_Data[4]; //2-> Speed read from controller 1-> speed from front when sensor
 800293c:	4b07      	ldr	r3, [pc, #28]	@ (800295c <merge+0xdf0>)
 800293e:	791a      	ldrb	r2, [r3, #4]
 8002940:	4b09      	ldr	r3, [pc, #36]	@ (8002968 <merge+0xdfc>)
 8002942:	711a      	strb	r2, [r3, #4]
	             sensor_change=1;
 8002944:	4b09      	ldr	r3, [pc, #36]	@ (800296c <merge+0xe00>)
 8002946:	2201      	movs	r2, #1
 8002948:	701a      	strb	r2, [r3, #0]
	             break;
 800294a:	e002      	b.n	8002952 <merge+0xde6>
	break;
 800294c:	bf00      	nop
 800294e:	e000      	b.n	8002952 <merge+0xde6>
	             break;
 8002950:	bf00      	nop

 }
 }
 8002952:	bf00      	nop
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	20001414 	.word	0x20001414
 8002960:	2000141c 	.word	0x2000141c
 8002964:	10624dd3 	.word	0x10624dd3
 8002968:	20001460 	.word	0x20001460
 800296c:	200018d8 	.word	0x200018d8

08002970 <parllel_transmit>:
// * for Receiving response from BMS according to the Identifier request
// * Transmit data should be given to the mailbox
// */

void parllel_transmit(uint8_t data)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	4603      	mov	r3, r0
 8002978:	71fb      	strb	r3, [r7, #7]
	GPIOA->ODR=0X00|data;
 800297a:	4a04      	ldr	r2, [pc, #16]	@ (800298c <parllel_transmit+0x1c>)
 800297c:	79fb      	ldrb	r3, [r7, #7]
 800297e:	60d3      	str	r3, [r2, #12]
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	bc80      	pop	{r7}
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	40010800 	.word	0x40010800

08002990 <Split>:

void Split(uint32_t Odo_Value)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
	data_Write[0]= Odo_Value & 0xFF;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	b2da      	uxtb	r2, r3
 800299c:	4b08      	ldr	r3, [pc, #32]	@ (80029c0 <Split+0x30>)
 800299e:	701a      	strb	r2, [r3, #0]
	data_Write[1]= (Odo_Value>>8) & 0xFF;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	0a1b      	lsrs	r3, r3, #8
 80029a4:	b2da      	uxtb	r2, r3
 80029a6:	4b06      	ldr	r3, [pc, #24]	@ (80029c0 <Split+0x30>)
 80029a8:	705a      	strb	r2, [r3, #1]
	data_Write[2]= (Odo_Value>>16) & 0xFF;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	0c1b      	lsrs	r3, r3, #16
 80029ae:	b2da      	uxtb	r2, r3
 80029b0:	4b03      	ldr	r3, [pc, #12]	@ (80029c0 <Split+0x30>)
 80029b2:	709a      	strb	r2, [r3, #2]
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bc80      	pop	{r7}
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	2000191c 	.word	0x2000191c

080029c4 <I2C_Write_EEPROM>:
 * Merging individual byte of data and stored in a Structure
 */


void I2C_Write_EEPROM(uint32_t data_eeprom,uint8_t address)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	460b      	mov	r3, r1
 80029ce:	70fb      	strb	r3, [r7, #3]
   Split(data_eeprom);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f7ff ffdd 	bl	8002990 <Split>
   EEPROM_Write(address, data_Write, sizeof(data_Write));//Write odo-meter data
 80029d6:	78fb      	ldrb	r3, [r7, #3]
 80029d8:	b29b      	uxth	r3, r3
 80029da:	2203      	movs	r2, #3
 80029dc:	4903      	ldr	r1, [pc, #12]	@ (80029ec <I2C_Write_EEPROM+0x28>)
 80029de:	4618      	mov	r0, r3
 80029e0:	f000 f822 	bl	8002a28 <EEPROM_Write>
}
 80029e4:	bf00      	nop
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	2000191c 	.word	0x2000191c

080029f0 <I2C_Read_EEPROM>:

int I2C_Read_EEPROM(uint8_t address)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	71fb      	strb	r3, [r7, #7]
	EEPROM_Read(address, data_Read, sizeof(data_Read));
 80029fa:	79fb      	ldrb	r3, [r7, #7]
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	2203      	movs	r2, #3
 8002a00:	4908      	ldr	r1, [pc, #32]	@ (8002a24 <I2C_Read_EEPROM+0x34>)
 8002a02:	4618      	mov	r0, r3
 8002a04:	f000 f82e 	bl	8002a64 <EEPROM_Read>
	return((data_Read[2] << 16) | (data_Read[1] << 8) | (data_Read[0]));
 8002a08:	4b06      	ldr	r3, [pc, #24]	@ (8002a24 <I2C_Read_EEPROM+0x34>)
 8002a0a:	789b      	ldrb	r3, [r3, #2]
 8002a0c:	041a      	lsls	r2, r3, #16
 8002a0e:	4b05      	ldr	r3, [pc, #20]	@ (8002a24 <I2C_Read_EEPROM+0x34>)
 8002a10:	785b      	ldrb	r3, [r3, #1]
 8002a12:	021b      	lsls	r3, r3, #8
 8002a14:	4313      	orrs	r3, r2
 8002a16:	4a03      	ldr	r2, [pc, #12]	@ (8002a24 <I2C_Read_EEPROM+0x34>)
 8002a18:	7812      	ldrb	r2, [r2, #0]
 8002a1a:	4313      	orrs	r3, r2
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3708      	adds	r7, #8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	20001884 	.word	0x20001884

08002a28 <EEPROM_Write>:
 * This function contains Target device address,Internal Memory address
 * Size of internal memory address,Data buffer for storing write data ,
 * Size Amount of data to be sent and Timeout Timeout duration
 */
void EEPROM_Write(uint16_t address, uint8_t* data, uint16_t size)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af04      	add	r7, sp, #16
 8002a2e:	4603      	mov	r3, r0
 8002a30:	6039      	str	r1, [r7, #0]
 8002a32:	80fb      	strh	r3, [r7, #6]
 8002a34:	4613      	mov	r3, r2
 8002a36:	80bb      	strh	r3, [r7, #4]
  HAL_I2C_Mem_Write(&hi2c1, EEPROM_DEV_ADD, address, I2C_MEMADD_SIZE_8BIT, data, size, HAL_MAX_DELAY);
 8002a38:	88fa      	ldrh	r2, [r7, #6]
 8002a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a3e:	9302      	str	r3, [sp, #8]
 8002a40:	88bb      	ldrh	r3, [r7, #4]
 8002a42:	9301      	str	r3, [sp, #4]
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	2301      	movs	r3, #1
 8002a4a:	21a0      	movs	r1, #160	@ 0xa0
 8002a4c:	4804      	ldr	r0, [pc, #16]	@ (8002a60 <EEPROM_Write+0x38>)
 8002a4e:	f003 fced 	bl	800642c <HAL_I2C_Mem_Write>
  HAL_Delay(5); // Delay for EEPROM write operation
 8002a52:	2005      	movs	r0, #5
 8002a54:	f002 fa36 	bl	8004ec4 <HAL_Delay>
}
 8002a58:	bf00      	nop
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	20001490 	.word	0x20001490

08002a64 <EEPROM_Read>:
 * This function contains Target device address,Internal Memory address
 * Size of internal memory address,Data Buffer for storing read data,
 * Size Amount of data to be read and Timeout Timeout duration
 */
void EEPROM_Read(uint16_t address, uint8_t* data, uint16_t size)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af04      	add	r7, sp, #16
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	6039      	str	r1, [r7, #0]
 8002a6e:	80fb      	strh	r3, [r7, #6]
 8002a70:	4613      	mov	r3, r2
 8002a72:	80bb      	strh	r3, [r7, #4]
  HAL_I2C_Mem_Read(&hi2c1, EEPROM_DEV_ADD, address, I2C_MEMADD_SIZE_8BIT, data, size, HAL_MAX_DELAY);
 8002a74:	88fa      	ldrh	r2, [r7, #6]
 8002a76:	f04f 33ff 	mov.w	r3, #4294967295
 8002a7a:	9302      	str	r3, [sp, #8]
 8002a7c:	88bb      	ldrh	r3, [r7, #4]
 8002a7e:	9301      	str	r3, [sp, #4]
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	9300      	str	r3, [sp, #0]
 8002a84:	2301      	movs	r3, #1
 8002a86:	21a0      	movs	r1, #160	@ 0xa0
 8002a88:	4804      	ldr	r0, [pc, #16]	@ (8002a9c <EEPROM_Read+0x38>)
 8002a8a:	f003 fdc9 	bl	8006620 <HAL_I2C_Mem_Read>
  HAL_Delay(5); // Delay for EEPROM read operation
 8002a8e:	2005      	movs	r0, #5
 8002a90:	f002 fa18 	bl	8004ec4 <HAL_Delay>
}
 8002a94:	bf00      	nop
 8002a96:	3708      	adds	r7, #8
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	20001490 	.word	0x20001490

08002aa0 <battery_voltage>:

void battery_voltage()
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
	lcd_clear(7, 0, 12);
 8002aa4:	220c      	movs	r2, #12
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	2007      	movs	r0, #7
 8002aaa:	f7fe fec7 	bl	800183c <lcd_clear>
	lcd_print_digit_wos(7, 0, (BMS.Cumulative_Total_Voltage/100));
 8002aae:	4b14      	ldr	r3, [pc, #80]	@ (8002b00 <battery_voltage+0x60>)
 8002ab0:	881b      	ldrh	r3, [r3, #0]
 8002ab2:	4a14      	ldr	r2, [pc, #80]	@ (8002b04 <battery_voltage+0x64>)
 8002ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab8:	095b      	lsrs	r3, r3, #5
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	461a      	mov	r2, r3
 8002abe:	2100      	movs	r1, #0
 8002ac0:	2007      	movs	r0, #7
 8002ac2:	f7fe fee1 	bl	8001888 <lcd_print_digit_wos>
	lcd_print_digit_wos(7, 6, (BMS.Cumulative_Total_Voltage/10)%10);
 8002ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8002b00 <battery_voltage+0x60>)
 8002ac8:	881b      	ldrh	r3, [r3, #0]
 8002aca:	4a0f      	ldr	r2, [pc, #60]	@ (8002b08 <battery_voltage+0x68>)
 8002acc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad0:	08db      	lsrs	r3, r3, #3
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8002b08 <battery_voltage+0x68>)
 8002ad6:	fba3 1302 	umull	r1, r3, r3, r2
 8002ada:	08d9      	lsrs	r1, r3, #3
 8002adc:	460b      	mov	r3, r1
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	440b      	add	r3, r1
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	461a      	mov	r2, r3
 8002aea:	2106      	movs	r1, #6
 8002aec:	2007      	movs	r0, #7
 8002aee:	f7fe fecb 	bl	8001888 <lcd_print_digit_wos>
	lcd_print_char(7, 12, "V");
 8002af2:	4a06      	ldr	r2, [pc, #24]	@ (8002b0c <battery_voltage+0x6c>)
 8002af4:	210c      	movs	r1, #12
 8002af6:	2007      	movs	r0, #7
 8002af8:	f7fe fdc6 	bl	8001688 <lcd_print_char>
}
 8002afc:	bf00      	nop
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	2000141c 	.word	0x2000141c
 8002b04:	51eb851f 	.word	0x51eb851f
 8002b08:	cccccccd 	.word	0xcccccccd
 8002b0c:	08008458 	.word	0x08008458

08002b10 <battery_cycle>:
	lcd_print_digit_wos(7, 110, (BMS.Current/100));
	lcd_print_digit_wos(7, 116, (BMS.Current/10)%10);
	lcd_print_char(7, 122, "A");
}
void battery_cycle()
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
	charge_cycle_print();
 8002b14:	f7fe fd98 	bl	8001648 <charge_cycle_print>
	CGC_value=BMS.Cumulative_Charge/BMS.Battery_capacity;
 8002b18:	4b32      	ldr	r3, [pc, #200]	@ (8002be4 <battery_cycle+0xd4>)
 8002b1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b1c:	4b31      	ldr	r3, [pc, #196]	@ (8002be4 <battery_cycle+0xd4>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b24:	4a30      	ldr	r2, [pc, #192]	@ (8002be8 <battery_cycle+0xd8>)
 8002b26:	6013      	str	r3, [r2, #0]
 	lcd_print_digit_wos(3, 103, (CGC_value)/1000);
 8002b28:	4b2f      	ldr	r3, [pc, #188]	@ (8002be8 <battery_cycle+0xd8>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a2f      	ldr	r2, [pc, #188]	@ (8002bec <battery_cycle+0xdc>)
 8002b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b32:	099b      	lsrs	r3, r3, #6
 8002b34:	461a      	mov	r2, r3
 8002b36:	2167      	movs	r1, #103	@ 0x67
 8002b38:	2003      	movs	r0, #3
 8002b3a:	f7fe fea5 	bl	8001888 <lcd_print_digit_wos>
	lcd_print_digit_wos(3, 109, ((CGC_value)%1000)/100);
 8002b3e:	4b2a      	ldr	r3, [pc, #168]	@ (8002be8 <battery_cycle+0xd8>)
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	4b2a      	ldr	r3, [pc, #168]	@ (8002bec <battery_cycle+0xdc>)
 8002b44:	fba3 1302 	umull	r1, r3, r3, r2
 8002b48:	099b      	lsrs	r3, r3, #6
 8002b4a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002b4e:	fb01 f303 	mul.w	r3, r1, r3
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	4a26      	ldr	r2, [pc, #152]	@ (8002bf0 <battery_cycle+0xe0>)
 8002b56:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5a:	095b      	lsrs	r3, r3, #5
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	216d      	movs	r1, #109	@ 0x6d
 8002b60:	2003      	movs	r0, #3
 8002b62:	f7fe fe91 	bl	8001888 <lcd_print_digit_wos>
	lcd_print_digit_wos(3, 115, ((((CGC_value)%1000)%100)/10));
 8002b66:	4b20      	ldr	r3, [pc, #128]	@ (8002be8 <battery_cycle+0xd8>)
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	4b20      	ldr	r3, [pc, #128]	@ (8002bec <battery_cycle+0xdc>)
 8002b6c:	fba3 1302 	umull	r1, r3, r3, r2
 8002b70:	099b      	lsrs	r3, r3, #6
 8002b72:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002b76:	fb01 f303 	mul.w	r3, r1, r3
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	4a1c      	ldr	r2, [pc, #112]	@ (8002bf0 <battery_cycle+0xe0>)
 8002b7e:	fba2 1203 	umull	r1, r2, r2, r3
 8002b82:	0952      	lsrs	r2, r2, #5
 8002b84:	2164      	movs	r1, #100	@ 0x64
 8002b86:	fb01 f202 	mul.w	r2, r1, r2
 8002b8a:	1a9a      	subs	r2, r3, r2
 8002b8c:	4b19      	ldr	r3, [pc, #100]	@ (8002bf4 <battery_cycle+0xe4>)
 8002b8e:	fba3 2302 	umull	r2, r3, r3, r2
 8002b92:	08db      	lsrs	r3, r3, #3
 8002b94:	461a      	mov	r2, r3
 8002b96:	2173      	movs	r1, #115	@ 0x73
 8002b98:	2003      	movs	r0, #3
 8002b9a:	f7fe fe75 	bl	8001888 <lcd_print_digit_wos>
	lcd_print_digit_wos(3, 121, ((((CGC_value)%1000)%100)%10));
 8002b9e:	4b12      	ldr	r3, [pc, #72]	@ (8002be8 <battery_cycle+0xd8>)
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	4b12      	ldr	r3, [pc, #72]	@ (8002bec <battery_cycle+0xdc>)
 8002ba4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ba8:	099b      	lsrs	r3, r3, #6
 8002baa:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002bae:	fb01 f303 	mul.w	r3, r1, r3
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	4a0e      	ldr	r2, [pc, #56]	@ (8002bf0 <battery_cycle+0xe0>)
 8002bb6:	fba2 1203 	umull	r1, r2, r2, r3
 8002bba:	0952      	lsrs	r2, r2, #5
 8002bbc:	2164      	movs	r1, #100	@ 0x64
 8002bbe:	fb01 f202 	mul.w	r2, r1, r2
 8002bc2:	1a9a      	subs	r2, r3, r2
 8002bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8002bf4 <battery_cycle+0xe4>)
 8002bc6:	fba3 1302 	umull	r1, r3, r3, r2
 8002bca:	08d9      	lsrs	r1, r3, #3
 8002bcc:	460b      	mov	r3, r1
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	1ad1      	subs	r1, r2, r3
 8002bd6:	460a      	mov	r2, r1
 8002bd8:	2179      	movs	r1, #121	@ 0x79
 8002bda:	2003      	movs	r0, #3
 8002bdc:	f7fe fe54 	bl	8001888 <lcd_print_digit_wos>
}
 8002be0:	bf00      	nop
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	2000141c 	.word	0x2000141c
 8002be8:	200018f4 	.word	0x200018f4
 8002bec:	10624dd3 	.word	0x10624dd3
 8002bf0:	51eb851f 	.word	0x51eb851f
 8002bf4:	cccccccd 	.word	0xcccccccd

08002bf8 <version_print>:

void version_print()
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
	lcd_print_char(6, 3, "VER");
 8002bfc:	4a0a      	ldr	r2, [pc, #40]	@ (8002c28 <version_print+0x30>)
 8002bfe:	2103      	movs	r1, #3
 8002c00:	2006      	movs	r0, #6
 8002c02:	f7fe fd41 	bl	8001688 <lcd_print_char>
	lcd_print_digit_wos(7, 4, version1);
 8002c06:	2201      	movs	r2, #1
 8002c08:	2104      	movs	r1, #4
 8002c0a:	2007      	movs	r0, #7
 8002c0c:	f7fe fe3c 	bl	8001888 <lcd_print_digit_wos>
	lcd_print_convert(7, 10, 0x20);
 8002c10:	2220      	movs	r2, #32
 8002c12:	210a      	movs	r1, #10
 8002c14:	2007      	movs	r0, #7
 8002c16:	f7fe ff43 	bl	8001aa0 <lcd_print_convert>
	lcd_print_digit_wos(7, 13, version2);
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	210d      	movs	r1, #13
 8002c1e:	2007      	movs	r0, #7
 8002c20:	f7fe fe32 	bl	8001888 <lcd_print_digit_wos>
}
 8002c24:	bf00      	nop
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	08008460 	.word	0x08008460

08002c2c <battery_temp>:

uint8_t tog_temp=0;
void battery_temp()
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0

	if((BMS.Max_Temp==0)&&(BMS.Min_Temp==0))
 8002c30:	4b82      	ldr	r3, [pc, #520]	@ (8002e3c <battery_temp+0x210>)
 8002c32:	7d5b      	ldrb	r3, [r3, #21]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d11a      	bne.n	8002c6e <battery_temp+0x42>
 8002c38:	4b80      	ldr	r3, [pc, #512]	@ (8002e3c <battery_temp+0x210>)
 8002c3a:	7ddb      	ldrb	r3, [r3, #23]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d116      	bne.n	8002c6e <battery_temp+0x42>
	{
		lcd_print_digit(0, 0, BMS.Max_Temp);
 8002c40:	4b7e      	ldr	r3, [pc, #504]	@ (8002e3c <battery_temp+0x210>)
 8002c42:	7d5b      	ldrb	r3, [r3, #21]
 8002c44:	461a      	mov	r2, r3
 8002c46:	2100      	movs	r1, #0
 8002c48:	2000      	movs	r0, #0
 8002c4a:	f7fe fe5d 	bl	8001908 <lcd_print_digit>
		lcd_print_convert(0, 12, 0x03);
 8002c4e:	2203      	movs	r2, #3
 8002c50:	210c      	movs	r1, #12
 8002c52:	2000      	movs	r0, #0
 8002c54:	f7fe ff24 	bl	8001aa0 <lcd_print_convert>
		lcd_print_convert(0, 13, 0x03);
 8002c58:	2203      	movs	r2, #3
 8002c5a:	210d      	movs	r1, #13
 8002c5c:	2000      	movs	r0, #0
 8002c5e:	f7fe ff1f 	bl	8001aa0 <lcd_print_convert>
		lcd_print_char(0, 15, "C");
 8002c62:	4a77      	ldr	r2, [pc, #476]	@ (8002e40 <battery_temp+0x214>)
 8002c64:	210f      	movs	r1, #15
 8002c66:	2000      	movs	r0, #0
 8002c68:	f7fe fd0e 	bl	8001688 <lcd_print_char>
	{
 8002c6c:	e09e      	b.n	8002dac <battery_temp+0x180>
	}
	else
	{
		if(BMS.Max_Temp>50)
 8002c6e:	4b73      	ldr	r3, [pc, #460]	@ (8002e3c <battery_temp+0x210>)
 8002c70:	7d5b      	ldrb	r3, [r3, #21]
 8002c72:	2b32      	cmp	r3, #50	@ 0x32
 8002c74:	d917      	bls.n	8002ca6 <battery_temp+0x7a>
		{
			lcd_print_digit(0, 0, ((BMS.Max_Temp)-40));
 8002c76:	4b71      	ldr	r3, [pc, #452]	@ (8002e3c <battery_temp+0x210>)
 8002c78:	7d5b      	ldrb	r3, [r3, #21]
 8002c7a:	3b28      	subs	r3, #40	@ 0x28
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	2100      	movs	r1, #0
 8002c80:	2000      	movs	r0, #0
 8002c82:	f7fe fe41 	bl	8001908 <lcd_print_digit>
			lcd_print_convert(0, 12, 0x03);
 8002c86:	2203      	movs	r2, #3
 8002c88:	210c      	movs	r1, #12
 8002c8a:	2000      	movs	r0, #0
 8002c8c:	f7fe ff08 	bl	8001aa0 <lcd_print_convert>
			lcd_print_convert(0, 13, 0x03);
 8002c90:	2203      	movs	r2, #3
 8002c92:	210d      	movs	r1, #13
 8002c94:	2000      	movs	r0, #0
 8002c96:	f7fe ff03 	bl	8001aa0 <lcd_print_convert>
			lcd_print_char(0, 15, "C");
 8002c9a:	4a69      	ldr	r2, [pc, #420]	@ (8002e40 <battery_temp+0x214>)
 8002c9c:	210f      	movs	r1, #15
 8002c9e:	2000      	movs	r0, #0
 8002ca0:	f7fe fcf2 	bl	8001688 <lcd_print_char>
 8002ca4:	e082      	b.n	8002dac <battery_temp+0x180>
		}
		else
		{
			if((BMS.Min_Temp<=49)&&(BMS.Min_Temp>=40))// less tham 10 degree min temp will be printed
 8002ca6:	4b65      	ldr	r3, [pc, #404]	@ (8002e3c <battery_temp+0x210>)
 8002ca8:	7ddb      	ldrb	r3, [r3, #23]
 8002caa:	2b31      	cmp	r3, #49	@ 0x31
 8002cac:	d81a      	bhi.n	8002ce4 <battery_temp+0xb8>
 8002cae:	4b63      	ldr	r3, [pc, #396]	@ (8002e3c <battery_temp+0x210>)
 8002cb0:	7ddb      	ldrb	r3, [r3, #23]
 8002cb2:	2b27      	cmp	r3, #39	@ 0x27
 8002cb4:	d916      	bls.n	8002ce4 <battery_temp+0xb8>
			{
				lcd_print_digit(0, 0, ((BMS.Min_Temp)-40));//
 8002cb6:	4b61      	ldr	r3, [pc, #388]	@ (8002e3c <battery_temp+0x210>)
 8002cb8:	7ddb      	ldrb	r3, [r3, #23]
 8002cba:	3b28      	subs	r3, #40	@ 0x28
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	2000      	movs	r0, #0
 8002cc2:	f7fe fe21 	bl	8001908 <lcd_print_digit>
				lcd_print_convert(0, 12, 0x03);
 8002cc6:	2203      	movs	r2, #3
 8002cc8:	210c      	movs	r1, #12
 8002cca:	2000      	movs	r0, #0
 8002ccc:	f7fe fee8 	bl	8001aa0 <lcd_print_convert>
				lcd_print_convert(0, 13, 0x03);
 8002cd0:	2203      	movs	r2, #3
 8002cd2:	210d      	movs	r1, #13
 8002cd4:	2000      	movs	r0, #0
 8002cd6:	f7fe fee3 	bl	8001aa0 <lcd_print_convert>
				lcd_print_char(0, 15, "C");
 8002cda:	4a59      	ldr	r2, [pc, #356]	@ (8002e40 <battery_temp+0x214>)
 8002cdc:	210f      	movs	r1, #15
 8002cde:	2000      	movs	r0, #0
 8002ce0:	f7fe fcd2 	bl	8001688 <lcd_print_char>
			}

			if((BMS.Min_Temp<=39)&&(BMS.Min_Temp>=31))// less tham 10 degree min temp will be printed
 8002ce4:	4b55      	ldr	r3, [pc, #340]	@ (8002e3c <battery_temp+0x210>)
 8002ce6:	7ddb      	ldrb	r3, [r3, #23]
 8002ce8:	2b27      	cmp	r3, #39	@ 0x27
 8002cea:	d82f      	bhi.n	8002d4c <battery_temp+0x120>
 8002cec:	4b53      	ldr	r3, [pc, #332]	@ (8002e3c <battery_temp+0x210>)
 8002cee:	7ddb      	ldrb	r3, [r3, #23]
 8002cf0:	2b1e      	cmp	r3, #30
 8002cf2:	d92b      	bls.n	8002d4c <battery_temp+0x120>
			{
				lcd_print_convert(0, 0, 0x10);
 8002cf4:	2210      	movs	r2, #16
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	2000      	movs	r0, #0
 8002cfa:	f7fe fed1 	bl	8001aa0 <lcd_print_convert>
				lcd_print_convert(0, 1, 0x10);
 8002cfe:	2210      	movs	r2, #16
 8002d00:	2101      	movs	r1, #1
 8002d02:	2000      	movs	r0, #0
 8002d04:	f7fe fecc 	bl	8001aa0 <lcd_print_convert>
				lcd_print_convert(0, 2, 0x10);
 8002d08:	2210      	movs	r2, #16
 8002d0a:	2102      	movs	r1, #2
 8002d0c:	2000      	movs	r0, #0
 8002d0e:	f7fe fec7 	bl	8001aa0 <lcd_print_convert>
				lcd_print_convert(0, 3, 0x10);
 8002d12:	2210      	movs	r2, #16
 8002d14:	2103      	movs	r1, #3
 8002d16:	2000      	movs	r0, #0
 8002d18:	f7fe fec2 	bl	8001aa0 <lcd_print_convert>
				lcd_print_digit(0, 5, 40-((BMS.Min_Temp)));//
 8002d1c:	4b47      	ldr	r3, [pc, #284]	@ (8002e3c <battery_temp+0x210>)
 8002d1e:	7ddb      	ldrb	r3, [r3, #23]
 8002d20:	f1c3 0328 	rsb	r3, r3, #40	@ 0x28
 8002d24:	461a      	mov	r2, r3
 8002d26:	2105      	movs	r1, #5
 8002d28:	2000      	movs	r0, #0
 8002d2a:	f7fe fded 	bl	8001908 <lcd_print_digit>
				lcd_print_convert(0, 11, 0x03);
 8002d2e:	2203      	movs	r2, #3
 8002d30:	210b      	movs	r1, #11
 8002d32:	2000      	movs	r0, #0
 8002d34:	f7fe feb4 	bl	8001aa0 <lcd_print_convert>
				lcd_print_convert(0, 12, 0x03);
 8002d38:	2203      	movs	r2, #3
 8002d3a:	210c      	movs	r1, #12
 8002d3c:	2000      	movs	r0, #0
 8002d3e:	f7fe feaf 	bl	8001aa0 <lcd_print_convert>
				lcd_print_char(0, 14, "C");
 8002d42:	4a3f      	ldr	r2, [pc, #252]	@ (8002e40 <battery_temp+0x214>)
 8002d44:	210e      	movs	r1, #14
 8002d46:	2000      	movs	r0, #0
 8002d48:	f7fe fc9e 	bl	8001688 <lcd_print_char>
			}
			if((BMS.Min_Temp<=30)&&(BMS.Min_Temp>=0))// less tham 10 degree min temp will be printed
 8002d4c:	4b3b      	ldr	r3, [pc, #236]	@ (8002e3c <battery_temp+0x210>)
 8002d4e:	7ddb      	ldrb	r3, [r3, #23]
 8002d50:	2b1e      	cmp	r3, #30
 8002d52:	d82b      	bhi.n	8002dac <battery_temp+0x180>
			{
				lcd_print_convert(0, 0, 0x10);
 8002d54:	2210      	movs	r2, #16
 8002d56:	2100      	movs	r1, #0
 8002d58:	2000      	movs	r0, #0
 8002d5a:	f7fe fea1 	bl	8001aa0 <lcd_print_convert>
				lcd_print_convert(0, 1, 0x10);
 8002d5e:	2210      	movs	r2, #16
 8002d60:	2101      	movs	r1, #1
 8002d62:	2000      	movs	r0, #0
 8002d64:	f7fe fe9c 	bl	8001aa0 <lcd_print_convert>
				lcd_print_convert(0, 2, 0x10);
 8002d68:	2210      	movs	r2, #16
 8002d6a:	2102      	movs	r1, #2
 8002d6c:	2000      	movs	r0, #0
 8002d6e:	f7fe fe97 	bl	8001aa0 <lcd_print_convert>
				lcd_print_convert(0, 3, 0x10);
 8002d72:	2210      	movs	r2, #16
 8002d74:	2103      	movs	r1, #3
 8002d76:	2000      	movs	r0, #0
 8002d78:	f7fe fe92 	bl	8001aa0 <lcd_print_convert>
				lcd_print_digit(0, 5, 40-((BMS.Min_Temp)));//
 8002d7c:	4b2f      	ldr	r3, [pc, #188]	@ (8002e3c <battery_temp+0x210>)
 8002d7e:	7ddb      	ldrb	r3, [r3, #23]
 8002d80:	f1c3 0328 	rsb	r3, r3, #40	@ 0x28
 8002d84:	461a      	mov	r2, r3
 8002d86:	2105      	movs	r1, #5
 8002d88:	2000      	movs	r0, #0
 8002d8a:	f7fe fdbd 	bl	8001908 <lcd_print_digit>
				lcd_print_convert(0, 17, 0x03);
 8002d8e:	2203      	movs	r2, #3
 8002d90:	2111      	movs	r1, #17
 8002d92:	2000      	movs	r0, #0
 8002d94:	f7fe fe84 	bl	8001aa0 <lcd_print_convert>
				lcd_print_convert(0, 18, 0x03);
 8002d98:	2203      	movs	r2, #3
 8002d9a:	2112      	movs	r1, #18
 8002d9c:	2000      	movs	r0, #0
 8002d9e:	f7fe fe7f 	bl	8001aa0 <lcd_print_convert>
				lcd_print_char(0, 20, "C");
 8002da2:	4a27      	ldr	r2, [pc, #156]	@ (8002e40 <battery_temp+0x214>)
 8002da4:	2114      	movs	r1, #20
 8002da6:	2000      	movs	r0, #0
 8002da8:	f7fe fc6e 	bl	8001688 <lcd_print_char>
		}
	}

	// negative value should be printer draw (-)

	if(BMS.Max_Temp>95)
 8002dac:	4b23      	ldr	r3, [pc, #140]	@ (8002e3c <battery_temp+0x210>)
 8002dae:	7d5b      	ldrb	r3, [r3, #21]
 8002db0:	2b5f      	cmp	r3, #95	@ 0x5f
 8002db2:	d91d      	bls.n	8002df0 <battery_temp+0x1c4>
	{
		tog_temp=(!tog_temp);
 8002db4:	4b23      	ldr	r3, [pc, #140]	@ (8002e44 <battery_temp+0x218>)
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	bf0c      	ite	eq
 8002dbc:	2301      	moveq	r3, #1
 8002dbe:	2300      	movne	r3, #0
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	4b1f      	ldr	r3, [pc, #124]	@ (8002e44 <battery_temp+0x218>)
 8002dc6:	701a      	strb	r2, [r3, #0]

		if(tog_temp)
 8002dc8:	4b1e      	ldr	r3, [pc, #120]	@ (8002e44 <battery_temp+0x218>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d005      	beq.n	8002ddc <battery_temp+0x1b0>
		{
			Battery_high_Temp=1;
 8002dd0:	4b1d      	ldr	r3, [pc, #116]	@ (8002e48 <battery_temp+0x21c>)
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	701a      	strb	r2, [r3, #0]
			over_temperature_print();
 8002dd6:	f7fe fe7b 	bl	8001ad0 <over_temperature_print>
 8002dda:	e009      	b.n	8002df0 <battery_temp+0x1c4>
		}
		else
		{
			lcd_clear(1, 25, 13);
 8002ddc:	220d      	movs	r2, #13
 8002dde:	2119      	movs	r1, #25
 8002de0:	2001      	movs	r0, #1
 8002de2:	f7fe fd2b 	bl	800183c <lcd_clear>
			lcd_clear(2, 25, 13);
 8002de6:	220d      	movs	r2, #13
 8002de8:	2119      	movs	r1, #25
 8002dea:	2002      	movs	r0, #2
 8002dec:	f7fe fd26 	bl	800183c <lcd_clear>
		}
	}

	if(BMS.Max_Temp<90)
 8002df0:	4b12      	ldr	r3, [pc, #72]	@ (8002e3c <battery_temp+0x210>)
 8002df2:	7d5b      	ldrb	r3, [r3, #21]
 8002df4:	2b59      	cmp	r3, #89	@ 0x59
 8002df6:	d80c      	bhi.n	8002e12 <battery_temp+0x1e6>
	{
		lcd_clear(1, 25, 12);
 8002df8:	220c      	movs	r2, #12
 8002dfa:	2119      	movs	r1, #25
 8002dfc:	2001      	movs	r0, #1
 8002dfe:	f7fe fd1d 	bl	800183c <lcd_clear>
		lcd_clear(2, 25, 13);
 8002e02:	220d      	movs	r2, #13
 8002e04:	2119      	movs	r1, #25
 8002e06:	2002      	movs	r0, #2
 8002e08:	f7fe fd18 	bl	800183c <lcd_clear>
		Battery_high_Temp=0;
 8002e0c:	4b0e      	ldr	r3, [pc, #56]	@ (8002e48 <battery_temp+0x21c>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	701a      	strb	r2, [r3, #0]
	}

	if((BMS.Max_Temp==0)&&(BMS.Min_Temp==0))
 8002e12:	4b0a      	ldr	r3, [pc, #40]	@ (8002e3c <battery_temp+0x210>)
 8002e14:	7d5b      	ldrb	r3, [r3, #21]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10d      	bne.n	8002e36 <battery_temp+0x20a>
 8002e1a:	4b08      	ldr	r3, [pc, #32]	@ (8002e3c <battery_temp+0x210>)
 8002e1c:	7ddb      	ldrb	r3, [r3, #23]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d109      	bne.n	8002e36 <battery_temp+0x20a>
	{
		lcd_print_digit_wos(0, 0, 0);
 8002e22:	2200      	movs	r2, #0
 8002e24:	2100      	movs	r1, #0
 8002e26:	2000      	movs	r0, #0
 8002e28:	f7fe fd2e 	bl	8001888 <lcd_print_digit_wos>
		lcd_print_digit_wos(0, 6, 0);
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	2106      	movs	r1, #6
 8002e30:	2000      	movs	r0, #0
 8002e32:	f7fe fd29 	bl	8001888 <lcd_print_digit_wos>
	}
}
 8002e36:	bf00      	nop
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	2000141c 	.word	0x2000141c
 8002e40:	08008464 	.word	0x08008464
 8002e44:	20001958 	.word	0x20001958
 8002e48:	200018dc 	.word	0x200018dc
 8002e4c:	00000000 	.word	0x00000000

08002e50 <battery_soc>:
uint8_t neg_soc=0;
void battery_soc()
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
	if(BMS.SOC>=150)
 8002e54:	4b58      	ldr	r3, [pc, #352]	@ (8002fb8 <battery_soc+0x168>)
 8002e56:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002e5a:	2b95      	cmp	r3, #149	@ 0x95
 8002e5c:	dd2a      	ble.n	8002eb4 <battery_soc+0x64>
	{
		neg_soc=0;
 8002e5e:	4b57      	ldr	r3, [pc, #348]	@ (8002fbc <battery_soc+0x16c>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	701a      	strb	r2, [r3, #0]
		Reserved_SOC=(int)1000.0-((1000.0-BMS.SOC)*(100.0/85.0));
 8002e64:	4b54      	ldr	r3, [pc, #336]	@ (8002fb8 <battery_soc+0x168>)
 8002e66:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7fd fac2 	bl	80003f4 <__aeabi_i2d>
 8002e70:	4602      	mov	r2, r0
 8002e72:	460b      	mov	r3, r1
 8002e74:	f04f 0000 	mov.w	r0, #0
 8002e78:	4951      	ldr	r1, [pc, #324]	@ (8002fc0 <battery_soc+0x170>)
 8002e7a:	f7fd f96d 	bl	8000158 <__aeabi_dsub>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	460b      	mov	r3, r1
 8002e82:	4610      	mov	r0, r2
 8002e84:	4619      	mov	r1, r3
 8002e86:	a34a      	add	r3, pc, #296	@ (adr r3, 8002fb0 <battery_soc+0x160>)
 8002e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e8c:	f7fd fb1c 	bl	80004c8 <__aeabi_dmul>
 8002e90:	4602      	mov	r2, r0
 8002e92:	460b      	mov	r3, r1
 8002e94:	f04f 0000 	mov.w	r0, #0
 8002e98:	4949      	ldr	r1, [pc, #292]	@ (8002fc0 <battery_soc+0x170>)
 8002e9a:	f7fd f95d 	bl	8000158 <__aeabi_dsub>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	4610      	mov	r0, r2
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	f7fd fd21 	bl	80008ec <__aeabi_d2iz>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	b21a      	sxth	r2, r3
 8002eae:	4b45      	ldr	r3, [pc, #276]	@ (8002fc4 <battery_soc+0x174>)
 8002eb0:	801a      	strh	r2, [r3, #0]
 8002eb2:	e00c      	b.n	8002ece <battery_soc+0x7e>
	}
	else
	{
		neg_soc=1;
 8002eb4:	4b41      	ldr	r3, [pc, #260]	@ (8002fbc <battery_soc+0x16c>)
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	701a      	strb	r2, [r3, #0]
		Reserved_SOC=150-BMS.SOC;
 8002eba:	4b3f      	ldr	r3, [pc, #252]	@ (8002fb8 <battery_soc+0x168>)
 8002ebc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	b21a      	sxth	r2, r3
 8002eca:	4b3e      	ldr	r3, [pc, #248]	@ (8002fc4 <battery_soc+0x174>)
 8002ecc:	801a      	strh	r2, [r3, #0]
	}

	if(Reserved_SOC==1000){
 8002ece:	4b3d      	ldr	r3, [pc, #244]	@ (8002fc4 <battery_soc+0x174>)
 8002ed0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ed4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002ed8:	d119      	bne.n	8002f0e <battery_soc+0xbe>
		lcd_clear(7, 98, 29);
 8002eda:	221d      	movs	r2, #29
 8002edc:	2162      	movs	r1, #98	@ 0x62
 8002ede:	2007      	movs	r0, #7
 8002ee0:	f7fe fcac 	bl	800183c <lcd_clear>
		lcd_print_digit_wos(7, 104, 1);
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	2168      	movs	r1, #104	@ 0x68
 8002ee8:	2007      	movs	r0, #7
 8002eea:	f7fe fccd 	bl	8001888 <lcd_print_digit_wos>
		lcd_print_digit_wos(7, 110, 0);
 8002eee:	2200      	movs	r2, #0
 8002ef0:	216e      	movs	r1, #110	@ 0x6e
 8002ef2:	2007      	movs	r0, #7
 8002ef4:	f7fe fcc8 	bl	8001888 <lcd_print_digit_wos>
		lcd_print_digit_wos(7, 116, 0);
 8002ef8:	2200      	movs	r2, #0
 8002efa:	2174      	movs	r1, #116	@ 0x74
 8002efc:	2007      	movs	r0, #7
 8002efe:	f7fe fcc3 	bl	8001888 <lcd_print_digit_wos>
		lcd_print_char(7, 122, "%");
 8002f02:	4a31      	ldr	r2, [pc, #196]	@ (8002fc8 <battery_soc+0x178>)
 8002f04:	217a      	movs	r1, #122	@ 0x7a
 8002f06:	2007      	movs	r0, #7
 8002f08:	f7fe fbbe 	bl	8001688 <lcd_print_char>
 8002f0c:	e04b      	b.n	8002fa6 <battery_soc+0x156>
	}
	else{
		lcd_clear(7, 98, 29);
 8002f0e:	221d      	movs	r2, #29
 8002f10:	2162      	movs	r1, #98	@ 0x62
 8002f12:	2007      	movs	r0, #7
 8002f14:	f7fe fc92 	bl	800183c <lcd_clear>
		if(neg_soc)
 8002f18:	4b28      	ldr	r3, [pc, #160]	@ (8002fbc <battery_soc+0x16c>)
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d013      	beq.n	8002f48 <battery_soc+0xf8>
		{
			//lcd_print_convert(7, 104, 0x10);
			lcd_print_convert(7, 105, 0x10);
 8002f20:	2210      	movs	r2, #16
 8002f22:	2169      	movs	r1, #105	@ 0x69
 8002f24:	2007      	movs	r0, #7
 8002f26:	f7fe fdbb 	bl	8001aa0 <lcd_print_convert>
			lcd_print_convert(7, 106, 0x10);
 8002f2a:	2210      	movs	r2, #16
 8002f2c:	216a      	movs	r1, #106	@ 0x6a
 8002f2e:	2007      	movs	r0, #7
 8002f30:	f7fe fdb6 	bl	8001aa0 <lcd_print_convert>
			lcd_print_convert(7, 107, 0x10);
 8002f34:	2210      	movs	r2, #16
 8002f36:	216b      	movs	r1, #107	@ 0x6b
 8002f38:	2007      	movs	r0, #7
 8002f3a:	f7fe fdb1 	bl	8001aa0 <lcd_print_convert>
			lcd_print_convert(7, 108, 0x10);
 8002f3e:	2210      	movs	r2, #16
 8002f40:	216c      	movs	r1, #108	@ 0x6c
 8002f42:	2007      	movs	r0, #7
 8002f44:	f7fe fdac 	bl	8001aa0 <lcd_print_convert>
		}
		lcd_print_digit_wos(7, 110, (Reserved_SOC/100));
 8002f48:	4b1e      	ldr	r3, [pc, #120]	@ (8002fc4 <battery_soc+0x174>)
 8002f4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f4e:	4a1f      	ldr	r2, [pc, #124]	@ (8002fcc <battery_soc+0x17c>)
 8002f50:	fb82 1203 	smull	r1, r2, r2, r3
 8002f54:	1152      	asrs	r2, r2, #5
 8002f56:	17db      	asrs	r3, r3, #31
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	b21b      	sxth	r3, r3
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	216e      	movs	r1, #110	@ 0x6e
 8002f60:	2007      	movs	r0, #7
 8002f62:	f7fe fc91 	bl	8001888 <lcd_print_digit_wos>
		lcd_print_digit_wos(7, 116, (Reserved_SOC/10)%10);
 8002f66:	4b17      	ldr	r3, [pc, #92]	@ (8002fc4 <battery_soc+0x174>)
 8002f68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f6c:	4a18      	ldr	r2, [pc, #96]	@ (8002fd0 <battery_soc+0x180>)
 8002f6e:	fb82 1203 	smull	r1, r2, r2, r3
 8002f72:	1092      	asrs	r2, r2, #2
 8002f74:	17db      	asrs	r3, r3, #31
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	b21a      	sxth	r2, r3
 8002f7a:	4b15      	ldr	r3, [pc, #84]	@ (8002fd0 <battery_soc+0x180>)
 8002f7c:	fb83 1302 	smull	r1, r3, r3, r2
 8002f80:	1099      	asrs	r1, r3, #2
 8002f82:	17d3      	asrs	r3, r2, #31
 8002f84:	1ac9      	subs	r1, r1, r3
 8002f86:	460b      	mov	r3, r1
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	440b      	add	r3, r1
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	b21b      	sxth	r3, r3
 8002f92:	461a      	mov	r2, r3
 8002f94:	2174      	movs	r1, #116	@ 0x74
 8002f96:	2007      	movs	r0, #7
 8002f98:	f7fe fc76 	bl	8001888 <lcd_print_digit_wos>
		lcd_print_char(7, 122, "%");
 8002f9c:	4a0a      	ldr	r2, [pc, #40]	@ (8002fc8 <battery_soc+0x178>)
 8002f9e:	217a      	movs	r1, #122	@ 0x7a
 8002fa0:	2007      	movs	r0, #7
 8002fa2:	f7fe fb71 	bl	8001688 <lcd_print_char>
	}
	battery_bar_soc();
 8002fa6:	f000 fac1 	bl	800352c <battery_bar_soc>
}
 8002faa:	bf00      	nop
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	d2d2d2d3 	.word	0xd2d2d2d3
 8002fb4:	3ff2d2d2 	.word	0x3ff2d2d2
 8002fb8:	2000141c 	.word	0x2000141c
 8002fbc:	20001959 	.word	0x20001959
 8002fc0:	408f4000 	.word	0x408f4000
 8002fc4:	200018da 	.word	0x200018da
 8002fc8:	08008468 	.word	0x08008468
 8002fcc:	51eb851f 	.word	0x51eb851f
 8002fd0:	66666667 	.word	0x66666667
 8002fd4:	00000000 	.word	0x00000000

08002fd8 <Gear_Status>:
uint8_t start_inc=0;uint8_t Reverse_status=0;uint16_t DTE=0;
void Gear_Status()
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0

	if(HAL_GPIO_ReadPin(GPIOB, Reverse_state_Pin)==1)
 8002fdc:	2110      	movs	r1, #16
 8002fde:	4882      	ldr	r0, [pc, #520]	@ (80031e8 <Gear_Status+0x210>)
 8002fe0:	f003 f880 	bl	80060e4 <HAL_GPIO_ReadPin>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d106      	bne.n	8002ff8 <Gear_Status+0x20>
		{
			gear_status_print(0); // REVERSE
 8002fea:	2000      	movs	r0, #0
 8002fec:	f7fe fa64 	bl	80014b8 <gear_status_print>
			Reverse_status=1;
 8002ff0:	4b7e      	ldr	r3, [pc, #504]	@ (80031ec <Gear_Status+0x214>)
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	701a      	strb	r2, [r3, #0]
 8002ff6:	e0e7      	b.n	80031c8 <Gear_Status+0x1f0>
		}
	else
		{
			Reverse_status=0;
 8002ff8:	4b7c      	ldr	r3, [pc, #496]	@ (80031ec <Gear_Status+0x214>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	701a      	strb	r2, [r3, #0]
			if(Motor_Data.Device_Code==8)
 8002ffe:	4b7c      	ldr	r3, [pc, #496]	@ (80031f0 <Gear_Status+0x218>)
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	2b08      	cmp	r3, #8
 8003004:	d16d      	bne.n	80030e2 <Gear_Status+0x10a>
			{
				gear_status_print(Motor_Data.Three_speed);
 8003006:	4b7a      	ldr	r3, [pc, #488]	@ (80031f0 <Gear_Status+0x218>)
 8003008:	791b      	ldrb	r3, [r3, #4]
 800300a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800300e:	b2db      	uxtb	r3, r3
 8003010:	4618      	mov	r0, r3
 8003012:	f7fe fa51 	bl	80014b8 <gear_status_print>

				if(Motor_Data.Three_speed==1)
 8003016:	4b76      	ldr	r3, [pc, #472]	@ (80031f0 <Gear_Status+0x218>)
 8003018:	791b      	ldrb	r3, [r3, #4]
 800301a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b40      	cmp	r3, #64	@ 0x40
 8003022:	d11d      	bne.n	8003060 <Gear_Status+0x88>
				{
					DTE=(Reserved_SOC*1.4)/10.0;
 8003024:	4b73      	ldr	r3, [pc, #460]	@ (80031f4 <Gear_Status+0x21c>)
 8003026:	f9b3 3000 	ldrsh.w	r3, [r3]
 800302a:	4618      	mov	r0, r3
 800302c:	f7fd f9e2 	bl	80003f4 <__aeabi_i2d>
 8003030:	a36b      	add	r3, pc, #428	@ (adr r3, 80031e0 <Gear_Status+0x208>)
 8003032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003036:	f7fd fa47 	bl	80004c8 <__aeabi_dmul>
 800303a:	4602      	mov	r2, r0
 800303c:	460b      	mov	r3, r1
 800303e:	4610      	mov	r0, r2
 8003040:	4619      	mov	r1, r3
 8003042:	f04f 0200 	mov.w	r2, #0
 8003046:	4b6c      	ldr	r3, [pc, #432]	@ (80031f8 <Gear_Status+0x220>)
 8003048:	f7fd fb68 	bl	800071c <__aeabi_ddiv>
 800304c:	4602      	mov	r2, r0
 800304e:	460b      	mov	r3, r1
 8003050:	4610      	mov	r0, r2
 8003052:	4619      	mov	r1, r3
 8003054:	f7fd fc72 	bl	800093c <__aeabi_d2uiz>
 8003058:	4603      	mov	r3, r0
 800305a:	b29a      	uxth	r2, r3
 800305c:	4b67      	ldr	r3, [pc, #412]	@ (80031fc <Gear_Status+0x224>)
 800305e:	801a      	strh	r2, [r3, #0]
				}
				if(Motor_Data.Three_speed==2)
 8003060:	4b63      	ldr	r3, [pc, #396]	@ (80031f0 <Gear_Status+0x218>)
 8003062:	791b      	ldrb	r3, [r3, #4]
 8003064:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b80      	cmp	r3, #128	@ 0x80
 800306c:	d11d      	bne.n	80030aa <Gear_Status+0xd2>
				{
					DTE=(Reserved_SOC*1.2)/10.0;
 800306e:	4b61      	ldr	r3, [pc, #388]	@ (80031f4 <Gear_Status+0x21c>)
 8003070:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003074:	4618      	mov	r0, r3
 8003076:	f7fd f9bd 	bl	80003f4 <__aeabi_i2d>
 800307a:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 800307e:	4b60      	ldr	r3, [pc, #384]	@ (8003200 <Gear_Status+0x228>)
 8003080:	f7fd fa22 	bl	80004c8 <__aeabi_dmul>
 8003084:	4602      	mov	r2, r0
 8003086:	460b      	mov	r3, r1
 8003088:	4610      	mov	r0, r2
 800308a:	4619      	mov	r1, r3
 800308c:	f04f 0200 	mov.w	r2, #0
 8003090:	4b59      	ldr	r3, [pc, #356]	@ (80031f8 <Gear_Status+0x220>)
 8003092:	f7fd fb43 	bl	800071c <__aeabi_ddiv>
 8003096:	4602      	mov	r2, r0
 8003098:	460b      	mov	r3, r1
 800309a:	4610      	mov	r0, r2
 800309c:	4619      	mov	r1, r3
 800309e:	f7fd fc4d 	bl	800093c <__aeabi_d2uiz>
 80030a2:	4603      	mov	r3, r0
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	4b55      	ldr	r3, [pc, #340]	@ (80031fc <Gear_Status+0x224>)
 80030a8:	801a      	strh	r2, [r3, #0]
				}
				if(Motor_Data.Three_speed==3)
 80030aa:	4b51      	ldr	r3, [pc, #324]	@ (80031f0 <Gear_Status+0x218>)
 80030ac:	791b      	ldrb	r3, [r3, #4]
 80030ae:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2bc0      	cmp	r3, #192	@ 0xc0
 80030b6:	d114      	bne.n	80030e2 <Gear_Status+0x10a>
				{
					DTE=(Reserved_SOC*1)/10.0;
 80030b8:	4b4e      	ldr	r3, [pc, #312]	@ (80031f4 <Gear_Status+0x21c>)
 80030ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030be:	4618      	mov	r0, r3
 80030c0:	f7fd f998 	bl	80003f4 <__aeabi_i2d>
 80030c4:	f04f 0200 	mov.w	r2, #0
 80030c8:	4b4b      	ldr	r3, [pc, #300]	@ (80031f8 <Gear_Status+0x220>)
 80030ca:	f7fd fb27 	bl	800071c <__aeabi_ddiv>
 80030ce:	4602      	mov	r2, r0
 80030d0:	460b      	mov	r3, r1
 80030d2:	4610      	mov	r0, r2
 80030d4:	4619      	mov	r1, r3
 80030d6:	f7fd fc31 	bl	800093c <__aeabi_d2uiz>
 80030da:	4603      	mov	r3, r0
 80030dc:	b29a      	uxth	r2, r3
 80030de:	4b47      	ldr	r3, [pc, #284]	@ (80031fc <Gear_Status+0x224>)
 80030e0:	801a      	strh	r2, [r3, #0]
				}
			}

			if(Motor_Data.Device_Code==13)
 80030e2:	4b43      	ldr	r3, [pc, #268]	@ (80031f0 <Gear_Status+0x218>)
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	2b0d      	cmp	r3, #13
 80030e8:	d16e      	bne.n	80031c8 <Gear_Status+0x1f0>
			{
				if(Motor_Data.Three_speed==3)
 80030ea:	4b41      	ldr	r3, [pc, #260]	@ (80031f0 <Gear_Status+0x218>)
 80030ec:	791b      	ldrb	r3, [r3, #4]
 80030ee:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2bc0      	cmp	r3, #192	@ 0xc0
 80030f6:	d120      	bne.n	800313a <Gear_Status+0x162>
				{
					gear_status_print(1);
 80030f8:	2001      	movs	r0, #1
 80030fa:	f7fe f9dd 	bl	80014b8 <gear_status_print>
					DTE=(Reserved_SOC*1.4)/10.0;
 80030fe:	4b3d      	ldr	r3, [pc, #244]	@ (80031f4 <Gear_Status+0x21c>)
 8003100:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003104:	4618      	mov	r0, r3
 8003106:	f7fd f975 	bl	80003f4 <__aeabi_i2d>
 800310a:	a335      	add	r3, pc, #212	@ (adr r3, 80031e0 <Gear_Status+0x208>)
 800310c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003110:	f7fd f9da 	bl	80004c8 <__aeabi_dmul>
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	4610      	mov	r0, r2
 800311a:	4619      	mov	r1, r3
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	4b35      	ldr	r3, [pc, #212]	@ (80031f8 <Gear_Status+0x220>)
 8003122:	f7fd fafb 	bl	800071c <__aeabi_ddiv>
 8003126:	4602      	mov	r2, r0
 8003128:	460b      	mov	r3, r1
 800312a:	4610      	mov	r0, r2
 800312c:	4619      	mov	r1, r3
 800312e:	f7fd fc05 	bl	800093c <__aeabi_d2uiz>
 8003132:	4603      	mov	r3, r0
 8003134:	b29a      	uxth	r2, r3
 8003136:	4b31      	ldr	r3, [pc, #196]	@ (80031fc <Gear_Status+0x224>)
 8003138:	801a      	strh	r2, [r3, #0]
				}
				if(Motor_Data.Three_speed==0)
 800313a:	4b2d      	ldr	r3, [pc, #180]	@ (80031f0 <Gear_Status+0x218>)
 800313c:	791b      	ldrb	r3, [r3, #4]
 800313e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003142:	b2db      	uxtb	r3, r3
 8003144:	2b00      	cmp	r3, #0
 8003146:	d120      	bne.n	800318a <Gear_Status+0x1b2>
				{
					gear_status_print(2);
 8003148:	2002      	movs	r0, #2
 800314a:	f7fe f9b5 	bl	80014b8 <gear_status_print>
					DTE=(Reserved_SOC*1.2)/10.0;
 800314e:	4b29      	ldr	r3, [pc, #164]	@ (80031f4 <Gear_Status+0x21c>)
 8003150:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003154:	4618      	mov	r0, r3
 8003156:	f7fd f94d 	bl	80003f4 <__aeabi_i2d>
 800315a:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 800315e:	4b28      	ldr	r3, [pc, #160]	@ (8003200 <Gear_Status+0x228>)
 8003160:	f7fd f9b2 	bl	80004c8 <__aeabi_dmul>
 8003164:	4602      	mov	r2, r0
 8003166:	460b      	mov	r3, r1
 8003168:	4610      	mov	r0, r2
 800316a:	4619      	mov	r1, r3
 800316c:	f04f 0200 	mov.w	r2, #0
 8003170:	4b21      	ldr	r3, [pc, #132]	@ (80031f8 <Gear_Status+0x220>)
 8003172:	f7fd fad3 	bl	800071c <__aeabi_ddiv>
 8003176:	4602      	mov	r2, r0
 8003178:	460b      	mov	r3, r1
 800317a:	4610      	mov	r0, r2
 800317c:	4619      	mov	r1, r3
 800317e:	f7fd fbdd 	bl	800093c <__aeabi_d2uiz>
 8003182:	4603      	mov	r3, r0
 8003184:	b29a      	uxth	r2, r3
 8003186:	4b1d      	ldr	r3, [pc, #116]	@ (80031fc <Gear_Status+0x224>)
 8003188:	801a      	strh	r2, [r3, #0]
				}
				if(Motor_Data.Three_speed==1)
 800318a:	4b19      	ldr	r3, [pc, #100]	@ (80031f0 <Gear_Status+0x218>)
 800318c:	791b      	ldrb	r3, [r3, #4]
 800318e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2b40      	cmp	r3, #64	@ 0x40
 8003196:	d117      	bne.n	80031c8 <Gear_Status+0x1f0>
				{
					gear_status_print(3);
 8003198:	2003      	movs	r0, #3
 800319a:	f7fe f98d 	bl	80014b8 <gear_status_print>
					DTE=(Reserved_SOC*1)/10.0;
 800319e:	4b15      	ldr	r3, [pc, #84]	@ (80031f4 <Gear_Status+0x21c>)
 80031a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7fd f925 	bl	80003f4 <__aeabi_i2d>
 80031aa:	f04f 0200 	mov.w	r2, #0
 80031ae:	4b12      	ldr	r3, [pc, #72]	@ (80031f8 <Gear_Status+0x220>)
 80031b0:	f7fd fab4 	bl	800071c <__aeabi_ddiv>
 80031b4:	4602      	mov	r2, r0
 80031b6:	460b      	mov	r3, r1
 80031b8:	4610      	mov	r0, r2
 80031ba:	4619      	mov	r1, r3
 80031bc:	f7fd fbbe 	bl	800093c <__aeabi_d2uiz>
 80031c0:	4603      	mov	r3, r0
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	4b0d      	ldr	r3, [pc, #52]	@ (80031fc <Gear_Status+0x224>)
 80031c6:	801a      	strh	r2, [r3, #0]
//						Gear_State=1;
//						DTE=(Reserved_SOC*1.4)/10.0;
//					}

		}
	if(BMS.SOC<150)
 80031c8:	4b0e      	ldr	r3, [pc, #56]	@ (8003204 <Gear_Status+0x22c>)
 80031ca:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80031ce:	2b95      	cmp	r3, #149	@ 0x95
 80031d0:	dc02      	bgt.n	80031d8 <Gear_Status+0x200>
	{
		DTE=0;
 80031d2:	4b0a      	ldr	r3, [pc, #40]	@ (80031fc <Gear_Status+0x224>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	801a      	strh	r2, [r3, #0]
	}
}
 80031d8:	bf00      	nop
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	f3af 8000 	nop.w
 80031e0:	66666666 	.word	0x66666666
 80031e4:	3ff66666 	.word	0x3ff66666
 80031e8:	40010c00 	.word	0x40010c00
 80031ec:	2000195a 	.word	0x2000195a
 80031f0:	20001900 	.word	0x20001900
 80031f4:	200018da 	.word	0x200018da
 80031f8:	40240000 	.word	0x40240000
 80031fc:	2000195c 	.word	0x2000195c
 8003200:	3ff33333 	.word	0x3ff33333
 8003204:	2000141c 	.word	0x2000141c

08003208 <EEPROM_init>:

void EEPROM_init()
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
	I2C_Write_EEPROM(0, 0x00);
 800320e:	2100      	movs	r1, #0
 8003210:	2000      	movs	r0, #0
 8003212:	f7ff fbd7 	bl	80029c4 <I2C_Write_EEPROM>
  Range.Ref=I2C_Read_EEPROM(ODO_ADDRESS_Ref);
 8003216:	20c0      	movs	r0, #192	@ 0xc0
 8003218:	f7ff fbea 	bl	80029f0 <I2C_Read_EEPROM>
 800321c:	4603      	mov	r3, r0
 800321e:	461a      	mov	r2, r3
 8003220:	4b77      	ldr	r3, [pc, #476]	@ (8003400 <EEPROM_init+0x1f8>)
 8003222:	609a      	str	r2, [r3, #8]
	 if(Range.Ref!=1234)
 8003224:	4b76      	ldr	r3, [pc, #472]	@ (8003400 <EEPROM_init+0x1f8>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f240 42d2 	movw	r2, #1234	@ 0x4d2
 800322c:	4293      	cmp	r3, r2
 800322e:	d025      	beq.n	800327c <EEPROM_init+0x74>
	 {
		 I2C_Write_EEPROM(7000, gear_ratio_EEPROM);
 8003230:	21e0      	movs	r1, #224	@ 0xe0
 8003232:	f641 3058 	movw	r0, #7000	@ 0x1b58
 8003236:	f7ff fbc5 	bl	80029c4 <I2C_Write_EEPROM>
		 I2C_Write_EEPROM(1, speed_sensor_type_EEPROM);
 800323a:	21b0      	movs	r1, #176	@ 0xb0
 800323c:	2001      	movs	r0, #1
 800323e:	f7ff fbc1 	bl	80029c4 <I2C_Write_EEPROM>
		 I2C_Write_EEPROM(1234, ODO_ADDRESS_Ref);
 8003242:	21c0      	movs	r1, #192	@ 0xc0
 8003244:	f240 40d2 	movw	r0, #1234	@ 0x4d2
 8003248:	f7ff fbbc 	bl	80029c4 <I2C_Write_EEPROM>
		 I2C_Write_EEPROM(0, last_flash_update_EEPROM);
 800324c:	21d0      	movs	r1, #208	@ 0xd0
 800324e:	2000      	movs	r0, #0
 8003250:	f7ff fbb8 	bl	80029c4 <I2C_Write_EEPROM>
		 for(uint8_t inf=0;inf<=9;inf++)  //Read data from EEPROM
 8003254:	2300      	movs	r3, #0
 8003256:	73fb      	strb	r3, [r7, #15]
 8003258:	e009      	b.n	800326e <EEPROM_init+0x66>
		 {
			I2C_Write_EEPROM(0,EEPROM_ADDRESS[inf]);
 800325a:	7bfb      	ldrb	r3, [r7, #15]
 800325c:	4a69      	ldr	r2, [pc, #420]	@ (8003404 <EEPROM_init+0x1fc>)
 800325e:	5cd3      	ldrb	r3, [r2, r3]
 8003260:	4619      	mov	r1, r3
 8003262:	2000      	movs	r0, #0
 8003264:	f7ff fbae 	bl	80029c4 <I2C_Write_EEPROM>
		 for(uint8_t inf=0;inf<=9;inf++)  //Read data from EEPROM
 8003268:	7bfb      	ldrb	r3, [r7, #15]
 800326a:	3301      	adds	r3, #1
 800326c:	73fb      	strb	r3, [r7, #15]
 800326e:	7bfb      	ldrb	r3, [r7, #15]
 8003270:	2b09      	cmp	r3, #9
 8003272:	d9f2      	bls.n	800325a <EEPROM_init+0x52>
		 }
		 HAL_Delay(50);
 8003274:	2032      	movs	r0, #50	@ 0x32
 8003276:	f001 fe25 	bl	8004ec4 <HAL_Delay>
 800327a:	e0b9      	b.n	80033f0 <EEPROM_init+0x1e8>
	 }
	 else
	 {
		 last_flash_update=I2C_Read_EEPROM(last_flash_update_EEPROM); // read last flash write data
 800327c:	20d0      	movs	r0, #208	@ 0xd0
 800327e:	f7ff fbb7 	bl	80029f0 <I2C_Read_EEPROM>
 8003282:	4603      	mov	r3, r0
 8003284:	461a      	mov	r2, r3
 8003286:	4b60      	ldr	r3, [pc, #384]	@ (8003408 <EEPROM_init+0x200>)
 8003288:	601a      	str	r2, [r3, #0]
		 OBD.speed_sensor_type=I2C_Read_EEPROM(speed_sensor_type_EEPROM);
 800328a:	20b0      	movs	r0, #176	@ 0xb0
 800328c:	f7ff fbb0 	bl	80029f0 <I2C_Read_EEPROM>
 8003290:	4603      	mov	r3, r0
 8003292:	b2da      	uxtb	r2, r3
 8003294:	4b5d      	ldr	r3, [pc, #372]	@ (800340c <EEPROM_init+0x204>)
 8003296:	711a      	strb	r2, [r3, #4]
		 OBD.Gear_ratio=(float)((I2C_Read_EEPROM(gear_ratio_EEPROM))/1000.0);
 8003298:	20e0      	movs	r0, #224	@ 0xe0
 800329a:	f7ff fba9 	bl	80029f0 <I2C_Read_EEPROM>
 800329e:	4603      	mov	r3, r0
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7fd f8a7 	bl	80003f4 <__aeabi_i2d>
 80032a6:	f04f 0200 	mov.w	r2, #0
 80032aa:	4b59      	ldr	r3, [pc, #356]	@ (8003410 <EEPROM_init+0x208>)
 80032ac:	f7fd fa36 	bl	800071c <__aeabi_ddiv>
 80032b0:	4602      	mov	r2, r0
 80032b2:	460b      	mov	r3, r1
 80032b4:	4610      	mov	r0, r2
 80032b6:	4619      	mov	r1, r3
 80032b8:	f7fd fb60 	bl	800097c <__aeabi_d2f>
 80032bc:	4603      	mov	r3, r0
 80032be:	4a53      	ldr	r2, [pc, #332]	@ (800340c <EEPROM_init+0x204>)
 80032c0:	6013      	str	r3, [r2, #0]

		 for(uint8_t inf=0;inf<=9;inf++)  //Read data from EEPROM
 80032c2:	2300      	movs	r3, #0
 80032c4:	73bb      	strb	r3, [r7, #14]
 80032c6:	e015      	b.n	80032f4 <EEPROM_init+0xec>
		 {
			Odo_Value_1[inf]=Odo_Value[inf]=I2C_Read_EEPROM(EEPROM_ADDRESS[inf]);
 80032c8:	7bbb      	ldrb	r3, [r7, #14]
 80032ca:	4a4e      	ldr	r2, [pc, #312]	@ (8003404 <EEPROM_init+0x1fc>)
 80032cc:	5cd3      	ldrb	r3, [r2, r3]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7ff fb8e 	bl	80029f0 <I2C_Read_EEPROM>
 80032d4:	4602      	mov	r2, r0
 80032d6:	7bbb      	ldrb	r3, [r7, #14]
 80032d8:	4611      	mov	r1, r2
 80032da:	4a4e      	ldr	r2, [pc, #312]	@ (8003414 <EEPROM_init+0x20c>)
 80032dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80032e0:	7bba      	ldrb	r2, [r7, #14]
 80032e2:	494c      	ldr	r1, [pc, #304]	@ (8003414 <EEPROM_init+0x20c>)
 80032e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80032e8:	494b      	ldr	r1, [pc, #300]	@ (8003418 <EEPROM_init+0x210>)
 80032ea:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		 for(uint8_t inf=0;inf<=9;inf++)  //Read data from EEPROM
 80032ee:	7bbb      	ldrb	r3, [r7, #14]
 80032f0:	3301      	adds	r3, #1
 80032f2:	73bb      	strb	r3, [r7, #14]
 80032f4:	7bbb      	ldrb	r3, [r7, #14]
 80032f6:	2b09      	cmp	r3, #9
 80032f8:	d9e6      	bls.n	80032c8 <EEPROM_init+0xc0>
		 }

		 for (uint8_t i = 1; i < 10; i++)
 80032fa:	2301      	movs	r3, #1
 80032fc:	737b      	strb	r3, [r7, #13]
 80032fe:	e011      	b.n	8003324 <EEPROM_init+0x11c>
		 {
			if (Odo_Value[i] < Odo_Value[ADR_LOC])
 8003300:	7b7b      	ldrb	r3, [r7, #13]
 8003302:	4a44      	ldr	r2, [pc, #272]	@ (8003414 <EEPROM_init+0x20c>)
 8003304:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003308:	4b44      	ldr	r3, [pc, #272]	@ (800341c <EEPROM_init+0x214>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	4619      	mov	r1, r3
 800330e:	4b41      	ldr	r3, [pc, #260]	@ (8003414 <EEPROM_init+0x20c>)
 8003310:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003314:	429a      	cmp	r2, r3
 8003316:	d202      	bcs.n	800331e <EEPROM_init+0x116>
			{
				ADR_LOC= i;
 8003318:	4a40      	ldr	r2, [pc, #256]	@ (800341c <EEPROM_init+0x214>)
 800331a:	7b7b      	ldrb	r3, [r7, #13]
 800331c:	7013      	strb	r3, [r2, #0]
		 for (uint8_t i = 1; i < 10; i++)
 800331e:	7b7b      	ldrb	r3, [r7, #13]
 8003320:	3301      	adds	r3, #1
 8003322:	737b      	strb	r3, [r7, #13]
 8003324:	7b7b      	ldrb	r3, [r7, #13]
 8003326:	2b09      	cmp	r3, #9
 8003328:	d9ea      	bls.n	8003300 <EEPROM_init+0xf8>
			}
		 }

		uint32_t temp=0;
 800332a:	2300      	movs	r3, #0
 800332c:	607b      	str	r3, [r7, #4]
		 for (uint8_t i = 0; i < 10; i++)
 800332e:	2300      	movs	r3, #0
 8003330:	733b      	strb	r3, [r7, #12]
 8003332:	e02d      	b.n	8003390 <EEPROM_init+0x188>
		 {
			 for (uint8_t j = 0; j < 9-i; j++)
 8003334:	2300      	movs	r3, #0
 8003336:	72fb      	strb	r3, [r7, #11]
 8003338:	e021      	b.n	800337e <EEPROM_init+0x176>
			 {
				 if (Odo_Value[j] > Odo_Value[j+1])
 800333a:	7afb      	ldrb	r3, [r7, #11]
 800333c:	4a35      	ldr	r2, [pc, #212]	@ (8003414 <EEPROM_init+0x20c>)
 800333e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003342:	7afb      	ldrb	r3, [r7, #11]
 8003344:	3301      	adds	r3, #1
 8003346:	4933      	ldr	r1, [pc, #204]	@ (8003414 <EEPROM_init+0x20c>)
 8003348:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800334c:	429a      	cmp	r2, r3
 800334e:	d913      	bls.n	8003378 <EEPROM_init+0x170>
				 {
					 // Swap arr[j] and arr[j+1]
					 temp = Odo_Value[j];
 8003350:	7afb      	ldrb	r3, [r7, #11]
 8003352:	4a30      	ldr	r2, [pc, #192]	@ (8003414 <EEPROM_init+0x20c>)
 8003354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003358:	607b      	str	r3, [r7, #4]
					 Odo_Value[j] = Odo_Value[j+1];
 800335a:	7afb      	ldrb	r3, [r7, #11]
 800335c:	1c5a      	adds	r2, r3, #1
 800335e:	7afb      	ldrb	r3, [r7, #11]
 8003360:	492c      	ldr	r1, [pc, #176]	@ (8003414 <EEPROM_init+0x20c>)
 8003362:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003366:	492b      	ldr	r1, [pc, #172]	@ (8003414 <EEPROM_init+0x20c>)
 8003368:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					 Odo_Value[j+1] = temp;
 800336c:	7afb      	ldrb	r3, [r7, #11]
 800336e:	3301      	adds	r3, #1
 8003370:	4928      	ldr	r1, [pc, #160]	@ (8003414 <EEPROM_init+0x20c>)
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			 for (uint8_t j = 0; j < 9-i; j++)
 8003378:	7afb      	ldrb	r3, [r7, #11]
 800337a:	3301      	adds	r3, #1
 800337c:	72fb      	strb	r3, [r7, #11]
 800337e:	7afa      	ldrb	r2, [r7, #11]
 8003380:	7b3b      	ldrb	r3, [r7, #12]
 8003382:	f1c3 0309 	rsb	r3, r3, #9
 8003386:	429a      	cmp	r2, r3
 8003388:	dbd7      	blt.n	800333a <EEPROM_init+0x132>
		 for (uint8_t i = 0; i < 10; i++)
 800338a:	7b3b      	ldrb	r3, [r7, #12]
 800338c:	3301      	adds	r3, #1
 800338e:	733b      	strb	r3, [r7, #12]
 8003390:	7b3b      	ldrb	r3, [r7, #12]
 8003392:	2b09      	cmp	r3, #9
 8003394:	d9ce      	bls.n	8003334 <EEPROM_init+0x12c>
				 }
			 }
		 }
		 uint8_t check_temp=0;
 8003396:	2300      	movs	r3, #0
 8003398:	72bb      	strb	r3, [r7, #10]
		for(uint8_t i=0;i<=9;i++)
 800339a:	2300      	movs	r3, #0
 800339c:	727b      	strb	r3, [r7, #9]
 800339e:	e01d      	b.n	80033dc <EEPROM_init+0x1d4>
		{
			if((last_flash_update<=Odo_Value[i])&&((last_flash_update+1000)>=Odo_Value[i]))
 80033a0:	7a7b      	ldrb	r3, [r7, #9]
 80033a2:	4a1c      	ldr	r2, [pc, #112]	@ (8003414 <EEPROM_init+0x20c>)
 80033a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80033a8:	4b17      	ldr	r3, [pc, #92]	@ (8003408 <EEPROM_init+0x200>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d312      	bcc.n	80033d6 <EEPROM_init+0x1ce>
 80033b0:	4b15      	ldr	r3, [pc, #84]	@ (8003408 <EEPROM_init+0x200>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f503 727a 	add.w	r2, r3, #1000	@ 0x3e8
 80033b8:	7a7b      	ldrb	r3, [r7, #9]
 80033ba:	4916      	ldr	r1, [pc, #88]	@ (8003414 <EEPROM_init+0x20c>)
 80033bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d308      	bcc.n	80033d6 <EEPROM_init+0x1ce>
			{
				Range.Odometer_Value=Odo_Value[i];
 80033c4:	7a7b      	ldrb	r3, [r7, #9]
 80033c6:	4a13      	ldr	r2, [pc, #76]	@ (8003414 <EEPROM_init+0x20c>)
 80033c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033cc:	4a0c      	ldr	r2, [pc, #48]	@ (8003400 <EEPROM_init+0x1f8>)
 80033ce:	6013      	str	r3, [r2, #0]
				check_temp++;
 80033d0:	7abb      	ldrb	r3, [r7, #10]
 80033d2:	3301      	adds	r3, #1
 80033d4:	72bb      	strb	r3, [r7, #10]
		for(uint8_t i=0;i<=9;i++)
 80033d6:	7a7b      	ldrb	r3, [r7, #9]
 80033d8:	3301      	adds	r3, #1
 80033da:	727b      	strb	r3, [r7, #9]
 80033dc:	7a7b      	ldrb	r3, [r7, #9]
 80033de:	2b09      	cmp	r3, #9
 80033e0:	d9de      	bls.n	80033a0 <EEPROM_init+0x198>
			}
		}

		if(check_temp==0)
 80033e2:	7abb      	ldrb	r3, [r7, #10]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d103      	bne.n	80033f0 <EEPROM_init+0x1e8>
		{
			Range.Odometer_Value=last_flash_update;
 80033e8:	4b07      	ldr	r3, [pc, #28]	@ (8003408 <EEPROM_init+0x200>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a04      	ldr	r2, [pc, #16]	@ (8003400 <EEPROM_init+0x1f8>)
 80033ee:	6013      	str	r3, [r2, #0]
		}
	 }
	 first_time=3;
 80033f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003420 <EEPROM_init+0x218>)
 80033f2:	2203      	movs	r2, #3
 80033f4:	701a      	strb	r2, [r3, #0]
}
 80033f6:	bf00      	nop
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	20001910 	.word	0x20001910
 8003404:	200007a4 	.word	0x200007a4
 8003408:	200018f8 	.word	0x200018f8
 800340c:	20001460 	.word	0x20001460
 8003410:	408f4000 	.word	0x408f4000
 8003414:	20001888 	.word	0x20001888
 8003418:	200018b0 	.word	0x200018b0
 800341c:	2000191f 	.word	0x2000191f
 8003420:	2000079c 	.word	0x2000079c

08003424 <BMS_CAN>:



uint8_t can_error=0,can_error_state=0,error_count=0;
void BMS_CAN()//Transmitter function
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
	for(Tx_count=0; Tx_count<12; Tx_count++)
 8003428:	4b34      	ldr	r3, [pc, #208]	@ (80034fc <BMS_CAN+0xd8>)
 800342a:	2200      	movs	r2, #0
 800342c:	701a      	strb	r2, [r3, #0]
 800342e:	e029      	b.n	8003484 <BMS_CAN+0x60>
	  {
		TxHeader.ExtId = BMS_ID[Tx_count]; // Extended Identifier
 8003430:	4b32      	ldr	r3, [pc, #200]	@ (80034fc <BMS_CAN+0xd8>)
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	461a      	mov	r2, r3
 8003436:	4b32      	ldr	r3, [pc, #200]	@ (8003500 <BMS_CAN+0xdc>)
 8003438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800343c:	4a31      	ldr	r2, [pc, #196]	@ (8003504 <BMS_CAN+0xe0>)
 800343e:	6053      	str	r3, [r2, #4]
		TxHeader.IDE = CAN_ID_EXT; // Identifier Extension
 8003440:	4b30      	ldr	r3, [pc, #192]	@ (8003504 <BMS_CAN+0xe0>)
 8003442:	2204      	movs	r2, #4
 8003444:	609a      	str	r2, [r3, #8]
		TxHeader.RTR = CAN_RTR_DATA;// Remote Transmission Request bit, here send data frame
 8003446:	4b2f      	ldr	r3, [pc, #188]	@ (8003504 <BMS_CAN+0xe0>)
 8003448:	2200      	movs	r2, #0
 800344a:	60da      	str	r2, [r3, #12]
		TxHeader.DLC = 8;//Data length code
 800344c:	4b2d      	ldr	r3, [pc, #180]	@ (8003504 <BMS_CAN+0xe0>)
 800344e:	2208      	movs	r2, #8
 8003450:	611a      	str	r2, [r3, #16]
		Transmit_Data[Tx_count]=0x00;//Data
 8003452:	4b2a      	ldr	r3, [pc, #168]	@ (80034fc <BMS_CAN+0xd8>)
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	461a      	mov	r2, r3
 8003458:	4b2b      	ldr	r3, [pc, #172]	@ (8003508 <BMS_CAN+0xe4>)
 800345a:	2100      	movs	r1, #0
 800345c:	5499      	strb	r1, [r3, r2]

	   if(HAL_CAN_AddTxMessage(&hcan, &TxHeader, &Transmit_Data[Tx_count], &TxMailBox) != HAL_OK)//Adding data to the mailbox for transmitting
 800345e:	4b27      	ldr	r3, [pc, #156]	@ (80034fc <BMS_CAN+0xd8>)
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	461a      	mov	r2, r3
 8003464:	4b28      	ldr	r3, [pc, #160]	@ (8003508 <BMS_CAN+0xe4>)
 8003466:	441a      	add	r2, r3
 8003468:	4b28      	ldr	r3, [pc, #160]	@ (800350c <BMS_CAN+0xe8>)
 800346a:	4926      	ldr	r1, [pc, #152]	@ (8003504 <BMS_CAN+0xe0>)
 800346c:	4828      	ldr	r0, [pc, #160]	@ (8003510 <BMS_CAN+0xec>)
 800346e:	f001 ff55 	bl	800531c <HAL_CAN_AddTxMessage>
		  {
		   //Error_Handler();
		  }
	  HAL_Delay(50);
 8003472:	2032      	movs	r0, #50	@ 0x32
 8003474:	f001 fd26 	bl	8004ec4 <HAL_Delay>
	for(Tx_count=0; Tx_count<12; Tx_count++)
 8003478:	4b20      	ldr	r3, [pc, #128]	@ (80034fc <BMS_CAN+0xd8>)
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	3301      	adds	r3, #1
 800347e:	b2da      	uxtb	r2, r3
 8003480:	4b1e      	ldr	r3, [pc, #120]	@ (80034fc <BMS_CAN+0xd8>)
 8003482:	701a      	strb	r2, [r3, #0]
 8003484:	4b1d      	ldr	r3, [pc, #116]	@ (80034fc <BMS_CAN+0xd8>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	2b0b      	cmp	r3, #11
 800348a:	d9d1      	bls.n	8003430 <BMS_CAN+0xc>
	  }

		if(can_error_state==0) // Can Error finder
 800348c:	4b21      	ldr	r3, [pc, #132]	@ (8003514 <BMS_CAN+0xf0>)
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d111      	bne.n	80034b8 <BMS_CAN+0x94>
		{
			if(can_error)
 8003494:	4b20      	ldr	r3, [pc, #128]	@ (8003518 <BMS_CAN+0xf4>)
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d005      	beq.n	80034a8 <BMS_CAN+0x84>
			{
				error_count++;
 800349c:	4b1f      	ldr	r3, [pc, #124]	@ (800351c <BMS_CAN+0xf8>)
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	3301      	adds	r3, #1
 80034a2:	b2da      	uxtb	r2, r3
 80034a4:	4b1d      	ldr	r3, [pc, #116]	@ (800351c <BMS_CAN+0xf8>)
 80034a6:	701a      	strb	r2, [r3, #0]
			}
			if(error_count>=10)
 80034a8:	4b1c      	ldr	r3, [pc, #112]	@ (800351c <BMS_CAN+0xf8>)
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	2b09      	cmp	r3, #9
 80034ae:	d91c      	bls.n	80034ea <BMS_CAN+0xc6>
			{
				can_error_state=1;
 80034b0:	4b18      	ldr	r3, [pc, #96]	@ (8003514 <BMS_CAN+0xf0>)
 80034b2:	2201      	movs	r2, #1
 80034b4:	701a      	strb	r2, [r3, #0]
 80034b6:	e018      	b.n	80034ea <BMS_CAN+0xc6>
			}
		}
		else
		{
			lcd_print_char(3, 85, "Batt");
 80034b8:	4a19      	ldr	r2, [pc, #100]	@ (8003520 <BMS_CAN+0xfc>)
 80034ba:	2155      	movs	r1, #85	@ 0x55
 80034bc:	2003      	movs	r0, #3
 80034be:	f7fe f8e3 	bl	8001688 <lcd_print_char>
			lcd_print_char(3, 110, "Err");
 80034c2:	4a18      	ldr	r2, [pc, #96]	@ (8003524 <BMS_CAN+0x100>)
 80034c4:	216e      	movs	r1, #110	@ 0x6e
 80034c6:	2003      	movs	r0, #3
 80034c8:	f7fe f8de 	bl	8001688 <lcd_print_char>
			BMS.SOC=BMS.Max_Temp=BMS.Min_Temp=BMS.Cumulative_Total_Voltage=0;
 80034cc:	4b16      	ldr	r3, [pc, #88]	@ (8003528 <BMS_CAN+0x104>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	801a      	strh	r2, [r3, #0]
 80034d2:	4b15      	ldr	r3, [pc, #84]	@ (8003528 <BMS_CAN+0x104>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	75da      	strb	r2, [r3, #23]
 80034d8:	4b13      	ldr	r3, [pc, #76]	@ (8003528 <BMS_CAN+0x104>)
 80034da:	7dda      	ldrb	r2, [r3, #23]
 80034dc:	4b12      	ldr	r3, [pc, #72]	@ (8003528 <BMS_CAN+0x104>)
 80034de:	755a      	strb	r2, [r3, #21]
 80034e0:	4b11      	ldr	r3, [pc, #68]	@ (8003528 <BMS_CAN+0x104>)
 80034e2:	7d5b      	ldrb	r3, [r3, #21]
 80034e4:	b21a      	sxth	r2, r3
 80034e6:	4b10      	ldr	r3, [pc, #64]	@ (8003528 <BMS_CAN+0x104>)
 80034e8:	819a      	strh	r2, [r3, #12]
		}
		can_error=1;
 80034ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003518 <BMS_CAN+0xf4>)
 80034ec:	2201      	movs	r2, #1
 80034ee:	701a      	strb	r2, [r3, #0]
	Tx_count=0;
 80034f0:	4b02      	ldr	r3, [pc, #8]	@ (80034fc <BMS_CAN+0xd8>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	701a      	strb	r2, [r3, #0]
}
 80034f6:	bf00      	nop
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	20001864 	.word	0x20001864
 8003500:	200007b0 	.word	0x200007b0
 8003504:	20001924 	.word	0x20001924
 8003508:	20001868 	.word	0x20001868
 800350c:	20001874 	.word	0x20001874
 8003510:	20001468 	.word	0x20001468
 8003514:	2000195f 	.word	0x2000195f
 8003518:	2000195e 	.word	0x2000195e
 800351c:	20001960 	.word	0x20001960
 8003520:	0800846c 	.word	0x0800846c
 8003524:	08008474 	.word	0x08008474
 8003528:	2000141c 	.word	0x2000141c

0800352c <battery_bar_soc>:

uint8_t temp_bat=0;
void battery_bar_soc()
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0

	if((Reserved_SOC>=950)&&(Reserved_SOC<=1000))
 8003530:	4b3a      	ldr	r3, [pc, #232]	@ (800361c <battery_bar_soc+0xf0>)
 8003532:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003536:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800353a:	4293      	cmp	r3, r2
 800353c:	dd09      	ble.n	8003552 <battery_bar_soc+0x26>
 800353e:	4b37      	ldr	r3, [pc, #220]	@ (800361c <battery_bar_soc+0xf0>)
 8003540:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003544:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003548:	dc03      	bgt.n	8003552 <battery_bar_soc+0x26>
	{
		battery_bar_print(5);
 800354a:	2005      	movs	r0, #5
 800354c:	f7fe f80a 	bl	8001564 <battery_bar_print>
	{
 8003550:	e062      	b.n	8003618 <battery_bar_soc+0xec>
	}
	else if((Reserved_SOC>=800)&&(Reserved_SOC<=949))
 8003552:	4b32      	ldr	r3, [pc, #200]	@ (800361c <battery_bar_soc+0xf0>)
 8003554:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003558:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 800355c:	db0a      	blt.n	8003574 <battery_bar_soc+0x48>
 800355e:	4b2f      	ldr	r3, [pc, #188]	@ (800361c <battery_bar_soc+0xf0>)
 8003560:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003564:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8003568:	4293      	cmp	r3, r2
 800356a:	dc03      	bgt.n	8003574 <battery_bar_soc+0x48>
	{
		battery_bar_print(4);
 800356c:	2004      	movs	r0, #4
 800356e:	f7fd fff9 	bl	8001564 <battery_bar_print>
	{
 8003572:	e051      	b.n	8003618 <battery_bar_soc+0xec>
	}
	else if((Reserved_SOC>=600)&&(Reserved_SOC<=799))
 8003574:	4b29      	ldr	r3, [pc, #164]	@ (800361c <battery_bar_soc+0xf0>)
 8003576:	f9b3 3000 	ldrsh.w	r3, [r3]
 800357a:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 800357e:	db09      	blt.n	8003594 <battery_bar_soc+0x68>
 8003580:	4b26      	ldr	r3, [pc, #152]	@ (800361c <battery_bar_soc+0xf0>)
 8003582:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003586:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 800358a:	da03      	bge.n	8003594 <battery_bar_soc+0x68>
	{
		battery_bar_print(3);
 800358c:	2003      	movs	r0, #3
 800358e:	f7fd ffe9 	bl	8001564 <battery_bar_print>
	{
 8003592:	e041      	b.n	8003618 <battery_bar_soc+0xec>
	}
	else if((Reserved_SOC>=400)&&(Reserved_SOC<=599))
 8003594:	4b21      	ldr	r3, [pc, #132]	@ (800361c <battery_bar_soc+0xf0>)
 8003596:	f9b3 3000 	ldrsh.w	r3, [r3]
 800359a:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800359e:	db09      	blt.n	80035b4 <battery_bar_soc+0x88>
 80035a0:	4b1e      	ldr	r3, [pc, #120]	@ (800361c <battery_bar_soc+0xf0>)
 80035a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035a6:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 80035aa:	da03      	bge.n	80035b4 <battery_bar_soc+0x88>
	{
		battery_bar_print(2);
 80035ac:	2002      	movs	r0, #2
 80035ae:	f7fd ffd9 	bl	8001564 <battery_bar_print>
	{
 80035b2:	e031      	b.n	8003618 <battery_bar_soc+0xec>
	}
	else if((Reserved_SOC>=200)&&(Reserved_SOC<=399))
 80035b4:	4b19      	ldr	r3, [pc, #100]	@ (800361c <battery_bar_soc+0xf0>)
 80035b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035ba:	2bc7      	cmp	r3, #199	@ 0xc7
 80035bc:	dd09      	ble.n	80035d2 <battery_bar_soc+0xa6>
 80035be:	4b17      	ldr	r3, [pc, #92]	@ (800361c <battery_bar_soc+0xf0>)
 80035c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035c4:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80035c8:	da03      	bge.n	80035d2 <battery_bar_soc+0xa6>
	{
		battery_bar_print(1);
 80035ca:	2001      	movs	r0, #1
 80035cc:	f7fd ffca 	bl	8001564 <battery_bar_print>
	{
 80035d0:	e022      	b.n	8003618 <battery_bar_soc+0xec>
	}
	else if((Reserved_SOC>=0)&&(Reserved_SOC<=199))
 80035d2:	4b12      	ldr	r3, [pc, #72]	@ (800361c <battery_bar_soc+0xf0>)
 80035d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	db19      	blt.n	8003610 <battery_bar_soc+0xe4>
 80035dc:	4b0f      	ldr	r3, [pc, #60]	@ (800361c <battery_bar_soc+0xf0>)
 80035de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035e2:	2bc7      	cmp	r3, #199	@ 0xc7
 80035e4:	dc14      	bgt.n	8003610 <battery_bar_soc+0xe4>
	{
		bat_icon_toogle=!bat_icon_toogle;
 80035e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003620 <battery_bar_soc+0xf4>)
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	bf0c      	ite	eq
 80035ee:	2301      	moveq	r3, #1
 80035f0:	2300      	movne	r3, #0
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	461a      	mov	r2, r3
 80035f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003620 <battery_bar_soc+0xf4>)
 80035f8:	701a      	strb	r2, [r3, #0]

		if(bat_icon_toogle){
 80035fa:	4b09      	ldr	r3, [pc, #36]	@ (8003620 <battery_bar_soc+0xf4>)
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <battery_bar_soc+0xde>
			battery_bar_print(0);
 8003602:	2000      	movs	r0, #0
 8003604:	f7fd ffae 	bl	8001564 <battery_bar_print>
		if(bat_icon_toogle){
 8003608:	e006      	b.n	8003618 <battery_bar_soc+0xec>
		}
		else{

			line_print();
 800360a:	f7fe fa8b 	bl	8001b24 <line_print>
		if(bat_icon_toogle){
 800360e:	e003      	b.n	8003618 <battery_bar_soc+0xec>
		}
	}
	else
	{
		battery_bar_print(0);
 8003610:	2000      	movs	r0, #0
 8003612:	f7fd ffa7 	bl	8001564 <battery_bar_print>
	}
}
 8003616:	bf00      	nop
 8003618:	bf00      	nop
 800361a:	bd80      	pop	{r7, pc}
 800361c:	200018da 	.word	0x200018da
 8003620:	200018dd 	.word	0x200018dd

08003624 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)//Receiver Interrupt Function
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, Received_Data) == HAL_OK)//Receiving data through FIFO
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	4b5d      	ldr	r3, [pc, #372]	@ (80037a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 8003630:	4a5d      	ldr	r2, [pc, #372]	@ (80037a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 8003632:	2100      	movs	r1, #0
 8003634:	f001 ff41 	bl	80054ba <HAL_CAN_GetRxMessage>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	f040 80ae 	bne.w	800379c <HAL_CAN_RxFifo0MsgPendingCallback+0x178>
 	{
 		Rx_Id = RxHeader.ExtId;
 8003640:	4b59      	ldr	r3, [pc, #356]	@ (80037a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	4a59      	ldr	r2, [pc, #356]	@ (80037ac <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8003646:	6013      	str	r3, [r2, #0]
 		merge(Rx_Id);// Implementation of merging and splitting received BMS data
 8003648:	4b58      	ldr	r3, [pc, #352]	@ (80037ac <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4618      	mov	r0, r3
 800364e:	f7fe fa8d 	bl	8001b6c <merge>
 		can_error_state=0;
 8003652:	4b57      	ldr	r3, [pc, #348]	@ (80037b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8003654:	2200      	movs	r2, #0
 8003656:	701a      	strb	r2, [r3, #0]
 		can_error=0;
 8003658:	4b56      	ldr	r3, [pc, #344]	@ (80037b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 800365a:	2200      	movs	r2, #0
 800365c:	701a      	strb	r2, [r3, #0]
 		error_count=0;
 800365e:	4b56      	ldr	r3, [pc, #344]	@ (80037b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 8003660:	2200      	movs	r2, #0
 8003662:	701a      	strb	r2, [r3, #0]

 		if(Rx_Id==0x09021024)
 8003664:	4b51      	ldr	r3, [pc, #324]	@ (80037ac <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a54      	ldr	r2, [pc, #336]	@ (80037bc <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d147      	bne.n	80036fe <HAL_CAN_RxFifo0MsgPendingCallback+0xda>
		{
			TxHeader.ExtId =0x09022024; // Extended Identifier
 800366e:	4b54      	ldr	r3, [pc, #336]	@ (80037c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 8003670:	4a54      	ldr	r2, [pc, #336]	@ (80037c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8003672:	605a      	str	r2, [r3, #4]
			TxHeader.IDE = CAN_ID_EXT; // Identifier Extension
 8003674:	4b52      	ldr	r3, [pc, #328]	@ (80037c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 8003676:	2204      	movs	r2, #4
 8003678:	609a      	str	r2, [r3, #8]
			TxHeader.RTR = CAN_RTR_DATA;// Remote Transmission Request bit, here send data frame
 800367a:	4b51      	ldr	r3, [pc, #324]	@ (80037c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 800367c:	2200      	movs	r2, #0
 800367e:	60da      	str	r2, [r3, #12]
			TxHeader.DLC = 8;//Data length code
 8003680:	4b4f      	ldr	r3, [pc, #316]	@ (80037c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 8003682:	2208      	movs	r2, #8
 8003684:	611a      	str	r2, [r3, #16]
			Transmit_Data[0]=0x02;//Flio->1 Bheem->2
 8003686:	4b50      	ldr	r3, [pc, #320]	@ (80037c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8003688:	2202      	movs	r2, #2
 800368a:	701a      	strb	r2, [r3, #0]
			Transmit_Data[1]=((Range.Odometer_Value&0xff000000)>>24);//Data
 800368c:	4b4f      	ldr	r3, [pc, #316]	@ (80037cc <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	0e1b      	lsrs	r3, r3, #24
 8003692:	b2da      	uxtb	r2, r3
 8003694:	4b4c      	ldr	r3, [pc, #304]	@ (80037c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8003696:	705a      	strb	r2, [r3, #1]
			Transmit_Data[2]=((Range.Odometer_Value&0x00ff0000)>>16);//Data
 8003698:	4b4c      	ldr	r3, [pc, #304]	@ (80037cc <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	0c1b      	lsrs	r3, r3, #16
 800369e:	b2da      	uxtb	r2, r3
 80036a0:	4b49      	ldr	r3, [pc, #292]	@ (80037c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 80036a2:	709a      	strb	r2, [r3, #2]
			Transmit_Data[3]=((Range.Odometer_Value&0x0000ff00)>>8);//Data
 80036a4:	4b49      	ldr	r3, [pc, #292]	@ (80037cc <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	0a1b      	lsrs	r3, r3, #8
 80036aa:	b2da      	uxtb	r2, r3
 80036ac:	4b46      	ldr	r3, [pc, #280]	@ (80037c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 80036ae:	70da      	strb	r2, [r3, #3]
			Transmit_Data[4]=((Range.Odometer_Value&0x000000ff));//Data
 80036b0:	4b46      	ldr	r3, [pc, #280]	@ (80037cc <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	b2da      	uxtb	r2, r3
 80036b6:	4b44      	ldr	r3, [pc, #272]	@ (80037c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 80036b8:	711a      	strb	r2, [r3, #4]
			Transmit_Data[5]=((CGC_value&0xff00)>>8);//Data
 80036ba:	4b45      	ldr	r3, [pc, #276]	@ (80037d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	0a1b      	lsrs	r3, r3, #8
 80036c0:	b2da      	uxtb	r2, r3
 80036c2:	4b41      	ldr	r3, [pc, #260]	@ (80037c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 80036c4:	715a      	strb	r2, [r3, #5]
			Transmit_Data[6]=((CGC_value&0x00ff)>>0);;//Data
 80036c6:	4b42      	ldr	r3, [pc, #264]	@ (80037d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	b2da      	uxtb	r2, r3
 80036cc:	4b3e      	ldr	r3, [pc, #248]	@ (80037c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 80036ce:	719a      	strb	r2, [r3, #6]
			Transmit_Data[7]=(Reserved_SOC/10);//Data
 80036d0:	4b40      	ldr	r3, [pc, #256]	@ (80037d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 80036d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036d6:	4a40      	ldr	r2, [pc, #256]	@ (80037d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 80036d8:	fb82 1203 	smull	r1, r2, r2, r3
 80036dc:	1092      	asrs	r2, r2, #2
 80036de:	17db      	asrs	r3, r3, #31
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	b21b      	sxth	r3, r3
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	4b38      	ldr	r3, [pc, #224]	@ (80037c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 80036e8:	71da      	strb	r2, [r3, #7]

		  if(HAL_CAN_AddTxMessage(&hcan, &TxHeader, &Transmit_Data[Tx_count], &TxMailBox) != HAL_OK)//Adding data to the mailbox for transmitting
 80036ea:	4b3c      	ldr	r3, [pc, #240]	@ (80037dc <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	461a      	mov	r2, r3
 80036f0:	4b35      	ldr	r3, [pc, #212]	@ (80037c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 80036f2:	441a      	add	r2, r3
 80036f4:	1d38      	adds	r0, r7, #4
 80036f6:	4b3a      	ldr	r3, [pc, #232]	@ (80037e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 80036f8:	4931      	ldr	r1, [pc, #196]	@ (80037c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 80036fa:	f001 fe0f 	bl	800531c <HAL_CAN_AddTxMessage>
		  {
		   //Error_Handler();
		  }
		}

 		if(Rx_Id==0x09031024)
 80036fe:	4b2b      	ldr	r3, [pc, #172]	@ (80037ac <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a38      	ldr	r2, [pc, #224]	@ (80037e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d149      	bne.n	800379c <HAL_CAN_RxFifo0MsgPendingCallback+0x178>
		{
			TxHeader.ExtId =0x09032024; // Extended Identifier
 8003708:	4b2d      	ldr	r3, [pc, #180]	@ (80037c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 800370a:	4a37      	ldr	r2, [pc, #220]	@ (80037e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 800370c:	605a      	str	r2, [r3, #4]
			TxHeader.IDE = CAN_ID_EXT; // Identifier Extension
 800370e:	4b2c      	ldr	r3, [pc, #176]	@ (80037c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 8003710:	2204      	movs	r2, #4
 8003712:	609a      	str	r2, [r3, #8]
			TxHeader.RTR = CAN_RTR_DATA;// Remote Transmission Request bit, here send data frame
 8003714:	4b2a      	ldr	r3, [pc, #168]	@ (80037c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 8003716:	2200      	movs	r2, #0
 8003718:	60da      	str	r2, [r3, #12]
			TxHeader.DLC = 8;//Data length code
 800371a:	4b29      	ldr	r3, [pc, #164]	@ (80037c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 800371c:	2208      	movs	r2, #8
 800371e:	611a      	str	r2, [r3, #16]
			Transmit_Data[0]=OBD.speed_sensor_type;//Flio->1 Bheem->2
 8003720:	4b32      	ldr	r3, [pc, #200]	@ (80037ec <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8003722:	791a      	ldrb	r2, [r3, #4]
 8003724:	4b28      	ldr	r3, [pc, #160]	@ (80037c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8003726:	701a      	strb	r2, [r3, #0]
			Transmit_Data[1]=(((uint32_t)OBD.Gear_ratio&0xff000000)>>24);//Data
 8003728:	4b30      	ldr	r3, [pc, #192]	@ (80037ec <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4618      	mov	r0, r3
 800372e:	f7fd fbf9 	bl	8000f24 <__aeabi_f2uiz>
 8003732:	4603      	mov	r3, r0
 8003734:	0e1b      	lsrs	r3, r3, #24
 8003736:	b2da      	uxtb	r2, r3
 8003738:	4b23      	ldr	r3, [pc, #140]	@ (80037c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 800373a:	705a      	strb	r2, [r3, #1]
			Transmit_Data[2]=(((uint32_t)OBD.Gear_ratio&0x00ff0000)>>16);//Data
 800373c:	4b2b      	ldr	r3, [pc, #172]	@ (80037ec <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4618      	mov	r0, r3
 8003742:	f7fd fbef 	bl	8000f24 <__aeabi_f2uiz>
 8003746:	4603      	mov	r3, r0
 8003748:	0c1b      	lsrs	r3, r3, #16
 800374a:	b2da      	uxtb	r2, r3
 800374c:	4b1e      	ldr	r3, [pc, #120]	@ (80037c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 800374e:	709a      	strb	r2, [r3, #2]
			Transmit_Data[3]=(((uint32_t)OBD.Gear_ratio&0x0000ff00)>>8);//Data
 8003750:	4b26      	ldr	r3, [pc, #152]	@ (80037ec <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4618      	mov	r0, r3
 8003756:	f7fd fbe5 	bl	8000f24 <__aeabi_f2uiz>
 800375a:	4603      	mov	r3, r0
 800375c:	0a1b      	lsrs	r3, r3, #8
 800375e:	b2da      	uxtb	r2, r3
 8003760:	4b19      	ldr	r3, [pc, #100]	@ (80037c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8003762:	70da      	strb	r2, [r3, #3]
			Transmit_Data[4]=(((uint32_t)OBD.Gear_ratio&0x000000ff));//Data
 8003764:	4b21      	ldr	r3, [pc, #132]	@ (80037ec <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4618      	mov	r0, r3
 800376a:	f7fd fbdb 	bl	8000f24 <__aeabi_f2uiz>
 800376e:	4603      	mov	r3, r0
 8003770:	b2da      	uxtb	r2, r3
 8003772:	4b15      	ldr	r3, [pc, #84]	@ (80037c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8003774:	711a      	strb	r2, [r3, #4]
			Transmit_Data[5]=0;
 8003776:	4b14      	ldr	r3, [pc, #80]	@ (80037c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8003778:	2200      	movs	r2, #0
 800377a:	715a      	strb	r2, [r3, #5]
			Transmit_Data[6]=0;
 800377c:	4b12      	ldr	r3, [pc, #72]	@ (80037c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 800377e:	2200      	movs	r2, #0
 8003780:	719a      	strb	r2, [r3, #6]
			Transmit_Data[7]=0;
 8003782:	4b11      	ldr	r3, [pc, #68]	@ (80037c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8003784:	2200      	movs	r2, #0
 8003786:	71da      	strb	r2, [r3, #7]
		  if(HAL_CAN_AddTxMessage(&hcan, &TxHeader, &Transmit_Data[Tx_count], &TxMailBox) != HAL_OK)//Adding data to the mailbox for transmitting
 8003788:	4b14      	ldr	r3, [pc, #80]	@ (80037dc <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	461a      	mov	r2, r3
 800378e:	4b0e      	ldr	r3, [pc, #56]	@ (80037c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8003790:	441a      	add	r2, r3
 8003792:	1d38      	adds	r0, r7, #4
 8003794:	4b12      	ldr	r3, [pc, #72]	@ (80037e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 8003796:	490a      	ldr	r1, [pc, #40]	@ (80037c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 8003798:	f001 fdc0 	bl	800531c <HAL_CAN_AddTxMessage>
		  {
		   //Error_Handler();
		  }
		}
 	}
}
 800379c:	bf00      	nop
 800379e:	3708      	adds	r7, #8
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	20001414 	.word	0x20001414
 80037a8:	2000193c 	.word	0x2000193c
 80037ac:	20001870 	.word	0x20001870
 80037b0:	2000195f 	.word	0x2000195f
 80037b4:	2000195e 	.word	0x2000195e
 80037b8:	20001960 	.word	0x20001960
 80037bc:	09021024 	.word	0x09021024
 80037c0:	20001924 	.word	0x20001924
 80037c4:	09022024 	.word	0x09022024
 80037c8:	20001868 	.word	0x20001868
 80037cc:	20001910 	.word	0x20001910
 80037d0:	200018f4 	.word	0x200018f4
 80037d4:	200018da 	.word	0x200018da
 80037d8:	66666667 	.word	0x66666667
 80037dc:	20001864 	.word	0x20001864
 80037e0:	20001874 	.word	0x20001874
 80037e4:	09031024 	.word	0x09031024
 80037e8:	09032024 	.word	0x09032024
 80037ec:	20001460 	.word	0x20001460

080037f0 <ODO_PRINT>:

uint16_t pluse_count=0;uint8_t bike_speed;
float speed_result_float=0;
void ODO_PRINT()
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
	if(OBD.speed_sensor_type==1)
 80037f6:	4b7f      	ldr	r3, [pc, #508]	@ (80039f4 <ODO_PRINT+0x204>)
 80037f8:	791b      	ldrb	r3, [r3, #4]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d109      	bne.n	8003812 <ODO_PRINT+0x22>
	{
		lcd_speed(bike_speed,OBD.speed_sensor_type);
 80037fe:	4b7e      	ldr	r3, [pc, #504]	@ (80039f8 <ODO_PRINT+0x208>)
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	461a      	mov	r2, r3
 8003804:	4b7b      	ldr	r3, [pc, #492]	@ (80039f4 <ODO_PRINT+0x204>)
 8003806:	791b      	ldrb	r3, [r3, #4]
 8003808:	4619      	mov	r1, r3
 800380a:	4610      	mov	r0, r2
 800380c:	f7fd fd7a 	bl	8001304 <lcd_speed>
 8003810:	e00b      	b.n	800382a <ODO_PRINT+0x3a>
	}
	else
	{
		lcd_speed((int)speed_result_float,OBD.speed_sensor_type);
 8003812:	4b7a      	ldr	r3, [pc, #488]	@ (80039fc <ODO_PRINT+0x20c>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4618      	mov	r0, r3
 8003818:	f7fd fb5e 	bl	8000ed8 <__aeabi_f2iz>
 800381c:	4603      	mov	r3, r0
 800381e:	4a75      	ldr	r2, [pc, #468]	@ (80039f4 <ODO_PRINT+0x204>)
 8003820:	7912      	ldrb	r2, [r2, #4]
 8003822:	4611      	mov	r1, r2
 8003824:	4618      	mov	r0, r3
 8003826:	f7fd fd6d 	bl	8001304 <lcd_speed>
	}

	lcd_clear(0, 96, 51);
 800382a:	2233      	movs	r2, #51	@ 0x33
 800382c:	2160      	movs	r1, #96	@ 0x60
 800382e:	2000      	movs	r0, #0
 8003830:	f7fe f804 	bl	800183c <lcd_clear>
	uint8_t first_1=DTE/100;
 8003834:	4b72      	ldr	r3, [pc, #456]	@ (8003a00 <ODO_PRINT+0x210>)
 8003836:	881b      	ldrh	r3, [r3, #0]
 8003838:	4a72      	ldr	r2, [pc, #456]	@ (8003a04 <ODO_PRINT+0x214>)
 800383a:	fba2 2303 	umull	r2, r3, r2, r3
 800383e:	095b      	lsrs	r3, r3, #5
 8003840:	b29b      	uxth	r3, r3
 8003842:	73fb      	strb	r3, [r7, #15]
	uint8_t second_1=((DTE%100)/10);
 8003844:	4b6e      	ldr	r3, [pc, #440]	@ (8003a00 <ODO_PRINT+0x210>)
 8003846:	881b      	ldrh	r3, [r3, #0]
 8003848:	4a6e      	ldr	r2, [pc, #440]	@ (8003a04 <ODO_PRINT+0x214>)
 800384a:	fba2 1203 	umull	r1, r2, r2, r3
 800384e:	0952      	lsrs	r2, r2, #5
 8003850:	2164      	movs	r1, #100	@ 0x64
 8003852:	fb01 f202 	mul.w	r2, r1, r2
 8003856:	1a9b      	subs	r3, r3, r2
 8003858:	b29b      	uxth	r3, r3
 800385a:	4a6b      	ldr	r2, [pc, #428]	@ (8003a08 <ODO_PRINT+0x218>)
 800385c:	fba2 2303 	umull	r2, r3, r2, r3
 8003860:	08db      	lsrs	r3, r3, #3
 8003862:	b29b      	uxth	r3, r3
 8003864:	73bb      	strb	r3, [r7, #14]
	uint8_t third_1=((DTE%100)%10);
 8003866:	4b66      	ldr	r3, [pc, #408]	@ (8003a00 <ODO_PRINT+0x210>)
 8003868:	881b      	ldrh	r3, [r3, #0]
 800386a:	4a66      	ldr	r2, [pc, #408]	@ (8003a04 <ODO_PRINT+0x214>)
 800386c:	fba2 1203 	umull	r1, r2, r2, r3
 8003870:	0952      	lsrs	r2, r2, #5
 8003872:	2164      	movs	r1, #100	@ 0x64
 8003874:	fb01 f202 	mul.w	r2, r1, r2
 8003878:	1a9b      	subs	r3, r3, r2
 800387a:	b29a      	uxth	r2, r3
 800387c:	4b62      	ldr	r3, [pc, #392]	@ (8003a08 <ODO_PRINT+0x218>)
 800387e:	fba3 1302 	umull	r1, r3, r3, r2
 8003882:	08d9      	lsrs	r1, r3, #3
 8003884:	460b      	mov	r3, r1
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	440b      	add	r3, r1
 800388a:	005b      	lsls	r3, r3, #1
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	b29b      	uxth	r3, r3
 8003890:	737b      	strb	r3, [r7, #13]
	dte_icon_print();
 8003892:	f7fd feb9 	bl	8001608 <dte_icon_print>
	lcd_print_digit_wos(0, 98,first_1);
 8003896:	7bfb      	ldrb	r3, [r7, #15]
 8003898:	461a      	mov	r2, r3
 800389a:	2162      	movs	r1, #98	@ 0x62
 800389c:	2000      	movs	r0, #0
 800389e:	f7fd fff3 	bl	8001888 <lcd_print_digit_wos>
	lcd_print_digit_wos(0, 104,second_1);
 80038a2:	7bbb      	ldrb	r3, [r7, #14]
 80038a4:	461a      	mov	r2, r3
 80038a6:	2168      	movs	r1, #104	@ 0x68
 80038a8:	2000      	movs	r0, #0
 80038aa:	f7fd ffed 	bl	8001888 <lcd_print_digit_wos>
	lcd_print_digit_wos(0, 110,third_1);
 80038ae:	7b7b      	ldrb	r3, [r7, #13]
 80038b0:	461a      	mov	r2, r3
 80038b2:	216e      	movs	r1, #110	@ 0x6e
 80038b4:	2000      	movs	r0, #0
 80038b6:	f7fd ffe7 	bl	8001888 <lcd_print_digit_wos>
	lcd_print_char(0, 116, "km");
 80038ba:	4a54      	ldr	r2, [pc, #336]	@ (8003a0c <ODO_PRINT+0x21c>)
 80038bc:	2174      	movs	r1, #116	@ 0x74
 80038be:	2000      	movs	r0, #0
 80038c0:	f7fd fee2 	bl	8001688 <lcd_print_char>

	uint8_t first = (Range.Odometer_Value / 1000000);
 80038c4:	4b52      	ldr	r3, [pc, #328]	@ (8003a10 <ODO_PRINT+0x220>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a52      	ldr	r2, [pc, #328]	@ (8003a14 <ODO_PRINT+0x224>)
 80038ca:	fba2 2303 	umull	r2, r3, r2, r3
 80038ce:	0c9b      	lsrs	r3, r3, #18
 80038d0:	733b      	strb	r3, [r7, #12]
	uint8_t second = ((Range.Odometer_Value % 1000000) / 100000);
 80038d2:	4b4f      	ldr	r3, [pc, #316]	@ (8003a10 <ODO_PRINT+0x220>)
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	4b4f      	ldr	r3, [pc, #316]	@ (8003a14 <ODO_PRINT+0x224>)
 80038d8:	fba3 1302 	umull	r1, r3, r3, r2
 80038dc:	0c9b      	lsrs	r3, r3, #18
 80038de:	494e      	ldr	r1, [pc, #312]	@ (8003a18 <ODO_PRINT+0x228>)
 80038e0:	fb01 f303 	mul.w	r3, r1, r3
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	095b      	lsrs	r3, r3, #5
 80038e8:	4a4c      	ldr	r2, [pc, #304]	@ (8003a1c <ODO_PRINT+0x22c>)
 80038ea:	fba2 2303 	umull	r2, r3, r2, r3
 80038ee:	09db      	lsrs	r3, r3, #7
 80038f0:	72fb      	strb	r3, [r7, #11]
	uint8_t third = ((Range.Odometer_Value % 100000) / 10000);
 80038f2:	4b47      	ldr	r3, [pc, #284]	@ (8003a10 <ODO_PRINT+0x220>)
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	0953      	lsrs	r3, r2, #5
 80038f8:	4948      	ldr	r1, [pc, #288]	@ (8003a1c <ODO_PRINT+0x22c>)
 80038fa:	fba1 1303 	umull	r1, r3, r1, r3
 80038fe:	09db      	lsrs	r3, r3, #7
 8003900:	4947      	ldr	r1, [pc, #284]	@ (8003a20 <ODO_PRINT+0x230>)
 8003902:	fb01 f303 	mul.w	r3, r1, r3
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	4a46      	ldr	r2, [pc, #280]	@ (8003a24 <ODO_PRINT+0x234>)
 800390a:	fba2 2303 	umull	r2, r3, r2, r3
 800390e:	0b5b      	lsrs	r3, r3, #13
 8003910:	72bb      	strb	r3, [r7, #10]
	uint8_t fourth = ((Range.Odometer_Value % 10000) / 1000);
 8003912:	4b3f      	ldr	r3, [pc, #252]	@ (8003a10 <ODO_PRINT+0x220>)
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	4b43      	ldr	r3, [pc, #268]	@ (8003a24 <ODO_PRINT+0x234>)
 8003918:	fba3 1302 	umull	r1, r3, r3, r2
 800391c:	0b5b      	lsrs	r3, r3, #13
 800391e:	f242 7110 	movw	r1, #10000	@ 0x2710
 8003922:	fb01 f303 	mul.w	r3, r1, r3
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	4a3f      	ldr	r2, [pc, #252]	@ (8003a28 <ODO_PRINT+0x238>)
 800392a:	fba2 2303 	umull	r2, r3, r2, r3
 800392e:	099b      	lsrs	r3, r3, #6
 8003930:	727b      	strb	r3, [r7, #9]
	uint8_t fifth = ((Range.Odometer_Value % 1000) / 100);
 8003932:	4b37      	ldr	r3, [pc, #220]	@ (8003a10 <ODO_PRINT+0x220>)
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	4b3c      	ldr	r3, [pc, #240]	@ (8003a28 <ODO_PRINT+0x238>)
 8003938:	fba3 1302 	umull	r1, r3, r3, r2
 800393c:	099b      	lsrs	r3, r3, #6
 800393e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003942:	fb01 f303 	mul.w	r3, r1, r3
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	4a2e      	ldr	r2, [pc, #184]	@ (8003a04 <ODO_PRINT+0x214>)
 800394a:	fba2 2303 	umull	r2, r3, r2, r3
 800394e:	095b      	lsrs	r3, r3, #5
 8003950:	723b      	strb	r3, [r7, #8]
	uint8_t sixth = ((Range.Odometer_Value % 100) / 10);
 8003952:	4b2f      	ldr	r3, [pc, #188]	@ (8003a10 <ODO_PRINT+0x220>)
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	4b2b      	ldr	r3, [pc, #172]	@ (8003a04 <ODO_PRINT+0x214>)
 8003958:	fba3 1302 	umull	r1, r3, r3, r2
 800395c:	095b      	lsrs	r3, r3, #5
 800395e:	2164      	movs	r1, #100	@ 0x64
 8003960:	fb01 f303 	mul.w	r3, r1, r3
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	4a28      	ldr	r2, [pc, #160]	@ (8003a08 <ODO_PRINT+0x218>)
 8003968:	fba2 2303 	umull	r2, r3, r2, r3
 800396c:	08db      	lsrs	r3, r3, #3
 800396e:	71fb      	strb	r3, [r7, #7]
	uint8_t seventh = (Range.Odometer_Value % 10);
 8003970:	4b27      	ldr	r3, [pc, #156]	@ (8003a10 <ODO_PRINT+0x220>)
 8003972:	6819      	ldr	r1, [r3, #0]
 8003974:	4b24      	ldr	r3, [pc, #144]	@ (8003a08 <ODO_PRINT+0x218>)
 8003976:	fba3 2301 	umull	r2, r3, r3, r1
 800397a:	08da      	lsrs	r2, r3, #3
 800397c:	4613      	mov	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4413      	add	r3, r2
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	1aca      	subs	r2, r1, r3
 8003986:	4613      	mov	r3, r2
 8003988:	71bb      	strb	r3, [r7, #6]

	lcd_clear(5, 32, 64);
 800398a:	2240      	movs	r2, #64	@ 0x40
 800398c:	2120      	movs	r1, #32
 800398e:	2005      	movs	r0, #5
 8003990:	f7fd ff54 	bl	800183c <lcd_clear>
	odo_icon_print();
 8003994:	f7fd fe18 	bl	80015c8 <odo_icon_print>
	lcd_print_digit_wos(5, 50,first);
 8003998:	7b3b      	ldrb	r3, [r7, #12]
 800399a:	461a      	mov	r2, r3
 800399c:	2132      	movs	r1, #50	@ 0x32
 800399e:	2005      	movs	r0, #5
 80039a0:	f7fd ff72 	bl	8001888 <lcd_print_digit_wos>
	lcd_print_digit_wos(5, 56,second);
 80039a4:	7afb      	ldrb	r3, [r7, #11]
 80039a6:	461a      	mov	r2, r3
 80039a8:	2138      	movs	r1, #56	@ 0x38
 80039aa:	2005      	movs	r0, #5
 80039ac:	f7fd ff6c 	bl	8001888 <lcd_print_digit_wos>
	lcd_print_digit_wos(5, 62,third);
 80039b0:	7abb      	ldrb	r3, [r7, #10]
 80039b2:	461a      	mov	r2, r3
 80039b4:	213e      	movs	r1, #62	@ 0x3e
 80039b6:	2005      	movs	r0, #5
 80039b8:	f7fd ff66 	bl	8001888 <lcd_print_digit_wos>
	lcd_print_digit_wos(5, 68,fourth);
 80039bc:	7a7b      	ldrb	r3, [r7, #9]
 80039be:	461a      	mov	r2, r3
 80039c0:	2144      	movs	r1, #68	@ 0x44
 80039c2:	2005      	movs	r0, #5
 80039c4:	f7fd ff60 	bl	8001888 <lcd_print_digit_wos>
	lcd_print_digit_wos(5, 74,fifth);
 80039c8:	7a3b      	ldrb	r3, [r7, #8]
 80039ca:	461a      	mov	r2, r3
 80039cc:	214a      	movs	r1, #74	@ 0x4a
 80039ce:	2005      	movs	r0, #5
 80039d0:	f7fd ff5a 	bl	8001888 <lcd_print_digit_wos>
	lcd_print_digit_wos(5, 80,sixth);
 80039d4:	79fb      	ldrb	r3, [r7, #7]
 80039d6:	461a      	mov	r2, r3
 80039d8:	2150      	movs	r1, #80	@ 0x50
 80039da:	2005      	movs	r0, #5
 80039dc:	f7fd ff54 	bl	8001888 <lcd_print_digit_wos>
	lcd_print_char(5,87, "km");
 80039e0:	4a0a      	ldr	r2, [pc, #40]	@ (8003a0c <ODO_PRINT+0x21c>)
 80039e2:	2157      	movs	r1, #87	@ 0x57
 80039e4:	2005      	movs	r0, #5
 80039e6:	f7fd fe4f 	bl	8001688 <lcd_print_char>

}
 80039ea:	bf00      	nop
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	20001460 	.word	0x20001460
 80039f8:	20001964 	.word	0x20001964
 80039fc:	20001968 	.word	0x20001968
 8003a00:	2000195c 	.word	0x2000195c
 8003a04:	51eb851f 	.word	0x51eb851f
 8003a08:	cccccccd 	.word	0xcccccccd
 8003a0c:	08008478 	.word	0x08008478
 8003a10:	20001910 	.word	0x20001910
 8003a14:	431bde83 	.word	0x431bde83
 8003a18:	000f4240 	.word	0x000f4240
 8003a1c:	0a7c5ac5 	.word	0x0a7c5ac5
 8003a20:	000186a0 	.word	0x000186a0
 8003a24:	d1b71759 	.word	0xd1b71759
 8003a28:	10624dd3 	.word	0x10624dd3
 8003a2c:	00000000 	.word	0x00000000

08003a30 <ODO_calculation>:
uint16_t speed_temp1=0;
uint32_t controller_speed_data=0;
uint16_t meter_count=0,meter_sec=0;

void ODO_calculation()
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
	if(after_sec)
 8003a34:	4b6e      	ldr	r3, [pc, #440]	@ (8003bf0 <ODO_calculation+0x1c0>)
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d05a      	beq.n	8003af2 <ODO_calculation+0xc2>
	{
		if(OBD.speed_sensor_type==1)
 8003a3c:	4b6d      	ldr	r3, [pc, #436]	@ (8003bf4 <ODO_calculation+0x1c4>)
 8003a3e:	791b      	ldrb	r3, [r3, #4]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d11a      	bne.n	8003a7a <ODO_calculation+0x4a>
		{
			bike_speed=((speed_count*360)/calib_reg);
 8003a44:	4b6c      	ldr	r3, [pc, #432]	@ (8003bf8 <ODO_calculation+0x1c8>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8003a4c:	fb02 f303 	mul.w	r3, r2, r3
 8003a50:	08db      	lsrs	r3, r3, #3
 8003a52:	4a6a      	ldr	r2, [pc, #424]	@ (8003bfc <ODO_calculation+0x1cc>)
 8003a54:	fba2 2303 	umull	r2, r3, r2, r3
 8003a58:	085b      	lsrs	r3, r3, #1
 8003a5a:	b2da      	uxtb	r2, r3
 8003a5c:	4b68      	ldr	r3, [pc, #416]	@ (8003c00 <ODO_calculation+0x1d0>)
 8003a5e:	701a      	strb	r2, [r3, #0]
			pluse_count+=speed_count;
 8003a60:	4b65      	ldr	r3, [pc, #404]	@ (8003bf8 <ODO_calculation+0x1c8>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	4b67      	ldr	r3, [pc, #412]	@ (8003c04 <ODO_calculation+0x1d4>)
 8003a68:	881b      	ldrh	r3, [r3, #0]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	b29a      	uxth	r2, r3
 8003a6e:	4b65      	ldr	r3, [pc, #404]	@ (8003c04 <ODO_calculation+0x1d4>)
 8003a70:	801a      	strh	r2, [r3, #0]
			after_sec=0;
 8003a72:	4b5f      	ldr	r3, [pc, #380]	@ (8003bf0 <ODO_calculation+0x1c0>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	701a      	strb	r2, [r3, #0]
 8003a78:	e03b      	b.n	8003af2 <ODO_calculation+0xc2>
		}
		else
		{
			speed_result_float =(((((float)controller_speed_data * 12305)/poles)/1000)/OBD.Gear_ratio); // ((((N*7200*D*Pi)/P)/1000)/gear_ratio)
 8003a7a:	4b63      	ldr	r3, [pc, #396]	@ (8003c08 <ODO_calculation+0x1d8>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7fd f882 	bl	8000b88 <__aeabi_ui2f>
 8003a84:	4603      	mov	r3, r0
 8003a86:	4961      	ldr	r1, [pc, #388]	@ (8003c0c <ODO_calculation+0x1dc>)
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7fd f8d5 	bl	8000c38 <__aeabi_fmul>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	495f      	ldr	r1, [pc, #380]	@ (8003c10 <ODO_calculation+0x1e0>)
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7fd f984 	bl	8000da0 <__aeabi_fdiv>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	495e      	ldr	r1, [pc, #376]	@ (8003c14 <ODO_calculation+0x1e4>)
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7fd f97f 	bl	8000da0 <__aeabi_fdiv>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	4b53      	ldr	r3, [pc, #332]	@ (8003bf4 <ODO_calculation+0x1c4>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4619      	mov	r1, r3
 8003aac:	4610      	mov	r0, r2
 8003aae:	f7fd f977 	bl	8000da0 <__aeabi_fdiv>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	4b58      	ldr	r3, [pc, #352]	@ (8003c18 <ODO_calculation+0x1e8>)
 8003ab8:	601a      	str	r2, [r3, #0]
			meter_sec=(int)((speed_result_float)*0.2777);    //m/sec  1000/3600
 8003aba:	4b57      	ldr	r3, [pc, #348]	@ (8003c18 <ODO_calculation+0x1e8>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7fc fcaa 	bl	8000418 <__aeabi_f2d>
 8003ac4:	a348      	add	r3, pc, #288	@ (adr r3, 8003be8 <ODO_calculation+0x1b8>)
 8003ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aca:	f7fc fcfd 	bl	80004c8 <__aeabi_dmul>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	4610      	mov	r0, r2
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	f7fc ff09 	bl	80008ec <__aeabi_d2iz>
 8003ada:	4603      	mov	r3, r0
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	4b4f      	ldr	r3, [pc, #316]	@ (8003c1c <ODO_calculation+0x1ec>)
 8003ae0:	801a      	strh	r2, [r3, #0]
			meter_count=meter_count+meter_sec;
 8003ae2:	4b4f      	ldr	r3, [pc, #316]	@ (8003c20 <ODO_calculation+0x1f0>)
 8003ae4:	881a      	ldrh	r2, [r3, #0]
 8003ae6:	4b4d      	ldr	r3, [pc, #308]	@ (8003c1c <ODO_calculation+0x1ec>)
 8003ae8:	881b      	ldrh	r3, [r3, #0]
 8003aea:	4413      	add	r3, r2
 8003aec:	b29a      	uxth	r2, r3
 8003aee:	4b4c      	ldr	r3, [pc, #304]	@ (8003c20 <ODO_calculation+0x1f0>)
 8003af0:	801a      	strh	r2, [r3, #0]
		}
	}

	if((pluse_count>=calib_reg)||(meter_count>=100))
 8003af2:	4b44      	ldr	r3, [pc, #272]	@ (8003c04 <ODO_calculation+0x1d4>)
 8003af4:	881b      	ldrh	r3, [r3, #0]
 8003af6:	f5b3 7fdc 	cmp.w	r3, #440	@ 0x1b8
 8003afa:	d203      	bcs.n	8003b04 <ODO_calculation+0xd4>
 8003afc:	4b48      	ldr	r3, [pc, #288]	@ (8003c20 <ODO_calculation+0x1f0>)
 8003afe:	881b      	ldrh	r3, [r3, #0]
 8003b00:	2b63      	cmp	r3, #99	@ 0x63
 8003b02:	d96d      	bls.n	8003be0 <ODO_calculation+0x1b0>
	{
		pluse_count=meter_count=0;
 8003b04:	4b46      	ldr	r3, [pc, #280]	@ (8003c20 <ODO_calculation+0x1f0>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	801a      	strh	r2, [r3, #0]
 8003b0a:	4b45      	ldr	r3, [pc, #276]	@ (8003c20 <ODO_calculation+0x1f0>)
 8003b0c:	881a      	ldrh	r2, [r3, #0]
 8003b0e:	4b3d      	ldr	r3, [pc, #244]	@ (8003c04 <ODO_calculation+0x1d4>)
 8003b10:	801a      	strh	r2, [r3, #0]
		Range.Odometer_Value++;
 8003b12:	4b44      	ldr	r3, [pc, #272]	@ (8003c24 <ODO_calculation+0x1f4>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	3301      	adds	r3, #1
 8003b18:	4a42      	ldr	r2, [pc, #264]	@ (8003c24 <ODO_calculation+0x1f4>)
 8003b1a:	6013      	str	r3, [r2, #0]
		I2C_Write_EEPROM(Range.Odometer_Value,EEPROM_ADDRESS[ADR_LOC]);
 8003b1c:	4b41      	ldr	r3, [pc, #260]	@ (8003c24 <ODO_calculation+0x1f4>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a41      	ldr	r2, [pc, #260]	@ (8003c28 <ODO_calculation+0x1f8>)
 8003b22:	7812      	ldrb	r2, [r2, #0]
 8003b24:	4611      	mov	r1, r2
 8003b26:	4a41      	ldr	r2, [pc, #260]	@ (8003c2c <ODO_calculation+0x1fc>)
 8003b28:	5c52      	ldrb	r2, [r2, r1]
 8003b2a:	4611      	mov	r1, r2
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7fe ff49 	bl	80029c4 <I2C_Write_EEPROM>
		Odo_Value[ADR_LOC]=Range.Odometer_Value_temp=I2C_Read_EEPROM(EEPROM_ADDRESS[ADR_LOC]);
 8003b32:	4b3d      	ldr	r3, [pc, #244]	@ (8003c28 <ODO_calculation+0x1f8>)
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	461a      	mov	r2, r3
 8003b38:	4b3c      	ldr	r3, [pc, #240]	@ (8003c2c <ODO_calculation+0x1fc>)
 8003b3a:	5c9b      	ldrb	r3, [r3, r2]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7fe ff57 	bl	80029f0 <I2C_Read_EEPROM>
 8003b42:	4603      	mov	r3, r0
 8003b44:	461a      	mov	r2, r3
 8003b46:	4b37      	ldr	r3, [pc, #220]	@ (8003c24 <ODO_calculation+0x1f4>)
 8003b48:	605a      	str	r2, [r3, #4]
 8003b4a:	4b37      	ldr	r3, [pc, #220]	@ (8003c28 <ODO_calculation+0x1f8>)
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	4619      	mov	r1, r3
 8003b50:	4b34      	ldr	r3, [pc, #208]	@ (8003c24 <ODO_calculation+0x1f4>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	4a36      	ldr	r2, [pc, #216]	@ (8003c30 <ODO_calculation+0x200>)
 8003b56:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		if(Range.Odometer_Value==Range.Odometer_Value_temp)
 8003b5a:	4b32      	ldr	r3, [pc, #200]	@ (8003c24 <ODO_calculation+0x1f4>)
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	4b31      	ldr	r3, [pc, #196]	@ (8003c24 <ODO_calculation+0x1f4>)
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d106      	bne.n	8003b74 <ODO_calculation+0x144>
		{
			ADR_LOC++;
 8003b66:	4b30      	ldr	r3, [pc, #192]	@ (8003c28 <ODO_calculation+0x1f8>)
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	b2da      	uxtb	r2, r3
 8003b6e:	4b2e      	ldr	r3, [pc, #184]	@ (8003c28 <ODO_calculation+0x1f8>)
 8003b70:	701a      	strb	r2, [r3, #0]
 8003b72:	e01d      	b.n	8003bb0 <ODO_calculation+0x180>
		}
		else
		{
			ADR_LOC++;
 8003b74:	4b2c      	ldr	r3, [pc, #176]	@ (8003c28 <ODO_calculation+0x1f8>)
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	3301      	adds	r3, #1
 8003b7a:	b2da      	uxtb	r2, r3
 8003b7c:	4b2a      	ldr	r3, [pc, #168]	@ (8003c28 <ODO_calculation+0x1f8>)
 8003b7e:	701a      	strb	r2, [r3, #0]
			if(ADR_LOC>=10)
 8003b80:	4b29      	ldr	r3, [pc, #164]	@ (8003c28 <ODO_calculation+0x1f8>)
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	2b09      	cmp	r3, #9
 8003b86:	d902      	bls.n	8003b8e <ODO_calculation+0x15e>
			{
				ADR_LOC=0;
 8003b88:	4b27      	ldr	r3, [pc, #156]	@ (8003c28 <ODO_calculation+0x1f8>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	701a      	strb	r2, [r3, #0]
			}
			I2C_Write_EEPROM(Range.Odometer_Value,EEPROM_ADDRESS[ADR_LOC]);
 8003b8e:	4b25      	ldr	r3, [pc, #148]	@ (8003c24 <ODO_calculation+0x1f4>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a25      	ldr	r2, [pc, #148]	@ (8003c28 <ODO_calculation+0x1f8>)
 8003b94:	7812      	ldrb	r2, [r2, #0]
 8003b96:	4611      	mov	r1, r2
 8003b98:	4a24      	ldr	r2, [pc, #144]	@ (8003c2c <ODO_calculation+0x1fc>)
 8003b9a:	5c52      	ldrb	r2, [r2, r1]
 8003b9c:	4611      	mov	r1, r2
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7fe ff10 	bl	80029c4 <I2C_Write_EEPROM>
			ADR_LOC++;
 8003ba4:	4b20      	ldr	r3, [pc, #128]	@ (8003c28 <ODO_calculation+0x1f8>)
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	3301      	adds	r3, #1
 8003baa:	b2da      	uxtb	r2, r3
 8003bac:	4b1e      	ldr	r3, [pc, #120]	@ (8003c28 <ODO_calculation+0x1f8>)
 8003bae:	701a      	strb	r2, [r3, #0]
		}
		if(ADR_LOC>=10)
 8003bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8003c28 <ODO_calculation+0x1f8>)
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	2b09      	cmp	r3, #9
 8003bb6:	d913      	bls.n	8003be0 <ODO_calculation+0x1b0>
		{
			ADR_LOC=0;
 8003bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8003c28 <ODO_calculation+0x1f8>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	701a      	strb	r2, [r3, #0]
			if((last_flash_update<=Range.Odometer_Value)&&((last_flash_update+1)>=Range.Odometer_Value))
 8003bbe:	4b19      	ldr	r3, [pc, #100]	@ (8003c24 <ODO_calculation+0x1f4>)
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	4b1c      	ldr	r3, [pc, #112]	@ (8003c34 <ODO_calculation+0x204>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d30a      	bcc.n	8003be0 <ODO_calculation+0x1b0>
 8003bca:	4b1a      	ldr	r3, [pc, #104]	@ (8003c34 <ODO_calculation+0x204>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	1c5a      	adds	r2, r3, #1
 8003bd0:	4b14      	ldr	r3, [pc, #80]	@ (8003c24 <ODO_calculation+0x1f4>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d303      	bcc.n	8003be0 <ODO_calculation+0x1b0>
			{
				Range.Odometer_Value=last_flash_update;
 8003bd8:	4b16      	ldr	r3, [pc, #88]	@ (8003c34 <ODO_calculation+0x204>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a11      	ldr	r2, [pc, #68]	@ (8003c24 <ODO_calculation+0x1f4>)
 8003bde:	6013      	str	r3, [r2, #0]
			}
		}
	}
}
 8003be0:	bf00      	nop
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	f3af 8000 	nop.w
 8003be8:	3886594b 	.word	0x3886594b
 8003bec:	3fd1c5d6 	.word	0x3fd1c5d6
 8003bf0:	20001880 	.word	0x20001880
 8003bf4:	20001460 	.word	0x20001460
 8003bf8:	20001878 	.word	0x20001878
 8003bfc:	094f2095 	.word	0x094f2095
 8003c00:	20001964 	.word	0x20001964
 8003c04:	20001962 	.word	0x20001962
 8003c08:	20001970 	.word	0x20001970
 8003c0c:	46404400 	.word	0x46404400
 8003c10:	41c00000 	.word	0x41c00000
 8003c14:	447a0000 	.word	0x447a0000
 8003c18:	20001968 	.word	0x20001968
 8003c1c:	20001976 	.word	0x20001976
 8003c20:	20001974 	.word	0x20001974
 8003c24:	20001910 	.word	0x20001910
 8003c28:	2000191f 	.word	0x2000191f
 8003c2c:	200007a4 	.word	0x200007a4
 8003c30:	20001888 	.word	0x20001888
 8003c34:	200018f8 	.word	0x200018f8

08003c38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c3c:	f001 f8e0 	bl	8004e00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c40:	f000 f900 	bl	8003e44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c44:	f000 fa2c 	bl	80040a0 <MX_GPIO_Init>
  MX_CAN_Init();
 8003c48:	f000 f944 	bl	8003ed4 <MX_CAN_Init>
  MX_TIM2_Init();
 8003c4c:	f000 f9dc 	bl	8004008 <MX_TIM2_Init>
  MX_I2C1_Init();
 8003c50:	f000 f992 	bl	8003f78 <MX_I2C1_Init>
  MX_IWDG_Init();
 8003c54:	f000 f9be 	bl	8003fd4 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  PVD_Init();
 8003c58:	f001 f89a 	bl	8004d90 <PVD_Init>
  HAL_I2C_Init(&hi2c1);
 8003c5c:	486e      	ldr	r0, [pc, #440]	@ (8003e18 <main+0x1e0>)
 8003c5e:	f002 faa1 	bl	80061a4 <HAL_I2C_Init>
  HAL_CAN_Start(&hcan);// CAN protocol enable function
 8003c62:	486e      	ldr	r0, [pc, #440]	@ (8003e1c <main+0x1e4>)
 8003c64:	f001 fb16 	bl	8005294 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO0_MSG_PENDING); // Interrupt activation for Receiving data ,whenever data is received in FIFO, this function will get triggered and goes to receiver interrupt function
 8003c68:	2102      	movs	r1, #2
 8003c6a:	486c      	ldr	r0, [pc, #432]	@ (8003e1c <main+0x1e4>)
 8003c6c:	f001 fd46 	bl	80056fc <HAL_CAN_ActivateNotification>
  HAL_TIM_Base_Start_IT(&htim2); // Timer2 Interrupt Start
 8003c70:	486b      	ldr	r0, [pc, #428]	@ (8003e20 <main+0x1e8>)
 8003c72:	f004 f817 	bl	8007ca4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcd_init();
 8003c76:	f7fd fab1 	bl	80011dc <lcd_init>
     if(RCC->CSR&RCC_CSR_IWDGRSTF)
 8003c7a:	4b6a      	ldr	r3, [pc, #424]	@ (8003e24 <main+0x1ec>)
 8003c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d006      	beq.n	8003c94 <main+0x5c>
     {
    	 RCC->CSR|=1<<24;
 8003c86:	4b67      	ldr	r3, [pc, #412]	@ (8003e24 <main+0x1ec>)
 8003c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c8a:	4a66      	ldr	r2, [pc, #408]	@ (8003e24 <main+0x1ec>)
 8003c8c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c90:	6253      	str	r3, [r2, #36]	@ 0x24
 8003c92:	e02d      	b.n	8003cf0 <main+0xb8>
     }
     else
     {
		lcd_into();
 8003c94:	f7fd fec8 	bl	8001a28 <lcd_into>

		HAL_Delay(500);
 8003c98:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003c9c:	f001 f912 	bl	8004ec4 <HAL_Delay>
		lcd_clear(0, 0, 127);
 8003ca0:	227f      	movs	r2, #127	@ 0x7f
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	2000      	movs	r0, #0
 8003ca6:	f7fd fdc9 	bl	800183c <lcd_clear>
		lcd_clear(1, 0, 127);
 8003caa:	227f      	movs	r2, #127	@ 0x7f
 8003cac:	2100      	movs	r1, #0
 8003cae:	2001      	movs	r0, #1
 8003cb0:	f7fd fdc4 	bl	800183c <lcd_clear>
		lcd_clear(2, 0, 127);
 8003cb4:	227f      	movs	r2, #127	@ 0x7f
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	2002      	movs	r0, #2
 8003cba:	f7fd fdbf 	bl	800183c <lcd_clear>
		lcd_clear(3, 0, 127);
 8003cbe:	227f      	movs	r2, #127	@ 0x7f
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	2003      	movs	r0, #3
 8003cc4:	f7fd fdba 	bl	800183c <lcd_clear>
		lcd_clear(4, 0, 127);
 8003cc8:	227f      	movs	r2, #127	@ 0x7f
 8003cca:	2100      	movs	r1, #0
 8003ccc:	2004      	movs	r0, #4
 8003cce:	f7fd fdb5 	bl	800183c <lcd_clear>
		lcd_clear(5, 0, 127);
 8003cd2:	227f      	movs	r2, #127	@ 0x7f
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	2005      	movs	r0, #5
 8003cd8:	f7fd fdb0 	bl	800183c <lcd_clear>
		lcd_clear(6, 0, 127);
 8003cdc:	227f      	movs	r2, #127	@ 0x7f
 8003cde:	2100      	movs	r1, #0
 8003ce0:	2006      	movs	r0, #6
 8003ce2:	f7fd fdab 	bl	800183c <lcd_clear>
		lcd_clear(7, 0, 127);
 8003ce6:	227f      	movs	r2, #127	@ 0x7f
 8003ce8:	2100      	movs	r1, #0
 8003cea:	2007      	movs	r0, #7
 8003cec:	f7fd fda6 	bl	800183c <lcd_clear>
     }
     EEPROM_init();
 8003cf0:	f7ff fa8a 	bl	8003208 <EEPROM_init>
	 MX_IWDG_Init();
 8003cf4:	f000 f96e 	bl	8003fd4 <MX_IWDG_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(print_state)
 8003cf8:	4b4b      	ldr	r3, [pc, #300]	@ (8003e28 <main+0x1f0>)
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d056      	beq.n	8003dae <main+0x176>
	  {
		print_state=0;
 8003d00:	4b49      	ldr	r3, [pc, #292]	@ (8003e28 <main+0x1f0>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	701a      	strb	r2, [r3, #0]
		lcd_clear(0, 0, 127);
 8003d06:	227f      	movs	r2, #127	@ 0x7f
 8003d08:	2100      	movs	r1, #0
 8003d0a:	2000      	movs	r0, #0
 8003d0c:	f7fd fd96 	bl	800183c <lcd_clear>
		lcd_clear(1, 0, 127);
 8003d10:	227f      	movs	r2, #127	@ 0x7f
 8003d12:	2100      	movs	r1, #0
 8003d14:	2001      	movs	r0, #1
 8003d16:	f7fd fd91 	bl	800183c <lcd_clear>
		lcd_clear(2, 0, 127);
 8003d1a:	227f      	movs	r2, #127	@ 0x7f
 8003d1c:	2100      	movs	r1, #0
 8003d1e:	2002      	movs	r0, #2
 8003d20:	f7fd fd8c 	bl	800183c <lcd_clear>
		lcd_clear(3, 0, 127);
 8003d24:	227f      	movs	r2, #127	@ 0x7f
 8003d26:	2100      	movs	r1, #0
 8003d28:	2003      	movs	r0, #3
 8003d2a:	f7fd fd87 	bl	800183c <lcd_clear>
		lcd_clear(4, 0, 127);
 8003d2e:	227f      	movs	r2, #127	@ 0x7f
 8003d30:	2100      	movs	r1, #0
 8003d32:	2004      	movs	r0, #4
 8003d34:	f7fd fd82 	bl	800183c <lcd_clear>
		lcd_clear(5, 0, 127);
 8003d38:	227f      	movs	r2, #127	@ 0x7f
 8003d3a:	2100      	movs	r1, #0
 8003d3c:	2005      	movs	r0, #5
 8003d3e:	f7fd fd7d 	bl	800183c <lcd_clear>
		lcd_clear(6, 0, 127);
 8003d42:	227f      	movs	r2, #127	@ 0x7f
 8003d44:	2100      	movs	r1, #0
 8003d46:	2006      	movs	r0, #6
 8003d48:	f7fd fd78 	bl	800183c <lcd_clear>
		lcd_clear(7, 0, 127);
 8003d4c:	227f      	movs	r2, #127	@ 0x7f
 8003d4e:	2100      	movs	r1, #0
 8003d50:	2007      	movs	r0, #7
 8003d52:	f7fd fd73 	bl	800183c <lcd_clear>
		BMS_CAN();// read data from the BMS through the can protocol
 8003d56:	f7ff fb65 	bl	8003424 <BMS_CAN>
		if(first_time)
 8003d5a:	4b34      	ldr	r3, [pc, #208]	@ (8003e2c <main+0x1f4>)
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d007      	beq.n	8003d72 <main+0x13a>
		{
		   battery_cycle();
 8003d62:	f7fe fed5 	bl	8002b10 <battery_cycle>
		   first_time--;
 8003d66:	4b31      	ldr	r3, [pc, #196]	@ (8003e2c <main+0x1f4>)
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	b2da      	uxtb	r2, r3
 8003d6e:	4b2f      	ldr	r3, [pc, #188]	@ (8003e2c <main+0x1f4>)
 8003d70:	701a      	strb	r2, [r3, #0]
		}
		Gear_Status();
 8003d72:	f7ff f931 	bl	8002fd8 <Gear_Status>
		battery_temp();
 8003d76:	f7fe ff59 	bl	8002c2c <battery_temp>
		line_print();
 8003d7a:	f7fd fed3 	bl	8001b24 <line_print>
		battery_soc();
 8003d7e:	f7ff f867 	bl	8002e50 <battery_soc>
		ODO_calculation();
 8003d82:	f7ff fe55 	bl	8003a30 <ODO_calculation>
		ODO_PRINT();
 8003d86:	f7ff fd33 	bl	80037f0 <ODO_PRINT>
		battery_voltage();
 8003d8a:	f7fe fe89 	bl	8002aa0 <battery_voltage>
		Lcd_cmd(0xA2); // ADC select
 8003d8e:	20a2      	movs	r0, #162	@ 0xa2
 8003d90:	f7fd f8e8 	bl	8000f64 <Lcd_cmd>
		Lcd_cmd(0xA0);// SHL select
 8003d94:	20a0      	movs	r0, #160	@ 0xa0
 8003d96:	f7fd f8e5 	bl	8000f64 <Lcd_cmd>
		Lcd_cmd(0xC0);// Initial display line
 8003d9a:	20c0      	movs	r0, #192	@ 0xc0
 8003d9c:	f7fd f8e2 	bl	8000f64 <Lcd_cmd>
		Lcd_cmd(0x40);
 8003da0:	2040      	movs	r0, #64	@ 0x40
 8003da2:	f7fd f8df 	bl	8000f64 <Lcd_cmd>
		lcd_invert_process();
 8003da6:	f7fd fa79 	bl	800129c <lcd_invert_process>
		lcd_print_ram_1();
 8003daa:	f7fd f90f 	bl	8000fcc <lcd_print_ram_1>
	  }
	  if(sensor_change)
 8003dae:	4b20      	ldr	r3, [pc, #128]	@ (8003e30 <main+0x1f8>)
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d012      	beq.n	8003ddc <main+0x1a4>
	  {
		  sensor_change=0;
 8003db6:	4b1e      	ldr	r3, [pc, #120]	@ (8003e30 <main+0x1f8>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	701a      	strb	r2, [r3, #0]
		  I2C_Write_EEPROM(OBD.Gear_ratio,gear_ratio_EEPROM);
 8003dbc:	4b1d      	ldr	r3, [pc, #116]	@ (8003e34 <main+0x1fc>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7fd f8af 	bl	8000f24 <__aeabi_f2uiz>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	21e0      	movs	r1, #224	@ 0xe0
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7fe fdfa 	bl	80029c4 <I2C_Write_EEPROM>
		  I2C_Write_EEPROM(OBD.speed_sensor_type,speed_sensor_type_EEPROM);
 8003dd0:	4b18      	ldr	r3, [pc, #96]	@ (8003e34 <main+0x1fc>)
 8003dd2:	791b      	ldrb	r3, [r3, #4]
 8003dd4:	21b0      	movs	r1, #176	@ 0xb0
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7fe fdf4 	bl	80029c4 <I2C_Write_EEPROM>
	  }
		if((Range.Odometer_Value>=last_flash_update+1000)&&(Range.Odometer_Value<=last_flash_update+1010))
 8003ddc:	4b16      	ldr	r3, [pc, #88]	@ (8003e38 <main+0x200>)
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	4b16      	ldr	r3, [pc, #88]	@ (8003e3c <main+0x204>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d311      	bcc.n	8003e10 <main+0x1d8>
 8003dec:	4b12      	ldr	r3, [pc, #72]	@ (8003e38 <main+0x200>)
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	4b12      	ldr	r3, [pc, #72]	@ (8003e3c <main+0x204>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f203 33f2 	addw	r3, r3, #1010	@ 0x3f2
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d809      	bhi.n	8003e10 <main+0x1d8>
		{
			last_flash_update=Range.Odometer_Value;
 8003dfc:	4b0e      	ldr	r3, [pc, #56]	@ (8003e38 <main+0x200>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a0e      	ldr	r2, [pc, #56]	@ (8003e3c <main+0x204>)
 8003e02:	6013      	str	r3, [r2, #0]
			I2C_Write_EEPROM(last_flash_update,last_flash_update_EEPROM);
 8003e04:	4b0d      	ldr	r3, [pc, #52]	@ (8003e3c <main+0x204>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	21d0      	movs	r1, #208	@ 0xd0
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7fe fdda 	bl	80029c4 <I2C_Write_EEPROM>
		}
		HAL_IWDG_Refresh(&hiwdg);
 8003e10:	480b      	ldr	r0, [pc, #44]	@ (8003e40 <main+0x208>)
 8003e12:	f003 fa70 	bl	80072f6 <HAL_IWDG_Refresh>
	  if(print_state)
 8003e16:	e76f      	b.n	8003cf8 <main+0xc0>
 8003e18:	20001490 	.word	0x20001490
 8003e1c:	20001468 	.word	0x20001468
 8003e20:	200014f0 	.word	0x200014f0
 8003e24:	40021000 	.word	0x40021000
 8003e28:	200007a0 	.word	0x200007a0
 8003e2c:	2000079c 	.word	0x2000079c
 8003e30:	200018d8 	.word	0x200018d8
 8003e34:	20001460 	.word	0x20001460
 8003e38:	20001910 	.word	0x20001910
 8003e3c:	200018f8 	.word	0x200018f8
 8003e40:	200014e4 	.word	0x200014e4

08003e44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b090      	sub	sp, #64	@ 0x40
 8003e48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003e4a:	f107 0318 	add.w	r3, r7, #24
 8003e4e:	2228      	movs	r2, #40	@ 0x28
 8003e50:	2100      	movs	r1, #0
 8003e52:	4618      	mov	r0, r3
 8003e54:	f004 fac8 	bl	80083e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003e58:	1d3b      	adds	r3, r7, #4
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	601a      	str	r2, [r3, #0]
 8003e5e:	605a      	str	r2, [r3, #4]
 8003e60:	609a      	str	r2, [r3, #8]
 8003e62:	60da      	str	r2, [r3, #12]
 8003e64:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003e66:	2309      	movs	r3, #9
 8003e68:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003e6a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003e6e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003e70:	2300      	movs	r3, #0
 8003e72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003e74:	2301      	movs	r3, #1
 8003e76:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003e80:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003e84:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003e86:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8003e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e8c:	f107 0318 	add.w	r3, r7, #24
 8003e90:	4618      	mov	r0, r3
 8003e92:	f003 fabb 	bl	800740c <HAL_RCC_OscConfig>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d001      	beq.n	8003ea0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8003e9c:	f000 fe06 	bl	8004aac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003ea0:	230f      	movs	r3, #15
 8003ea2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003eac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003eb0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003eb6:	1d3b      	adds	r3, r7, #4
 8003eb8:	2102      	movs	r1, #2
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f003 fd28 	bl	8007910 <HAL_RCC_ClockConfig>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d001      	beq.n	8003eca <SystemClock_Config+0x86>
  {
    Error_Handler();
 8003ec6:	f000 fdf1 	bl	8004aac <Error_Handler>
  }
}
 8003eca:	bf00      	nop
 8003ecc:	3740      	adds	r7, #64	@ 0x40
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
	...

08003ed4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b08a      	sub	sp, #40	@ 0x28
 8003ed8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8003eda:	4b25      	ldr	r3, [pc, #148]	@ (8003f70 <MX_CAN_Init+0x9c>)
 8003edc:	4a25      	ldr	r2, [pc, #148]	@ (8003f74 <MX_CAN_Init+0xa0>)
 8003ede:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 8003ee0:	4b23      	ldr	r3, [pc, #140]	@ (8003f70 <MX_CAN_Init+0x9c>)
 8003ee2:	2208      	movs	r2, #8
 8003ee4:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8003ee6:	4b22      	ldr	r3, [pc, #136]	@ (8003f70 <MX_CAN_Init+0x9c>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003eec:	4b20      	ldr	r3, [pc, #128]	@ (8003f70 <MX_CAN_Init+0x9c>)
 8003eee:	2200      	movs	r2, #0
 8003ef0:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8003ef2:	4b1f      	ldr	r3, [pc, #124]	@ (8003f70 <MX_CAN_Init+0x9c>)
 8003ef4:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8003ef8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8003efa:	4b1d      	ldr	r3, [pc, #116]	@ (8003f70 <MX_CAN_Init+0x9c>)
 8003efc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003f00:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8003f02:	4b1b      	ldr	r3, [pc, #108]	@ (8003f70 <MX_CAN_Init+0x9c>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8003f08:	4b19      	ldr	r3, [pc, #100]	@ (8003f70 <MX_CAN_Init+0x9c>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8003f0e:	4b18      	ldr	r3, [pc, #96]	@ (8003f70 <MX_CAN_Init+0x9c>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8003f14:	4b16      	ldr	r3, [pc, #88]	@ (8003f70 <MX_CAN_Init+0x9c>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8003f1a:	4b15      	ldr	r3, [pc, #84]	@ (8003f70 <MX_CAN_Init+0x9c>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8003f20:	4b13      	ldr	r3, [pc, #76]	@ (8003f70 <MX_CAN_Init+0x9c>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8003f26:	4812      	ldr	r0, [pc, #72]	@ (8003f70 <MX_CAN_Init+0x9c>)
 8003f28:	f000 fff0 	bl	8004f0c <HAL_CAN_Init>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8003f32:	f000 fdbb 	bl	8004aac <Error_Handler>
    * Filter ID and Filter Mask are used to compare and verify the incoming Identifier for receiving data
    * FIFO 0 is used for store the received data
    *In FiterID mask mode , two 32 bit registers (Filter ID and Filter Mask)
    */
	CAN_FilterTypeDef filtercon;// Need to add filter configuration for receiving data
	filtercon.FilterActivation = CAN_FILTER_ENABLE;//Enable Filter for receiving data
 8003f36:	2301      	movs	r3, #1
 8003f38:	623b      	str	r3, [r7, #32]
	filtercon.FilterBank = 1;//Here using filter bank 1 for receiving data(Controller- single CAN -14 filter bank)
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	617b      	str	r3, [r7, #20]
	filtercon.FilterFIFOAssignment = CAN_FILTER_FIFO0;//using FIFO 0 for receiving data
 8003f3e:	2300      	movs	r3, #0
 8003f40:	613b      	str	r3, [r7, #16]
	filtercon.FilterIdHigh = 0x0000;//controller receives all the identifier without any restriction if gives 0x0000
 8003f42:	2300      	movs	r3, #0
 8003f44:	603b      	str	r3, [r7, #0]
	filtercon.FilterIdLow = 0x0000;//controller receives all the identifier without any restriction if gives 0x0000
 8003f46:	2300      	movs	r3, #0
 8003f48:	607b      	str	r3, [r7, #4]
	filtercon.FilterMaskIdHigh = 0X0000;//controller receives all the identifier without any restriction if gives 0x0000
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	60bb      	str	r3, [r7, #8]
	filtercon.FilterMaskIdLow = 0X0000;//controller receives all the identifier without any restriction if gives 0x0000
 8003f4e:	2300      	movs	r3, #0
 8003f50:	60fb      	str	r3, [r7, #12]
	filtercon.FilterMode = CAN_FILTERMODE_IDMASK;//using ID mask mode receiving identifier
 8003f52:	2300      	movs	r3, #0
 8003f54:	61bb      	str	r3, [r7, #24]
	filtercon.FilterScale = CAN_FILTERSCALE_32BIT;//32 bit register ID and Mask register
 8003f56:	2301      	movs	r3, #1
 8003f58:	61fb      	str	r3, [r7, #28]
	filtercon.SlaveStartFilterBank = 0;// don't care if the controller has single CAN
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_CAN_ConfigFilter(&hcan,&filtercon);//Filter configuration declaration
 8003f5e:	463b      	mov	r3, r7
 8003f60:	4619      	mov	r1, r3
 8003f62:	4803      	ldr	r0, [pc, #12]	@ (8003f70 <MX_CAN_Init+0x9c>)
 8003f64:	f001 f8cd 	bl	8005102 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 8003f68:	bf00      	nop
 8003f6a:	3728      	adds	r7, #40	@ 0x28
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	20001468 	.word	0x20001468
 8003f74:	40006400 	.word	0x40006400

08003f78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003f7c:	4b12      	ldr	r3, [pc, #72]	@ (8003fc8 <MX_I2C1_Init+0x50>)
 8003f7e:	4a13      	ldr	r2, [pc, #76]	@ (8003fcc <MX_I2C1_Init+0x54>)
 8003f80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003f82:	4b11      	ldr	r3, [pc, #68]	@ (8003fc8 <MX_I2C1_Init+0x50>)
 8003f84:	4a12      	ldr	r2, [pc, #72]	@ (8003fd0 <MX_I2C1_Init+0x58>)
 8003f86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003f88:	4b0f      	ldr	r3, [pc, #60]	@ (8003fc8 <MX_I2C1_Init+0x50>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8003fc8 <MX_I2C1_Init+0x50>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003f94:	4b0c      	ldr	r3, [pc, #48]	@ (8003fc8 <MX_I2C1_Init+0x50>)
 8003f96:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003f9a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8003fc8 <MX_I2C1_Init+0x50>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003fa2:	4b09      	ldr	r3, [pc, #36]	@ (8003fc8 <MX_I2C1_Init+0x50>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003fa8:	4b07      	ldr	r3, [pc, #28]	@ (8003fc8 <MX_I2C1_Init+0x50>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003fae:	4b06      	ldr	r3, [pc, #24]	@ (8003fc8 <MX_I2C1_Init+0x50>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003fb4:	4804      	ldr	r0, [pc, #16]	@ (8003fc8 <MX_I2C1_Init+0x50>)
 8003fb6:	f002 f8f5 	bl	80061a4 <HAL_I2C_Init>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d001      	beq.n	8003fc4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003fc0:	f000 fd74 	bl	8004aac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003fc4:	bf00      	nop
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	20001490 	.word	0x20001490
 8003fcc:	40005400 	.word	0x40005400
 8003fd0:	00061a80 	.word	0x00061a80

08003fd4 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8003fd8:	4b09      	ldr	r3, [pc, #36]	@ (8004000 <MX_IWDG_Init+0x2c>)
 8003fda:	4a0a      	ldr	r2, [pc, #40]	@ (8004004 <MX_IWDG_Init+0x30>)
 8003fdc:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_128;
 8003fde:	4b08      	ldr	r3, [pc, #32]	@ (8004000 <MX_IWDG_Init+0x2c>)
 8003fe0:	2205      	movs	r2, #5
 8003fe2:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 1000;
 8003fe4:	4b06      	ldr	r3, [pc, #24]	@ (8004000 <MX_IWDG_Init+0x2c>)
 8003fe6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003fea:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8003fec:	4804      	ldr	r0, [pc, #16]	@ (8004000 <MX_IWDG_Init+0x2c>)
 8003fee:	f003 f93e 	bl	800726e <HAL_IWDG_Init>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d001      	beq.n	8003ffc <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8003ff8:	f000 fd58 	bl	8004aac <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8003ffc:	bf00      	nop
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	200014e4 	.word	0x200014e4
 8004004:	40003000 	.word	0x40003000

08004008 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b086      	sub	sp, #24
 800400c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800400e:	f107 0308 	add.w	r3, r7, #8
 8004012:	2200      	movs	r2, #0
 8004014:	601a      	str	r2, [r3, #0]
 8004016:	605a      	str	r2, [r3, #4]
 8004018:	609a      	str	r2, [r3, #8]
 800401a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800401c:	463b      	mov	r3, r7
 800401e:	2200      	movs	r2, #0
 8004020:	601a      	str	r2, [r3, #0]
 8004022:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004024:	4b1d      	ldr	r3, [pc, #116]	@ (800409c <MX_TIM2_Init+0x94>)
 8004026:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800402a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 800402c:	4b1b      	ldr	r3, [pc, #108]	@ (800409c <MX_TIM2_Init+0x94>)
 800402e:	2263      	movs	r2, #99	@ 0x63
 8004030:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004032:	4b1a      	ldr	r3, [pc, #104]	@ (800409c <MX_TIM2_Init+0x94>)
 8004034:	2200      	movs	r2, #0
 8004036:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 72-1;
 8004038:	4b18      	ldr	r3, [pc, #96]	@ (800409c <MX_TIM2_Init+0x94>)
 800403a:	2247      	movs	r2, #71	@ 0x47
 800403c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800403e:	4b17      	ldr	r3, [pc, #92]	@ (800409c <MX_TIM2_Init+0x94>)
 8004040:	2200      	movs	r2, #0
 8004042:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004044:	4b15      	ldr	r3, [pc, #84]	@ (800409c <MX_TIM2_Init+0x94>)
 8004046:	2200      	movs	r2, #0
 8004048:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800404a:	4814      	ldr	r0, [pc, #80]	@ (800409c <MX_TIM2_Init+0x94>)
 800404c:	f003 fdda 	bl	8007c04 <HAL_TIM_Base_Init>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8004056:	f000 fd29 	bl	8004aac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800405a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800405e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004060:	f107 0308 	add.w	r3, r7, #8
 8004064:	4619      	mov	r1, r3
 8004066:	480d      	ldr	r0, [pc, #52]	@ (800409c <MX_TIM2_Init+0x94>)
 8004068:	f003 ff5e 	bl	8007f28 <HAL_TIM_ConfigClockSource>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8004072:	f000 fd1b 	bl	8004aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004076:	2300      	movs	r3, #0
 8004078:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800407a:	2300      	movs	r3, #0
 800407c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800407e:	463b      	mov	r3, r7
 8004080:	4619      	mov	r1, r3
 8004082:	4806      	ldr	r0, [pc, #24]	@ (800409c <MX_TIM2_Init+0x94>)
 8004084:	f004 f940 	bl	8008308 <HAL_TIMEx_MasterConfigSynchronization>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d001      	beq.n	8004092 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800408e:	f000 fd0d 	bl	8004aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004092:	bf00      	nop
 8004094:	3718      	adds	r7, #24
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	200014f0 	.word	0x200014f0

080040a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b088      	sub	sp, #32
 80040a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040a6:	f107 0310 	add.w	r3, r7, #16
 80040aa:	2200      	movs	r2, #0
 80040ac:	601a      	str	r2, [r3, #0]
 80040ae:	605a      	str	r2, [r3, #4]
 80040b0:	609a      	str	r2, [r3, #8]
 80040b2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80040b4:	4b49      	ldr	r3, [pc, #292]	@ (80041dc <MX_GPIO_Init+0x13c>)
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	4a48      	ldr	r2, [pc, #288]	@ (80041dc <MX_GPIO_Init+0x13c>)
 80040ba:	f043 0310 	orr.w	r3, r3, #16
 80040be:	6193      	str	r3, [r2, #24]
 80040c0:	4b46      	ldr	r3, [pc, #280]	@ (80041dc <MX_GPIO_Init+0x13c>)
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	f003 0310 	and.w	r3, r3, #16
 80040c8:	60fb      	str	r3, [r7, #12]
 80040ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80040cc:	4b43      	ldr	r3, [pc, #268]	@ (80041dc <MX_GPIO_Init+0x13c>)
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	4a42      	ldr	r2, [pc, #264]	@ (80041dc <MX_GPIO_Init+0x13c>)
 80040d2:	f043 0320 	orr.w	r3, r3, #32
 80040d6:	6193      	str	r3, [r2, #24]
 80040d8:	4b40      	ldr	r3, [pc, #256]	@ (80041dc <MX_GPIO_Init+0x13c>)
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	f003 0320 	and.w	r3, r3, #32
 80040e0:	60bb      	str	r3, [r7, #8]
 80040e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80040e4:	4b3d      	ldr	r3, [pc, #244]	@ (80041dc <MX_GPIO_Init+0x13c>)
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	4a3c      	ldr	r2, [pc, #240]	@ (80041dc <MX_GPIO_Init+0x13c>)
 80040ea:	f043 0304 	orr.w	r3, r3, #4
 80040ee:	6193      	str	r3, [r2, #24]
 80040f0:	4b3a      	ldr	r3, [pc, #232]	@ (80041dc <MX_GPIO_Init+0x13c>)
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	f003 0304 	and.w	r3, r3, #4
 80040f8:	607b      	str	r3, [r7, #4]
 80040fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80040fc:	4b37      	ldr	r3, [pc, #220]	@ (80041dc <MX_GPIO_Init+0x13c>)
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	4a36      	ldr	r2, [pc, #216]	@ (80041dc <MX_GPIO_Init+0x13c>)
 8004102:	f043 0308 	orr.w	r3, r3, #8
 8004106:	6193      	str	r3, [r2, #24]
 8004108:	4b34      	ldr	r3, [pc, #208]	@ (80041dc <MX_GPIO_Init+0x13c>)
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	f003 0308 	and.w	r3, r3, #8
 8004110:	603b      	str	r3, [r7, #0]
 8004112:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin
 8004114:	2200      	movs	r2, #0
 8004116:	f240 11ff 	movw	r1, #511	@ 0x1ff
 800411a:	4831      	ldr	r0, [pc, #196]	@ (80041e0 <MX_GPIO_Init+0x140>)
 800411c:	f001 fff9 	bl	8006112 <HAL_GPIO_WritePin>
                          |LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin
                          |Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, lcd_adr_Pin|LCD_RD_Pin|lcd_reset_Pin|lcd_chip_sel_Pin
 8004120:	2200      	movs	r2, #0
 8004122:	f640 41a7 	movw	r1, #3239	@ 0xca7
 8004126:	482f      	ldr	r0, [pc, #188]	@ (80041e4 <MX_GPIO_Init+0x144>)
 8004128:	f001 fff3 	bl	8006112 <HAL_GPIO_WritePin>
                          |check_led_Pin|Test_pin_Pin|LCD_RW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : speed_sensor_Pin */
  GPIO_InitStruct.Pin = speed_sensor_Pin;
 800412c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004130:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004132:	4b2d      	ldr	r3, [pc, #180]	@ (80041e8 <MX_GPIO_Init+0x148>)
 8004134:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004136:	2301      	movs	r3, #1
 8004138:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(speed_sensor_GPIO_Port, &GPIO_InitStruct);
 800413a:	f107 0310 	add.w	r3, r7, #16
 800413e:	4619      	mov	r1, r3
 8004140:	482a      	ldr	r0, [pc, #168]	@ (80041ec <MX_GPIO_Init+0x14c>)
 8004142:	f001 fe4b 	bl	8005ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D0_Pin LCD_D1_Pin LCD_D2_Pin LCD_D3_Pin
                           LCD_D4_Pin LCD_D5_Pin LCD_D6_Pin LCD_D7_Pin
                           Buzzer_Pin */
  GPIO_InitStruct.Pin = LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin
 8004146:	f240 13ff 	movw	r3, #511	@ 0x1ff
 800414a:	613b      	str	r3, [r7, #16]
                          |LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin
                          |Buzzer_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800414c:	2301      	movs	r3, #1
 800414e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004150:	2300      	movs	r3, #0
 8004152:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004154:	2302      	movs	r3, #2
 8004156:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004158:	f107 0310 	add.w	r3, r7, #16
 800415c:	4619      	mov	r1, r3
 800415e:	4820      	ldr	r0, [pc, #128]	@ (80041e0 <MX_GPIO_Init+0x140>)
 8004160:	f001 fe3c 	bl	8005ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : lcd_adr_Pin LCD_RD_Pin lcd_reset_Pin lcd_chip_sel_Pin
                           check_led_Pin Test_pin_Pin LCD_RW_Pin */
  GPIO_InitStruct.Pin = lcd_adr_Pin|LCD_RD_Pin|lcd_reset_Pin|lcd_chip_sel_Pin
 8004164:	f640 43a7 	movw	r3, #3239	@ 0xca7
 8004168:	613b      	str	r3, [r7, #16]
                          |check_led_Pin|Test_pin_Pin|LCD_RW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800416a:	2301      	movs	r3, #1
 800416c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800416e:	2300      	movs	r3, #0
 8004170:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004172:	2302      	movs	r3, #2
 8004174:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004176:	f107 0310 	add.w	r3, r7, #16
 800417a:	4619      	mov	r1, r3
 800417c:	4819      	ldr	r0, [pc, #100]	@ (80041e4 <MX_GPIO_Init+0x144>)
 800417e:	f001 fe2d 	bl	8005ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : ONE_WIRE_PRT_Pin */
  GPIO_InitStruct.Pin = ONE_WIRE_PRT_Pin;
 8004182:	2308      	movs	r3, #8
 8004184:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004186:	4b1a      	ldr	r3, [pc, #104]	@ (80041f0 <MX_GPIO_Init+0x150>)
 8004188:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800418a:	2301      	movs	r3, #1
 800418c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ONE_WIRE_PRT_GPIO_Port, &GPIO_InitStruct);
 800418e:	f107 0310 	add.w	r3, r7, #16
 8004192:	4619      	mov	r1, r3
 8004194:	4813      	ldr	r0, [pc, #76]	@ (80041e4 <MX_GPIO_Init+0x144>)
 8004196:	f001 fe21 	bl	8005ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : Reverse_state_Pin */
  GPIO_InitStruct.Pin = Reverse_state_Pin;
 800419a:	2310      	movs	r3, #16
 800419c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800419e:	2300      	movs	r3, #0
 80041a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80041a2:	2301      	movs	r3, #1
 80041a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Reverse_state_GPIO_Port, &GPIO_InitStruct);
 80041a6:	f107 0310 	add.w	r3, r7, #16
 80041aa:	4619      	mov	r1, r3
 80041ac:	480d      	ldr	r0, [pc, #52]	@ (80041e4 <MX_GPIO_Init+0x144>)
 80041ae:	f001 fe15 	bl	8005ddc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80041b2:	2200      	movs	r2, #0
 80041b4:	2100      	movs	r1, #0
 80041b6:	2009      	movs	r0, #9
 80041b8:	f001 fdd5 	bl	8005d66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80041bc:	2009      	movs	r0, #9
 80041be:	f001 fdee 	bl	8005d9e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80041c2:	2200      	movs	r2, #0
 80041c4:	2100      	movs	r1, #0
 80041c6:	2028      	movs	r0, #40	@ 0x28
 80041c8:	f001 fdcd 	bl	8005d66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80041cc:	2028      	movs	r0, #40	@ 0x28
 80041ce:	f001 fde6 	bl	8005d9e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80041d2:	bf00      	nop
 80041d4:	3720      	adds	r7, #32
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	40021000 	.word	0x40021000
 80041e0:	40010800 	.word	0x40010800
 80041e4:	40010c00 	.word	0x40010c00
 80041e8:	10210000 	.word	0x10210000
 80041ec:	40011000 	.word	0x40011000
 80041f0:	10110000 	.word	0x10110000

080041f4 <HAL_TIM_PeriodElapsedCallback>:
uint16_t speed_time=0,can_buzzer_delay=1000,sec=0,rev_buzzr_delay=0,temp_buzzr_delay=0,TRIP_TIMER=0;
uint16_t SYC_PASS = 0;//data_delay = 60 for bheem
int8_t bit_count=7;
uint8_t avg=0,last_count=0; uint16_t doc=0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) // To create a every 100us timer Interrupt. prescalar value is 100 and ARR(Auto Reload Register) = 72.
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004204:	f040 818b 	bne.w	800451e <HAL_TIM_PeriodElapsedCallback+0x32a>
  {
	 timerCounter++; //It will incremented every timer interrupt occur with time.
 8004208:	4b7e      	ldr	r3, [pc, #504]	@ (8004404 <HAL_TIM_PeriodElapsedCallback+0x210>)
 800420a:	881b      	ldrh	r3, [r3, #0]
 800420c:	b29b      	uxth	r3, r3
 800420e:	3301      	adds	r3, #1
 8004210:	b29a      	uxth	r2, r3
 8004212:	4b7c      	ldr	r3, [pc, #496]	@ (8004404 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8004214:	801a      	strh	r2, [r3, #0]
	 timerCounter2++;
 8004216:	4b7c      	ldr	r3, [pc, #496]	@ (8004408 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	3301      	adds	r3, #1
 800421c:	b2da      	uxtb	r2, r3
 800421e:	4b7a      	ldr	r3, [pc, #488]	@ (8004408 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8004220:	701a      	strb	r2, [r3, #0]
	 timerCounter3++;
 8004222:	4b7a      	ldr	r3, [pc, #488]	@ (800440c <HAL_TIM_PeriodElapsedCallback+0x218>)
 8004224:	881b      	ldrh	r3, [r3, #0]
 8004226:	3301      	adds	r3, #1
 8004228:	b29a      	uxth	r2, r3
 800422a:	4b78      	ldr	r3, [pc, #480]	@ (800440c <HAL_TIM_PeriodElapsedCallback+0x218>)
 800422c:	801a      	strh	r2, [r3, #0]
	 if(timerCounter==10)
 800422e:	4b75      	ldr	r3, [pc, #468]	@ (8004404 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8004230:	881b      	ldrh	r3, [r3, #0]
 8004232:	b29b      	uxth	r3, r3
 8004234:	2b0a      	cmp	r3, #10
 8004236:	d10e      	bne.n	8004256 <HAL_TIM_PeriodElapsedCallback+0x62>
	 {
		 m_sec++;
 8004238:	4b75      	ldr	r3, [pc, #468]	@ (8004410 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800423a:	881b      	ldrh	r3, [r3, #0]
 800423c:	3301      	adds	r3, #1
 800423e:	b29a      	uxth	r2, r3
 8004240:	4b73      	ldr	r3, [pc, #460]	@ (8004410 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8004242:	801a      	strh	r2, [r3, #0]
		 TRIP_TIMER++;
 8004244:	4b73      	ldr	r3, [pc, #460]	@ (8004414 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8004246:	881b      	ldrh	r3, [r3, #0]
 8004248:	3301      	adds	r3, #1
 800424a:	b29a      	uxth	r2, r3
 800424c:	4b71      	ldr	r3, [pc, #452]	@ (8004414 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800424e:	801a      	strh	r2, [r3, #0]
		 timerCounter=0;
 8004250:	4b6c      	ldr	r3, [pc, #432]	@ (8004404 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8004252:	2200      	movs	r2, #0
 8004254:	801a      	strh	r2, [r3, #0]
	 }
	 if(m_sec==print_delay)
 8004256:	4b6e      	ldr	r3, [pc, #440]	@ (8004410 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8004258:	881a      	ldrh	r2, [r3, #0]
 800425a:	4b6f      	ldr	r3, [pc, #444]	@ (8004418 <HAL_TIM_PeriodElapsedCallback+0x224>)
 800425c:	881b      	ldrh	r3, [r3, #0]
 800425e:	429a      	cmp	r2, r3
 8004260:	d109      	bne.n	8004276 <HAL_TIM_PeriodElapsedCallback+0x82>
	 {
		 print_delay=m_sec+1000;
 8004262:	4b6b      	ldr	r3, [pc, #428]	@ (8004410 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8004264:	881b      	ldrh	r3, [r3, #0]
 8004266:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800426a:	b29a      	uxth	r2, r3
 800426c:	4b6a      	ldr	r3, [pc, #424]	@ (8004418 <HAL_TIM_PeriodElapsedCallback+0x224>)
 800426e:	801a      	strh	r2, [r3, #0]
	     print_state=1;
 8004270:	4b6a      	ldr	r3, [pc, #424]	@ (800441c <HAL_TIM_PeriodElapsedCallback+0x228>)
 8004272:	2201      	movs	r2, #1
 8004274:	701a      	strb	r2, [r3, #0]
	 }

	 if(m_sec==rev_buzzr_delay)
 8004276:	4b66      	ldr	r3, [pc, #408]	@ (8004410 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8004278:	881a      	ldrh	r2, [r3, #0]
 800427a:	4b69      	ldr	r3, [pc, #420]	@ (8004420 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800427c:	881b      	ldrh	r3, [r3, #0]
 800427e:	429a      	cmp	r2, r3
 8004280:	d10f      	bne.n	80042a2 <HAL_TIM_PeriodElapsedCallback+0xae>
	 {
		 rev_buzzr_delay=m_sec+500;
 8004282:	4b63      	ldr	r3, [pc, #396]	@ (8004410 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8004284:	881b      	ldrh	r3, [r3, #0]
 8004286:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800428a:	b29a      	uxth	r2, r3
 800428c:	4b64      	ldr	r3, [pc, #400]	@ (8004420 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800428e:	801a      	strh	r2, [r3, #0]
		 if(Reverse_status==1)
 8004290:	4b64      	ldr	r3, [pc, #400]	@ (8004424 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d104      	bne.n	80042a2 <HAL_TIM_PeriodElapsedCallback+0xae>
		 {
			 HAL_GPIO_TogglePin(GPIOA, Buzzer_Pin);
 8004298:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800429c:	4862      	ldr	r0, [pc, #392]	@ (8004428 <HAL_TIM_PeriodElapsedCallback+0x234>)
 800429e:	f001 ff50 	bl	8006142 <HAL_GPIO_TogglePin>
		 }
	 }
	 if(m_sec==temp_buzzr_delay)
 80042a2:	4b5b      	ldr	r3, [pc, #364]	@ (8004410 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80042a4:	881a      	ldrh	r2, [r3, #0]
 80042a6:	4b61      	ldr	r3, [pc, #388]	@ (800442c <HAL_TIM_PeriodElapsedCallback+0x238>)
 80042a8:	881b      	ldrh	r3, [r3, #0]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d10e      	bne.n	80042cc <HAL_TIM_PeriodElapsedCallback+0xd8>
	 {
		 temp_buzzr_delay=m_sec+100;
 80042ae:	4b58      	ldr	r3, [pc, #352]	@ (8004410 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80042b0:	881b      	ldrh	r3, [r3, #0]
 80042b2:	3364      	adds	r3, #100	@ 0x64
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	4b5d      	ldr	r3, [pc, #372]	@ (800442c <HAL_TIM_PeriodElapsedCallback+0x238>)
 80042b8:	801a      	strh	r2, [r3, #0]
		 if(Battery_high_Temp==1)
 80042ba:	4b5d      	ldr	r3, [pc, #372]	@ (8004430 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d104      	bne.n	80042cc <HAL_TIM_PeriodElapsedCallback+0xd8>
		 {
			 HAL_GPIO_TogglePin(GPIOA, Buzzer_Pin);
 80042c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80042c6:	4858      	ldr	r0, [pc, #352]	@ (8004428 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80042c8:	f001 ff3b 	bl	8006142 <HAL_GPIO_TogglePin>
		 }
	 }

	 if(m_sec==speed_time)
 80042cc:	4b50      	ldr	r3, [pc, #320]	@ (8004410 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80042ce:	881a      	ldrh	r2, [r3, #0]
 80042d0:	4b58      	ldr	r3, [pc, #352]	@ (8004434 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80042d2:	881b      	ldrh	r3, [r3, #0]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d132      	bne.n	800433e <HAL_TIM_PeriodElapsedCallback+0x14a>
	 	{
			 if(doc>5)
 80042d8:	4b57      	ldr	r3, [pc, #348]	@ (8004438 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80042da:	881b      	ldrh	r3, [r3, #0]
 80042dc:	2b05      	cmp	r3, #5
 80042de:	d915      	bls.n	800430c <HAL_TIM_PeriodElapsedCallback+0x118>
			 {
				doc=0;
 80042e0:	4b55      	ldr	r3, [pc, #340]	@ (8004438 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	801a      	strh	r2, [r3, #0]
				speed_time=m_sec+1000;
 80042e6:	4b4a      	ldr	r3, [pc, #296]	@ (8004410 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80042e8:	881b      	ldrh	r3, [r3, #0]
 80042ea:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	4b50      	ldr	r3, [pc, #320]	@ (8004434 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80042f2:	801a      	strh	r2, [r3, #0]
				speed_count =last_count;
 80042f4:	4b51      	ldr	r3, [pc, #324]	@ (800443c <HAL_TIM_PeriodElapsedCallback+0x248>)
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	461a      	mov	r2, r3
 80042fa:	4b51      	ldr	r3, [pc, #324]	@ (8004440 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80042fc:	601a      	str	r2, [r3, #0]
				after_sec=1;
 80042fe:	4b51      	ldr	r3, [pc, #324]	@ (8004444 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8004300:	2201      	movs	r2, #1
 8004302:	701a      	strb	r2, [r3, #0]
				speed_count_temp=0;
 8004304:	4b50      	ldr	r3, [pc, #320]	@ (8004448 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8004306:	2200      	movs	r2, #0
 8004308:	601a      	str	r2, [r3, #0]
 800430a:	e018      	b.n	800433e <HAL_TIM_PeriodElapsedCallback+0x14a>
			 }
			 else
			 {
				doc=0;
 800430c:	4b4a      	ldr	r3, [pc, #296]	@ (8004438 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800430e:	2200      	movs	r2, #0
 8004310:	801a      	strh	r2, [r3, #0]
				speed_time=m_sec+1000;
 8004312:	4b3f      	ldr	r3, [pc, #252]	@ (8004410 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8004314:	881b      	ldrh	r3, [r3, #0]
 8004316:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800431a:	b29a      	uxth	r2, r3
 800431c:	4b45      	ldr	r3, [pc, #276]	@ (8004434 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800431e:	801a      	strh	r2, [r3, #0]
				speed_count =speed_count_temp;;
 8004320:	4b49      	ldr	r3, [pc, #292]	@ (8004448 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a46      	ldr	r2, [pc, #280]	@ (8004440 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8004326:	6013      	str	r3, [r2, #0]
				last_count=speed_count;
 8004328:	4b45      	ldr	r3, [pc, #276]	@ (8004440 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	b2da      	uxtb	r2, r3
 800432e:	4b43      	ldr	r3, [pc, #268]	@ (800443c <HAL_TIM_PeriodElapsedCallback+0x248>)
 8004330:	701a      	strb	r2, [r3, #0]
				after_sec=1;
 8004332:	4b44      	ldr	r3, [pc, #272]	@ (8004444 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8004334:	2201      	movs	r2, #1
 8004336:	701a      	strb	r2, [r3, #0]
				speed_count_temp=0;
 8004338:	4b43      	ldr	r3, [pc, #268]	@ (8004448 <HAL_TIM_PeriodElapsedCallback+0x254>)
 800433a:	2200      	movs	r2, #0
 800433c:	601a      	str	r2, [r3, #0]
			 }
	 	}

	 if(m_sec == can_buzzer_delay)
 800433e:	4b34      	ldr	r3, [pc, #208]	@ (8004410 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8004340:	881a      	ldrh	r2, [r3, #0]
 8004342:	4b42      	ldr	r3, [pc, #264]	@ (800444c <HAL_TIM_PeriodElapsedCallback+0x258>)
 8004344:	881b      	ldrh	r3, [r3, #0]
 8004346:	429a      	cmp	r2, r3
 8004348:	d12a      	bne.n	80043a0 <HAL_TIM_PeriodElapsedCallback+0x1ac>
	 {
		 if(inc_buz<=4)
 800434a:	4b41      	ldr	r3, [pc, #260]	@ (8004450 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	2b04      	cmp	r3, #4
 8004350:	d80f      	bhi.n	8004372 <HAL_TIM_PeriodElapsedCallback+0x17e>
		 {
			 can_buzzer_delay = m_sec+150;
 8004352:	4b2f      	ldr	r3, [pc, #188]	@ (8004410 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8004354:	881b      	ldrh	r3, [r3, #0]
 8004356:	3396      	adds	r3, #150	@ 0x96
 8004358:	b29a      	uxth	r2, r3
 800435a:	4b3c      	ldr	r3, [pc, #240]	@ (800444c <HAL_TIM_PeriodElapsedCallback+0x258>)
 800435c:	801a      	strh	r2, [r3, #0]
			 if(can_error_state == 1)
 800435e:	4b3d      	ldr	r3, [pc, #244]	@ (8004454 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d105      	bne.n	8004372 <HAL_TIM_PeriodElapsedCallback+0x17e>
			 {
				 inc_buz++;
 8004366:	4b3a      	ldr	r3, [pc, #232]	@ (8004450 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	3301      	adds	r3, #1
 800436c:	b2da      	uxtb	r2, r3
 800436e:	4b38      	ldr	r3, [pc, #224]	@ (8004450 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8004370:	701a      	strb	r2, [r3, #0]
			 }
		 }

		 if(can_error_state == 1)
 8004372:	4b38      	ldr	r3, [pc, #224]	@ (8004454 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d112      	bne.n	80043a0 <HAL_TIM_PeriodElapsedCallback+0x1ac>
		 {
			 HAL_GPIO_TogglePin(GPIOA, Buzzer_Pin);
 800437a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800437e:	482a      	ldr	r0, [pc, #168]	@ (8004428 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8004380:	f001 fedf 	bl	8006142 <HAL_GPIO_TogglePin>
			 if(inc_buz>4)
 8004384:	4b32      	ldr	r3, [pc, #200]	@ (8004450 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	2b04      	cmp	r3, #4
 800438a:	d909      	bls.n	80043a0 <HAL_TIM_PeriodElapsedCallback+0x1ac>
			 {
				 can_buzzer_delay = m_sec+60000;
 800438c:	4b20      	ldr	r3, [pc, #128]	@ (8004410 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800438e:	881b      	ldrh	r3, [r3, #0]
 8004390:	f5a3 53ad 	sub.w	r3, r3, #5536	@ 0x15a0
 8004394:	b29a      	uxth	r2, r3
 8004396:	4b2d      	ldr	r3, [pc, #180]	@ (800444c <HAL_TIM_PeriodElapsedCallback+0x258>)
 8004398:	801a      	strh	r2, [r3, #0]
				 inc_buz=0;
 800439a:	4b2d      	ldr	r3, [pc, #180]	@ (8004450 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800439c:	2200      	movs	r2, #0
 800439e:	701a      	strb	r2, [r3, #0]
			 }
		 }
	 }

	 if(Pin_State == 1)
 80043a0:	4b2d      	ldr	r3, [pc, #180]	@ (8004458 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	f040 80ba 	bne.w	800451e <HAL_TIM_PeriodElapsedCallback+0x32a>
	 {
	 if(timerCounter2>=30)		// after every 750us only check the signal data from external interrupt pin.
 80043aa:	4b17      	ldr	r3, [pc, #92]	@ (8004408 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	2b1d      	cmp	r3, #29
 80043b0:	f240 80b5 	bls.w	800451e <HAL_TIM_PeriodElapsedCallback+0x32a>
		 {
		 	 HAL_GPIO_TogglePin(GPIOB, Test_pin_Pin);
 80043b4:	2120      	movs	r1, #32
 80043b6:	4829      	ldr	r0, [pc, #164]	@ (800445c <HAL_TIM_PeriodElapsedCallback+0x268>)
 80043b8:	f001 fec3 	bl	8006142 <HAL_GPIO_TogglePin>
		 	 test_bit++;
 80043bc:	4b28      	ldr	r3, [pc, #160]	@ (8004460 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	3301      	adds	r3, #1
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	4b26      	ldr	r3, [pc, #152]	@ (8004460 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80043c6:	701a      	strb	r2, [r3, #0]
			if(HAL_GPIO_ReadPin(GPIOB, ONE_WIRE_PRT_Pin)) 		//after 750us pin in high state , data 0
 80043c8:	2108      	movs	r1, #8
 80043ca:	4824      	ldr	r0, [pc, #144]	@ (800445c <HAL_TIM_PeriodElapsedCallback+0x268>)
 80043cc:	f001 fe8a 	bl	80060e4 <HAL_GPIO_ReadPin>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d04c      	beq.n	8004470 <HAL_TIM_PeriodElapsedCallback+0x27c>
			{
				bitClear(dataArray[signalCounter],bit_count);
 80043d6:	4b23      	ldr	r3, [pc, #140]	@ (8004464 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80043d8:	881b      	ldrh	r3, [r3, #0]
 80043da:	b299      	uxth	r1, r3
 80043dc:	460a      	mov	r2, r1
 80043de:	4b22      	ldr	r3, [pc, #136]	@ (8004468 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80043e0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	4b21      	ldr	r3, [pc, #132]	@ (800446c <HAL_TIM_PeriodElapsedCallback+0x278>)
 80043e8:	f993 3000 	ldrsb.w	r3, [r3]
 80043ec:	4618      	mov	r0, r3
 80043ee:	2301      	movs	r3, #1
 80043f0:	4083      	lsls	r3, r0
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	43db      	mvns	r3, r3
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	4013      	ands	r3, r2
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	4b1a      	ldr	r3, [pc, #104]	@ (8004468 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80043fe:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 8004402:	e049      	b.n	8004498 <HAL_TIM_PeriodElapsedCallback+0x2a4>
 8004404:	2000153c 	.word	0x2000153c
 8004408:	200018fc 	.word	0x200018fc
 800440c:	200018fe 	.word	0x200018fe
 8004410:	20001862 	.word	0x20001862
 8004414:	20001980 	.word	0x20001980
 8004418:	2000079e 	.word	0x2000079e
 800441c:	200007a0 	.word	0x200007a0
 8004420:	2000197c 	.word	0x2000197c
 8004424:	2000195a 	.word	0x2000195a
 8004428:	40010800 	.word	0x40010800
 800442c:	2000197e 	.word	0x2000197e
 8004430:	200018dc 	.word	0x200018dc
 8004434:	2000197a 	.word	0x2000197a
 8004438:	20001986 	.word	0x20001986
 800443c:	20001984 	.word	0x20001984
 8004440:	20001878 	.word	0x20001878
 8004444:	20001880 	.word	0x20001880
 8004448:	2000187c 	.word	0x2000187c
 800444c:	200007e0 	.word	0x200007e0
 8004450:	20001978 	.word	0x20001978
 8004454:	2000195f 	.word	0x2000195f
 8004458:	200018f0 	.word	0x200018f0
 800445c:	40010c00 	.word	0x40010c00
 8004460:	20001920 	.word	0x20001920
 8004464:	2000153a 	.word	0x2000153a
 8004468:	20001540 	.word	0x20001540
 800446c:	200007e2 	.word	0x200007e2
			}
			else
			{
				bitSet(dataArray[signalCounter],bit_count);		//after 750us pin in low state , data 1
 8004470:	4b2d      	ldr	r3, [pc, #180]	@ (8004528 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8004472:	881b      	ldrh	r3, [r3, #0]
 8004474:	b299      	uxth	r1, r3
 8004476:	460a      	mov	r2, r1
 8004478:	4b2c      	ldr	r3, [pc, #176]	@ (800452c <HAL_TIM_PeriodElapsedCallback+0x338>)
 800447a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800447e:	b29a      	uxth	r2, r3
 8004480:	4b2b      	ldr	r3, [pc, #172]	@ (8004530 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8004482:	f993 3000 	ldrsb.w	r3, [r3]
 8004486:	4618      	mov	r0, r3
 8004488:	2301      	movs	r3, #1
 800448a:	4083      	lsls	r3, r0
 800448c:	b29b      	uxth	r3, r3
 800448e:	4313      	orrs	r3, r2
 8004490:	b29a      	uxth	r2, r3
 8004492:	4b26      	ldr	r3, [pc, #152]	@ (800452c <HAL_TIM_PeriodElapsedCallback+0x338>)
 8004494:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			}
			Pin_State = 0;
 8004498:	4b26      	ldr	r3, [pc, #152]	@ (8004534 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800449a:	2200      	movs	r2, #0
 800449c:	701a      	strb	r2, [r3, #0]
			bit_count--;
 800449e:	4b24      	ldr	r3, [pc, #144]	@ (8004530 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80044a0:	f993 3000 	ldrsb.w	r3, [r3]
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	3b01      	subs	r3, #1
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	b25a      	sxtb	r2, r3
 80044ac:	4b20      	ldr	r3, [pc, #128]	@ (8004530 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80044ae:	701a      	strb	r2, [r3, #0]

			if(bit_count<0) 		// bit decrement for 7 to 0
 80044b0:	4b1f      	ldr	r3, [pc, #124]	@ (8004530 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80044b2:	f993 3000 	ldrsb.w	r3, [r3]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	da09      	bge.n	80044ce <HAL_TIM_PeriodElapsedCallback+0x2da>
			{
				signalCounter++;
 80044ba:	4b1b      	ldr	r3, [pc, #108]	@ (8004528 <HAL_TIM_PeriodElapsedCallback+0x334>)
 80044bc:	881b      	ldrh	r3, [r3, #0]
 80044be:	b29b      	uxth	r3, r3
 80044c0:	3301      	adds	r3, #1
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	4b18      	ldr	r3, [pc, #96]	@ (8004528 <HAL_TIM_PeriodElapsedCallback+0x334>)
 80044c6:	801a      	strh	r2, [r3, #0]
				bit_count=7;
 80044c8:	4b19      	ldr	r3, [pc, #100]	@ (8004530 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80044ca:	2207      	movs	r2, #7
 80044cc:	701a      	strb	r2, [r3, #0]
			}

			if(signalCounter >= 12)		//byte increment 0 to 12
 80044ce:	4b16      	ldr	r3, [pc, #88]	@ (8004528 <HAL_TIM_PeriodElapsedCallback+0x334>)
 80044d0:	881b      	ldrh	r3, [r3, #0]
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	2b0b      	cmp	r3, #11
 80044d6:	d91f      	bls.n	8004518 <HAL_TIM_PeriodElapsedCallback+0x324>
			{
				signalCounter = 0;
 80044d8:	4b13      	ldr	r3, [pc, #76]	@ (8004528 <HAL_TIM_PeriodElapsedCallback+0x334>)
 80044da:	2200      	movs	r2, #0
 80044dc:	801a      	strh	r2, [r3, #0]
				syncFlag = 1;
 80044de:	4b16      	ldr	r3, [pc, #88]	@ (8004538 <HAL_TIM_PeriodElapsedCallback+0x344>)
 80044e0:	2201      	movs	r2, #1
 80044e2:	701a      	strb	r2, [r3, #0]
				SYC_DATA=0;
 80044e4:	4b15      	ldr	r3, [pc, #84]	@ (800453c <HAL_TIM_PeriodElapsedCallback+0x348>)
 80044e6:	2200      	movs	r2, #0
 80044e8:	801a      	strh	r2, [r3, #0]
				timerCounter3=0;
 80044ea:	4b15      	ldr	r3, [pc, #84]	@ (8004540 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80044ec:	2200      	movs	r2, #0
 80044ee:	801a      	strh	r2, [r3, #0]
				for(uint8_t i = 0; i < 12;i++)
 80044f0:	2300      	movs	r3, #0
 80044f2:	73fb      	strb	r3, [r7, #15]
 80044f4:	e00b      	b.n	800450e <HAL_TIM_PeriodElapsedCallback+0x31a>
				{
					dataArray1[i]=dataArray[i];		//The received data are stored in another array and it will wait for next data reception.
 80044f6:	7bfb      	ldrb	r3, [r7, #15]
 80044f8:	4a0c      	ldr	r2, [pc, #48]	@ (800452c <HAL_TIM_PeriodElapsedCallback+0x338>)
 80044fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044fe:	b29a      	uxth	r2, r3
 8004500:	7bfb      	ldrb	r3, [r7, #15]
 8004502:	b2d1      	uxtb	r1, r2
 8004504:	4a0f      	ldr	r2, [pc, #60]	@ (8004544 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8004506:	54d1      	strb	r1, [r2, r3]
				for(uint8_t i = 0; i < 12;i++)
 8004508:	7bfb      	ldrb	r3, [r7, #15]
 800450a:	3301      	adds	r3, #1
 800450c:	73fb      	strb	r3, [r7, #15]
 800450e:	7bfb      	ldrb	r3, [r7, #15]
 8004510:	2b0b      	cmp	r3, #11
 8004512:	d9f0      	bls.n	80044f6 <HAL_TIM_PeriodElapsedCallback+0x302>
				}
				 processData();    	//after storing the data should be processed for structure for easy access to the user.
 8004514:	f000 f8ac 	bl	8004670 <processData>
			}
			timerCounter2 = 0;
 8004518:	4b0b      	ldr	r3, [pc, #44]	@ (8004548 <HAL_TIM_PeriodElapsedCallback+0x354>)
 800451a:	2200      	movs	r2, #0
 800451c:	701a      	strb	r2, [r3, #0]
	    }
	 }
  }
}
 800451e:	bf00      	nop
 8004520:	3710      	adds	r7, #16
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	2000153a 	.word	0x2000153a
 800452c:	20001540 	.word	0x20001540
 8004530:	200007e2 	.word	0x200007e2
 8004534:	200018f0 	.word	0x200018f0
 8004538:	20001538 	.word	0x20001538
 800453c:	200018ee 	.word	0x200018ee
 8004540:	200018fe 	.word	0x200018fe
 8004544:	200018e0 	.word	0x200018e0
 8004548:	200018fc 	.word	0x200018fc

0800454c <HAL_GPIO_EXTI_Callback>:
	volatile uint32_t debounceDelay = 90;  // Debounce time in milliseconds
	volatile uint32_t temp_var;
	uint16_t reading,top=0;

void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	4603      	mov	r3, r0
 8004554:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==speed_sensor_Pin)
 8004556:	88fb      	ldrh	r3, [r7, #6]
 8004558:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800455c:	d141      	bne.n	80045e2 <HAL_GPIO_EXTI_Callback+0x96>
	{
		uint8_t reading = HAL_GPIO_ReadPin(GPIOC, speed_sensor_Pin);
 800455e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004562:	4838      	ldr	r0, [pc, #224]	@ (8004644 <HAL_GPIO_EXTI_Callback+0xf8>)
 8004564:	f001 fdbe 	bl	80060e4 <HAL_GPIO_ReadPin>
 8004568:	4603      	mov	r3, r0
 800456a:	73fb      	strb	r3, [r7, #15]

		if (reading == 1)
 800456c:	7bfb      	ldrb	r3, [r7, #15]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d104      	bne.n	800457c <HAL_GPIO_EXTI_Callback+0x30>
		{
			startDebounceTime =HAL_GetTick();
 8004572:	f000 fc9d 	bl	8004eb0 <HAL_GetTick>
 8004576:	4603      	mov	r3, r0
 8004578:	4a33      	ldr	r2, [pc, #204]	@ (8004648 <HAL_GPIO_EXTI_Callback+0xfc>)
 800457a:	6013      	str	r3, [r2, #0]
		}
		if (reading == 0)
 800457c:	7bfb      	ldrb	r3, [r7, #15]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d104      	bne.n	800458c <HAL_GPIO_EXTI_Callback+0x40>
		{
			lastDebounceTime = HAL_GetTick();
 8004582:	f000 fc95 	bl	8004eb0 <HAL_GetTick>
 8004586:	4603      	mov	r3, r0
 8004588:	4a30      	ldr	r2, [pc, #192]	@ (800464c <HAL_GPIO_EXTI_Callback+0x100>)
 800458a:	6013      	str	r3, [r2, #0]
		}

		if(lastDebounceTime<startDebounceTime)
 800458c:	4b2f      	ldr	r3, [pc, #188]	@ (800464c <HAL_GPIO_EXTI_Callback+0x100>)
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	4b2d      	ldr	r3, [pc, #180]	@ (8004648 <HAL_GPIO_EXTI_Callback+0xfc>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	429a      	cmp	r2, r3
 8004596:	d20a      	bcs.n	80045ae <HAL_GPIO_EXTI_Callback+0x62>
		{
			top=startDebounceTime-lastDebounceTime;
 8004598:	4b2b      	ldr	r3, [pc, #172]	@ (8004648 <HAL_GPIO_EXTI_Callback+0xfc>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	b29a      	uxth	r2, r3
 800459e:	4b2b      	ldr	r3, [pc, #172]	@ (800464c <HAL_GPIO_EXTI_Callback+0x100>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	4b29      	ldr	r3, [pc, #164]	@ (8004650 <HAL_GPIO_EXTI_Callback+0x104>)
 80045aa:	801a      	strh	r2, [r3, #0]
 80045ac:	e009      	b.n	80045c2 <HAL_GPIO_EXTI_Callback+0x76>
		}
		else
		{
			top=lastDebounceTime-startDebounceTime;
 80045ae:	4b27      	ldr	r3, [pc, #156]	@ (800464c <HAL_GPIO_EXTI_Callback+0x100>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	4b24      	ldr	r3, [pc, #144]	@ (8004648 <HAL_GPIO_EXTI_Callback+0xfc>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	b29a      	uxth	r2, r3
 80045be:	4b24      	ldr	r3, [pc, #144]	@ (8004650 <HAL_GPIO_EXTI_Callback+0x104>)
 80045c0:	801a      	strh	r2, [r3, #0]
		}

		if(top>=8)
 80045c2:	4b23      	ldr	r3, [pc, #140]	@ (8004650 <HAL_GPIO_EXTI_Callback+0x104>)
 80045c4:	881b      	ldrh	r3, [r3, #0]
 80045c6:	2b07      	cmp	r3, #7
 80045c8:	d905      	bls.n	80045d6 <HAL_GPIO_EXTI_Callback+0x8a>
		{
			speed_count_temp++;
 80045ca:	4b22      	ldr	r3, [pc, #136]	@ (8004654 <HAL_GPIO_EXTI_Callback+0x108>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	3301      	adds	r3, #1
 80045d0:	4a20      	ldr	r2, [pc, #128]	@ (8004654 <HAL_GPIO_EXTI_Callback+0x108>)
 80045d2:	6013      	str	r3, [r2, #0]
 80045d4:	e005      	b.n	80045e2 <HAL_GPIO_EXTI_Callback+0x96>
		}
		else
		{
			doc++;
 80045d6:	4b20      	ldr	r3, [pc, #128]	@ (8004658 <HAL_GPIO_EXTI_Callback+0x10c>)
 80045d8:	881b      	ldrh	r3, [r3, #0]
 80045da:	3301      	adds	r3, #1
 80045dc:	b29a      	uxth	r2, r3
 80045de:	4b1e      	ldr	r3, [pc, #120]	@ (8004658 <HAL_GPIO_EXTI_Callback+0x10c>)
 80045e0:	801a      	strh	r2, [r3, #0]
		}
	}
 if (GPIO_Pin ==ONE_WIRE_PRT_Pin )  	//Every rising edge detected the interrupt will be triggered.
 80045e2:	88fb      	ldrh	r3, [r7, #6]
 80045e4:	2b08      	cmp	r3, #8
 80045e6:	d129      	bne.n	800463c <HAL_GPIO_EXTI_Callback+0xf0>
  {
	 if(SYC_DATA ==0)
 80045e8:	4b1c      	ldr	r3, [pc, #112]	@ (800465c <HAL_GPIO_EXTI_Callback+0x110>)
 80045ea:	881b      	ldrh	r3, [r3, #0]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d118      	bne.n	8004622 <HAL_GPIO_EXTI_Callback+0xd6>
	 {
		 if(timerCounter3 > 0)
 80045f0:	4b1b      	ldr	r3, [pc, #108]	@ (8004660 <HAL_GPIO_EXTI_Callback+0x114>)
 80045f2:	881b      	ldrh	r3, [r3, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d014      	beq.n	8004622 <HAL_GPIO_EXTI_Callback+0xd6>
		 {
			SYC_PASS = timerCounter3;		//whenever the interrupt triggered that corresponding timer interrupt count should be stored in variable.
 80045f8:	4b19      	ldr	r3, [pc, #100]	@ (8004660 <HAL_GPIO_EXTI_Callback+0x114>)
 80045fa:	881a      	ldrh	r2, [r3, #0]
 80045fc:	4b19      	ldr	r3, [pc, #100]	@ (8004664 <HAL_GPIO_EXTI_Callback+0x118>)
 80045fe:	801a      	strh	r2, [r3, #0]
			timerCounter3 = 0;
 8004600:	4b17      	ldr	r3, [pc, #92]	@ (8004660 <HAL_GPIO_EXTI_Callback+0x114>)
 8004602:	2200      	movs	r2, #0
 8004604:	801a      	strh	r2, [r3, #0]
			 if(SYC_PASS >= 500)		//(SYN_PASS >=1000 For bheem)	//whenever the one interrupt to another interrupt time should be greater than 20ms , it is synchronization period . After the synchronization period data are storing process should be start.(20x50 = 1ms so 200x50 = 10ms)
 8004606:	4b17      	ldr	r3, [pc, #92]	@ (8004664 <HAL_GPIO_EXTI_Callback+0x118>)
 8004608:	881b      	ldrh	r3, [r3, #0]
 800460a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800460e:	d308      	bcc.n	8004622 <HAL_GPIO_EXTI_Callback+0xd6>
			 {
				SYC_DATA = 1;
 8004610:	4b12      	ldr	r3, [pc, #72]	@ (800465c <HAL_GPIO_EXTI_Callback+0x110>)
 8004612:	2201      	movs	r2, #1
 8004614:	801a      	strh	r2, [r3, #0]
				SYC_PASS = 0;
 8004616:	4b13      	ldr	r3, [pc, #76]	@ (8004664 <HAL_GPIO_EXTI_Callback+0x118>)
 8004618:	2200      	movs	r2, #0
 800461a:	801a      	strh	r2, [r3, #0]
				timerCounter3 = 0;
 800461c:	4b10      	ldr	r3, [pc, #64]	@ (8004660 <HAL_GPIO_EXTI_Callback+0x114>)
 800461e:	2200      	movs	r2, #0
 8004620:	801a      	strh	r2, [r3, #0]
			 }
		 }
	 }

	 if(SYC_DATA == 1)
 8004622:	4b0e      	ldr	r3, [pc, #56]	@ (800465c <HAL_GPIO_EXTI_Callback+0x110>)
 8004624:	881b      	ldrh	r3, [r3, #0]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d105      	bne.n	8004636 <HAL_GPIO_EXTI_Callback+0xea>
	 {
		Pin_State=1;   	//after synchronization this bit set for data storing.
 800462a:	4b0f      	ldr	r3, [pc, #60]	@ (8004668 <HAL_GPIO_EXTI_Callback+0x11c>)
 800462c:	2201      	movs	r2, #1
 800462e:	701a      	strb	r2, [r3, #0]
		timerCounter2=0;
 8004630:	4b0e      	ldr	r3, [pc, #56]	@ (800466c <HAL_GPIO_EXTI_Callback+0x120>)
 8004632:	2200      	movs	r2, #0
 8004634:	701a      	strb	r2, [r3, #0]
	 }
	 timerCounter3 = 0;
 8004636:	4b0a      	ldr	r3, [pc, #40]	@ (8004660 <HAL_GPIO_EXTI_Callback+0x114>)
 8004638:	2200      	movs	r2, #0
 800463a:	801a      	strh	r2, [r3, #0]
  }
}
 800463c:	bf00      	nop
 800463e:	3710      	adds	r7, #16
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	40011000 	.word	0x40011000
 8004648:	2000198c 	.word	0x2000198c
 800464c:	20001988 	.word	0x20001988
 8004650:	20001990 	.word	0x20001990
 8004654:	2000187c 	.word	0x2000187c
 8004658:	20001986 	.word	0x20001986
 800465c:	200018ee 	.word	0x200018ee
 8004660:	200018fe 	.word	0x200018fe
 8004664:	20001982 	.word	0x20001982
 8004668:	200018f0 	.word	0x200018f0
 800466c:	200018fc 	.word	0x200018fc

08004670 <processData>:

void processData(void) { // find out the synchronization period and converting data into 's and 1's
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0

   uint8_t calculatedChecksum = 0;
 8004676:	2300      	movs	r3, #0
 8004678:	71fb      	strb	r3, [r7, #7]
	for (int checksum_count = 0; checksum_count < STORED_DATA_SIZE - 1; checksum_count++) { //To calculate the checksum for DATA0 to DATA10 and check the received checksum in DATA11
 800467a:	2300      	movs	r3, #0
 800467c:	603b      	str	r3, [r7, #0]
 800467e:	e009      	b.n	8004694 <processData+0x24>
		calculatedChecksum ^= dataArray1[checksum_count];
 8004680:	4a0a      	ldr	r2, [pc, #40]	@ (80046ac <processData+0x3c>)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	4413      	add	r3, r2
 8004686:	781a      	ldrb	r2, [r3, #0]
 8004688:	79fb      	ldrb	r3, [r7, #7]
 800468a:	4053      	eors	r3, r2
 800468c:	71fb      	strb	r3, [r7, #7]
	for (int checksum_count = 0; checksum_count < STORED_DATA_SIZE - 1; checksum_count++) { //To calculate the checksum for DATA0 to DATA10 and check the received checksum in DATA11
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	3301      	adds	r3, #1
 8004692:	603b      	str	r3, [r7, #0]
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	2b0a      	cmp	r3, #10
 8004698:	ddf2      	ble.n	8004680 <processData+0x10>
	}
	if (calculatedChecksum == dataArray1[STORED_DATA_SIZE - 1]) { // If the calculated checksum is equal to the received checksum then set the validDataFlag
 800469a:	4b04      	ldr	r3, [pc, #16]	@ (80046ac <processData+0x3c>)
 800469c:	7adb      	ldrb	r3, [r3, #11]
 800469e:	79fa      	ldrb	r2, [r7, #7]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d107      	bne.n	80046b4 <processData+0x44>
		validDataFlag = 1;
 80046a4:	4b02      	ldr	r3, [pc, #8]	@ (80046b0 <processData+0x40>)
 80046a6:	2201      	movs	r2, #1
 80046a8:	701a      	strb	r2, [r3, #0]
 80046aa:	e00c      	b.n	80046c6 <processData+0x56>
 80046ac:	200018e0 	.word	0x200018e0
 80046b0:	20001860 	.word	0x20001860
	}
	else
	{
		checksum_error++;
 80046b4:	4bb0      	ldr	r3, [pc, #704]	@ (8004978 <processData+0x308>)
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	3301      	adds	r3, #1
 80046ba:	b2da      	uxtb	r2, r3
 80046bc:	4bae      	ldr	r3, [pc, #696]	@ (8004978 <processData+0x308>)
 80046be:	701a      	strb	r2, [r3, #0]
		validDataFlag = 0;// If the calculated checksum is Not equal to the received checksum then Reset the validDataFlag
 80046c0:	4bae      	ldr	r3, [pc, #696]	@ (800497c <processData+0x30c>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	701a      	strb	r2, [r3, #0]
	}

	if(validDataFlag == 1)
 80046c6:	4bad      	ldr	r3, [pc, #692]	@ (800497c <processData+0x30c>)
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	f040 81d8 	bne.w	8004a82 <processData+0x412>
	{
		Motor_Data.Device_Code = dataArray1[0]; // Default Device code stored in this variable. 8bit
 80046d2:	4bab      	ldr	r3, [pc, #684]	@ (8004980 <processData+0x310>)
 80046d4:	781a      	ldrb	r2, [r3, #0]
 80046d6:	4bab      	ldr	r3, [pc, #684]	@ (8004984 <processData+0x314>)
 80046d8:	701a      	strb	r2, [r3, #0]
		Motor_Data.Sequence_code = dataArray1[1]; // Default Sequence code stored in this variable. 8bit
 80046da:	4ba9      	ldr	r3, [pc, #676]	@ (8004980 <processData+0x310>)
 80046dc:	785a      	ldrb	r2, [r3, #1]
 80046de:	4ba9      	ldr	r3, [pc, #676]	@ (8004984 <processData+0x314>)
 80046e0:	705a      	strb	r2, [r3, #1]
		Motor_Data.Alternate_Bit1 = ((dataArray1[2] & 0xF0) >> 4); // This variable used for Alternate Function/operation . 4bit
 80046e2:	4ba7      	ldr	r3, [pc, #668]	@ (8004980 <processData+0x310>)
 80046e4:	789b      	ldrb	r3, [r3, #2]
 80046e6:	091b      	lsrs	r3, r3, #4
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	f003 030f 	and.w	r3, r3, #15
 80046ee:	b2d9      	uxtb	r1, r3
 80046f0:	4aa4      	ldr	r2, [pc, #656]	@ (8004984 <processData+0x314>)
 80046f2:	7893      	ldrb	r3, [r2, #2]
 80046f4:	f361 0303 	bfi	r3, r1, #0, #4
 80046f8:	7093      	strb	r3, [r2, #2]
		Motor_Data.Parking_Indication = ((dataArray1[2] & 0x08) >> 3); //This variable is stored the parking Indication state. 1bit
 80046fa:	4ba1      	ldr	r3, [pc, #644]	@ (8004980 <processData+0x310>)
 80046fc:	789b      	ldrb	r3, [r3, #2]
 80046fe:	10db      	asrs	r3, r3, #3
 8004700:	f003 0301 	and.w	r3, r3, #1
 8004704:	b2d9      	uxtb	r1, r3
 8004706:	4a9f      	ldr	r2, [pc, #636]	@ (8004984 <processData+0x314>)
 8004708:	7893      	ldrb	r3, [r2, #2]
 800470a:	f361 1304 	bfi	r3, r1, #4, #1
 800470e:	7093      	strb	r3, [r2, #2]
		Motor_Data.Speed_Limit = ((dataArray1[2] & 0x04) >> 2); // This variable is stored the Speed limit state. 1bit
 8004710:	4b9b      	ldr	r3, [pc, #620]	@ (8004980 <processData+0x310>)
 8004712:	789b      	ldrb	r3, [r3, #2]
 8004714:	109b      	asrs	r3, r3, #2
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	b2d9      	uxtb	r1, r3
 800471c:	4a99      	ldr	r2, [pc, #612]	@ (8004984 <processData+0x314>)
 800471e:	7893      	ldrb	r3, [r2, #2]
 8004720:	f361 1345 	bfi	r3, r1, #5, #1
 8004724:	7093      	strb	r3, [r2, #2]
		Motor_Data.Alternate_Bit2 = ((dataArray1[2] & 0x02) << 1); // This variable used for Alternate Function/operation 1bit
 8004726:	4a97      	ldr	r2, [pc, #604]	@ (8004984 <processData+0x314>)
 8004728:	7893      	ldrb	r3, [r2, #2]
 800472a:	f36f 1386 	bfc	r3, #6, #1
 800472e:	7093      	strb	r3, [r2, #2]
		Motor_Data.Side_Brace_Indication = ((dataArray1[2] & 0x01) >> 0);
 8004730:	4b93      	ldr	r3, [pc, #588]	@ (8004980 <processData+0x310>)
 8004732:	789b      	ldrb	r3, [r3, #2]
 8004734:	f003 0301 	and.w	r3, r3, #1
 8004738:	b2d9      	uxtb	r1, r3
 800473a:	4a92      	ldr	r2, [pc, #584]	@ (8004984 <processData+0x314>)
 800473c:	7893      	ldrb	r3, [r2, #2]
 800473e:	f361 13c7 	bfi	r3, r1, #7, #1
 8004742:	7093      	strb	r3, [r2, #2]
		Motor_Data.Pushcart_prohibitedsign = ((dataArray1[3] & 0x80) >> 7); // If any Prohibited sign to indicate the display using this variable. 1bit
 8004744:	4b8e      	ldr	r3, [pc, #568]	@ (8004980 <processData+0x310>)
 8004746:	78db      	ldrb	r3, [r3, #3]
 8004748:	09db      	lsrs	r3, r3, #7
 800474a:	b2db      	uxtb	r3, r3
 800474c:	f003 0301 	and.w	r3, r3, #1
 8004750:	b2d9      	uxtb	r1, r3
 8004752:	4a8c      	ldr	r2, [pc, #560]	@ (8004984 <processData+0x314>)
 8004754:	78d3      	ldrb	r3, [r2, #3]
 8004756:	f361 0300 	bfi	r3, r1, #0, #1
 800475a:	70d3      	strb	r3, [r2, #3]
		Motor_Data.Hall_fault = ((dataArray1[3] & 0x40) >> 6); // If hall sensor status stored in this variable. 1bit(0-o hall fault, 1-Hall Fault).
 800475c:	4b88      	ldr	r3, [pc, #544]	@ (8004980 <processData+0x310>)
 800475e:	78db      	ldrb	r3, [r3, #3]
 8004760:	119b      	asrs	r3, r3, #6
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	b2d9      	uxtb	r1, r3
 8004768:	4a86      	ldr	r2, [pc, #536]	@ (8004984 <processData+0x314>)
 800476a:	78d3      	ldrb	r3, [r2, #3]
 800476c:	f361 0341 	bfi	r3, r1, #1, #1
 8004770:	70d3      	strb	r3, [r2, #3]
		Motor_Data.Throttle_fault = ((dataArray1[3] & 0x20) >> 5); //If throttle status stored in this variable. 1bit(0-No Throttle Fault, 1-Throttle Fault).
 8004772:	4b83      	ldr	r3, [pc, #524]	@ (8004980 <processData+0x310>)
 8004774:	78db      	ldrb	r3, [r3, #3]
 8004776:	115b      	asrs	r3, r3, #5
 8004778:	f003 0301 	and.w	r3, r3, #1
 800477c:	b2d9      	uxtb	r1, r3
 800477e:	4a81      	ldr	r2, [pc, #516]	@ (8004984 <processData+0x314>)
 8004780:	78d3      	ldrb	r3, [r2, #3]
 8004782:	f361 0382 	bfi	r3, r1, #2, #1
 8004786:	70d3      	strb	r3, [r2, #3]
		Motor_Data.Controller_fault = ((dataArray1[3] & 0x10) >> 4); //If the controller status stored in this variable. 1bit(0-No Controller Fault, 1-Controller Fault).
 8004788:	4b7d      	ldr	r3, [pc, #500]	@ (8004980 <processData+0x310>)
 800478a:	78db      	ldrb	r3, [r3, #3]
 800478c:	111b      	asrs	r3, r3, #4
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	b2d9      	uxtb	r1, r3
 8004794:	4a7b      	ldr	r2, [pc, #492]	@ (8004984 <processData+0x314>)
 8004796:	78d3      	ldrb	r3, [r2, #3]
 8004798:	f361 03c3 	bfi	r3, r1, #3, #1
 800479c:	70d3      	strb	r3, [r2, #3]
		Motor_Data.Under_Voltageprotection = ((dataArray1[3] & 0x08) >> 3); //Under voltage protection status stored in this variable. 1bit(0-No under voltage protection, 1- under voltage protection).
 800479e:	4b78      	ldr	r3, [pc, #480]	@ (8004980 <processData+0x310>)
 80047a0:	78db      	ldrb	r3, [r3, #3]
 80047a2:	10db      	asrs	r3, r3, #3
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	b2d9      	uxtb	r1, r3
 80047aa:	4a76      	ldr	r2, [pc, #472]	@ (8004984 <processData+0x314>)
 80047ac:	78d3      	ldrb	r3, [r2, #3]
 80047ae:	f361 1304 	bfi	r3, r1, #4, #1
 80047b2:	70d3      	strb	r3, [r2, #3]
		Motor_Data.Cruise = ((dataArray1[3] & 0x04) >> 2); // Cruise mode on/off status stored in this variable. 1bit(0-No cruise mode on,1-cruise mode on).
 80047b4:	4b72      	ldr	r3, [pc, #456]	@ (8004980 <processData+0x310>)
 80047b6:	78db      	ldrb	r3, [r3, #3]
 80047b8:	109b      	asrs	r3, r3, #2
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	b2d9      	uxtb	r1, r3
 80047c0:	4a70      	ldr	r2, [pc, #448]	@ (8004984 <processData+0x314>)
 80047c2:	78d3      	ldrb	r3, [r2, #3]
 80047c4:	f361 1345 	bfi	r3, r1, #5, #1
 80047c8:	70d3      	strb	r3, [r2, #3]
		Motor_Data.Assistance_power = ((dataArray1[3] & 0x02) >> 1); //Power assistance status stored in this variable. 1bit(0-No power assistance, 1-Power assistance On).
 80047ca:	4b6d      	ldr	r3, [pc, #436]	@ (8004980 <processData+0x310>)
 80047cc:	78db      	ldrb	r3, [r3, #3]
 80047ce:	105b      	asrs	r3, r3, #1
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	b2d9      	uxtb	r1, r3
 80047d6:	4a6b      	ldr	r2, [pc, #428]	@ (8004984 <processData+0x314>)
 80047d8:	78d3      	ldrb	r3, [r2, #3]
 80047da:	f361 1386 	bfi	r3, r1, #6, #1
 80047de:	70d3      	strb	r3, [r2, #3]
		Motor_Data.Motor_phase_loss = ((dataArray1[3] & 0x01) >> 0); //Motor phase loss status stored in this variable. 1bit(0-No motor phase loss, 1-Motor phase loss).
 80047e0:	4b67      	ldr	r3, [pc, #412]	@ (8004980 <processData+0x310>)
 80047e2:	78db      	ldrb	r3, [r3, #3]
 80047e4:	f003 0301 	and.w	r3, r3, #1
 80047e8:	b2d9      	uxtb	r1, r3
 80047ea:	4a66      	ldr	r2, [pc, #408]	@ (8004984 <processData+0x314>)
 80047ec:	78d3      	ldrb	r3, [r2, #3]
 80047ee:	f361 13c7 	bfi	r3, r1, #7, #1
 80047f2:	70d3      	strb	r3, [r2, #3]
		Motor_Data.Four_gear_indication = ((dataArray1[4] & 0x80) >> 7); //Four gear indication status stored in this variable. 1bit
 80047f4:	4b62      	ldr	r3, [pc, #392]	@ (8004980 <processData+0x310>)
 80047f6:	791b      	ldrb	r3, [r3, #4]
 80047f8:	09db      	lsrs	r3, r3, #7
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	f003 0301 	and.w	r3, r3, #1
 8004800:	b2d9      	uxtb	r1, r3
 8004802:	4a60      	ldr	r2, [pc, #384]	@ (8004984 <processData+0x314>)
 8004804:	7913      	ldrb	r3, [r2, #4]
 8004806:	f361 0300 	bfi	r3, r1, #0, #1
 800480a:	7113      	strb	r3, [r2, #4]
		Motor_Data.Motor_Running = ((dataArray1[4] & 0x40) >> 6);//Motor status stored in this variable. 1bit(0- Motor is stopping ,1- Motor is running)
 800480c:	4b5c      	ldr	r3, [pc, #368]	@ (8004980 <processData+0x310>)
 800480e:	791b      	ldrb	r3, [r3, #4]
 8004810:	119b      	asrs	r3, r3, #6
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	b2d9      	uxtb	r1, r3
 8004818:	4a5a      	ldr	r2, [pc, #360]	@ (8004984 <processData+0x314>)
 800481a:	7913      	ldrb	r3, [r2, #4]
 800481c:	f361 0341 	bfi	r3, r1, #1, #1
 8004820:	7113      	strb	r3, [r2, #4]
		Motor_Data.brake = ((dataArray1[4] & 0x20) >> 5); // Brake status stored in this variable. 1bit(0-No brake applied, 1- Brake applied)
 8004822:	4b57      	ldr	r3, [pc, #348]	@ (8004980 <processData+0x310>)
 8004824:	791b      	ldrb	r3, [r3, #4]
 8004826:	115b      	asrs	r3, r3, #5
 8004828:	f003 0301 	and.w	r3, r3, #1
 800482c:	b2d9      	uxtb	r1, r3
 800482e:	4a55      	ldr	r2, [pc, #340]	@ (8004984 <processData+0x314>)
 8004830:	7913      	ldrb	r3, [r2, #4]
 8004832:	f361 0382 	bfi	r3, r1, #2, #1
 8004836:	7113      	strb	r3, [r2, #4]
		Motor_Data.Controller_protect = ((dataArray1[4] & 0x10) >> 4); //Controller protection  status stored in this variable. 1bit(0-No controller protection,1-Controller protection)
 8004838:	4b51      	ldr	r3, [pc, #324]	@ (8004980 <processData+0x310>)
 800483a:	791b      	ldrb	r3, [r3, #4]
 800483c:	111b      	asrs	r3, r3, #4
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	b2d9      	uxtb	r1, r3
 8004844:	4a4f      	ldr	r2, [pc, #316]	@ (8004984 <processData+0x314>)
 8004846:	7913      	ldrb	r3, [r2, #4]
 8004848:	f361 03c3 	bfi	r3, r1, #3, #1
 800484c:	7113      	strb	r3, [r2, #4]
		Motor_Data.Slide_charging = ((dataArray1[4] & 0x08) >> 3); // Regeneration status stored in this variable. 1bit(0- No regeneration detected, 1- regeneration detected.	   	Motor_Data.Antiflying_vehicle_protection = ((dataArray[4] & 0x04) >> 2);
 800484e:	4b4c      	ldr	r3, [pc, #304]	@ (8004980 <processData+0x310>)
 8004850:	791b      	ldrb	r3, [r3, #4]
 8004852:	10db      	asrs	r3, r3, #3
 8004854:	f003 0301 	and.w	r3, r3, #1
 8004858:	b2d9      	uxtb	r1, r3
 800485a:	4a4a      	ldr	r2, [pc, #296]	@ (8004984 <processData+0x314>)
 800485c:	7913      	ldrb	r3, [r2, #4]
 800485e:	f361 1304 	bfi	r3, r1, #4, #1
 8004862:	7113      	strb	r3, [r2, #4]
		Motor_Data.Three_speed = ((dataArray1[4] & 0x03) >> 0); // Three speed mode status stored in this variable. 2bit (00 - Controller without three speed, 01 - Low Speed, 10- Medium Speed, 11- High speed)
 8004864:	4b46      	ldr	r3, [pc, #280]	@ (8004980 <processData+0x310>)
 8004866:	791b      	ldrb	r3, [r3, #4]
 8004868:	f003 0303 	and.w	r3, r3, #3
 800486c:	b2d9      	uxtb	r1, r3
 800486e:	4a45      	ldr	r2, [pc, #276]	@ (8004984 <processData+0x314>)
 8004870:	7913      	ldrb	r3, [r2, #4]
 8004872:	f361 1387 	bfi	r3, r1, #6, #2
 8004876:	7113      	strb	r3, [r2, #4]
		Motor_Data.Cloud_powermode = ((dataArray1[5] & 0x80) >> 7); // Speed increase status stored in this variable. 1bit
 8004878:	4b41      	ldr	r3, [pc, #260]	@ (8004980 <processData+0x310>)
 800487a:	795b      	ldrb	r3, [r3, #5]
 800487c:	09db      	lsrs	r3, r3, #7
 800487e:	b2db      	uxtb	r3, r3
 8004880:	f003 0301 	and.w	r3, r3, #1
 8004884:	b2d9      	uxtb	r1, r3
 8004886:	4a3f      	ldr	r2, [pc, #252]	@ (8004984 <processData+0x314>)
 8004888:	7953      	ldrb	r3, [r2, #5]
 800488a:	f361 0300 	bfi	r3, r1, #0, #1
 800488e:	7153      	strb	r3, [r2, #5]
		Motor_Data.Push_to_talk = ((dataArray1[5] & 0x40) >> 6); //Most EVs have bluetooth connectivity that allows you to connect your phone and use its features hands-free while driving. This includes making calls, sending messages, and using navigation app.1bit
 8004890:	4b3b      	ldr	r3, [pc, #236]	@ (8004980 <processData+0x310>)
 8004892:	795b      	ldrb	r3, [r3, #5]
 8004894:	119b      	asrs	r3, r3, #6
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	b2d9      	uxtb	r1, r3
 800489c:	4a39      	ldr	r2, [pc, #228]	@ (8004984 <processData+0x314>)
 800489e:	7953      	ldrb	r3, [r2, #5]
 80048a0:	f361 0341 	bfi	r3, r1, #1, #1
 80048a4:	7153      	strb	r3, [r2, #5]
		Motor_Data.Standby_powersupply = ((dataArray1[5] & 0x20) >> 5); //The standby power supply are stored in this variable.1bit(0-No standby power supply,1-Standby power supply mode on).
 80048a6:	4b36      	ldr	r3, [pc, #216]	@ (8004980 <processData+0x310>)
 80048a8:	795b      	ldrb	r3, [r3, #5]
 80048aa:	115b      	asrs	r3, r3, #5
 80048ac:	f003 0301 	and.w	r3, r3, #1
 80048b0:	b2d9      	uxtb	r1, r3
 80048b2:	4a34      	ldr	r2, [pc, #208]	@ (8004984 <processData+0x314>)
 80048b4:	7953      	ldrb	r3, [r2, #5]
 80048b6:	f361 0382 	bfi	r3, r1, #2, #1
 80048ba:	7153      	strb	r3, [r2, #5]
		Motor_Data.Overcurrent_protection = ((dataArray1[5] & 0x10) >> 4); //Over current protection status stored in this variable.1bit(0-No over current protection, 1-over current protection)
 80048bc:	4b30      	ldr	r3, [pc, #192]	@ (8004980 <processData+0x310>)
 80048be:	795b      	ldrb	r3, [r3, #5]
 80048c0:	111b      	asrs	r3, r3, #4
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	b2d9      	uxtb	r1, r3
 80048c8:	4a2e      	ldr	r2, [pc, #184]	@ (8004984 <processData+0x314>)
 80048ca:	7953      	ldrb	r3, [r2, #5]
 80048cc:	f361 03c3 	bfi	r3, r1, #3, #1
 80048d0:	7153      	strb	r3, [r2, #5]
		Motor_Data.Locked_rotor_protection = ((dataArray1[5] & 0x08) >> 3); //This variable is stored the status of Locked Rotor protection. (0-No locked Rotor protection,1-Locked Rotor Protection)
 80048d2:	4b2b      	ldr	r3, [pc, #172]	@ (8004980 <processData+0x310>)
 80048d4:	795b      	ldrb	r3, [r3, #5]
 80048d6:	10db      	asrs	r3, r3, #3
 80048d8:	f003 0301 	and.w	r3, r3, #1
 80048dc:	b2d9      	uxtb	r1, r3
 80048de:	4a29      	ldr	r2, [pc, #164]	@ (8004984 <processData+0x314>)
 80048e0:	7953      	ldrb	r3, [r2, #5]
 80048e2:	f361 1304 	bfi	r3, r1, #4, #1
 80048e6:	7153      	strb	r3, [r2, #5]
		Motor_Data.Reverse = ((dataArray1[5] & 0x04) >> 2); //This variable is stored the status of reverse indication. 1bit(0- Forward, 1- Reverse).
 80048e8:	4b25      	ldr	r3, [pc, #148]	@ (8004980 <processData+0x310>)
 80048ea:	795b      	ldrb	r3, [r3, #5]
 80048ec:	109b      	asrs	r3, r3, #2
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	b2d9      	uxtb	r1, r3
 80048f4:	4a23      	ldr	r2, [pc, #140]	@ (8004984 <processData+0x314>)
 80048f6:	7953      	ldrb	r3, [r2, #5]
 80048f8:	f361 1345 	bfi	r3, r1, #5, #1
 80048fc:	7153      	strb	r3, [r2, #5]
		Motor_Data.Electronic_break = ((dataArray1[5] & 0x02) >> 1); //It is a Low Brake. The Low brake indication status are stored in this bit . 1bit
 80048fe:	4b20      	ldr	r3, [pc, #128]	@ (8004980 <processData+0x310>)
 8004900:	795b      	ldrb	r3, [r3, #5]
 8004902:	105b      	asrs	r3, r3, #1
 8004904:	f003 0301 	and.w	r3, r3, #1
 8004908:	b2d9      	uxtb	r1, r3
 800490a:	4a1e      	ldr	r2, [pc, #120]	@ (8004984 <processData+0x314>)
 800490c:	7953      	ldrb	r3, [r2, #5]
 800490e:	f361 1386 	bfi	r3, r1, #6, #1
 8004912:	7153      	strb	r3, [r2, #5]
		Motor_Data.Speed_limit = ((dataArray1[5] & 0x01) >> 0); //To set the speed limit using this variable. 1bit
 8004914:	4b1a      	ldr	r3, [pc, #104]	@ (8004980 <processData+0x310>)
 8004916:	795b      	ldrb	r3, [r3, #5]
 8004918:	f003 0301 	and.w	r3, r3, #1
 800491c:	b2d9      	uxtb	r1, r3
 800491e:	4a19      	ldr	r2, [pc, #100]	@ (8004984 <processData+0x314>)
 8004920:	7953      	ldrb	r3, [r2, #5]
 8004922:	f361 13c7 	bfi	r3, r1, #7, #1
 8004926:	7153      	strb	r3, [r2, #5]
		Motor_Data.Operating_current = dataArray1[6];//Operating current rating are stored in this variable. 8bit
 8004928:	4b15      	ldr	r3, [pc, #84]	@ (8004980 <processData+0x310>)
 800492a:	799a      	ldrb	r2, [r3, #6]
 800492c:	4b15      	ldr	r3, [pc, #84]	@ (8004984 <processData+0x314>)
 800492e:	719a      	strb	r2, [r3, #6]
		Motor_Data.Speed = ((dataArray1[7] << 8 )| dataArray[8]); //Speed calculation are stored in this variable. Speed byte high(8bit) and speed byte low(8bit) are combined and stored in this single variable. 16bits
 8004930:	4b13      	ldr	r3, [pc, #76]	@ (8004980 <processData+0x310>)
 8004932:	79db      	ldrb	r3, [r3, #7]
 8004934:	021b      	lsls	r3, r3, #8
 8004936:	b21a      	sxth	r2, r3
 8004938:	4b13      	ldr	r3, [pc, #76]	@ (8004988 <processData+0x318>)
 800493a:	8a1b      	ldrh	r3, [r3, #16]
 800493c:	b29b      	uxth	r3, r3
 800493e:	b21b      	sxth	r3, r3
 8004940:	4313      	orrs	r3, r2
 8004942:	b21b      	sxth	r3, r3
 8004944:	b29a      	uxth	r2, r3
 8004946:	4b0f      	ldr	r3, [pc, #60]	@ (8004984 <processData+0x314>)
 8004948:	815a      	strh	r2, [r3, #10]
		Motor_Data.Battery_Level = dataArray1[9]; //Battery level are stored in this variable. 8bit
 800494a:	4b0d      	ldr	r3, [pc, #52]	@ (8004980 <processData+0x310>)
 800494c:	7a5a      	ldrb	r2, [r3, #9]
 800494e:	4b0d      	ldr	r3, [pc, #52]	@ (8004984 <processData+0x314>)
 8004950:	71da      	strb	r2, [r3, #7]
		Motor_Data.Current_Level = dataArray1[10]; //Current level are stored in this variable. 8bit
 8004952:	4b0b      	ldr	r3, [pc, #44]	@ (8004980 <processData+0x310>)
 8004954:	7a9a      	ldrb	r2, [r3, #10]
 8004956:	4b0b      	ldr	r3, [pc, #44]	@ (8004984 <processData+0x314>)
 8004958:	721a      	strb	r2, [r3, #8]
		Motor_Data.Checksum = dataArray1[11]; // Received checksum data's are stored in this variable. 8bit
 800495a:	4b09      	ldr	r3, [pc, #36]	@ (8004980 <processData+0x310>)
 800495c:	7ada      	ldrb	r2, [r3, #11]
 800495e:	4b09      	ldr	r3, [pc, #36]	@ (8004984 <processData+0x314>)
 8004960:	731a      	strb	r2, [r3, #12]
		validDataFlag = 0;
 8004962:	4b06      	ldr	r3, [pc, #24]	@ (800497c <processData+0x30c>)
 8004964:	2200      	movs	r2, #0
 8004966:	701a      	strb	r2, [r3, #0]


		if(Motor_Data.Device_Code==13)
 8004968:	4b06      	ldr	r3, [pc, #24]	@ (8004984 <processData+0x314>)
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	2b0d      	cmp	r3, #13
 800496e:	d171      	bne.n	8004a54 <processData+0x3e4>
			{
				if(dataArray1[7]==106)
 8004970:	4b03      	ldr	r3, [pc, #12]	@ (8004980 <processData+0x310>)
 8004972:	79db      	ldrb	r3, [r3, #7]
 8004974:	2b6a      	cmp	r3, #106	@ 0x6a
 8004976:	e009      	b.n	800498c <processData+0x31c>
 8004978:	200018ec 	.word	0x200018ec
 800497c:	20001860 	.word	0x20001860
 8004980:	200018e0 	.word	0x200018e0
 8004984:	20001900 	.word	0x20001900
 8004988:	20001540 	.word	0x20001540
 800498c:	d116      	bne.n	80049bc <processData+0x34c>
				{
					if((dataArray[8]>=106)&&(dataArray1[8]<=255))
 800498e:	4b42      	ldr	r3, [pc, #264]	@ (8004a98 <processData+0x428>)
 8004990:	8a1b      	ldrh	r3, [r3, #16]
 8004992:	b29b      	uxth	r3, r3
 8004994:	2b69      	cmp	r3, #105	@ 0x69
 8004996:	d905      	bls.n	80049a4 <processData+0x334>
					{
						speed_temp1=dataArray1[8]-106;
 8004998:	4b40      	ldr	r3, [pc, #256]	@ (8004a9c <processData+0x42c>)
 800499a:	7a1b      	ldrb	r3, [r3, #8]
 800499c:	3b6a      	subs	r3, #106	@ 0x6a
 800499e:	b29a      	uxth	r2, r3
 80049a0:	4b3f      	ldr	r3, [pc, #252]	@ (8004aa0 <processData+0x430>)
 80049a2:	801a      	strh	r2, [r3, #0]
					}
					if((dataArray[8]>=0)&&(dataArray1[8]<=105))
 80049a4:	4b3c      	ldr	r3, [pc, #240]	@ (8004a98 <processData+0x428>)
 80049a6:	8a1b      	ldrh	r3, [r3, #16]
 80049a8:	4b3c      	ldr	r3, [pc, #240]	@ (8004a9c <processData+0x42c>)
 80049aa:	7a1b      	ldrb	r3, [r3, #8]
 80049ac:	2b69      	cmp	r3, #105	@ 0x69
 80049ae:	d805      	bhi.n	80049bc <processData+0x34c>
					{
						speed_temp1=dataArray1[8]+149;
 80049b0:	4b3a      	ldr	r3, [pc, #232]	@ (8004a9c <processData+0x42c>)
 80049b2:	7a1b      	ldrb	r3, [r3, #8]
 80049b4:	3395      	adds	r3, #149	@ 0x95
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	4b39      	ldr	r3, [pc, #228]	@ (8004aa0 <processData+0x430>)
 80049ba:	801a      	strh	r2, [r3, #0]
					}
				}

				if(dataArray1[7]==107)
 80049bc:	4b37      	ldr	r3, [pc, #220]	@ (8004a9c <processData+0x42c>)
 80049be:	79db      	ldrb	r3, [r3, #7]
 80049c0:	2b6b      	cmp	r3, #107	@ 0x6b
 80049c2:	d117      	bne.n	80049f4 <processData+0x384>
				{
					if((dataArray[8]>=106)&&(dataArray1[8]<=255))
 80049c4:	4b34      	ldr	r3, [pc, #208]	@ (8004a98 <processData+0x428>)
 80049c6:	8a1b      	ldrh	r3, [r3, #16]
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	2b69      	cmp	r3, #105	@ 0x69
 80049cc:	d905      	bls.n	80049da <processData+0x36a>
					{
						speed_temp1=dataArray1[8]+149;
 80049ce:	4b33      	ldr	r3, [pc, #204]	@ (8004a9c <processData+0x42c>)
 80049d0:	7a1b      	ldrb	r3, [r3, #8]
 80049d2:	3395      	adds	r3, #149	@ 0x95
 80049d4:	b29a      	uxth	r2, r3
 80049d6:	4b32      	ldr	r3, [pc, #200]	@ (8004aa0 <processData+0x430>)
 80049d8:	801a      	strh	r2, [r3, #0]
					}
					if((dataArray[8]>=0)&&(dataArray1[8]<=105))
 80049da:	4b2f      	ldr	r3, [pc, #188]	@ (8004a98 <processData+0x428>)
 80049dc:	8a1b      	ldrh	r3, [r3, #16]
 80049de:	4b2f      	ldr	r3, [pc, #188]	@ (8004a9c <processData+0x42c>)
 80049e0:	7a1b      	ldrb	r3, [r3, #8]
 80049e2:	2b69      	cmp	r3, #105	@ 0x69
 80049e4:	d806      	bhi.n	80049f4 <processData+0x384>
					{
						speed_temp1=dataArray1[8]+404;
 80049e6:	4b2d      	ldr	r3, [pc, #180]	@ (8004a9c <processData+0x42c>)
 80049e8:	7a1b      	ldrb	r3, [r3, #8]
 80049ea:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	4b2b      	ldr	r3, [pc, #172]	@ (8004aa0 <processData+0x430>)
 80049f2:	801a      	strh	r2, [r3, #0]
					}
				}

				if(dataArray1[7]==108)
 80049f4:	4b29      	ldr	r3, [pc, #164]	@ (8004a9c <processData+0x42c>)
 80049f6:	79db      	ldrb	r3, [r3, #7]
 80049f8:	2b6c      	cmp	r3, #108	@ 0x6c
 80049fa:	d118      	bne.n	8004a2e <processData+0x3be>
				{
					if((dataArray[8]>=106)&&(dataArray1[8]<=255))
 80049fc:	4b26      	ldr	r3, [pc, #152]	@ (8004a98 <processData+0x428>)
 80049fe:	8a1b      	ldrh	r3, [r3, #16]
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	2b69      	cmp	r3, #105	@ 0x69
 8004a04:	d906      	bls.n	8004a14 <processData+0x3a4>
					{
						speed_temp1=dataArray1[8]+404;
 8004a06:	4b25      	ldr	r3, [pc, #148]	@ (8004a9c <processData+0x42c>)
 8004a08:	7a1b      	ldrb	r3, [r3, #8]
 8004a0a:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 8004a0e:	b29a      	uxth	r2, r3
 8004a10:	4b23      	ldr	r3, [pc, #140]	@ (8004aa0 <processData+0x430>)
 8004a12:	801a      	strh	r2, [r3, #0]
					}
					if((dataArray[8]>=0)&&(dataArray1[8]<=105))
 8004a14:	4b20      	ldr	r3, [pc, #128]	@ (8004a98 <processData+0x428>)
 8004a16:	8a1b      	ldrh	r3, [r3, #16]
 8004a18:	4b20      	ldr	r3, [pc, #128]	@ (8004a9c <processData+0x42c>)
 8004a1a:	7a1b      	ldrb	r3, [r3, #8]
 8004a1c:	2b69      	cmp	r3, #105	@ 0x69
 8004a1e:	d806      	bhi.n	8004a2e <processData+0x3be>
					{
						speed_temp1=dataArray1[8]+659;
 8004a20:	4b1e      	ldr	r3, [pc, #120]	@ (8004a9c <processData+0x42c>)
 8004a22:	7a1b      	ldrb	r3, [r3, #8]
 8004a24:	f203 2393 	addw	r3, r3, #659	@ 0x293
 8004a28:	b29a      	uxth	r2, r3
 8004a2a:	4b1d      	ldr	r3, [pc, #116]	@ (8004aa0 <processData+0x430>)
 8004a2c:	801a      	strh	r2, [r3, #0]
					}
				}
				controller_speed_data=speed_temp1*1.1;
 8004a2e:	4b1c      	ldr	r3, [pc, #112]	@ (8004aa0 <processData+0x430>)
 8004a30:	881b      	ldrh	r3, [r3, #0]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7fb fcde 	bl	80003f4 <__aeabi_i2d>
 8004a38:	a315      	add	r3, pc, #84	@ (adr r3, 8004a90 <processData+0x420>)
 8004a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a3e:	f7fb fd43 	bl	80004c8 <__aeabi_dmul>
 8004a42:	4602      	mov	r2, r0
 8004a44:	460b      	mov	r3, r1
 8004a46:	4610      	mov	r0, r2
 8004a48:	4619      	mov	r1, r3
 8004a4a:	f7fb ff77 	bl	800093c <__aeabi_d2uiz>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	4a14      	ldr	r2, [pc, #80]	@ (8004aa4 <processData+0x434>)
 8004a52:	6013      	str	r3, [r2, #0]
	}
		if(Motor_Data.Device_Code==8)
 8004a54:	4b14      	ldr	r3, [pc, #80]	@ (8004aa8 <processData+0x438>)
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	2b08      	cmp	r3, #8
 8004a5a:	d112      	bne.n	8004a82 <processData+0x412>
		{
			controller_speed_data=Motor_Data.Speed*1.1;
 8004a5c:	4b12      	ldr	r3, [pc, #72]	@ (8004aa8 <processData+0x438>)
 8004a5e:	895b      	ldrh	r3, [r3, #10]
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7fb fcc7 	bl	80003f4 <__aeabi_i2d>
 8004a66:	a30a      	add	r3, pc, #40	@ (adr r3, 8004a90 <processData+0x420>)
 8004a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6c:	f7fb fd2c 	bl	80004c8 <__aeabi_dmul>
 8004a70:	4602      	mov	r2, r0
 8004a72:	460b      	mov	r3, r1
 8004a74:	4610      	mov	r0, r2
 8004a76:	4619      	mov	r1, r3
 8004a78:	f7fb ff60 	bl	800093c <__aeabi_d2uiz>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	4a09      	ldr	r2, [pc, #36]	@ (8004aa4 <processData+0x434>)
 8004a80:	6013      	str	r3, [r2, #0]
		}

}
}
 8004a82:	bf00      	nop
 8004a84:	3708      	adds	r7, #8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	f3af 8000 	nop.w
 8004a90:	9999999a 	.word	0x9999999a
 8004a94:	3ff19999 	.word	0x3ff19999
 8004a98:	20001540 	.word	0x20001540
 8004a9c:	200018e0 	.word	0x200018e0
 8004aa0:	2000196c 	.word	0x2000196c
 8004aa4:	20001970 	.word	0x20001970
 8004aa8:	20001900 	.word	0x20001900

08004aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004ab0:	b672      	cpsid	i
}
 8004ab2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	    HAL_NVIC_SystemReset();
 8004ab4:	f001 f981 	bl	8005dba <HAL_NVIC_SystemReset>
 8004ab8:	e7fc      	b.n	8004ab4 <Error_Handler+0x8>
	...

08004abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004ac2:	4b19      	ldr	r3, [pc, #100]	@ (8004b28 <HAL_MspInit+0x6c>)
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	4a18      	ldr	r2, [pc, #96]	@ (8004b28 <HAL_MspInit+0x6c>)
 8004ac8:	f043 0301 	orr.w	r3, r3, #1
 8004acc:	6193      	str	r3, [r2, #24]
 8004ace:	4b16      	ldr	r3, [pc, #88]	@ (8004b28 <HAL_MspInit+0x6c>)
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	60bb      	str	r3, [r7, #8]
 8004ad8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ada:	4b13      	ldr	r3, [pc, #76]	@ (8004b28 <HAL_MspInit+0x6c>)
 8004adc:	69db      	ldr	r3, [r3, #28]
 8004ade:	4a12      	ldr	r2, [pc, #72]	@ (8004b28 <HAL_MspInit+0x6c>)
 8004ae0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ae4:	61d3      	str	r3, [r2, #28]
 8004ae6:	4b10      	ldr	r3, [pc, #64]	@ (8004b28 <HAL_MspInit+0x6c>)
 8004ae8:	69db      	ldr	r3, [r3, #28]
 8004aea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004aee:	607b      	str	r3, [r7, #4]
 8004af0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8004af2:	2200      	movs	r2, #0
 8004af4:	2100      	movs	r1, #0
 8004af6:	2001      	movs	r0, #1
 8004af8:	f001 f935 	bl	8005d66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8004afc:	2001      	movs	r0, #1
 8004afe:	f001 f94e 	bl	8005d9e <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004b02:	4b0a      	ldr	r3, [pc, #40]	@ (8004b2c <HAL_MspInit+0x70>)
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	60fb      	str	r3, [r7, #12]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8004b0e:	60fb      	str	r3, [r7, #12]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004b16:	60fb      	str	r3, [r7, #12]
 8004b18:	4a04      	ldr	r2, [pc, #16]	@ (8004b2c <HAL_MspInit+0x70>)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b1e:	bf00      	nop
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	40021000 	.word	0x40021000
 8004b2c:	40010000 	.word	0x40010000

08004b30 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b088      	sub	sp, #32
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b38:	f107 0310 	add.w	r3, r7, #16
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	601a      	str	r2, [r3, #0]
 8004b40:	605a      	str	r2, [r3, #4]
 8004b42:	609a      	str	r2, [r3, #8]
 8004b44:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a20      	ldr	r2, [pc, #128]	@ (8004bcc <HAL_CAN_MspInit+0x9c>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d139      	bne.n	8004bc4 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004b50:	4b1f      	ldr	r3, [pc, #124]	@ (8004bd0 <HAL_CAN_MspInit+0xa0>)
 8004b52:	69db      	ldr	r3, [r3, #28]
 8004b54:	4a1e      	ldr	r2, [pc, #120]	@ (8004bd0 <HAL_CAN_MspInit+0xa0>)
 8004b56:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004b5a:	61d3      	str	r3, [r2, #28]
 8004b5c:	4b1c      	ldr	r3, [pc, #112]	@ (8004bd0 <HAL_CAN_MspInit+0xa0>)
 8004b5e:	69db      	ldr	r3, [r3, #28]
 8004b60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b64:	60fb      	str	r3, [r7, #12]
 8004b66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b68:	4b19      	ldr	r3, [pc, #100]	@ (8004bd0 <HAL_CAN_MspInit+0xa0>)
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	4a18      	ldr	r2, [pc, #96]	@ (8004bd0 <HAL_CAN_MspInit+0xa0>)
 8004b6e:	f043 0304 	orr.w	r3, r3, #4
 8004b72:	6193      	str	r3, [r2, #24]
 8004b74:	4b16      	ldr	r3, [pc, #88]	@ (8004bd0 <HAL_CAN_MspInit+0xa0>)
 8004b76:	699b      	ldr	r3, [r3, #24]
 8004b78:	f003 0304 	and.w	r3, r3, #4
 8004b7c:	60bb      	str	r3, [r7, #8]
 8004b7e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004b80:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004b84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b86:	2300      	movs	r3, #0
 8004b88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b8e:	f107 0310 	add.w	r3, r7, #16
 8004b92:	4619      	mov	r1, r3
 8004b94:	480f      	ldr	r0, [pc, #60]	@ (8004bd4 <HAL_CAN_MspInit+0xa4>)
 8004b96:	f001 f921 	bl	8005ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004b9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004b9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ba0:	2302      	movs	r3, #2
 8004ba2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ba8:	f107 0310 	add.w	r3, r7, #16
 8004bac:	4619      	mov	r1, r3
 8004bae:	4809      	ldr	r0, [pc, #36]	@ (8004bd4 <HAL_CAN_MspInit+0xa4>)
 8004bb0:	f001 f914 	bl	8005ddc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	2100      	movs	r1, #0
 8004bb8:	2014      	movs	r0, #20
 8004bba:	f001 f8d4 	bl	8005d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8004bbe:	2014      	movs	r0, #20
 8004bc0:	f001 f8ed 	bl	8005d9e <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8004bc4:	bf00      	nop
 8004bc6:	3720      	adds	r7, #32
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	40006400 	.word	0x40006400
 8004bd0:	40021000 	.word	0x40021000
 8004bd4:	40010800 	.word	0x40010800

08004bd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b08a      	sub	sp, #40	@ 0x28
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004be0:	f107 0314 	add.w	r3, r7, #20
 8004be4:	2200      	movs	r2, #0
 8004be6:	601a      	str	r2, [r3, #0]
 8004be8:	605a      	str	r2, [r3, #4]
 8004bea:	609a      	str	r2, [r3, #8]
 8004bec:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a1d      	ldr	r2, [pc, #116]	@ (8004c68 <HAL_I2C_MspInit+0x90>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d132      	bne.n	8004c5e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bf8:	4b1c      	ldr	r3, [pc, #112]	@ (8004c6c <HAL_I2C_MspInit+0x94>)
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	4a1b      	ldr	r2, [pc, #108]	@ (8004c6c <HAL_I2C_MspInit+0x94>)
 8004bfe:	f043 0308 	orr.w	r3, r3, #8
 8004c02:	6193      	str	r3, [r2, #24]
 8004c04:	4b19      	ldr	r3, [pc, #100]	@ (8004c6c <HAL_I2C_MspInit+0x94>)
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	f003 0308 	and.w	r3, r3, #8
 8004c0c:	613b      	str	r3, [r7, #16]
 8004c0e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004c10:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c16:	2312      	movs	r3, #18
 8004c18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c1e:	f107 0314 	add.w	r3, r7, #20
 8004c22:	4619      	mov	r1, r3
 8004c24:	4812      	ldr	r0, [pc, #72]	@ (8004c70 <HAL_I2C_MspInit+0x98>)
 8004c26:	f001 f8d9 	bl	8005ddc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8004c2a:	4b12      	ldr	r3, [pc, #72]	@ (8004c74 <HAL_I2C_MspInit+0x9c>)
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c32:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8004c36:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c3a:	f043 0302 	orr.w	r3, r3, #2
 8004c3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c40:	4a0c      	ldr	r2, [pc, #48]	@ (8004c74 <HAL_I2C_MspInit+0x9c>)
 8004c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c44:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004c46:	4b09      	ldr	r3, [pc, #36]	@ (8004c6c <HAL_I2C_MspInit+0x94>)
 8004c48:	69db      	ldr	r3, [r3, #28]
 8004c4a:	4a08      	ldr	r2, [pc, #32]	@ (8004c6c <HAL_I2C_MspInit+0x94>)
 8004c4c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004c50:	61d3      	str	r3, [r2, #28]
 8004c52:	4b06      	ldr	r3, [pc, #24]	@ (8004c6c <HAL_I2C_MspInit+0x94>)
 8004c54:	69db      	ldr	r3, [r3, #28]
 8004c56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c5a:	60fb      	str	r3, [r7, #12]
 8004c5c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8004c5e:	bf00      	nop
 8004c60:	3728      	adds	r7, #40	@ 0x28
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	40005400 	.word	0x40005400
 8004c6c:	40021000 	.word	0x40021000
 8004c70:	40010c00 	.word	0x40010c00
 8004c74:	40010000 	.word	0x40010000

08004c78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c88:	d113      	bne.n	8004cb2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004c8a:	4b0c      	ldr	r3, [pc, #48]	@ (8004cbc <HAL_TIM_Base_MspInit+0x44>)
 8004c8c:	69db      	ldr	r3, [r3, #28]
 8004c8e:	4a0b      	ldr	r2, [pc, #44]	@ (8004cbc <HAL_TIM_Base_MspInit+0x44>)
 8004c90:	f043 0301 	orr.w	r3, r3, #1
 8004c94:	61d3      	str	r3, [r2, #28]
 8004c96:	4b09      	ldr	r3, [pc, #36]	@ (8004cbc <HAL_TIM_Base_MspInit+0x44>)
 8004c98:	69db      	ldr	r3, [r3, #28]
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	60fb      	str	r3, [r7, #12]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	2100      	movs	r1, #0
 8004ca6:	201c      	movs	r0, #28
 8004ca8:	f001 f85d 	bl	8005d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004cac:	201c      	movs	r0, #28
 8004cae:	f001 f876 	bl	8005d9e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8004cb2:	bf00      	nop
 8004cb4:	3710      	adds	r7, #16
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	40021000 	.word	0x40021000

08004cc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004cc4:	bf00      	nop
 8004cc6:	e7fd      	b.n	8004cc4 <NMI_Handler+0x4>

08004cc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004ccc:	bf00      	nop
 8004cce:	e7fd      	b.n	8004ccc <HardFault_Handler+0x4>

08004cd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004cd4:	bf00      	nop
 8004cd6:	e7fd      	b.n	8004cd4 <MemManage_Handler+0x4>

08004cd8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004cdc:	bf00      	nop
 8004cde:	e7fd      	b.n	8004cdc <BusFault_Handler+0x4>

08004ce0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ce4:	bf00      	nop
 8004ce6:	e7fd      	b.n	8004ce4 <UsageFault_Handler+0x4>

08004ce8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004cec:	bf00      	nop
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bc80      	pop	{r7}
 8004cf2:	4770      	bx	lr

08004cf4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004cf8:	bf00      	nop
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bc80      	pop	{r7}
 8004cfe:	4770      	bx	lr

08004d00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004d00:	b480      	push	{r7}
 8004d02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004d04:	bf00      	nop
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bc80      	pop	{r7}
 8004d0a:	4770      	bx	lr

08004d0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004d10:	f000 f8bc 	bl	8004e8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004d14:	bf00      	nop
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8004d1c:	f002 fb64 	bl	80073e8 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8004d20:	bf00      	nop
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ONE_WIRE_PRT_Pin);
 8004d28:	2008      	movs	r0, #8
 8004d2a:	f001 fa23 	bl	8006174 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004d2e:	bf00      	nop
 8004d30:	bd80      	pop	{r7, pc}
	...

08004d34 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8004d38:	4802      	ldr	r0, [pc, #8]	@ (8004d44 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8004d3a:	f000 fd04 	bl	8005746 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8004d3e:	bf00      	nop
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	20001468 	.word	0x20001468

08004d48 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004d4c:	4802      	ldr	r0, [pc, #8]	@ (8004d58 <TIM2_IRQHandler+0x10>)
 8004d4e:	f002 fffb 	bl	8007d48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004d52:	bf00      	nop
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	200014f0 	.word	0x200014f0

08004d5c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(speed_sensor_Pin);
 8004d60:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8004d64:	f001 fa06 	bl	8006174 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004d68:	bf00      	nop
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004d70:	bf00      	nop
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bc80      	pop	{r7}
 8004d76:	4770      	bx	lr

08004d78 <HAL_PWR_PVDCallback>:

/**
  * @brief  called by PVD interrupt
  * 		in case of Powerdown.
  */
void HAL_PWR_PVDCallback(void) {
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	af00      	add	r7, sp, #0
    // Check if the PVD flag is set
        HAL_GPIO_WritePin(GPIOB, lcd_reset_Pin,RESET); // low reset button
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	2104      	movs	r1, #4
 8004d80:	4802      	ldr	r0, [pc, #8]	@ (8004d8c <HAL_PWR_PVDCallback+0x14>)
 8004d82:	f001 f9c6 	bl	8006112 <HAL_GPIO_WritePin>
    };
 8004d86:	bf00      	nop
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	40010c00 	.word	0x40010c00

08004d90 <PVD_Init>:
  * @brief  setup and start Power Voltage Detector interrupt
  * 		calling HAL_PWR_PVDCallback() in case of powerdown.
  */
//#include "stm32f1xx_hal.h"

void PVD_Init(void) {
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0

    // Enable the PWR clock
//    __HAL_RCC_PWR_CLK_ENABLE();

    // Configure the PVD Level to 2.9V (PVD Level 4 corresponds to 2.9V)
    sConfigPVD.PVDLevel = PWR_PVDLEVEL_4;
 8004d96:	2380      	movs	r3, #128	@ 0x80
 8004d98:	603b      	str	r3, [r7, #0]
    sConfigPVD.Mode = PWR_MODE_IT_RISING; // Interrupt on rising edge
 8004d9a:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8004d9e:	607b      	str	r3, [r7, #4]

    // Initialize the PVD
    HAL_PWR_ConfigPVD(&sConfigPVD);
 8004da0:	463b      	mov	r3, r7
 8004da2:	4618      	mov	r0, r3
 8004da4:	f002 fab6 	bl	8007314 <HAL_PWR_ConfigPVD>

    // Enable the PVD
    HAL_PWR_EnablePVD();
 8004da8:	f002 fb12 	bl	80073d0 <HAL_PWR_EnablePVD>

    // Enable and set the PVD Interrupt priority
  //  HAL_NVIC_SetPriority(PVD_IRQn, 2, 0);
//    HAL_NVIC_EnableIRQ(PVD_IRQn);
}
 8004dac:	bf00      	nop
 8004dae:	3708      	adds	r7, #8
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004db4:	f7ff ffda 	bl	8004d6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004db8:	480b      	ldr	r0, [pc, #44]	@ (8004de8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004dba:	490c      	ldr	r1, [pc, #48]	@ (8004dec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004dbc:	4a0c      	ldr	r2, [pc, #48]	@ (8004df0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004dbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004dc0:	e002      	b.n	8004dc8 <LoopCopyDataInit>

08004dc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004dc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004dc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004dc6:	3304      	adds	r3, #4

08004dc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004dc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004dca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004dcc:	d3f9      	bcc.n	8004dc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004dce:	4a09      	ldr	r2, [pc, #36]	@ (8004df4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004dd0:	4c09      	ldr	r4, [pc, #36]	@ (8004df8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004dd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004dd4:	e001      	b.n	8004dda <LoopFillZerobss>

08004dd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004dd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004dd8:	3204      	adds	r2, #4

08004dda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004dda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ddc:	d3fb      	bcc.n	8004dd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004dde:	f003 fb0b 	bl	80083f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004de2:	f7fe ff29 	bl	8003c38 <main>
  bx lr
 8004de6:	4770      	bx	lr
  ldr r0, =_sdata
 8004de8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004dec:	200007f0 	.word	0x200007f0
  ldr r2, =_sidata
 8004df0:	0800a26c 	.word	0x0800a26c
  ldr r2, =_sbss
 8004df4:	200007f0 	.word	0x200007f0
  ldr r4, =_ebss
 8004df8:	20001998 	.word	0x20001998

08004dfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004dfc:	e7fe      	b.n	8004dfc <ADC1_2_IRQHandler>
	...

08004e00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004e04:	4b08      	ldr	r3, [pc, #32]	@ (8004e28 <HAL_Init+0x28>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a07      	ldr	r2, [pc, #28]	@ (8004e28 <HAL_Init+0x28>)
 8004e0a:	f043 0310 	orr.w	r3, r3, #16
 8004e0e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e10:	2003      	movs	r0, #3
 8004e12:	f000 ff9d 	bl	8005d50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004e16:	200f      	movs	r0, #15
 8004e18:	f000 f808 	bl	8004e2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004e1c:	f7ff fe4e 	bl	8004abc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	40022000 	.word	0x40022000

08004e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004e34:	4b12      	ldr	r3, [pc, #72]	@ (8004e80 <HAL_InitTick+0x54>)
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	4b12      	ldr	r3, [pc, #72]	@ (8004e84 <HAL_InitTick+0x58>)
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004e42:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f000 ffb9 	bl	8005dc2 <HAL_SYSTICK_Config>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d001      	beq.n	8004e5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e00e      	b.n	8004e78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2b0f      	cmp	r3, #15
 8004e5e:	d80a      	bhi.n	8004e76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004e60:	2200      	movs	r2, #0
 8004e62:	6879      	ldr	r1, [r7, #4]
 8004e64:	f04f 30ff 	mov.w	r0, #4294967295
 8004e68:	f000 ff7d 	bl	8005d66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004e6c:	4a06      	ldr	r2, [pc, #24]	@ (8004e88 <HAL_InitTick+0x5c>)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
 8004e74:	e000      	b.n	8004e78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3708      	adds	r7, #8
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	200007e4 	.word	0x200007e4
 8004e84:	200007ec 	.word	0x200007ec
 8004e88:	200007e8 	.word	0x200007e8

08004e8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004e90:	4b05      	ldr	r3, [pc, #20]	@ (8004ea8 <HAL_IncTick+0x1c>)
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	461a      	mov	r2, r3
 8004e96:	4b05      	ldr	r3, [pc, #20]	@ (8004eac <HAL_IncTick+0x20>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	4a03      	ldr	r2, [pc, #12]	@ (8004eac <HAL_IncTick+0x20>)
 8004e9e:	6013      	str	r3, [r2, #0]
}
 8004ea0:	bf00      	nop
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bc80      	pop	{r7}
 8004ea6:	4770      	bx	lr
 8004ea8:	200007ec 	.word	0x200007ec
 8004eac:	20001994 	.word	0x20001994

08004eb0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	af00      	add	r7, sp, #0
  return uwTick;
 8004eb4:	4b02      	ldr	r3, [pc, #8]	@ (8004ec0 <HAL_GetTick+0x10>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bc80      	pop	{r7}
 8004ebe:	4770      	bx	lr
 8004ec0:	20001994 	.word	0x20001994

08004ec4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ecc:	f7ff fff0 	bl	8004eb0 <HAL_GetTick>
 8004ed0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004edc:	d005      	beq.n	8004eea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004ede:	4b0a      	ldr	r3, [pc, #40]	@ (8004f08 <HAL_Delay+0x44>)
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	4413      	add	r3, r2
 8004ee8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004eea:	bf00      	nop
 8004eec:	f7ff ffe0 	bl	8004eb0 <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d8f7      	bhi.n	8004eec <HAL_Delay+0x28>
  {
  }
}
 8004efc:	bf00      	nop
 8004efe:	bf00      	nop
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	200007ec 	.word	0x200007ec

08004f0c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d101      	bne.n	8004f1e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e0ed      	b.n	80050fa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d102      	bne.n	8004f30 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f7ff fe00 	bl	8004b30 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f042 0201 	orr.w	r2, r2, #1
 8004f3e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f40:	f7ff ffb6 	bl	8004eb0 <HAL_GetTick>
 8004f44:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004f46:	e012      	b.n	8004f6e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004f48:	f7ff ffb2 	bl	8004eb0 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b0a      	cmp	r3, #10
 8004f54:	d90b      	bls.n	8004f6e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f5a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2205      	movs	r2, #5
 8004f66:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e0c5      	b.n	80050fa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f003 0301 	and.w	r3, r3, #1
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d0e5      	beq.n	8004f48 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f022 0202 	bic.w	r2, r2, #2
 8004f8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f8c:	f7ff ff90 	bl	8004eb0 <HAL_GetTick>
 8004f90:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004f92:	e012      	b.n	8004fba <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004f94:	f7ff ff8c 	bl	8004eb0 <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	2b0a      	cmp	r3, #10
 8004fa0:	d90b      	bls.n	8004fba <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2205      	movs	r2, #5
 8004fb2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e09f      	b.n	80050fa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	f003 0302 	and.w	r3, r3, #2
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1e5      	bne.n	8004f94 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	7e1b      	ldrb	r3, [r3, #24]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d108      	bne.n	8004fe2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004fde:	601a      	str	r2, [r3, #0]
 8004fe0:	e007      	b.n	8004ff2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004ff0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	7e5b      	ldrb	r3, [r3, #25]
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d108      	bne.n	800500c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005008:	601a      	str	r2, [r3, #0]
 800500a:	e007      	b.n	800501c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800501a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	7e9b      	ldrb	r3, [r3, #26]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d108      	bne.n	8005036 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f042 0220 	orr.w	r2, r2, #32
 8005032:	601a      	str	r2, [r3, #0]
 8005034:	e007      	b.n	8005046 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f022 0220 	bic.w	r2, r2, #32
 8005044:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	7edb      	ldrb	r3, [r3, #27]
 800504a:	2b01      	cmp	r3, #1
 800504c:	d108      	bne.n	8005060 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f022 0210 	bic.w	r2, r2, #16
 800505c:	601a      	str	r2, [r3, #0]
 800505e:	e007      	b.n	8005070 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f042 0210 	orr.w	r2, r2, #16
 800506e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	7f1b      	ldrb	r3, [r3, #28]
 8005074:	2b01      	cmp	r3, #1
 8005076:	d108      	bne.n	800508a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f042 0208 	orr.w	r2, r2, #8
 8005086:	601a      	str	r2, [r3, #0]
 8005088:	e007      	b.n	800509a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f022 0208 	bic.w	r2, r2, #8
 8005098:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	7f5b      	ldrb	r3, [r3, #29]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d108      	bne.n	80050b4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f042 0204 	orr.w	r2, r2, #4
 80050b0:	601a      	str	r2, [r3, #0]
 80050b2:	e007      	b.n	80050c4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f022 0204 	bic.w	r2, r2, #4
 80050c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	689a      	ldr	r2, [r3, #8]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	431a      	orrs	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	431a      	orrs	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	695b      	ldr	r3, [r3, #20]
 80050d8:	ea42 0103 	orr.w	r1, r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	1e5a      	subs	r2, r3, #1
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	430a      	orrs	r2, r1
 80050e8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3710      	adds	r7, #16
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8005102:	b480      	push	{r7}
 8005104:	b087      	sub	sp, #28
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
 800510a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005118:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800511a:	7cfb      	ldrb	r3, [r7, #19]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d003      	beq.n	8005128 <HAL_CAN_ConfigFilter+0x26>
 8005120:	7cfb      	ldrb	r3, [r7, #19]
 8005122:	2b02      	cmp	r3, #2
 8005124:	f040 80aa 	bne.w	800527c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800512e:	f043 0201 	orr.w	r2, r3, #1
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	695b      	ldr	r3, [r3, #20]
 800513c:	f003 031f 	and.w	r3, r3, #31
 8005140:	2201      	movs	r2, #1
 8005142:	fa02 f303 	lsl.w	r3, r2, r3
 8005146:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	43db      	mvns	r3, r3
 8005152:	401a      	ands	r2, r3
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	69db      	ldr	r3, [r3, #28]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d123      	bne.n	80051aa <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	43db      	mvns	r3, r3
 800516c:	401a      	ands	r2, r3
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005180:	683a      	ldr	r2, [r7, #0]
 8005182:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005184:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	3248      	adds	r2, #72	@ 0x48
 800518a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800519e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80051a0:	6979      	ldr	r1, [r7, #20]
 80051a2:	3348      	adds	r3, #72	@ 0x48
 80051a4:	00db      	lsls	r3, r3, #3
 80051a6:	440b      	add	r3, r1
 80051a8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	69db      	ldr	r3, [r3, #28]
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d122      	bne.n	80051f8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	431a      	orrs	r2, r3
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80051ce:	683a      	ldr	r2, [r7, #0]
 80051d0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80051d2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	3248      	adds	r2, #72	@ 0x48
 80051d8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80051ec:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80051ee:	6979      	ldr	r1, [r7, #20]
 80051f0:	3348      	adds	r3, #72	@ 0x48
 80051f2:	00db      	lsls	r3, r3, #3
 80051f4:	440b      	add	r3, r1
 80051f6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d109      	bne.n	8005214 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	43db      	mvns	r3, r3
 800520a:	401a      	ands	r2, r3
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8005212:	e007      	b.n	8005224 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	431a      	orrs	r2, r3
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d109      	bne.n	8005240 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	43db      	mvns	r3, r3
 8005236:	401a      	ands	r2, r3
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800523e:	e007      	b.n	8005250 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	431a      	orrs	r2, r3
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	6a1b      	ldr	r3, [r3, #32]
 8005254:	2b01      	cmp	r3, #1
 8005256:	d107      	bne.n	8005268 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	431a      	orrs	r2, r3
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800526e:	f023 0201 	bic.w	r2, r3, #1
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8005278:	2300      	movs	r3, #0
 800527a:	e006      	b.n	800528a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005280:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
  }
}
 800528a:	4618      	mov	r0, r3
 800528c:	371c      	adds	r7, #28
 800528e:	46bd      	mov	sp, r7
 8005290:	bc80      	pop	{r7}
 8005292:	4770      	bx	lr

08005294 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d12e      	bne.n	8005306 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2202      	movs	r2, #2
 80052ac:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f022 0201 	bic.w	r2, r2, #1
 80052be:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80052c0:	f7ff fdf6 	bl	8004eb0 <HAL_GetTick>
 80052c4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80052c6:	e012      	b.n	80052ee <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80052c8:	f7ff fdf2 	bl	8004eb0 <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	2b0a      	cmp	r3, #10
 80052d4:	d90b      	bls.n	80052ee <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052da:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2205      	movs	r2, #5
 80052e6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e012      	b.n	8005314 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f003 0301 	and.w	r3, r3, #1
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d1e5      	bne.n	80052c8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8005302:	2300      	movs	r3, #0
 8005304:	e006      	b.n	8005314 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800530a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
  }
}
 8005314:	4618      	mov	r0, r3
 8005316:	3710      	adds	r7, #16
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800531c:	b480      	push	{r7}
 800531e:	b089      	sub	sp, #36	@ 0x24
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	607a      	str	r2, [r7, #4]
 8005328:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005330:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800533a:	7ffb      	ldrb	r3, [r7, #31]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d003      	beq.n	8005348 <HAL_CAN_AddTxMessage+0x2c>
 8005340:	7ffb      	ldrb	r3, [r7, #31]
 8005342:	2b02      	cmp	r3, #2
 8005344:	f040 80ad 	bne.w	80054a2 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d10a      	bne.n	8005368 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005358:	2b00      	cmp	r3, #0
 800535a:	d105      	bne.n	8005368 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005362:	2b00      	cmp	r3, #0
 8005364:	f000 8095 	beq.w	8005492 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	0e1b      	lsrs	r3, r3, #24
 800536c:	f003 0303 	and.w	r3, r3, #3
 8005370:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005372:	2201      	movs	r2, #1
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	409a      	lsls	r2, r3
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d10d      	bne.n	80053a0 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800538e:	68f9      	ldr	r1, [r7, #12]
 8005390:	6809      	ldr	r1, [r1, #0]
 8005392:	431a      	orrs	r2, r3
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	3318      	adds	r3, #24
 8005398:	011b      	lsls	r3, r3, #4
 800539a:	440b      	add	r3, r1
 800539c:	601a      	str	r2, [r3, #0]
 800539e:	e00f      	b.n	80053c0 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80053aa:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80053b0:	68f9      	ldr	r1, [r7, #12]
 80053b2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80053b4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	3318      	adds	r3, #24
 80053ba:	011b      	lsls	r3, r3, #4
 80053bc:	440b      	add	r3, r1
 80053be:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6819      	ldr	r1, [r3, #0]
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	691a      	ldr	r2, [r3, #16]
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	3318      	adds	r3, #24
 80053cc:	011b      	lsls	r3, r3, #4
 80053ce:	440b      	add	r3, r1
 80053d0:	3304      	adds	r3, #4
 80053d2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	7d1b      	ldrb	r3, [r3, #20]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d111      	bne.n	8005400 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	3318      	adds	r3, #24
 80053e4:	011b      	lsls	r3, r3, #4
 80053e6:	4413      	add	r3, r2
 80053e8:	3304      	adds	r3, #4
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	6811      	ldr	r1, [r2, #0]
 80053f0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	3318      	adds	r3, #24
 80053f8:	011b      	lsls	r3, r3, #4
 80053fa:	440b      	add	r3, r1
 80053fc:	3304      	adds	r3, #4
 80053fe:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	3307      	adds	r3, #7
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	061a      	lsls	r2, r3, #24
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	3306      	adds	r3, #6
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	041b      	lsls	r3, r3, #16
 8005410:	431a      	orrs	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	3305      	adds	r3, #5
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	021b      	lsls	r3, r3, #8
 800541a:	4313      	orrs	r3, r2
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	3204      	adds	r2, #4
 8005420:	7812      	ldrb	r2, [r2, #0]
 8005422:	4610      	mov	r0, r2
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	6811      	ldr	r1, [r2, #0]
 8005428:	ea43 0200 	orr.w	r2, r3, r0
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	011b      	lsls	r3, r3, #4
 8005430:	440b      	add	r3, r1
 8005432:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8005436:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	3303      	adds	r3, #3
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	061a      	lsls	r2, r3, #24
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	3302      	adds	r3, #2
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	041b      	lsls	r3, r3, #16
 8005448:	431a      	orrs	r2, r3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	3301      	adds	r3, #1
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	021b      	lsls	r3, r3, #8
 8005452:	4313      	orrs	r3, r2
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	7812      	ldrb	r2, [r2, #0]
 8005458:	4610      	mov	r0, r2
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	6811      	ldr	r1, [r2, #0]
 800545e:	ea43 0200 	orr.w	r2, r3, r0
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	011b      	lsls	r3, r3, #4
 8005466:	440b      	add	r3, r1
 8005468:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800546c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	3318      	adds	r3, #24
 8005476:	011b      	lsls	r3, r3, #4
 8005478:	4413      	add	r3, r2
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	6811      	ldr	r1, [r2, #0]
 8005480:	f043 0201 	orr.w	r2, r3, #1
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	3318      	adds	r3, #24
 8005488:	011b      	lsls	r3, r3, #4
 800548a:	440b      	add	r3, r1
 800548c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800548e:	2300      	movs	r3, #0
 8005490:	e00e      	b.n	80054b0 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005496:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e006      	b.n	80054b0 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
  }
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3724      	adds	r7, #36	@ 0x24
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bc80      	pop	{r7}
 80054b8:	4770      	bx	lr

080054ba <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80054ba:	b480      	push	{r7}
 80054bc:	b087      	sub	sp, #28
 80054be:	af00      	add	r7, sp, #0
 80054c0:	60f8      	str	r0, [r7, #12]
 80054c2:	60b9      	str	r1, [r7, #8]
 80054c4:	607a      	str	r2, [r7, #4]
 80054c6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054ce:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80054d0:	7dfb      	ldrb	r3, [r7, #23]
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d003      	beq.n	80054de <HAL_CAN_GetRxMessage+0x24>
 80054d6:	7dfb      	ldrb	r3, [r7, #23]
 80054d8:	2b02      	cmp	r3, #2
 80054da:	f040 8103 	bne.w	80056e4 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d10e      	bne.n	8005502 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	f003 0303 	and.w	r3, r3, #3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d116      	bne.n	8005520 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e0f7      	b.n	80056f2 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	f003 0303 	and.w	r3, r3, #3
 800550c:	2b00      	cmp	r3, #0
 800550e:	d107      	bne.n	8005520 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005514:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e0e8      	b.n	80056f2 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	331b      	adds	r3, #27
 8005528:	011b      	lsls	r3, r3, #4
 800552a:	4413      	add	r3, r2
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0204 	and.w	r2, r3, #4
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10c      	bne.n	8005558 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	331b      	adds	r3, #27
 8005546:	011b      	lsls	r3, r3, #4
 8005548:	4413      	add	r3, r2
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	0d5b      	lsrs	r3, r3, #21
 800554e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	601a      	str	r2, [r3, #0]
 8005556:	e00b      	b.n	8005570 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	331b      	adds	r3, #27
 8005560:	011b      	lsls	r3, r3, #4
 8005562:	4413      	add	r3, r2
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	08db      	lsrs	r3, r3, #3
 8005568:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	331b      	adds	r3, #27
 8005578:	011b      	lsls	r3, r3, #4
 800557a:	4413      	add	r3, r2
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0202 	and.w	r2, r3, #2
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	331b      	adds	r3, #27
 800558e:	011b      	lsls	r3, r3, #4
 8005590:	4413      	add	r3, r2
 8005592:	3304      	adds	r3, #4
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0308 	and.w	r3, r3, #8
 800559a:	2b00      	cmp	r3, #0
 800559c:	d003      	beq.n	80055a6 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2208      	movs	r2, #8
 80055a2:	611a      	str	r2, [r3, #16]
 80055a4:	e00b      	b.n	80055be <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	331b      	adds	r3, #27
 80055ae:	011b      	lsls	r3, r3, #4
 80055b0:	4413      	add	r3, r2
 80055b2:	3304      	adds	r3, #4
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 020f 	and.w	r2, r3, #15
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	331b      	adds	r3, #27
 80055c6:	011b      	lsls	r3, r3, #4
 80055c8:	4413      	add	r3, r2
 80055ca:	3304      	adds	r3, #4
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	0a1b      	lsrs	r3, r3, #8
 80055d0:	b2da      	uxtb	r2, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	331b      	adds	r3, #27
 80055de:	011b      	lsls	r3, r3, #4
 80055e0:	4413      	add	r3, r2
 80055e2:	3304      	adds	r3, #4
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	0c1b      	lsrs	r3, r3, #16
 80055e8:	b29a      	uxth	r2, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	011b      	lsls	r3, r3, #4
 80055f6:	4413      	add	r3, r2
 80055f8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	b2da      	uxtb	r2, r3
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	011b      	lsls	r3, r3, #4
 800560c:	4413      	add	r3, r2
 800560e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	0a1a      	lsrs	r2, r3, #8
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	3301      	adds	r3, #1
 800561a:	b2d2      	uxtb	r2, r2
 800561c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	011b      	lsls	r3, r3, #4
 8005626:	4413      	add	r3, r2
 8005628:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	0c1a      	lsrs	r2, r3, #16
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	3302      	adds	r3, #2
 8005634:	b2d2      	uxtb	r2, r2
 8005636:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	011b      	lsls	r3, r3, #4
 8005640:	4413      	add	r3, r2
 8005642:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	0e1a      	lsrs	r2, r3, #24
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	3303      	adds	r3, #3
 800564e:	b2d2      	uxtb	r2, r2
 8005650:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	011b      	lsls	r3, r3, #4
 800565a:	4413      	add	r3, r2
 800565c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	3304      	adds	r3, #4
 8005666:	b2d2      	uxtb	r2, r2
 8005668:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	011b      	lsls	r3, r3, #4
 8005672:	4413      	add	r3, r2
 8005674:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	0a1a      	lsrs	r2, r3, #8
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	3305      	adds	r3, #5
 8005680:	b2d2      	uxtb	r2, r2
 8005682:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	011b      	lsls	r3, r3, #4
 800568c:	4413      	add	r3, r2
 800568e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	0c1a      	lsrs	r2, r3, #16
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	3306      	adds	r3, #6
 800569a:	b2d2      	uxtb	r2, r2
 800569c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	011b      	lsls	r3, r3, #4
 80056a6:	4413      	add	r3, r2
 80056a8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	0e1a      	lsrs	r2, r3, #24
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	3307      	adds	r3, #7
 80056b4:	b2d2      	uxtb	r2, r2
 80056b6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d108      	bne.n	80056d0 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68da      	ldr	r2, [r3, #12]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f042 0220 	orr.w	r2, r2, #32
 80056cc:	60da      	str	r2, [r3, #12]
 80056ce:	e007      	b.n	80056e0 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	691a      	ldr	r2, [r3, #16]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f042 0220 	orr.w	r2, r2, #32
 80056de:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80056e0:	2300      	movs	r3, #0
 80056e2:	e006      	b.n	80056f2 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056e8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
  }
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	371c      	adds	r7, #28
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bc80      	pop	{r7}
 80056fa:	4770      	bx	lr

080056fc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f893 3020 	ldrb.w	r3, [r3, #32]
 800570c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800570e:	7bfb      	ldrb	r3, [r7, #15]
 8005710:	2b01      	cmp	r3, #1
 8005712:	d002      	beq.n	800571a <HAL_CAN_ActivateNotification+0x1e>
 8005714:	7bfb      	ldrb	r3, [r7, #15]
 8005716:	2b02      	cmp	r3, #2
 8005718:	d109      	bne.n	800572e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	6959      	ldr	r1, [r3, #20]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	683a      	ldr	r2, [r7, #0]
 8005726:	430a      	orrs	r2, r1
 8005728:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800572a:	2300      	movs	r3, #0
 800572c:	e006      	b.n	800573c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005732:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
  }
}
 800573c:	4618      	mov	r0, r3
 800573e:	3714      	adds	r7, #20
 8005740:	46bd      	mov	sp, r7
 8005742:	bc80      	pop	{r7}
 8005744:	4770      	bx	lr

08005746 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b08a      	sub	sp, #40	@ 0x28
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800574e:	2300      	movs	r3, #0
 8005750:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	695b      	ldr	r3, [r3, #20]
 8005758:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	699b      	ldr	r3, [r3, #24]
 8005780:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005782:	6a3b      	ldr	r3, [r7, #32]
 8005784:	f003 0301 	and.w	r3, r3, #1
 8005788:	2b00      	cmp	r3, #0
 800578a:	d07c      	beq.n	8005886 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	f003 0301 	and.w	r3, r3, #1
 8005792:	2b00      	cmp	r3, #0
 8005794:	d023      	beq.n	80057de <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2201      	movs	r2, #1
 800579c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	f003 0302 	and.w	r3, r3, #2
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d003      	beq.n	80057b0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 f983 	bl	8005ab4 <HAL_CAN_TxMailbox0CompleteCallback>
 80057ae:	e016      	b.n	80057de <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	f003 0304 	and.w	r3, r3, #4
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d004      	beq.n	80057c4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80057ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057bc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80057c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80057c2:	e00c      	b.n	80057de <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	f003 0308 	and.w	r3, r3, #8
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d004      	beq.n	80057d8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80057ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80057d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80057d6:	e002      	b.n	80057de <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f000 f986 	bl	8005aea <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d024      	beq.n	8005832 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80057f0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d003      	beq.n	8005804 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 f962 	bl	8005ac6 <HAL_CAN_TxMailbox1CompleteCallback>
 8005802:	e016      	b.n	8005832 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800580a:	2b00      	cmp	r3, #0
 800580c:	d004      	beq.n	8005818 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800580e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005810:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005814:	627b      	str	r3, [r7, #36]	@ 0x24
 8005816:	e00c      	b.n	8005832 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800581e:	2b00      	cmp	r3, #0
 8005820:	d004      	beq.n	800582c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005824:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005828:	627b      	str	r3, [r7, #36]	@ 0x24
 800582a:	e002      	b.n	8005832 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 f965 	bl	8005afc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d024      	beq.n	8005886 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005844:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d003      	beq.n	8005858 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 f941 	bl	8005ad8 <HAL_CAN_TxMailbox2CompleteCallback>
 8005856:	e016      	b.n	8005886 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d004      	beq.n	800586c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005864:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005868:	627b      	str	r3, [r7, #36]	@ 0x24
 800586a:	e00c      	b.n	8005886 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005872:	2b00      	cmp	r3, #0
 8005874:	d004      	beq.n	8005880 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005878:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800587c:	627b      	str	r3, [r7, #36]	@ 0x24
 800587e:	e002      	b.n	8005886 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 f944 	bl	8005b0e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005886:	6a3b      	ldr	r3, [r7, #32]
 8005888:	f003 0308 	and.w	r3, r3, #8
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00c      	beq.n	80058aa <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	f003 0310 	and.w	r3, r3, #16
 8005896:	2b00      	cmp	r3, #0
 8005898:	d007      	beq.n	80058aa <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800589a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800589c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80058a0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	2210      	movs	r2, #16
 80058a8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80058aa:	6a3b      	ldr	r3, [r7, #32]
 80058ac:	f003 0304 	and.w	r3, r3, #4
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d00b      	beq.n	80058cc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	f003 0308 	and.w	r3, r3, #8
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d006      	beq.n	80058cc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2208      	movs	r2, #8
 80058c4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f92a 	bl	8005b20 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80058cc:	6a3b      	ldr	r3, [r7, #32]
 80058ce:	f003 0302 	and.w	r3, r3, #2
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d009      	beq.n	80058ea <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	f003 0303 	and.w	r3, r3, #3
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d002      	beq.n	80058ea <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f7fd fe9d 	bl	8003624 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80058ea:	6a3b      	ldr	r3, [r7, #32]
 80058ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d00c      	beq.n	800590e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	f003 0310 	and.w	r3, r3, #16
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d007      	beq.n	800590e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80058fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005900:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005904:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2210      	movs	r2, #16
 800590c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800590e:	6a3b      	ldr	r3, [r7, #32]
 8005910:	f003 0320 	and.w	r3, r3, #32
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00b      	beq.n	8005930 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	f003 0308 	and.w	r3, r3, #8
 800591e:	2b00      	cmp	r3, #0
 8005920:	d006      	beq.n	8005930 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2208      	movs	r2, #8
 8005928:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 f90a 	bl	8005b44 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005930:	6a3b      	ldr	r3, [r7, #32]
 8005932:	f003 0310 	and.w	r3, r3, #16
 8005936:	2b00      	cmp	r3, #0
 8005938:	d009      	beq.n	800594e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	f003 0303 	and.w	r3, r3, #3
 8005944:	2b00      	cmp	r3, #0
 8005946:	d002      	beq.n	800594e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 f8f2 	bl	8005b32 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d00b      	beq.n	8005970 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	f003 0310 	and.w	r3, r3, #16
 800595e:	2b00      	cmp	r3, #0
 8005960:	d006      	beq.n	8005970 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2210      	movs	r2, #16
 8005968:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 f8f3 	bl	8005b56 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005970:	6a3b      	ldr	r3, [r7, #32]
 8005972:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00b      	beq.n	8005992 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	f003 0308 	and.w	r3, r3, #8
 8005980:	2b00      	cmp	r3, #0
 8005982:	d006      	beq.n	8005992 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2208      	movs	r2, #8
 800598a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 f8eb 	bl	8005b68 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005992:	6a3b      	ldr	r3, [r7, #32]
 8005994:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d07b      	beq.n	8005a94 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	f003 0304 	and.w	r3, r3, #4
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d072      	beq.n	8005a8c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80059a6:	6a3b      	ldr	r3, [r7, #32]
 80059a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d008      	beq.n	80059c2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d003      	beq.n	80059c2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80059ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059bc:	f043 0301 	orr.w	r3, r3, #1
 80059c0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80059c2:	6a3b      	ldr	r3, [r7, #32]
 80059c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d008      	beq.n	80059de <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d003      	beq.n	80059de <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80059d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d8:	f043 0302 	orr.w	r3, r3, #2
 80059dc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80059de:	6a3b      	ldr	r3, [r7, #32]
 80059e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d008      	beq.n	80059fa <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d003      	beq.n	80059fa <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80059f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f4:	f043 0304 	orr.w	r3, r3, #4
 80059f8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80059fa:	6a3b      	ldr	r3, [r7, #32]
 80059fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d043      	beq.n	8005a8c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d03e      	beq.n	8005a8c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a14:	2b60      	cmp	r3, #96	@ 0x60
 8005a16:	d02b      	beq.n	8005a70 <HAL_CAN_IRQHandler+0x32a>
 8005a18:	2b60      	cmp	r3, #96	@ 0x60
 8005a1a:	d82e      	bhi.n	8005a7a <HAL_CAN_IRQHandler+0x334>
 8005a1c:	2b50      	cmp	r3, #80	@ 0x50
 8005a1e:	d022      	beq.n	8005a66 <HAL_CAN_IRQHandler+0x320>
 8005a20:	2b50      	cmp	r3, #80	@ 0x50
 8005a22:	d82a      	bhi.n	8005a7a <HAL_CAN_IRQHandler+0x334>
 8005a24:	2b40      	cmp	r3, #64	@ 0x40
 8005a26:	d019      	beq.n	8005a5c <HAL_CAN_IRQHandler+0x316>
 8005a28:	2b40      	cmp	r3, #64	@ 0x40
 8005a2a:	d826      	bhi.n	8005a7a <HAL_CAN_IRQHandler+0x334>
 8005a2c:	2b30      	cmp	r3, #48	@ 0x30
 8005a2e:	d010      	beq.n	8005a52 <HAL_CAN_IRQHandler+0x30c>
 8005a30:	2b30      	cmp	r3, #48	@ 0x30
 8005a32:	d822      	bhi.n	8005a7a <HAL_CAN_IRQHandler+0x334>
 8005a34:	2b10      	cmp	r3, #16
 8005a36:	d002      	beq.n	8005a3e <HAL_CAN_IRQHandler+0x2f8>
 8005a38:	2b20      	cmp	r3, #32
 8005a3a:	d005      	beq.n	8005a48 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005a3c:	e01d      	b.n	8005a7a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a40:	f043 0308 	orr.w	r3, r3, #8
 8005a44:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005a46:	e019      	b.n	8005a7c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a4a:	f043 0310 	orr.w	r3, r3, #16
 8005a4e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005a50:	e014      	b.n	8005a7c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a54:	f043 0320 	orr.w	r3, r3, #32
 8005a58:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005a5a:	e00f      	b.n	8005a7c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a62:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005a64:	e00a      	b.n	8005a7c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a6c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005a6e:	e005      	b.n	8005a7c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a76:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005a78:	e000      	b.n	8005a7c <HAL_CAN_IRQHandler+0x336>
            break;
 8005a7a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	699a      	ldr	r2, [r3, #24]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005a8a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2204      	movs	r2, #4
 8005a92:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d008      	beq.n	8005aac <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa0:	431a      	orrs	r2, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 f867 	bl	8005b7a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005aac:	bf00      	nop
 8005aae:	3728      	adds	r7, #40	@ 0x28
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005abc:	bf00      	nop
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bc80      	pop	{r7}
 8005ac4:	4770      	bx	lr

08005ac6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005ac6:	b480      	push	{r7}
 8005ac8:	b083      	sub	sp, #12
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005ace:	bf00      	nop
 8005ad0:	370c      	adds	r7, #12
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bc80      	pop	{r7}
 8005ad6:	4770      	bx	lr

08005ad8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005ae0:	bf00      	nop
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bc80      	pop	{r7}
 8005ae8:	4770      	bx	lr

08005aea <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005aea:	b480      	push	{r7}
 8005aec:	b083      	sub	sp, #12
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005af2:	bf00      	nop
 8005af4:	370c      	adds	r7, #12
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bc80      	pop	{r7}
 8005afa:	4770      	bx	lr

08005afc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bc80      	pop	{r7}
 8005b0c:	4770      	bx	lr

08005b0e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005b0e:	b480      	push	{r7}
 8005b10:	b083      	sub	sp, #12
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005b16:	bf00      	nop
 8005b18:	370c      	adds	r7, #12
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bc80      	pop	{r7}
 8005b1e:	4770      	bx	lr

08005b20 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005b28:	bf00      	nop
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bc80      	pop	{r7}
 8005b30:	4770      	bx	lr

08005b32 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005b32:	b480      	push	{r7}
 8005b34:	b083      	sub	sp, #12
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005b3a:	bf00      	nop
 8005b3c:	370c      	adds	r7, #12
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bc80      	pop	{r7}
 8005b42:	4770      	bx	lr

08005b44 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005b4c:	bf00      	nop
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bc80      	pop	{r7}
 8005b54:	4770      	bx	lr

08005b56 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005b56:	b480      	push	{r7}
 8005b58:	b083      	sub	sp, #12
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005b5e:	bf00      	nop
 8005b60:	370c      	adds	r7, #12
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bc80      	pop	{r7}
 8005b66:	4770      	bx	lr

08005b68 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005b70:	bf00      	nop
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bc80      	pop	{r7}
 8005b78:	4770      	bx	lr

08005b7a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005b7a:	b480      	push	{r7}
 8005b7c:	b083      	sub	sp, #12
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005b82:	bf00      	nop
 8005b84:	370c      	adds	r7, #12
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bc80      	pop	{r7}
 8005b8a:	4770      	bx	lr

08005b8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f003 0307 	and.w	r3, r3, #7
 8005b9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8005bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005ba2:	68ba      	ldr	r2, [r7, #8]
 8005ba4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005ba8:	4013      	ands	r3, r2
 8005baa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005bb4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005bb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005bbe:	4a04      	ldr	r2, [pc, #16]	@ (8005bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	60d3      	str	r3, [r2, #12]
}
 8005bc4:	bf00      	nop
 8005bc6:	3714      	adds	r7, #20
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bc80      	pop	{r7}
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	e000ed00 	.word	0xe000ed00

08005bd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005bd8:	4b04      	ldr	r3, [pc, #16]	@ (8005bec <__NVIC_GetPriorityGrouping+0x18>)
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	0a1b      	lsrs	r3, r3, #8
 8005bde:	f003 0307 	and.w	r3, r3, #7
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bc80      	pop	{r7}
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop
 8005bec:	e000ed00 	.word	0xe000ed00

08005bf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	db0b      	blt.n	8005c1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c02:	79fb      	ldrb	r3, [r7, #7]
 8005c04:	f003 021f 	and.w	r2, r3, #31
 8005c08:	4906      	ldr	r1, [pc, #24]	@ (8005c24 <__NVIC_EnableIRQ+0x34>)
 8005c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c0e:	095b      	lsrs	r3, r3, #5
 8005c10:	2001      	movs	r0, #1
 8005c12:	fa00 f202 	lsl.w	r2, r0, r2
 8005c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005c1a:	bf00      	nop
 8005c1c:	370c      	adds	r7, #12
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bc80      	pop	{r7}
 8005c22:	4770      	bx	lr
 8005c24:	e000e100 	.word	0xe000e100

08005c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	4603      	mov	r3, r0
 8005c30:	6039      	str	r1, [r7, #0]
 8005c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	db0a      	blt.n	8005c52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	b2da      	uxtb	r2, r3
 8005c40:	490c      	ldr	r1, [pc, #48]	@ (8005c74 <__NVIC_SetPriority+0x4c>)
 8005c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c46:	0112      	lsls	r2, r2, #4
 8005c48:	b2d2      	uxtb	r2, r2
 8005c4a:	440b      	add	r3, r1
 8005c4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005c50:	e00a      	b.n	8005c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	b2da      	uxtb	r2, r3
 8005c56:	4908      	ldr	r1, [pc, #32]	@ (8005c78 <__NVIC_SetPriority+0x50>)
 8005c58:	79fb      	ldrb	r3, [r7, #7]
 8005c5a:	f003 030f 	and.w	r3, r3, #15
 8005c5e:	3b04      	subs	r3, #4
 8005c60:	0112      	lsls	r2, r2, #4
 8005c62:	b2d2      	uxtb	r2, r2
 8005c64:	440b      	add	r3, r1
 8005c66:	761a      	strb	r2, [r3, #24]
}
 8005c68:	bf00      	nop
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bc80      	pop	{r7}
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	e000e100 	.word	0xe000e100
 8005c78:	e000ed00 	.word	0xe000ed00

08005c7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b089      	sub	sp, #36	@ 0x24
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f003 0307 	and.w	r3, r3, #7
 8005c8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	f1c3 0307 	rsb	r3, r3, #7
 8005c96:	2b04      	cmp	r3, #4
 8005c98:	bf28      	it	cs
 8005c9a:	2304      	movcs	r3, #4
 8005c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	3304      	adds	r3, #4
 8005ca2:	2b06      	cmp	r3, #6
 8005ca4:	d902      	bls.n	8005cac <NVIC_EncodePriority+0x30>
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	3b03      	subs	r3, #3
 8005caa:	e000      	b.n	8005cae <NVIC_EncodePriority+0x32>
 8005cac:	2300      	movs	r3, #0
 8005cae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cba:	43da      	mvns	r2, r3
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	401a      	ands	r2, r3
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	fa01 f303 	lsl.w	r3, r1, r3
 8005cce:	43d9      	mvns	r1, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005cd4:	4313      	orrs	r3, r2
         );
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3724      	adds	r7, #36	@ 0x24
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bc80      	pop	{r7}
 8005cde:	4770      	bx	lr

08005ce0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005ce4:	f3bf 8f4f 	dsb	sy
}
 8005ce8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005cea:	4b06      	ldr	r3, [pc, #24]	@ (8005d04 <__NVIC_SystemReset+0x24>)
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005cf2:	4904      	ldr	r1, [pc, #16]	@ (8005d04 <__NVIC_SystemReset+0x24>)
 8005cf4:	4b04      	ldr	r3, [pc, #16]	@ (8005d08 <__NVIC_SystemReset+0x28>)
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005cfa:	f3bf 8f4f 	dsb	sy
}
 8005cfe:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8005d00:	bf00      	nop
 8005d02:	e7fd      	b.n	8005d00 <__NVIC_SystemReset+0x20>
 8005d04:	e000ed00 	.word	0xe000ed00
 8005d08:	05fa0004 	.word	0x05fa0004

08005d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	3b01      	subs	r3, #1
 8005d18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d1c:	d301      	bcc.n	8005d22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e00f      	b.n	8005d42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005d22:	4a0a      	ldr	r2, [pc, #40]	@ (8005d4c <SysTick_Config+0x40>)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	3b01      	subs	r3, #1
 8005d28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005d2a:	210f      	movs	r1, #15
 8005d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d30:	f7ff ff7a 	bl	8005c28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005d34:	4b05      	ldr	r3, [pc, #20]	@ (8005d4c <SysTick_Config+0x40>)
 8005d36:	2200      	movs	r2, #0
 8005d38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005d3a:	4b04      	ldr	r3, [pc, #16]	@ (8005d4c <SysTick_Config+0x40>)
 8005d3c:	2207      	movs	r2, #7
 8005d3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005d40:	2300      	movs	r3, #0
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3708      	adds	r7, #8
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	e000e010 	.word	0xe000e010

08005d50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b082      	sub	sp, #8
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f7ff ff17 	bl	8005b8c <__NVIC_SetPriorityGrouping>
}
 8005d5e:	bf00      	nop
 8005d60:	3708      	adds	r7, #8
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b086      	sub	sp, #24
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	60b9      	str	r1, [r7, #8]
 8005d70:	607a      	str	r2, [r7, #4]
 8005d72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005d74:	2300      	movs	r3, #0
 8005d76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005d78:	f7ff ff2c 	bl	8005bd4 <__NVIC_GetPriorityGrouping>
 8005d7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	68b9      	ldr	r1, [r7, #8]
 8005d82:	6978      	ldr	r0, [r7, #20]
 8005d84:	f7ff ff7a 	bl	8005c7c <NVIC_EncodePriority>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d8e:	4611      	mov	r1, r2
 8005d90:	4618      	mov	r0, r3
 8005d92:	f7ff ff49 	bl	8005c28 <__NVIC_SetPriority>
}
 8005d96:	bf00      	nop
 8005d98:	3718      	adds	r7, #24
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}

08005d9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d9e:	b580      	push	{r7, lr}
 8005da0:	b082      	sub	sp, #8
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	4603      	mov	r3, r0
 8005da6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dac:	4618      	mov	r0, r3
 8005dae:	f7ff ff1f 	bl	8005bf0 <__NVIC_EnableIRQ>
}
 8005db2:	bf00      	nop
 8005db4:	3708      	adds	r7, #8
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}

08005dba <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8005dba:	b580      	push	{r7, lr}
 8005dbc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8005dbe:	f7ff ff8f 	bl	8005ce0 <__NVIC_SystemReset>

08005dc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005dc2:	b580      	push	{r7, lr}
 8005dc4:	b082      	sub	sp, #8
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f7ff ff9e 	bl	8005d0c <SysTick_Config>
 8005dd0:	4603      	mov	r3, r0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3708      	adds	r7, #8
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
	...

08005ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b08b      	sub	sp, #44	@ 0x2c
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005de6:	2300      	movs	r3, #0
 8005de8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005dea:	2300      	movs	r3, #0
 8005dec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005dee:	e169      	b.n	80060c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005df0:	2201      	movs	r2, #1
 8005df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df4:	fa02 f303 	lsl.w	r3, r2, r3
 8005df8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	69fa      	ldr	r2, [r7, #28]
 8005e00:	4013      	ands	r3, r2
 8005e02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005e04:	69ba      	ldr	r2, [r7, #24]
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	f040 8158 	bne.w	80060be <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	4a9a      	ldr	r2, [pc, #616]	@ (800607c <HAL_GPIO_Init+0x2a0>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d05e      	beq.n	8005ed6 <HAL_GPIO_Init+0xfa>
 8005e18:	4a98      	ldr	r2, [pc, #608]	@ (800607c <HAL_GPIO_Init+0x2a0>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d875      	bhi.n	8005f0a <HAL_GPIO_Init+0x12e>
 8005e1e:	4a98      	ldr	r2, [pc, #608]	@ (8006080 <HAL_GPIO_Init+0x2a4>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d058      	beq.n	8005ed6 <HAL_GPIO_Init+0xfa>
 8005e24:	4a96      	ldr	r2, [pc, #600]	@ (8006080 <HAL_GPIO_Init+0x2a4>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d86f      	bhi.n	8005f0a <HAL_GPIO_Init+0x12e>
 8005e2a:	4a96      	ldr	r2, [pc, #600]	@ (8006084 <HAL_GPIO_Init+0x2a8>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d052      	beq.n	8005ed6 <HAL_GPIO_Init+0xfa>
 8005e30:	4a94      	ldr	r2, [pc, #592]	@ (8006084 <HAL_GPIO_Init+0x2a8>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d869      	bhi.n	8005f0a <HAL_GPIO_Init+0x12e>
 8005e36:	4a94      	ldr	r2, [pc, #592]	@ (8006088 <HAL_GPIO_Init+0x2ac>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d04c      	beq.n	8005ed6 <HAL_GPIO_Init+0xfa>
 8005e3c:	4a92      	ldr	r2, [pc, #584]	@ (8006088 <HAL_GPIO_Init+0x2ac>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d863      	bhi.n	8005f0a <HAL_GPIO_Init+0x12e>
 8005e42:	4a92      	ldr	r2, [pc, #584]	@ (800608c <HAL_GPIO_Init+0x2b0>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d046      	beq.n	8005ed6 <HAL_GPIO_Init+0xfa>
 8005e48:	4a90      	ldr	r2, [pc, #576]	@ (800608c <HAL_GPIO_Init+0x2b0>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d85d      	bhi.n	8005f0a <HAL_GPIO_Init+0x12e>
 8005e4e:	2b12      	cmp	r3, #18
 8005e50:	d82a      	bhi.n	8005ea8 <HAL_GPIO_Init+0xcc>
 8005e52:	2b12      	cmp	r3, #18
 8005e54:	d859      	bhi.n	8005f0a <HAL_GPIO_Init+0x12e>
 8005e56:	a201      	add	r2, pc, #4	@ (adr r2, 8005e5c <HAL_GPIO_Init+0x80>)
 8005e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e5c:	08005ed7 	.word	0x08005ed7
 8005e60:	08005eb1 	.word	0x08005eb1
 8005e64:	08005ec3 	.word	0x08005ec3
 8005e68:	08005f05 	.word	0x08005f05
 8005e6c:	08005f0b 	.word	0x08005f0b
 8005e70:	08005f0b 	.word	0x08005f0b
 8005e74:	08005f0b 	.word	0x08005f0b
 8005e78:	08005f0b 	.word	0x08005f0b
 8005e7c:	08005f0b 	.word	0x08005f0b
 8005e80:	08005f0b 	.word	0x08005f0b
 8005e84:	08005f0b 	.word	0x08005f0b
 8005e88:	08005f0b 	.word	0x08005f0b
 8005e8c:	08005f0b 	.word	0x08005f0b
 8005e90:	08005f0b 	.word	0x08005f0b
 8005e94:	08005f0b 	.word	0x08005f0b
 8005e98:	08005f0b 	.word	0x08005f0b
 8005e9c:	08005f0b 	.word	0x08005f0b
 8005ea0:	08005eb9 	.word	0x08005eb9
 8005ea4:	08005ecd 	.word	0x08005ecd
 8005ea8:	4a79      	ldr	r2, [pc, #484]	@ (8006090 <HAL_GPIO_Init+0x2b4>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d013      	beq.n	8005ed6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005eae:	e02c      	b.n	8005f0a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	623b      	str	r3, [r7, #32]
          break;
 8005eb6:	e029      	b.n	8005f0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	3304      	adds	r3, #4
 8005ebe:	623b      	str	r3, [r7, #32]
          break;
 8005ec0:	e024      	b.n	8005f0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	3308      	adds	r3, #8
 8005ec8:	623b      	str	r3, [r7, #32]
          break;
 8005eca:	e01f      	b.n	8005f0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	330c      	adds	r3, #12
 8005ed2:	623b      	str	r3, [r7, #32]
          break;
 8005ed4:	e01a      	b.n	8005f0c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d102      	bne.n	8005ee4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005ede:	2304      	movs	r3, #4
 8005ee0:	623b      	str	r3, [r7, #32]
          break;
 8005ee2:	e013      	b.n	8005f0c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d105      	bne.n	8005ef8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005eec:	2308      	movs	r3, #8
 8005eee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	69fa      	ldr	r2, [r7, #28]
 8005ef4:	611a      	str	r2, [r3, #16]
          break;
 8005ef6:	e009      	b.n	8005f0c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005ef8:	2308      	movs	r3, #8
 8005efa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	69fa      	ldr	r2, [r7, #28]
 8005f00:	615a      	str	r2, [r3, #20]
          break;
 8005f02:	e003      	b.n	8005f0c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005f04:	2300      	movs	r3, #0
 8005f06:	623b      	str	r3, [r7, #32]
          break;
 8005f08:	e000      	b.n	8005f0c <HAL_GPIO_Init+0x130>
          break;
 8005f0a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	2bff      	cmp	r3, #255	@ 0xff
 8005f10:	d801      	bhi.n	8005f16 <HAL_GPIO_Init+0x13a>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	e001      	b.n	8005f1a <HAL_GPIO_Init+0x13e>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	3304      	adds	r3, #4
 8005f1a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	2bff      	cmp	r3, #255	@ 0xff
 8005f20:	d802      	bhi.n	8005f28 <HAL_GPIO_Init+0x14c>
 8005f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	e002      	b.n	8005f2e <HAL_GPIO_Init+0x152>
 8005f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f2a:	3b08      	subs	r3, #8
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	210f      	movs	r1, #15
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	fa01 f303 	lsl.w	r3, r1, r3
 8005f3c:	43db      	mvns	r3, r3
 8005f3e:	401a      	ands	r2, r3
 8005f40:	6a39      	ldr	r1, [r7, #32]
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	fa01 f303 	lsl.w	r3, r1, r3
 8005f48:	431a      	orrs	r2, r3
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	f000 80b1 	beq.w	80060be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005f5c:	4b4d      	ldr	r3, [pc, #308]	@ (8006094 <HAL_GPIO_Init+0x2b8>)
 8005f5e:	699b      	ldr	r3, [r3, #24]
 8005f60:	4a4c      	ldr	r2, [pc, #304]	@ (8006094 <HAL_GPIO_Init+0x2b8>)
 8005f62:	f043 0301 	orr.w	r3, r3, #1
 8005f66:	6193      	str	r3, [r2, #24]
 8005f68:	4b4a      	ldr	r3, [pc, #296]	@ (8006094 <HAL_GPIO_Init+0x2b8>)
 8005f6a:	699b      	ldr	r3, [r3, #24]
 8005f6c:	f003 0301 	and.w	r3, r3, #1
 8005f70:	60bb      	str	r3, [r7, #8]
 8005f72:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005f74:	4a48      	ldr	r2, [pc, #288]	@ (8006098 <HAL_GPIO_Init+0x2bc>)
 8005f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f78:	089b      	lsrs	r3, r3, #2
 8005f7a:	3302      	adds	r3, #2
 8005f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f80:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f84:	f003 0303 	and.w	r3, r3, #3
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	220f      	movs	r2, #15
 8005f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f90:	43db      	mvns	r3, r3
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	4013      	ands	r3, r2
 8005f96:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a40      	ldr	r2, [pc, #256]	@ (800609c <HAL_GPIO_Init+0x2c0>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d013      	beq.n	8005fc8 <HAL_GPIO_Init+0x1ec>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a3f      	ldr	r2, [pc, #252]	@ (80060a0 <HAL_GPIO_Init+0x2c4>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d00d      	beq.n	8005fc4 <HAL_GPIO_Init+0x1e8>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a3e      	ldr	r2, [pc, #248]	@ (80060a4 <HAL_GPIO_Init+0x2c8>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d007      	beq.n	8005fc0 <HAL_GPIO_Init+0x1e4>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4a3d      	ldr	r2, [pc, #244]	@ (80060a8 <HAL_GPIO_Init+0x2cc>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d101      	bne.n	8005fbc <HAL_GPIO_Init+0x1e0>
 8005fb8:	2303      	movs	r3, #3
 8005fba:	e006      	b.n	8005fca <HAL_GPIO_Init+0x1ee>
 8005fbc:	2304      	movs	r3, #4
 8005fbe:	e004      	b.n	8005fca <HAL_GPIO_Init+0x1ee>
 8005fc0:	2302      	movs	r3, #2
 8005fc2:	e002      	b.n	8005fca <HAL_GPIO_Init+0x1ee>
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e000      	b.n	8005fca <HAL_GPIO_Init+0x1ee>
 8005fc8:	2300      	movs	r3, #0
 8005fca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fcc:	f002 0203 	and.w	r2, r2, #3
 8005fd0:	0092      	lsls	r2, r2, #2
 8005fd2:	4093      	lsls	r3, r2
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005fda:	492f      	ldr	r1, [pc, #188]	@ (8006098 <HAL_GPIO_Init+0x2bc>)
 8005fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fde:	089b      	lsrs	r3, r3, #2
 8005fe0:	3302      	adds	r3, #2
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d006      	beq.n	8006002 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005ff4:	4b2d      	ldr	r3, [pc, #180]	@ (80060ac <HAL_GPIO_Init+0x2d0>)
 8005ff6:	689a      	ldr	r2, [r3, #8]
 8005ff8:	492c      	ldr	r1, [pc, #176]	@ (80060ac <HAL_GPIO_Init+0x2d0>)
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	608b      	str	r3, [r1, #8]
 8006000:	e006      	b.n	8006010 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006002:	4b2a      	ldr	r3, [pc, #168]	@ (80060ac <HAL_GPIO_Init+0x2d0>)
 8006004:	689a      	ldr	r2, [r3, #8]
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	43db      	mvns	r3, r3
 800600a:	4928      	ldr	r1, [pc, #160]	@ (80060ac <HAL_GPIO_Init+0x2d0>)
 800600c:	4013      	ands	r3, r2
 800600e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006018:	2b00      	cmp	r3, #0
 800601a:	d006      	beq.n	800602a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800601c:	4b23      	ldr	r3, [pc, #140]	@ (80060ac <HAL_GPIO_Init+0x2d0>)
 800601e:	68da      	ldr	r2, [r3, #12]
 8006020:	4922      	ldr	r1, [pc, #136]	@ (80060ac <HAL_GPIO_Init+0x2d0>)
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	4313      	orrs	r3, r2
 8006026:	60cb      	str	r3, [r1, #12]
 8006028:	e006      	b.n	8006038 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800602a:	4b20      	ldr	r3, [pc, #128]	@ (80060ac <HAL_GPIO_Init+0x2d0>)
 800602c:	68da      	ldr	r2, [r3, #12]
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	43db      	mvns	r3, r3
 8006032:	491e      	ldr	r1, [pc, #120]	@ (80060ac <HAL_GPIO_Init+0x2d0>)
 8006034:	4013      	ands	r3, r2
 8006036:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006040:	2b00      	cmp	r3, #0
 8006042:	d006      	beq.n	8006052 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006044:	4b19      	ldr	r3, [pc, #100]	@ (80060ac <HAL_GPIO_Init+0x2d0>)
 8006046:	685a      	ldr	r2, [r3, #4]
 8006048:	4918      	ldr	r1, [pc, #96]	@ (80060ac <HAL_GPIO_Init+0x2d0>)
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	4313      	orrs	r3, r2
 800604e:	604b      	str	r3, [r1, #4]
 8006050:	e006      	b.n	8006060 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006052:	4b16      	ldr	r3, [pc, #88]	@ (80060ac <HAL_GPIO_Init+0x2d0>)
 8006054:	685a      	ldr	r2, [r3, #4]
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	43db      	mvns	r3, r3
 800605a:	4914      	ldr	r1, [pc, #80]	@ (80060ac <HAL_GPIO_Init+0x2d0>)
 800605c:	4013      	ands	r3, r2
 800605e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006068:	2b00      	cmp	r3, #0
 800606a:	d021      	beq.n	80060b0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800606c:	4b0f      	ldr	r3, [pc, #60]	@ (80060ac <HAL_GPIO_Init+0x2d0>)
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	490e      	ldr	r1, [pc, #56]	@ (80060ac <HAL_GPIO_Init+0x2d0>)
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	4313      	orrs	r3, r2
 8006076:	600b      	str	r3, [r1, #0]
 8006078:	e021      	b.n	80060be <HAL_GPIO_Init+0x2e2>
 800607a:	bf00      	nop
 800607c:	10320000 	.word	0x10320000
 8006080:	10310000 	.word	0x10310000
 8006084:	10220000 	.word	0x10220000
 8006088:	10210000 	.word	0x10210000
 800608c:	10120000 	.word	0x10120000
 8006090:	10110000 	.word	0x10110000
 8006094:	40021000 	.word	0x40021000
 8006098:	40010000 	.word	0x40010000
 800609c:	40010800 	.word	0x40010800
 80060a0:	40010c00 	.word	0x40010c00
 80060a4:	40011000 	.word	0x40011000
 80060a8:	40011400 	.word	0x40011400
 80060ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80060b0:	4b0b      	ldr	r3, [pc, #44]	@ (80060e0 <HAL_GPIO_Init+0x304>)
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	43db      	mvns	r3, r3
 80060b8:	4909      	ldr	r1, [pc, #36]	@ (80060e0 <HAL_GPIO_Init+0x304>)
 80060ba:	4013      	ands	r3, r2
 80060bc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80060be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c0:	3301      	adds	r3, #1
 80060c2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ca:	fa22 f303 	lsr.w	r3, r2, r3
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	f47f ae8e 	bne.w	8005df0 <HAL_GPIO_Init+0x14>
  }
}
 80060d4:	bf00      	nop
 80060d6:	bf00      	nop
 80060d8:	372c      	adds	r7, #44	@ 0x2c
 80060da:	46bd      	mov	sp, r7
 80060dc:	bc80      	pop	{r7}
 80060de:	4770      	bx	lr
 80060e0:	40010400 	.word	0x40010400

080060e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b085      	sub	sp, #20
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	460b      	mov	r3, r1
 80060ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	689a      	ldr	r2, [r3, #8]
 80060f4:	887b      	ldrh	r3, [r7, #2]
 80060f6:	4013      	ands	r3, r2
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d002      	beq.n	8006102 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80060fc:	2301      	movs	r3, #1
 80060fe:	73fb      	strb	r3, [r7, #15]
 8006100:	e001      	b.n	8006106 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006102:	2300      	movs	r3, #0
 8006104:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006106:	7bfb      	ldrb	r3, [r7, #15]
}
 8006108:	4618      	mov	r0, r3
 800610a:	3714      	adds	r7, #20
 800610c:	46bd      	mov	sp, r7
 800610e:	bc80      	pop	{r7}
 8006110:	4770      	bx	lr

08006112 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006112:	b480      	push	{r7}
 8006114:	b083      	sub	sp, #12
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
 800611a:	460b      	mov	r3, r1
 800611c:	807b      	strh	r3, [r7, #2]
 800611e:	4613      	mov	r3, r2
 8006120:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006122:	787b      	ldrb	r3, [r7, #1]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d003      	beq.n	8006130 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006128:	887a      	ldrh	r2, [r7, #2]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800612e:	e003      	b.n	8006138 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006130:	887b      	ldrh	r3, [r7, #2]
 8006132:	041a      	lsls	r2, r3, #16
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	611a      	str	r2, [r3, #16]
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	bc80      	pop	{r7}
 8006140:	4770      	bx	lr

08006142 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006142:	b480      	push	{r7}
 8006144:	b085      	sub	sp, #20
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
 800614a:	460b      	mov	r3, r1
 800614c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006154:	887a      	ldrh	r2, [r7, #2]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	4013      	ands	r3, r2
 800615a:	041a      	lsls	r2, r3, #16
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	43d9      	mvns	r1, r3
 8006160:	887b      	ldrh	r3, [r7, #2]
 8006162:	400b      	ands	r3, r1
 8006164:	431a      	orrs	r2, r3
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	611a      	str	r2, [r3, #16]
}
 800616a:	bf00      	nop
 800616c:	3714      	adds	r7, #20
 800616e:	46bd      	mov	sp, r7
 8006170:	bc80      	pop	{r7}
 8006172:	4770      	bx	lr

08006174 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0
 800617a:	4603      	mov	r3, r0
 800617c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800617e:	4b08      	ldr	r3, [pc, #32]	@ (80061a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006180:	695a      	ldr	r2, [r3, #20]
 8006182:	88fb      	ldrh	r3, [r7, #6]
 8006184:	4013      	ands	r3, r2
 8006186:	2b00      	cmp	r3, #0
 8006188:	d006      	beq.n	8006198 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800618a:	4a05      	ldr	r2, [pc, #20]	@ (80061a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800618c:	88fb      	ldrh	r3, [r7, #6]
 800618e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006190:	88fb      	ldrh	r3, [r7, #6]
 8006192:	4618      	mov	r0, r3
 8006194:	f7fe f9da 	bl	800454c <HAL_GPIO_EXTI_Callback>
  }
}
 8006198:	bf00      	nop
 800619a:	3708      	adds	r7, #8
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	40010400 	.word	0x40010400

080061a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d101      	bne.n	80061b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e12b      	b.n	800640e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d106      	bne.n	80061d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f7fe fd04 	bl	8004bd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2224      	movs	r2, #36	@ 0x24
 80061d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f022 0201 	bic.w	r2, r2, #1
 80061e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80061f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006206:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006208:	f001 fcca 	bl	8007ba0 <HAL_RCC_GetPCLK1Freq>
 800620c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	4a81      	ldr	r2, [pc, #516]	@ (8006418 <HAL_I2C_Init+0x274>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d807      	bhi.n	8006228 <HAL_I2C_Init+0x84>
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	4a80      	ldr	r2, [pc, #512]	@ (800641c <HAL_I2C_Init+0x278>)
 800621c:	4293      	cmp	r3, r2
 800621e:	bf94      	ite	ls
 8006220:	2301      	movls	r3, #1
 8006222:	2300      	movhi	r3, #0
 8006224:	b2db      	uxtb	r3, r3
 8006226:	e006      	b.n	8006236 <HAL_I2C_Init+0x92>
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	4a7d      	ldr	r2, [pc, #500]	@ (8006420 <HAL_I2C_Init+0x27c>)
 800622c:	4293      	cmp	r3, r2
 800622e:	bf94      	ite	ls
 8006230:	2301      	movls	r3, #1
 8006232:	2300      	movhi	r3, #0
 8006234:	b2db      	uxtb	r3, r3
 8006236:	2b00      	cmp	r3, #0
 8006238:	d001      	beq.n	800623e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e0e7      	b.n	800640e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	4a78      	ldr	r2, [pc, #480]	@ (8006424 <HAL_I2C_Init+0x280>)
 8006242:	fba2 2303 	umull	r2, r3, r2, r3
 8006246:	0c9b      	lsrs	r3, r3, #18
 8006248:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	68ba      	ldr	r2, [r7, #8]
 800625a:	430a      	orrs	r2, r1
 800625c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	6a1b      	ldr	r3, [r3, #32]
 8006264:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	4a6a      	ldr	r2, [pc, #424]	@ (8006418 <HAL_I2C_Init+0x274>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d802      	bhi.n	8006278 <HAL_I2C_Init+0xd4>
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	3301      	adds	r3, #1
 8006276:	e009      	b.n	800628c <HAL_I2C_Init+0xe8>
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800627e:	fb02 f303 	mul.w	r3, r2, r3
 8006282:	4a69      	ldr	r2, [pc, #420]	@ (8006428 <HAL_I2C_Init+0x284>)
 8006284:	fba2 2303 	umull	r2, r3, r2, r3
 8006288:	099b      	lsrs	r3, r3, #6
 800628a:	3301      	adds	r3, #1
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	6812      	ldr	r2, [r2, #0]
 8006290:	430b      	orrs	r3, r1
 8006292:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	69db      	ldr	r3, [r3, #28]
 800629a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800629e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	495c      	ldr	r1, [pc, #368]	@ (8006418 <HAL_I2C_Init+0x274>)
 80062a8:	428b      	cmp	r3, r1
 80062aa:	d819      	bhi.n	80062e0 <HAL_I2C_Init+0x13c>
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	1e59      	subs	r1, r3, #1
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	005b      	lsls	r3, r3, #1
 80062b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80062ba:	1c59      	adds	r1, r3, #1
 80062bc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80062c0:	400b      	ands	r3, r1
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00a      	beq.n	80062dc <HAL_I2C_Init+0x138>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	1e59      	subs	r1, r3, #1
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	005b      	lsls	r3, r3, #1
 80062d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80062d4:	3301      	adds	r3, #1
 80062d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062da:	e051      	b.n	8006380 <HAL_I2C_Init+0x1dc>
 80062dc:	2304      	movs	r3, #4
 80062de:	e04f      	b.n	8006380 <HAL_I2C_Init+0x1dc>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d111      	bne.n	800630c <HAL_I2C_Init+0x168>
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	1e58      	subs	r0, r3, #1
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6859      	ldr	r1, [r3, #4]
 80062f0:	460b      	mov	r3, r1
 80062f2:	005b      	lsls	r3, r3, #1
 80062f4:	440b      	add	r3, r1
 80062f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80062fa:	3301      	adds	r3, #1
 80062fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006300:	2b00      	cmp	r3, #0
 8006302:	bf0c      	ite	eq
 8006304:	2301      	moveq	r3, #1
 8006306:	2300      	movne	r3, #0
 8006308:	b2db      	uxtb	r3, r3
 800630a:	e012      	b.n	8006332 <HAL_I2C_Init+0x18e>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	1e58      	subs	r0, r3, #1
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6859      	ldr	r1, [r3, #4]
 8006314:	460b      	mov	r3, r1
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	440b      	add	r3, r1
 800631a:	0099      	lsls	r1, r3, #2
 800631c:	440b      	add	r3, r1
 800631e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006322:	3301      	adds	r3, #1
 8006324:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006328:	2b00      	cmp	r3, #0
 800632a:	bf0c      	ite	eq
 800632c:	2301      	moveq	r3, #1
 800632e:	2300      	movne	r3, #0
 8006330:	b2db      	uxtb	r3, r3
 8006332:	2b00      	cmp	r3, #0
 8006334:	d001      	beq.n	800633a <HAL_I2C_Init+0x196>
 8006336:	2301      	movs	r3, #1
 8006338:	e022      	b.n	8006380 <HAL_I2C_Init+0x1dc>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d10e      	bne.n	8006360 <HAL_I2C_Init+0x1bc>
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	1e58      	subs	r0, r3, #1
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6859      	ldr	r1, [r3, #4]
 800634a:	460b      	mov	r3, r1
 800634c:	005b      	lsls	r3, r3, #1
 800634e:	440b      	add	r3, r1
 8006350:	fbb0 f3f3 	udiv	r3, r0, r3
 8006354:	3301      	adds	r3, #1
 8006356:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800635a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800635e:	e00f      	b.n	8006380 <HAL_I2C_Init+0x1dc>
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	1e58      	subs	r0, r3, #1
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6859      	ldr	r1, [r3, #4]
 8006368:	460b      	mov	r3, r1
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	440b      	add	r3, r1
 800636e:	0099      	lsls	r1, r3, #2
 8006370:	440b      	add	r3, r1
 8006372:	fbb0 f3f3 	udiv	r3, r0, r3
 8006376:	3301      	adds	r3, #1
 8006378:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800637c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006380:	6879      	ldr	r1, [r7, #4]
 8006382:	6809      	ldr	r1, [r1, #0]
 8006384:	4313      	orrs	r3, r2
 8006386:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	69da      	ldr	r2, [r3, #28]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	431a      	orrs	r2, r3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	430a      	orrs	r2, r1
 80063a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80063ae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	6911      	ldr	r1, [r2, #16]
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	68d2      	ldr	r2, [r2, #12]
 80063ba:	4311      	orrs	r1, r2
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	6812      	ldr	r2, [r2, #0]
 80063c0:	430b      	orrs	r3, r1
 80063c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	695a      	ldr	r2, [r3, #20]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	699b      	ldr	r3, [r3, #24]
 80063d6:	431a      	orrs	r2, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	430a      	orrs	r2, r1
 80063de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f042 0201 	orr.w	r2, r2, #1
 80063ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2220      	movs	r2, #32
 80063fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	3710      	adds	r7, #16
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	000186a0 	.word	0x000186a0
 800641c:	001e847f 	.word	0x001e847f
 8006420:	003d08ff 	.word	0x003d08ff
 8006424:	431bde83 	.word	0x431bde83
 8006428:	10624dd3 	.word	0x10624dd3

0800642c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b088      	sub	sp, #32
 8006430:	af02      	add	r7, sp, #8
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	4608      	mov	r0, r1
 8006436:	4611      	mov	r1, r2
 8006438:	461a      	mov	r2, r3
 800643a:	4603      	mov	r3, r0
 800643c:	817b      	strh	r3, [r7, #10]
 800643e:	460b      	mov	r3, r1
 8006440:	813b      	strh	r3, [r7, #8]
 8006442:	4613      	mov	r3, r2
 8006444:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006446:	f7fe fd33 	bl	8004eb0 <HAL_GetTick>
 800644a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006452:	b2db      	uxtb	r3, r3
 8006454:	2b20      	cmp	r3, #32
 8006456:	f040 80d9 	bne.w	800660c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	9300      	str	r3, [sp, #0]
 800645e:	2319      	movs	r3, #25
 8006460:	2201      	movs	r2, #1
 8006462:	496d      	ldr	r1, [pc, #436]	@ (8006618 <HAL_I2C_Mem_Write+0x1ec>)
 8006464:	68f8      	ldr	r0, [r7, #12]
 8006466:	f000 fccd 	bl	8006e04 <I2C_WaitOnFlagUntilTimeout>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d001      	beq.n	8006474 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006470:	2302      	movs	r3, #2
 8006472:	e0cc      	b.n	800660e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800647a:	2b01      	cmp	r3, #1
 800647c:	d101      	bne.n	8006482 <HAL_I2C_Mem_Write+0x56>
 800647e:	2302      	movs	r3, #2
 8006480:	e0c5      	b.n	800660e <HAL_I2C_Mem_Write+0x1e2>
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2201      	movs	r2, #1
 8006486:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f003 0301 	and.w	r3, r3, #1
 8006494:	2b01      	cmp	r3, #1
 8006496:	d007      	beq.n	80064a8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f042 0201 	orr.w	r2, r2, #1
 80064a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80064b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2221      	movs	r2, #33	@ 0x21
 80064bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2240      	movs	r2, #64	@ 0x40
 80064c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2200      	movs	r2, #0
 80064cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6a3a      	ldr	r2, [r7, #32]
 80064d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80064d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064de:	b29a      	uxth	r2, r3
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	4a4d      	ldr	r2, [pc, #308]	@ (800661c <HAL_I2C_Mem_Write+0x1f0>)
 80064e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80064ea:	88f8      	ldrh	r0, [r7, #6]
 80064ec:	893a      	ldrh	r2, [r7, #8]
 80064ee:	8979      	ldrh	r1, [r7, #10]
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	9301      	str	r3, [sp, #4]
 80064f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064f6:	9300      	str	r3, [sp, #0]
 80064f8:	4603      	mov	r3, r0
 80064fa:	68f8      	ldr	r0, [r7, #12]
 80064fc:	f000 fb04 	bl	8006b08 <I2C_RequestMemoryWrite>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d052      	beq.n	80065ac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e081      	b.n	800660e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800650a:	697a      	ldr	r2, [r7, #20]
 800650c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800650e:	68f8      	ldr	r0, [r7, #12]
 8006510:	f000 fd92 	bl	8007038 <I2C_WaitOnTXEFlagUntilTimeout>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00d      	beq.n	8006536 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800651e:	2b04      	cmp	r3, #4
 8006520:	d107      	bne.n	8006532 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006530:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e06b      	b.n	800660e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800653a:	781a      	ldrb	r2, [r3, #0]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006546:	1c5a      	adds	r2, r3, #1
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006550:	3b01      	subs	r3, #1
 8006552:	b29a      	uxth	r2, r3
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800655c:	b29b      	uxth	r3, r3
 800655e:	3b01      	subs	r3, #1
 8006560:	b29a      	uxth	r2, r3
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	695b      	ldr	r3, [r3, #20]
 800656c:	f003 0304 	and.w	r3, r3, #4
 8006570:	2b04      	cmp	r3, #4
 8006572:	d11b      	bne.n	80065ac <HAL_I2C_Mem_Write+0x180>
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006578:	2b00      	cmp	r3, #0
 800657a:	d017      	beq.n	80065ac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006580:	781a      	ldrb	r2, [r3, #0]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800658c:	1c5a      	adds	r2, r3, #1
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006596:	3b01      	subs	r3, #1
 8006598:	b29a      	uxth	r2, r3
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	3b01      	subs	r3, #1
 80065a6:	b29a      	uxth	r2, r3
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d1aa      	bne.n	800650a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065b4:	697a      	ldr	r2, [r7, #20]
 80065b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	f000 fd85 	bl	80070c8 <I2C_WaitOnBTFFlagUntilTimeout>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00d      	beq.n	80065e0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065c8:	2b04      	cmp	r3, #4
 80065ca:	d107      	bne.n	80065dc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065da:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	e016      	b.n	800660e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2220      	movs	r2, #32
 80065f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2200      	movs	r2, #0
 8006604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006608:	2300      	movs	r3, #0
 800660a:	e000      	b.n	800660e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800660c:	2302      	movs	r3, #2
  }
}
 800660e:	4618      	mov	r0, r3
 8006610:	3718      	adds	r7, #24
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	00100002 	.word	0x00100002
 800661c:	ffff0000 	.word	0xffff0000

08006620 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b08c      	sub	sp, #48	@ 0x30
 8006624:	af02      	add	r7, sp, #8
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	4608      	mov	r0, r1
 800662a:	4611      	mov	r1, r2
 800662c:	461a      	mov	r2, r3
 800662e:	4603      	mov	r3, r0
 8006630:	817b      	strh	r3, [r7, #10]
 8006632:	460b      	mov	r3, r1
 8006634:	813b      	strh	r3, [r7, #8]
 8006636:	4613      	mov	r3, r2
 8006638:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800663a:	2300      	movs	r3, #0
 800663c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800663e:	f7fe fc37 	bl	8004eb0 <HAL_GetTick>
 8006642:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800664a:	b2db      	uxtb	r3, r3
 800664c:	2b20      	cmp	r3, #32
 800664e:	f040 8250 	bne.w	8006af2 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006654:	9300      	str	r3, [sp, #0]
 8006656:	2319      	movs	r3, #25
 8006658:	2201      	movs	r2, #1
 800665a:	4982      	ldr	r1, [pc, #520]	@ (8006864 <HAL_I2C_Mem_Read+0x244>)
 800665c:	68f8      	ldr	r0, [r7, #12]
 800665e:	f000 fbd1 	bl	8006e04 <I2C_WaitOnFlagUntilTimeout>
 8006662:	4603      	mov	r3, r0
 8006664:	2b00      	cmp	r3, #0
 8006666:	d001      	beq.n	800666c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8006668:	2302      	movs	r3, #2
 800666a:	e243      	b.n	8006af4 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006672:	2b01      	cmp	r3, #1
 8006674:	d101      	bne.n	800667a <HAL_I2C_Mem_Read+0x5a>
 8006676:	2302      	movs	r3, #2
 8006678:	e23c      	b.n	8006af4 <HAL_I2C_Mem_Read+0x4d4>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2201      	movs	r2, #1
 800667e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 0301 	and.w	r3, r3, #1
 800668c:	2b01      	cmp	r3, #1
 800668e:	d007      	beq.n	80066a0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f042 0201 	orr.w	r2, r2, #1
 800669e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80066ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2222      	movs	r2, #34	@ 0x22
 80066b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2240      	movs	r2, #64	@ 0x40
 80066bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2200      	movs	r2, #0
 80066c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80066d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066d6:	b29a      	uxth	r2, r3
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	4a62      	ldr	r2, [pc, #392]	@ (8006868 <HAL_I2C_Mem_Read+0x248>)
 80066e0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80066e2:	88f8      	ldrh	r0, [r7, #6]
 80066e4:	893a      	ldrh	r2, [r7, #8]
 80066e6:	8979      	ldrh	r1, [r7, #10]
 80066e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ea:	9301      	str	r3, [sp, #4]
 80066ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ee:	9300      	str	r3, [sp, #0]
 80066f0:	4603      	mov	r3, r0
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	f000 fa9e 	bl	8006c34 <I2C_RequestMemoryRead>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d001      	beq.n	8006702 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e1f8      	b.n	8006af4 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006706:	2b00      	cmp	r3, #0
 8006708:	d113      	bne.n	8006732 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800670a:	2300      	movs	r3, #0
 800670c:	61fb      	str	r3, [r7, #28]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	695b      	ldr	r3, [r3, #20]
 8006714:	61fb      	str	r3, [r7, #28]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	699b      	ldr	r3, [r3, #24]
 800671c:	61fb      	str	r3, [r7, #28]
 800671e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800672e:	601a      	str	r2, [r3, #0]
 8006730:	e1cc      	b.n	8006acc <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006736:	2b01      	cmp	r3, #1
 8006738:	d11e      	bne.n	8006778 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006748:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800674a:	b672      	cpsid	i
}
 800674c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800674e:	2300      	movs	r3, #0
 8006750:	61bb      	str	r3, [r7, #24]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	695b      	ldr	r3, [r3, #20]
 8006758:	61bb      	str	r3, [r7, #24]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	699b      	ldr	r3, [r3, #24]
 8006760:	61bb      	str	r3, [r7, #24]
 8006762:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006772:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006774:	b662      	cpsie	i
}
 8006776:	e035      	b.n	80067e4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800677c:	2b02      	cmp	r3, #2
 800677e:	d11e      	bne.n	80067be <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800678e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006790:	b672      	cpsid	i
}
 8006792:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006794:	2300      	movs	r3, #0
 8006796:	617b      	str	r3, [r7, #20]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	695b      	ldr	r3, [r3, #20]
 800679e:	617b      	str	r3, [r7, #20]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	699b      	ldr	r3, [r3, #24]
 80067a6:	617b      	str	r3, [r7, #20]
 80067a8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067b8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80067ba:	b662      	cpsie	i
}
 80067bc:	e012      	b.n	80067e4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80067cc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067ce:	2300      	movs	r3, #0
 80067d0:	613b      	str	r3, [r7, #16]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	695b      	ldr	r3, [r3, #20]
 80067d8:	613b      	str	r3, [r7, #16]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	699b      	ldr	r3, [r3, #24]
 80067e0:	613b      	str	r3, [r7, #16]
 80067e2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80067e4:	e172      	b.n	8006acc <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067ea:	2b03      	cmp	r3, #3
 80067ec:	f200 811f 	bhi.w	8006a2e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d123      	bne.n	8006840 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067fa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80067fc:	68f8      	ldr	r0, [r7, #12]
 80067fe:	f000 fcab 	bl	8007158 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d001      	beq.n	800680c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	e173      	b.n	8006af4 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	691a      	ldr	r2, [r3, #16]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006816:	b2d2      	uxtb	r2, r2
 8006818:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800681e:	1c5a      	adds	r2, r3, #1
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006828:	3b01      	subs	r3, #1
 800682a:	b29a      	uxth	r2, r3
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006834:	b29b      	uxth	r3, r3
 8006836:	3b01      	subs	r3, #1
 8006838:	b29a      	uxth	r2, r3
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800683e:	e145      	b.n	8006acc <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006844:	2b02      	cmp	r3, #2
 8006846:	d152      	bne.n	80068ee <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800684a:	9300      	str	r3, [sp, #0]
 800684c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800684e:	2200      	movs	r2, #0
 8006850:	4906      	ldr	r1, [pc, #24]	@ (800686c <HAL_I2C_Mem_Read+0x24c>)
 8006852:	68f8      	ldr	r0, [r7, #12]
 8006854:	f000 fad6 	bl	8006e04 <I2C_WaitOnFlagUntilTimeout>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d008      	beq.n	8006870 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	e148      	b.n	8006af4 <HAL_I2C_Mem_Read+0x4d4>
 8006862:	bf00      	nop
 8006864:	00100002 	.word	0x00100002
 8006868:	ffff0000 	.word	0xffff0000
 800686c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8006870:	b672      	cpsid	i
}
 8006872:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006882:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	691a      	ldr	r2, [r3, #16]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800688e:	b2d2      	uxtb	r2, r2
 8006890:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006896:	1c5a      	adds	r2, r3, #1
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068a0:	3b01      	subs	r3, #1
 80068a2:	b29a      	uxth	r2, r3
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	3b01      	subs	r3, #1
 80068b0:	b29a      	uxth	r2, r3
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80068b6:	b662      	cpsie	i
}
 80068b8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	691a      	ldr	r2, [r3, #16]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068c4:	b2d2      	uxtb	r2, r2
 80068c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068cc:	1c5a      	adds	r2, r3, #1
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068d6:	3b01      	subs	r3, #1
 80068d8:	b29a      	uxth	r2, r3
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	3b01      	subs	r3, #1
 80068e6:	b29a      	uxth	r2, r3
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80068ec:	e0ee      	b.n	8006acc <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80068ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f0:	9300      	str	r3, [sp, #0]
 80068f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068f4:	2200      	movs	r2, #0
 80068f6:	4981      	ldr	r1, [pc, #516]	@ (8006afc <HAL_I2C_Mem_Read+0x4dc>)
 80068f8:	68f8      	ldr	r0, [r7, #12]
 80068fa:	f000 fa83 	bl	8006e04 <I2C_WaitOnFlagUntilTimeout>
 80068fe:	4603      	mov	r3, r0
 8006900:	2b00      	cmp	r3, #0
 8006902:	d001      	beq.n	8006908 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	e0f5      	b.n	8006af4 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006916:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006918:	b672      	cpsid	i
}
 800691a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	691a      	ldr	r2, [r3, #16]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006926:	b2d2      	uxtb	r2, r2
 8006928:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800692e:	1c5a      	adds	r2, r3, #1
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006938:	3b01      	subs	r3, #1
 800693a:	b29a      	uxth	r2, r3
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006944:	b29b      	uxth	r3, r3
 8006946:	3b01      	subs	r3, #1
 8006948:	b29a      	uxth	r2, r3
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800694e:	4b6c      	ldr	r3, [pc, #432]	@ (8006b00 <HAL_I2C_Mem_Read+0x4e0>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	08db      	lsrs	r3, r3, #3
 8006954:	4a6b      	ldr	r2, [pc, #428]	@ (8006b04 <HAL_I2C_Mem_Read+0x4e4>)
 8006956:	fba2 2303 	umull	r2, r3, r2, r3
 800695a:	0a1a      	lsrs	r2, r3, #8
 800695c:	4613      	mov	r3, r2
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	4413      	add	r3, r2
 8006962:	00da      	lsls	r2, r3, #3
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8006968:	6a3b      	ldr	r3, [r7, #32]
 800696a:	3b01      	subs	r3, #1
 800696c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800696e:	6a3b      	ldr	r3, [r7, #32]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d118      	bne.n	80069a6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2200      	movs	r2, #0
 8006978:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2220      	movs	r2, #32
 800697e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2200      	movs	r2, #0
 8006986:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800698e:	f043 0220 	orr.w	r2, r3, #32
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8006996:	b662      	cpsie	i
}
 8006998:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2200      	movs	r2, #0
 800699e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e0a6      	b.n	8006af4 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	695b      	ldr	r3, [r3, #20]
 80069ac:	f003 0304 	and.w	r3, r3, #4
 80069b0:	2b04      	cmp	r3, #4
 80069b2:	d1d9      	bne.n	8006968 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80069c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	691a      	ldr	r2, [r3, #16]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ce:	b2d2      	uxtb	r2, r2
 80069d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069d6:	1c5a      	adds	r2, r3, #1
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069e0:	3b01      	subs	r3, #1
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	3b01      	subs	r3, #1
 80069f0:	b29a      	uxth	r2, r3
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80069f6:	b662      	cpsie	i
}
 80069f8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	691a      	ldr	r2, [r3, #16]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a04:	b2d2      	uxtb	r2, r2
 8006a06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a0c:	1c5a      	adds	r2, r3, #1
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a16:	3b01      	subs	r3, #1
 8006a18:	b29a      	uxth	r2, r3
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	3b01      	subs	r3, #1
 8006a26:	b29a      	uxth	r2, r3
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006a2c:	e04e      	b.n	8006acc <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a30:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006a32:	68f8      	ldr	r0, [r7, #12]
 8006a34:	f000 fb90 	bl	8007158 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d001      	beq.n	8006a42 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e058      	b.n	8006af4 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	691a      	ldr	r2, [r3, #16]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a4c:	b2d2      	uxtb	r2, r2
 8006a4e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a54:	1c5a      	adds	r2, r3, #1
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	b29a      	uxth	r2, r3
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	3b01      	subs	r3, #1
 8006a6e:	b29a      	uxth	r2, r3
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	695b      	ldr	r3, [r3, #20]
 8006a7a:	f003 0304 	and.w	r3, r3, #4
 8006a7e:	2b04      	cmp	r3, #4
 8006a80:	d124      	bne.n	8006acc <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a86:	2b03      	cmp	r3, #3
 8006a88:	d107      	bne.n	8006a9a <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a98:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	691a      	ldr	r2, [r3, #16]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aa4:	b2d2      	uxtb	r2, r2
 8006aa6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aac:	1c5a      	adds	r2, r3, #1
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	b29a      	uxth	r2, r3
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	3b01      	subs	r3, #1
 8006ac6:	b29a      	uxth	r2, r3
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	f47f ae88 	bne.w	80067e6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2220      	movs	r2, #32
 8006ada:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006aee:	2300      	movs	r3, #0
 8006af0:	e000      	b.n	8006af4 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8006af2:	2302      	movs	r3, #2
  }
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3728      	adds	r7, #40	@ 0x28
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	00010004 	.word	0x00010004
 8006b00:	200007e4 	.word	0x200007e4
 8006b04:	14f8b589 	.word	0x14f8b589

08006b08 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b088      	sub	sp, #32
 8006b0c:	af02      	add	r7, sp, #8
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	4608      	mov	r0, r1
 8006b12:	4611      	mov	r1, r2
 8006b14:	461a      	mov	r2, r3
 8006b16:	4603      	mov	r3, r0
 8006b18:	817b      	strh	r3, [r7, #10]
 8006b1a:	460b      	mov	r3, r1
 8006b1c:	813b      	strh	r3, [r7, #8]
 8006b1e:	4613      	mov	r3, r2
 8006b20:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006b30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b34:	9300      	str	r3, [sp, #0]
 8006b36:	6a3b      	ldr	r3, [r7, #32]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f000 f960 	bl	8006e04 <I2C_WaitOnFlagUntilTimeout>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00d      	beq.n	8006b66 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b58:	d103      	bne.n	8006b62 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b60:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	e05f      	b.n	8006c26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006b66:	897b      	ldrh	r3, [r7, #10]
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006b74:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b78:	6a3a      	ldr	r2, [r7, #32]
 8006b7a:	492d      	ldr	r1, [pc, #180]	@ (8006c30 <I2C_RequestMemoryWrite+0x128>)
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	f000 f9bb 	bl	8006ef8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d001      	beq.n	8006b8c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e04c      	b.n	8006c26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	617b      	str	r3, [r7, #20]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	695b      	ldr	r3, [r3, #20]
 8006b96:	617b      	str	r3, [r7, #20]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	699b      	ldr	r3, [r3, #24]
 8006b9e:	617b      	str	r3, [r7, #20]
 8006ba0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ba2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ba4:	6a39      	ldr	r1, [r7, #32]
 8006ba6:	68f8      	ldr	r0, [r7, #12]
 8006ba8:	f000 fa46 	bl	8007038 <I2C_WaitOnTXEFlagUntilTimeout>
 8006bac:	4603      	mov	r3, r0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00d      	beq.n	8006bce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bb6:	2b04      	cmp	r3, #4
 8006bb8:	d107      	bne.n	8006bca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006bc8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e02b      	b.n	8006c26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006bce:	88fb      	ldrh	r3, [r7, #6]
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d105      	bne.n	8006be0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006bd4:	893b      	ldrh	r3, [r7, #8]
 8006bd6:	b2da      	uxtb	r2, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	611a      	str	r2, [r3, #16]
 8006bde:	e021      	b.n	8006c24 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006be0:	893b      	ldrh	r3, [r7, #8]
 8006be2:	0a1b      	lsrs	r3, r3, #8
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	b2da      	uxtb	r2, r3
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bf0:	6a39      	ldr	r1, [r7, #32]
 8006bf2:	68f8      	ldr	r0, [r7, #12]
 8006bf4:	f000 fa20 	bl	8007038 <I2C_WaitOnTXEFlagUntilTimeout>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00d      	beq.n	8006c1a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c02:	2b04      	cmp	r3, #4
 8006c04:	d107      	bne.n	8006c16 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e005      	b.n	8006c26 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c1a:	893b      	ldrh	r3, [r7, #8]
 8006c1c:	b2da      	uxtb	r2, r3
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3718      	adds	r7, #24
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	00010002 	.word	0x00010002

08006c34 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b088      	sub	sp, #32
 8006c38:	af02      	add	r7, sp, #8
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	4608      	mov	r0, r1
 8006c3e:	4611      	mov	r1, r2
 8006c40:	461a      	mov	r2, r3
 8006c42:	4603      	mov	r3, r0
 8006c44:	817b      	strh	r3, [r7, #10]
 8006c46:	460b      	mov	r3, r1
 8006c48:	813b      	strh	r3, [r7, #8]
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006c5c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c70:	9300      	str	r3, [sp, #0]
 8006c72:	6a3b      	ldr	r3, [r7, #32]
 8006c74:	2200      	movs	r2, #0
 8006c76:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006c7a:	68f8      	ldr	r0, [r7, #12]
 8006c7c:	f000 f8c2 	bl	8006e04 <I2C_WaitOnFlagUntilTimeout>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d00d      	beq.n	8006ca2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c94:	d103      	bne.n	8006c9e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c9c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006c9e:	2303      	movs	r3, #3
 8006ca0:	e0aa      	b.n	8006df8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006ca2:	897b      	ldrh	r3, [r7, #10]
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006cb0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb4:	6a3a      	ldr	r2, [r7, #32]
 8006cb6:	4952      	ldr	r1, [pc, #328]	@ (8006e00 <I2C_RequestMemoryRead+0x1cc>)
 8006cb8:	68f8      	ldr	r0, [r7, #12]
 8006cba:	f000 f91d 	bl	8006ef8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d001      	beq.n	8006cc8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e097      	b.n	8006df8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cc8:	2300      	movs	r3, #0
 8006cca:	617b      	str	r3, [r7, #20]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	695b      	ldr	r3, [r3, #20]
 8006cd2:	617b      	str	r3, [r7, #20]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	699b      	ldr	r3, [r3, #24]
 8006cda:	617b      	str	r3, [r7, #20]
 8006cdc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ce0:	6a39      	ldr	r1, [r7, #32]
 8006ce2:	68f8      	ldr	r0, [r7, #12]
 8006ce4:	f000 f9a8 	bl	8007038 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d00d      	beq.n	8006d0a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cf2:	2b04      	cmp	r3, #4
 8006cf4:	d107      	bne.n	8006d06 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	e076      	b.n	8006df8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006d0a:	88fb      	ldrh	r3, [r7, #6]
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d105      	bne.n	8006d1c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006d10:	893b      	ldrh	r3, [r7, #8]
 8006d12:	b2da      	uxtb	r2, r3
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	611a      	str	r2, [r3, #16]
 8006d1a:	e021      	b.n	8006d60 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006d1c:	893b      	ldrh	r3, [r7, #8]
 8006d1e:	0a1b      	lsrs	r3, r3, #8
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	b2da      	uxtb	r2, r3
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d2c:	6a39      	ldr	r1, [r7, #32]
 8006d2e:	68f8      	ldr	r0, [r7, #12]
 8006d30:	f000 f982 	bl	8007038 <I2C_WaitOnTXEFlagUntilTimeout>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d00d      	beq.n	8006d56 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d3e:	2b04      	cmp	r3, #4
 8006d40:	d107      	bne.n	8006d52 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	e050      	b.n	8006df8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006d56:	893b      	ldrh	r3, [r7, #8]
 8006d58:	b2da      	uxtb	r2, r3
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d62:	6a39      	ldr	r1, [r7, #32]
 8006d64:	68f8      	ldr	r0, [r7, #12]
 8006d66:	f000 f967 	bl	8007038 <I2C_WaitOnTXEFlagUntilTimeout>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d00d      	beq.n	8006d8c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d74:	2b04      	cmp	r3, #4
 8006d76:	d107      	bne.n	8006d88 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d86:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e035      	b.n	8006df8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d9a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d9e:	9300      	str	r3, [sp, #0]
 8006da0:	6a3b      	ldr	r3, [r7, #32]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006da8:	68f8      	ldr	r0, [r7, #12]
 8006daa:	f000 f82b 	bl	8006e04 <I2C_WaitOnFlagUntilTimeout>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d00d      	beq.n	8006dd0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006dc2:	d103      	bne.n	8006dcc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006dca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006dcc:	2303      	movs	r3, #3
 8006dce:	e013      	b.n	8006df8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006dd0:	897b      	ldrh	r3, [r7, #10]
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	f043 0301 	orr.w	r3, r3, #1
 8006dd8:	b2da      	uxtb	r2, r3
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de2:	6a3a      	ldr	r2, [r7, #32]
 8006de4:	4906      	ldr	r1, [pc, #24]	@ (8006e00 <I2C_RequestMemoryRead+0x1cc>)
 8006de6:	68f8      	ldr	r0, [r7, #12]
 8006de8:	f000 f886 	bl	8006ef8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d001      	beq.n	8006df6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	e000      	b.n	8006df8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3718      	adds	r7, #24
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	00010002 	.word	0x00010002

08006e04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	603b      	str	r3, [r7, #0]
 8006e10:	4613      	mov	r3, r2
 8006e12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e14:	e048      	b.n	8006ea8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e1c:	d044      	beq.n	8006ea8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e1e:	f7fe f847 	bl	8004eb0 <HAL_GetTick>
 8006e22:	4602      	mov	r2, r0
 8006e24:	69bb      	ldr	r3, [r7, #24]
 8006e26:	1ad3      	subs	r3, r2, r3
 8006e28:	683a      	ldr	r2, [r7, #0]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d302      	bcc.n	8006e34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d139      	bne.n	8006ea8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	0c1b      	lsrs	r3, r3, #16
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d10d      	bne.n	8006e5a <I2C_WaitOnFlagUntilTimeout+0x56>
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	695b      	ldr	r3, [r3, #20]
 8006e44:	43da      	mvns	r2, r3
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	4013      	ands	r3, r2
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	bf0c      	ite	eq
 8006e50:	2301      	moveq	r3, #1
 8006e52:	2300      	movne	r3, #0
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	461a      	mov	r2, r3
 8006e58:	e00c      	b.n	8006e74 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	699b      	ldr	r3, [r3, #24]
 8006e60:	43da      	mvns	r2, r3
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	4013      	ands	r3, r2
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	bf0c      	ite	eq
 8006e6c:	2301      	moveq	r3, #1
 8006e6e:	2300      	movne	r3, #0
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	461a      	mov	r2, r3
 8006e74:	79fb      	ldrb	r3, [r7, #7]
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d116      	bne.n	8006ea8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2220      	movs	r2, #32
 8006e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e94:	f043 0220 	orr.w	r2, r3, #32
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e023      	b.n	8006ef0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	0c1b      	lsrs	r3, r3, #16
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d10d      	bne.n	8006ece <I2C_WaitOnFlagUntilTimeout+0xca>
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	695b      	ldr	r3, [r3, #20]
 8006eb8:	43da      	mvns	r2, r3
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	4013      	ands	r3, r2
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	bf0c      	ite	eq
 8006ec4:	2301      	moveq	r3, #1
 8006ec6:	2300      	movne	r3, #0
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	461a      	mov	r2, r3
 8006ecc:	e00c      	b.n	8006ee8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	699b      	ldr	r3, [r3, #24]
 8006ed4:	43da      	mvns	r2, r3
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	4013      	ands	r3, r2
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	bf0c      	ite	eq
 8006ee0:	2301      	moveq	r3, #1
 8006ee2:	2300      	movne	r3, #0
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	79fb      	ldrb	r3, [r7, #7]
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d093      	beq.n	8006e16 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3710      	adds	r7, #16
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	607a      	str	r2, [r7, #4]
 8006f04:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006f06:	e071      	b.n	8006fec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	695b      	ldr	r3, [r3, #20]
 8006f0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f16:	d123      	bne.n	8006f60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f26:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006f30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2200      	movs	r2, #0
 8006f36:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2220      	movs	r2, #32
 8006f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f4c:	f043 0204 	orr.w	r2, r3, #4
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e067      	b.n	8007030 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f66:	d041      	beq.n	8006fec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f68:	f7fd ffa2 	bl	8004eb0 <HAL_GetTick>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	1ad3      	subs	r3, r2, r3
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d302      	bcc.n	8006f7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d136      	bne.n	8006fec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	0c1b      	lsrs	r3, r3, #16
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d10c      	bne.n	8006fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	695b      	ldr	r3, [r3, #20]
 8006f8e:	43da      	mvns	r2, r3
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	4013      	ands	r3, r2
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	bf14      	ite	ne
 8006f9a:	2301      	movne	r3, #1
 8006f9c:	2300      	moveq	r3, #0
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	e00b      	b.n	8006fba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	699b      	ldr	r3, [r3, #24]
 8006fa8:	43da      	mvns	r2, r3
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	4013      	ands	r3, r2
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	bf14      	ite	ne
 8006fb4:	2301      	movne	r3, #1
 8006fb6:	2300      	moveq	r3, #0
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d016      	beq.n	8006fec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2220      	movs	r2, #32
 8006fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fd8:	f043 0220 	orr.w	r2, r3, #32
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e021      	b.n	8007030 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	0c1b      	lsrs	r3, r3, #16
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d10c      	bne.n	8007010 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	695b      	ldr	r3, [r3, #20]
 8006ffc:	43da      	mvns	r2, r3
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	4013      	ands	r3, r2
 8007002:	b29b      	uxth	r3, r3
 8007004:	2b00      	cmp	r3, #0
 8007006:	bf14      	ite	ne
 8007008:	2301      	movne	r3, #1
 800700a:	2300      	moveq	r3, #0
 800700c:	b2db      	uxtb	r3, r3
 800700e:	e00b      	b.n	8007028 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	699b      	ldr	r3, [r3, #24]
 8007016:	43da      	mvns	r2, r3
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	4013      	ands	r3, r2
 800701c:	b29b      	uxth	r3, r3
 800701e:	2b00      	cmp	r3, #0
 8007020:	bf14      	ite	ne
 8007022:	2301      	movne	r3, #1
 8007024:	2300      	moveq	r3, #0
 8007026:	b2db      	uxtb	r3, r3
 8007028:	2b00      	cmp	r3, #0
 800702a:	f47f af6d 	bne.w	8006f08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800702e:	2300      	movs	r3, #0
}
 8007030:	4618      	mov	r0, r3
 8007032:	3710      	adds	r7, #16
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007044:	e034      	b.n	80070b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007046:	68f8      	ldr	r0, [r7, #12]
 8007048:	f000 f8e3 	bl	8007212 <I2C_IsAcknowledgeFailed>
 800704c:	4603      	mov	r3, r0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d001      	beq.n	8007056 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	e034      	b.n	80070c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800705c:	d028      	beq.n	80070b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800705e:	f7fd ff27 	bl	8004eb0 <HAL_GetTick>
 8007062:	4602      	mov	r2, r0
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	1ad3      	subs	r3, r2, r3
 8007068:	68ba      	ldr	r2, [r7, #8]
 800706a:	429a      	cmp	r2, r3
 800706c:	d302      	bcc.n	8007074 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d11d      	bne.n	80070b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	695b      	ldr	r3, [r3, #20]
 800707a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800707e:	2b80      	cmp	r3, #128	@ 0x80
 8007080:	d016      	beq.n	80070b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2200      	movs	r2, #0
 8007086:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2220      	movs	r2, #32
 800708c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2200      	movs	r2, #0
 8007094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800709c:	f043 0220 	orr.w	r2, r3, #32
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2200      	movs	r2, #0
 80070a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80070ac:	2301      	movs	r3, #1
 80070ae:	e007      	b.n	80070c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	695b      	ldr	r3, [r3, #20]
 80070b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070ba:	2b80      	cmp	r3, #128	@ 0x80
 80070bc:	d1c3      	bne.n	8007046 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3710      	adds	r7, #16
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	60b9      	str	r1, [r7, #8]
 80070d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80070d4:	e034      	b.n	8007140 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80070d6:	68f8      	ldr	r0, [r7, #12]
 80070d8:	f000 f89b 	bl	8007212 <I2C_IsAcknowledgeFailed>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d001      	beq.n	80070e6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e034      	b.n	8007150 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ec:	d028      	beq.n	8007140 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070ee:	f7fd fedf 	bl	8004eb0 <HAL_GetTick>
 80070f2:	4602      	mov	r2, r0
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	1ad3      	subs	r3, r2, r3
 80070f8:	68ba      	ldr	r2, [r7, #8]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d302      	bcc.n	8007104 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d11d      	bne.n	8007140 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	695b      	ldr	r3, [r3, #20]
 800710a:	f003 0304 	and.w	r3, r3, #4
 800710e:	2b04      	cmp	r3, #4
 8007110:	d016      	beq.n	8007140 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2200      	movs	r2, #0
 8007116:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2220      	movs	r2, #32
 800711c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2200      	movs	r2, #0
 8007124:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800712c:	f043 0220 	orr.w	r2, r3, #32
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2200      	movs	r2, #0
 8007138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	e007      	b.n	8007150 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	695b      	ldr	r3, [r3, #20]
 8007146:	f003 0304 	and.w	r3, r3, #4
 800714a:	2b04      	cmp	r3, #4
 800714c:	d1c3      	bne.n	80070d6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800714e:	2300      	movs	r3, #0
}
 8007150:	4618      	mov	r0, r3
 8007152:	3710      	adds	r7, #16
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
 8007162:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007164:	e049      	b.n	80071fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	695b      	ldr	r3, [r3, #20]
 800716c:	f003 0310 	and.w	r3, r3, #16
 8007170:	2b10      	cmp	r3, #16
 8007172:	d119      	bne.n	80071a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f06f 0210 	mvn.w	r2, #16
 800717c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2200      	movs	r2, #0
 8007182:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2220      	movs	r2, #32
 8007188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2200      	movs	r2, #0
 8007190:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2200      	movs	r2, #0
 80071a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80071a4:	2301      	movs	r3, #1
 80071a6:	e030      	b.n	800720a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071a8:	f7fd fe82 	bl	8004eb0 <HAL_GetTick>
 80071ac:	4602      	mov	r2, r0
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	68ba      	ldr	r2, [r7, #8]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d302      	bcc.n	80071be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d11d      	bne.n	80071fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	695b      	ldr	r3, [r3, #20]
 80071c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071c8:	2b40      	cmp	r3, #64	@ 0x40
 80071ca:	d016      	beq.n	80071fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2200      	movs	r2, #0
 80071d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2220      	movs	r2, #32
 80071d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2200      	movs	r2, #0
 80071de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071e6:	f043 0220 	orr.w	r2, r3, #32
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2200      	movs	r2, #0
 80071f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	e007      	b.n	800720a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	695b      	ldr	r3, [r3, #20]
 8007200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007204:	2b40      	cmp	r3, #64	@ 0x40
 8007206:	d1ae      	bne.n	8007166 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007212:	b480      	push	{r7}
 8007214:	b083      	sub	sp, #12
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	695b      	ldr	r3, [r3, #20]
 8007220:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007224:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007228:	d11b      	bne.n	8007262 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007232:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2220      	movs	r2, #32
 800723e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800724e:	f043 0204 	orr.w	r2, r3, #4
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e000      	b.n	8007264 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	bc80      	pop	{r7}
 800726c:	4770      	bx	lr

0800726e <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800726e:	b580      	push	{r7, lr}
 8007270:	b084      	sub	sp, #16
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d101      	bne.n	8007280 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	e036      	b.n	80072ee <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8007288:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f245 5255 	movw	r2, #21845	@ 0x5555
 8007292:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	6852      	ldr	r2, [r2, #4]
 800729c:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	6892      	ldr	r2, [r2, #8]
 80072a6:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80072a8:	f7fd fe02 	bl	8004eb0 <HAL_GetTick>
 80072ac:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80072ae:	e011      	b.n	80072d4 <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80072b0:	f7fd fdfe 	bl	8004eb0 <HAL_GetTick>
 80072b4:	4602      	mov	r2, r0
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	1ad3      	subs	r3, r2, r3
 80072ba:	f241 323c 	movw	r2, #4924	@ 0x133c
 80072be:	4293      	cmp	r3, r2
 80072c0:	d908      	bls.n	80072d4 <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	f003 0303 	and.w	r3, r3, #3
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d001      	beq.n	80072d4 <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 80072d0:	2303      	movs	r3, #3
 80072d2:	e00c      	b.n	80072ee <HAL_IWDG_Init+0x80>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	68db      	ldr	r3, [r3, #12]
 80072da:	f003 0303 	and.w	r3, r3, #3
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d1e6      	bne.n	80072b0 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80072ea:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80072ec:	2300      	movs	r3, #0
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3710      	adds	r7, #16
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}

080072f6 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80072f6:	b480      	push	{r7}
 80072f8:	b083      	sub	sp, #12
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8007306:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007308:	2300      	movs	r3, #0
}
 800730a:	4618      	mov	r0, r3
 800730c:	370c      	adds	r7, #12
 800730e:	46bd      	mov	sp, r7
 8007310:	bc80      	pop	{r7}
 8007312:	4770      	bx	lr

08007314 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage threshold corresponding to each
  *         detection level.
  * @retval None
  */
void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8007314:	b480      	push	{r7}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
 800731c:	4b2a      	ldr	r3, [pc, #168]	@ (80073c8 <HAL_PWR_ConfigPVD+0xb4>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4927      	ldr	r1, [pc, #156]	@ (80073c8 <HAL_PWR_ConfigPVD+0xb4>)
 800732a:	4313      	orrs	r3, r2
 800732c:	600b      	str	r3, [r1, #0]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 800732e:	4b27      	ldr	r3, [pc, #156]	@ (80073cc <HAL_PWR_ConfigPVD+0xb8>)
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	4a26      	ldr	r2, [pc, #152]	@ (80073cc <HAL_PWR_ConfigPVD+0xb8>)
 8007334:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007338:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 800733a:	4b24      	ldr	r3, [pc, #144]	@ (80073cc <HAL_PWR_ConfigPVD+0xb8>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a23      	ldr	r2, [pc, #140]	@ (80073cc <HAL_PWR_ConfigPVD+0xb8>)
 8007340:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007344:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 8007346:	4b21      	ldr	r3, [pc, #132]	@ (80073cc <HAL_PWR_ConfigPVD+0xb8>)
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	4a20      	ldr	r2, [pc, #128]	@ (80073cc <HAL_PWR_ConfigPVD+0xb8>)
 800734c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007350:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8007352:	4b1e      	ldr	r3, [pc, #120]	@ (80073cc <HAL_PWR_ConfigPVD+0xb8>)
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	4a1d      	ldr	r2, [pc, #116]	@ (80073cc <HAL_PWR_ConfigPVD+0xb8>)
 8007358:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800735c:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007366:	2b00      	cmp	r3, #0
 8007368:	d005      	beq.n	8007376 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 800736a:	4b18      	ldr	r3, [pc, #96]	@ (80073cc <HAL_PWR_ConfigPVD+0xb8>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a17      	ldr	r2, [pc, #92]	@ (80073cc <HAL_PWR_ConfigPVD+0xb8>)
 8007370:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007374:	6013      	str	r3, [r2, #0]
  }
  
  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800737e:	2b00      	cmp	r3, #0
 8007380:	d005      	beq.n	800738e <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8007382:	4b12      	ldr	r3, [pc, #72]	@ (80073cc <HAL_PWR_ConfigPVD+0xb8>)
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	4a11      	ldr	r2, [pc, #68]	@ (80073cc <HAL_PWR_ConfigPVD+0xb8>)
 8007388:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800738c:	6053      	str	r3, [r2, #4]
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	f003 0301 	and.w	r3, r3, #1
 8007396:	2b00      	cmp	r3, #0
 8007398:	d005      	beq.n	80073a6 <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 800739a:	4b0c      	ldr	r3, [pc, #48]	@ (80073cc <HAL_PWR_ConfigPVD+0xb8>)
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	4a0b      	ldr	r2, [pc, #44]	@ (80073cc <HAL_PWR_ConfigPVD+0xb8>)
 80073a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073a4:	6093      	str	r3, [r2, #8]
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	f003 0302 	and.w	r3, r3, #2
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d005      	beq.n	80073be <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 80073b2:	4b06      	ldr	r3, [pc, #24]	@ (80073cc <HAL_PWR_ConfigPVD+0xb8>)
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	4a05      	ldr	r2, [pc, #20]	@ (80073cc <HAL_PWR_ConfigPVD+0xb8>)
 80073b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073bc:	60d3      	str	r3, [r2, #12]
  }
}
 80073be:	bf00      	nop
 80073c0:	370c      	adds	r7, #12
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bc80      	pop	{r7}
 80073c6:	4770      	bx	lr
 80073c8:	40007000 	.word	0x40007000
 80073cc:	40010400 	.word	0x40010400

080073d0 <HAL_PWR_EnablePVD>:
/**
  * @brief  Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 80073d0:	b480      	push	{r7}
 80073d2:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)ENABLE;
 80073d4:	4b03      	ldr	r3, [pc, #12]	@ (80073e4 <HAL_PWR_EnablePVD+0x14>)
 80073d6:	2201      	movs	r2, #1
 80073d8:	601a      	str	r2, [r3, #0]
}
 80073da:	bf00      	nop
 80073dc:	46bd      	mov	sp, r7
 80073de:	bc80      	pop	{r7}
 80073e0:	4770      	bx	lr
 80073e2:	bf00      	nop
 80073e4:	420e0010 	.word	0x420e0010

080073e8 <HAL_PWR_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 80073ec:	4b06      	ldr	r3, [pc, #24]	@ (8007408 <HAL_PWR_PVD_IRQHandler+0x20>)
 80073ee:	695b      	ldr	r3, [r3, #20]
 80073f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d005      	beq.n	8007404 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 80073f8:	f7fd fcbe 	bl	8004d78 <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 80073fc:	4b02      	ldr	r3, [pc, #8]	@ (8007408 <HAL_PWR_PVD_IRQHandler+0x20>)
 80073fe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8007402:	615a      	str	r2, [r3, #20]
  }
}
 8007404:	bf00      	nop
 8007406:	bd80      	pop	{r7, pc}
 8007408:	40010400 	.word	0x40010400

0800740c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b086      	sub	sp, #24
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d101      	bne.n	800741e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	e272      	b.n	8007904 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f003 0301 	and.w	r3, r3, #1
 8007426:	2b00      	cmp	r3, #0
 8007428:	f000 8087 	beq.w	800753a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800742c:	4b92      	ldr	r3, [pc, #584]	@ (8007678 <HAL_RCC_OscConfig+0x26c>)
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	f003 030c 	and.w	r3, r3, #12
 8007434:	2b04      	cmp	r3, #4
 8007436:	d00c      	beq.n	8007452 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007438:	4b8f      	ldr	r3, [pc, #572]	@ (8007678 <HAL_RCC_OscConfig+0x26c>)
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	f003 030c 	and.w	r3, r3, #12
 8007440:	2b08      	cmp	r3, #8
 8007442:	d112      	bne.n	800746a <HAL_RCC_OscConfig+0x5e>
 8007444:	4b8c      	ldr	r3, [pc, #560]	@ (8007678 <HAL_RCC_OscConfig+0x26c>)
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800744c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007450:	d10b      	bne.n	800746a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007452:	4b89      	ldr	r3, [pc, #548]	@ (8007678 <HAL_RCC_OscConfig+0x26c>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800745a:	2b00      	cmp	r3, #0
 800745c:	d06c      	beq.n	8007538 <HAL_RCC_OscConfig+0x12c>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d168      	bne.n	8007538 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	e24c      	b.n	8007904 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007472:	d106      	bne.n	8007482 <HAL_RCC_OscConfig+0x76>
 8007474:	4b80      	ldr	r3, [pc, #512]	@ (8007678 <HAL_RCC_OscConfig+0x26c>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a7f      	ldr	r2, [pc, #508]	@ (8007678 <HAL_RCC_OscConfig+0x26c>)
 800747a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800747e:	6013      	str	r3, [r2, #0]
 8007480:	e02e      	b.n	80074e0 <HAL_RCC_OscConfig+0xd4>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d10c      	bne.n	80074a4 <HAL_RCC_OscConfig+0x98>
 800748a:	4b7b      	ldr	r3, [pc, #492]	@ (8007678 <HAL_RCC_OscConfig+0x26c>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a7a      	ldr	r2, [pc, #488]	@ (8007678 <HAL_RCC_OscConfig+0x26c>)
 8007490:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007494:	6013      	str	r3, [r2, #0]
 8007496:	4b78      	ldr	r3, [pc, #480]	@ (8007678 <HAL_RCC_OscConfig+0x26c>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a77      	ldr	r2, [pc, #476]	@ (8007678 <HAL_RCC_OscConfig+0x26c>)
 800749c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80074a0:	6013      	str	r3, [r2, #0]
 80074a2:	e01d      	b.n	80074e0 <HAL_RCC_OscConfig+0xd4>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80074ac:	d10c      	bne.n	80074c8 <HAL_RCC_OscConfig+0xbc>
 80074ae:	4b72      	ldr	r3, [pc, #456]	@ (8007678 <HAL_RCC_OscConfig+0x26c>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a71      	ldr	r2, [pc, #452]	@ (8007678 <HAL_RCC_OscConfig+0x26c>)
 80074b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80074b8:	6013      	str	r3, [r2, #0]
 80074ba:	4b6f      	ldr	r3, [pc, #444]	@ (8007678 <HAL_RCC_OscConfig+0x26c>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a6e      	ldr	r2, [pc, #440]	@ (8007678 <HAL_RCC_OscConfig+0x26c>)
 80074c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074c4:	6013      	str	r3, [r2, #0]
 80074c6:	e00b      	b.n	80074e0 <HAL_RCC_OscConfig+0xd4>
 80074c8:	4b6b      	ldr	r3, [pc, #428]	@ (8007678 <HAL_RCC_OscConfig+0x26c>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a6a      	ldr	r2, [pc, #424]	@ (8007678 <HAL_RCC_OscConfig+0x26c>)
 80074ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80074d2:	6013      	str	r3, [r2, #0]
 80074d4:	4b68      	ldr	r3, [pc, #416]	@ (8007678 <HAL_RCC_OscConfig+0x26c>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a67      	ldr	r2, [pc, #412]	@ (8007678 <HAL_RCC_OscConfig+0x26c>)
 80074da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80074de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d013      	beq.n	8007510 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074e8:	f7fd fce2 	bl	8004eb0 <HAL_GetTick>
 80074ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074ee:	e008      	b.n	8007502 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80074f0:	f7fd fcde 	bl	8004eb0 <HAL_GetTick>
 80074f4:	4602      	mov	r2, r0
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	1ad3      	subs	r3, r2, r3
 80074fa:	2b64      	cmp	r3, #100	@ 0x64
 80074fc:	d901      	bls.n	8007502 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80074fe:	2303      	movs	r3, #3
 8007500:	e200      	b.n	8007904 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007502:	4b5d      	ldr	r3, [pc, #372]	@ (8007678 <HAL_RCC_OscConfig+0x26c>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800750a:	2b00      	cmp	r3, #0
 800750c:	d0f0      	beq.n	80074f0 <HAL_RCC_OscConfig+0xe4>
 800750e:	e014      	b.n	800753a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007510:	f7fd fcce 	bl	8004eb0 <HAL_GetTick>
 8007514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007516:	e008      	b.n	800752a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007518:	f7fd fcca 	bl	8004eb0 <HAL_GetTick>
 800751c:	4602      	mov	r2, r0
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	2b64      	cmp	r3, #100	@ 0x64
 8007524:	d901      	bls.n	800752a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007526:	2303      	movs	r3, #3
 8007528:	e1ec      	b.n	8007904 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800752a:	4b53      	ldr	r3, [pc, #332]	@ (8007678 <HAL_RCC_OscConfig+0x26c>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007532:	2b00      	cmp	r3, #0
 8007534:	d1f0      	bne.n	8007518 <HAL_RCC_OscConfig+0x10c>
 8007536:	e000      	b.n	800753a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007538:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f003 0302 	and.w	r3, r3, #2
 8007542:	2b00      	cmp	r3, #0
 8007544:	d063      	beq.n	800760e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007546:	4b4c      	ldr	r3, [pc, #304]	@ (8007678 <HAL_RCC_OscConfig+0x26c>)
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	f003 030c 	and.w	r3, r3, #12
 800754e:	2b00      	cmp	r3, #0
 8007550:	d00b      	beq.n	800756a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007552:	4b49      	ldr	r3, [pc, #292]	@ (8007678 <HAL_RCC_OscConfig+0x26c>)
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	f003 030c 	and.w	r3, r3, #12
 800755a:	2b08      	cmp	r3, #8
 800755c:	d11c      	bne.n	8007598 <HAL_RCC_OscConfig+0x18c>
 800755e:	4b46      	ldr	r3, [pc, #280]	@ (8007678 <HAL_RCC_OscConfig+0x26c>)
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007566:	2b00      	cmp	r3, #0
 8007568:	d116      	bne.n	8007598 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800756a:	4b43      	ldr	r3, [pc, #268]	@ (8007678 <HAL_RCC_OscConfig+0x26c>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f003 0302 	and.w	r3, r3, #2
 8007572:	2b00      	cmp	r3, #0
 8007574:	d005      	beq.n	8007582 <HAL_RCC_OscConfig+0x176>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	691b      	ldr	r3, [r3, #16]
 800757a:	2b01      	cmp	r3, #1
 800757c:	d001      	beq.n	8007582 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	e1c0      	b.n	8007904 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007582:	4b3d      	ldr	r3, [pc, #244]	@ (8007678 <HAL_RCC_OscConfig+0x26c>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	695b      	ldr	r3, [r3, #20]
 800758e:	00db      	lsls	r3, r3, #3
 8007590:	4939      	ldr	r1, [pc, #228]	@ (8007678 <HAL_RCC_OscConfig+0x26c>)
 8007592:	4313      	orrs	r3, r2
 8007594:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007596:	e03a      	b.n	800760e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	691b      	ldr	r3, [r3, #16]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d020      	beq.n	80075e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80075a0:	4b36      	ldr	r3, [pc, #216]	@ (800767c <HAL_RCC_OscConfig+0x270>)
 80075a2:	2201      	movs	r2, #1
 80075a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075a6:	f7fd fc83 	bl	8004eb0 <HAL_GetTick>
 80075aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075ac:	e008      	b.n	80075c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80075ae:	f7fd fc7f 	bl	8004eb0 <HAL_GetTick>
 80075b2:	4602      	mov	r2, r0
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	1ad3      	subs	r3, r2, r3
 80075b8:	2b02      	cmp	r3, #2
 80075ba:	d901      	bls.n	80075c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80075bc:	2303      	movs	r3, #3
 80075be:	e1a1      	b.n	8007904 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075c0:	4b2d      	ldr	r3, [pc, #180]	@ (8007678 <HAL_RCC_OscConfig+0x26c>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f003 0302 	and.w	r3, r3, #2
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d0f0      	beq.n	80075ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075cc:	4b2a      	ldr	r3, [pc, #168]	@ (8007678 <HAL_RCC_OscConfig+0x26c>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	695b      	ldr	r3, [r3, #20]
 80075d8:	00db      	lsls	r3, r3, #3
 80075da:	4927      	ldr	r1, [pc, #156]	@ (8007678 <HAL_RCC_OscConfig+0x26c>)
 80075dc:	4313      	orrs	r3, r2
 80075de:	600b      	str	r3, [r1, #0]
 80075e0:	e015      	b.n	800760e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80075e2:	4b26      	ldr	r3, [pc, #152]	@ (800767c <HAL_RCC_OscConfig+0x270>)
 80075e4:	2200      	movs	r2, #0
 80075e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075e8:	f7fd fc62 	bl	8004eb0 <HAL_GetTick>
 80075ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80075ee:	e008      	b.n	8007602 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80075f0:	f7fd fc5e 	bl	8004eb0 <HAL_GetTick>
 80075f4:	4602      	mov	r2, r0
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	1ad3      	subs	r3, r2, r3
 80075fa:	2b02      	cmp	r3, #2
 80075fc:	d901      	bls.n	8007602 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80075fe:	2303      	movs	r3, #3
 8007600:	e180      	b.n	8007904 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007602:	4b1d      	ldr	r3, [pc, #116]	@ (8007678 <HAL_RCC_OscConfig+0x26c>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f003 0302 	and.w	r3, r3, #2
 800760a:	2b00      	cmp	r3, #0
 800760c:	d1f0      	bne.n	80075f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f003 0308 	and.w	r3, r3, #8
 8007616:	2b00      	cmp	r3, #0
 8007618:	d03a      	beq.n	8007690 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	699b      	ldr	r3, [r3, #24]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d019      	beq.n	8007656 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007622:	4b17      	ldr	r3, [pc, #92]	@ (8007680 <HAL_RCC_OscConfig+0x274>)
 8007624:	2201      	movs	r2, #1
 8007626:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007628:	f7fd fc42 	bl	8004eb0 <HAL_GetTick>
 800762c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800762e:	e008      	b.n	8007642 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007630:	f7fd fc3e 	bl	8004eb0 <HAL_GetTick>
 8007634:	4602      	mov	r2, r0
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	1ad3      	subs	r3, r2, r3
 800763a:	2b02      	cmp	r3, #2
 800763c:	d901      	bls.n	8007642 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800763e:	2303      	movs	r3, #3
 8007640:	e160      	b.n	8007904 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007642:	4b0d      	ldr	r3, [pc, #52]	@ (8007678 <HAL_RCC_OscConfig+0x26c>)
 8007644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007646:	f003 0302 	and.w	r3, r3, #2
 800764a:	2b00      	cmp	r3, #0
 800764c:	d0f0      	beq.n	8007630 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800764e:	2001      	movs	r0, #1
 8007650:	f000 faba 	bl	8007bc8 <RCC_Delay>
 8007654:	e01c      	b.n	8007690 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007656:	4b0a      	ldr	r3, [pc, #40]	@ (8007680 <HAL_RCC_OscConfig+0x274>)
 8007658:	2200      	movs	r2, #0
 800765a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800765c:	f7fd fc28 	bl	8004eb0 <HAL_GetTick>
 8007660:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007662:	e00f      	b.n	8007684 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007664:	f7fd fc24 	bl	8004eb0 <HAL_GetTick>
 8007668:	4602      	mov	r2, r0
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	1ad3      	subs	r3, r2, r3
 800766e:	2b02      	cmp	r3, #2
 8007670:	d908      	bls.n	8007684 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007672:	2303      	movs	r3, #3
 8007674:	e146      	b.n	8007904 <HAL_RCC_OscConfig+0x4f8>
 8007676:	bf00      	nop
 8007678:	40021000 	.word	0x40021000
 800767c:	42420000 	.word	0x42420000
 8007680:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007684:	4b92      	ldr	r3, [pc, #584]	@ (80078d0 <HAL_RCC_OscConfig+0x4c4>)
 8007686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007688:	f003 0302 	and.w	r3, r3, #2
 800768c:	2b00      	cmp	r3, #0
 800768e:	d1e9      	bne.n	8007664 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f003 0304 	and.w	r3, r3, #4
 8007698:	2b00      	cmp	r3, #0
 800769a:	f000 80a6 	beq.w	80077ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800769e:	2300      	movs	r3, #0
 80076a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80076a2:	4b8b      	ldr	r3, [pc, #556]	@ (80078d0 <HAL_RCC_OscConfig+0x4c4>)
 80076a4:	69db      	ldr	r3, [r3, #28]
 80076a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d10d      	bne.n	80076ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80076ae:	4b88      	ldr	r3, [pc, #544]	@ (80078d0 <HAL_RCC_OscConfig+0x4c4>)
 80076b0:	69db      	ldr	r3, [r3, #28]
 80076b2:	4a87      	ldr	r2, [pc, #540]	@ (80078d0 <HAL_RCC_OscConfig+0x4c4>)
 80076b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80076b8:	61d3      	str	r3, [r2, #28]
 80076ba:	4b85      	ldr	r3, [pc, #532]	@ (80078d0 <HAL_RCC_OscConfig+0x4c4>)
 80076bc:	69db      	ldr	r3, [r3, #28]
 80076be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076c2:	60bb      	str	r3, [r7, #8]
 80076c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80076c6:	2301      	movs	r3, #1
 80076c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076ca:	4b82      	ldr	r3, [pc, #520]	@ (80078d4 <HAL_RCC_OscConfig+0x4c8>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d118      	bne.n	8007708 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80076d6:	4b7f      	ldr	r3, [pc, #508]	@ (80078d4 <HAL_RCC_OscConfig+0x4c8>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a7e      	ldr	r2, [pc, #504]	@ (80078d4 <HAL_RCC_OscConfig+0x4c8>)
 80076dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80076e2:	f7fd fbe5 	bl	8004eb0 <HAL_GetTick>
 80076e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076e8:	e008      	b.n	80076fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076ea:	f7fd fbe1 	bl	8004eb0 <HAL_GetTick>
 80076ee:	4602      	mov	r2, r0
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	1ad3      	subs	r3, r2, r3
 80076f4:	2b64      	cmp	r3, #100	@ 0x64
 80076f6:	d901      	bls.n	80076fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80076f8:	2303      	movs	r3, #3
 80076fa:	e103      	b.n	8007904 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076fc:	4b75      	ldr	r3, [pc, #468]	@ (80078d4 <HAL_RCC_OscConfig+0x4c8>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007704:	2b00      	cmp	r3, #0
 8007706:	d0f0      	beq.n	80076ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	2b01      	cmp	r3, #1
 800770e:	d106      	bne.n	800771e <HAL_RCC_OscConfig+0x312>
 8007710:	4b6f      	ldr	r3, [pc, #444]	@ (80078d0 <HAL_RCC_OscConfig+0x4c4>)
 8007712:	6a1b      	ldr	r3, [r3, #32]
 8007714:	4a6e      	ldr	r2, [pc, #440]	@ (80078d0 <HAL_RCC_OscConfig+0x4c4>)
 8007716:	f043 0301 	orr.w	r3, r3, #1
 800771a:	6213      	str	r3, [r2, #32]
 800771c:	e02d      	b.n	800777a <HAL_RCC_OscConfig+0x36e>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d10c      	bne.n	8007740 <HAL_RCC_OscConfig+0x334>
 8007726:	4b6a      	ldr	r3, [pc, #424]	@ (80078d0 <HAL_RCC_OscConfig+0x4c4>)
 8007728:	6a1b      	ldr	r3, [r3, #32]
 800772a:	4a69      	ldr	r2, [pc, #420]	@ (80078d0 <HAL_RCC_OscConfig+0x4c4>)
 800772c:	f023 0301 	bic.w	r3, r3, #1
 8007730:	6213      	str	r3, [r2, #32]
 8007732:	4b67      	ldr	r3, [pc, #412]	@ (80078d0 <HAL_RCC_OscConfig+0x4c4>)
 8007734:	6a1b      	ldr	r3, [r3, #32]
 8007736:	4a66      	ldr	r2, [pc, #408]	@ (80078d0 <HAL_RCC_OscConfig+0x4c4>)
 8007738:	f023 0304 	bic.w	r3, r3, #4
 800773c:	6213      	str	r3, [r2, #32]
 800773e:	e01c      	b.n	800777a <HAL_RCC_OscConfig+0x36e>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	68db      	ldr	r3, [r3, #12]
 8007744:	2b05      	cmp	r3, #5
 8007746:	d10c      	bne.n	8007762 <HAL_RCC_OscConfig+0x356>
 8007748:	4b61      	ldr	r3, [pc, #388]	@ (80078d0 <HAL_RCC_OscConfig+0x4c4>)
 800774a:	6a1b      	ldr	r3, [r3, #32]
 800774c:	4a60      	ldr	r2, [pc, #384]	@ (80078d0 <HAL_RCC_OscConfig+0x4c4>)
 800774e:	f043 0304 	orr.w	r3, r3, #4
 8007752:	6213      	str	r3, [r2, #32]
 8007754:	4b5e      	ldr	r3, [pc, #376]	@ (80078d0 <HAL_RCC_OscConfig+0x4c4>)
 8007756:	6a1b      	ldr	r3, [r3, #32]
 8007758:	4a5d      	ldr	r2, [pc, #372]	@ (80078d0 <HAL_RCC_OscConfig+0x4c4>)
 800775a:	f043 0301 	orr.w	r3, r3, #1
 800775e:	6213      	str	r3, [r2, #32]
 8007760:	e00b      	b.n	800777a <HAL_RCC_OscConfig+0x36e>
 8007762:	4b5b      	ldr	r3, [pc, #364]	@ (80078d0 <HAL_RCC_OscConfig+0x4c4>)
 8007764:	6a1b      	ldr	r3, [r3, #32]
 8007766:	4a5a      	ldr	r2, [pc, #360]	@ (80078d0 <HAL_RCC_OscConfig+0x4c4>)
 8007768:	f023 0301 	bic.w	r3, r3, #1
 800776c:	6213      	str	r3, [r2, #32]
 800776e:	4b58      	ldr	r3, [pc, #352]	@ (80078d0 <HAL_RCC_OscConfig+0x4c4>)
 8007770:	6a1b      	ldr	r3, [r3, #32]
 8007772:	4a57      	ldr	r2, [pc, #348]	@ (80078d0 <HAL_RCC_OscConfig+0x4c4>)
 8007774:	f023 0304 	bic.w	r3, r3, #4
 8007778:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	68db      	ldr	r3, [r3, #12]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d015      	beq.n	80077ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007782:	f7fd fb95 	bl	8004eb0 <HAL_GetTick>
 8007786:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007788:	e00a      	b.n	80077a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800778a:	f7fd fb91 	bl	8004eb0 <HAL_GetTick>
 800778e:	4602      	mov	r2, r0
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	1ad3      	subs	r3, r2, r3
 8007794:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007798:	4293      	cmp	r3, r2
 800779a:	d901      	bls.n	80077a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800779c:	2303      	movs	r3, #3
 800779e:	e0b1      	b.n	8007904 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077a0:	4b4b      	ldr	r3, [pc, #300]	@ (80078d0 <HAL_RCC_OscConfig+0x4c4>)
 80077a2:	6a1b      	ldr	r3, [r3, #32]
 80077a4:	f003 0302 	and.w	r3, r3, #2
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d0ee      	beq.n	800778a <HAL_RCC_OscConfig+0x37e>
 80077ac:	e014      	b.n	80077d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80077ae:	f7fd fb7f 	bl	8004eb0 <HAL_GetTick>
 80077b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80077b4:	e00a      	b.n	80077cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077b6:	f7fd fb7b 	bl	8004eb0 <HAL_GetTick>
 80077ba:	4602      	mov	r2, r0
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	1ad3      	subs	r3, r2, r3
 80077c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d901      	bls.n	80077cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80077c8:	2303      	movs	r3, #3
 80077ca:	e09b      	b.n	8007904 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80077cc:	4b40      	ldr	r3, [pc, #256]	@ (80078d0 <HAL_RCC_OscConfig+0x4c4>)
 80077ce:	6a1b      	ldr	r3, [r3, #32]
 80077d0:	f003 0302 	and.w	r3, r3, #2
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d1ee      	bne.n	80077b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80077d8:	7dfb      	ldrb	r3, [r7, #23]
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d105      	bne.n	80077ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80077de:	4b3c      	ldr	r3, [pc, #240]	@ (80078d0 <HAL_RCC_OscConfig+0x4c4>)
 80077e0:	69db      	ldr	r3, [r3, #28]
 80077e2:	4a3b      	ldr	r2, [pc, #236]	@ (80078d0 <HAL_RCC_OscConfig+0x4c4>)
 80077e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80077e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	69db      	ldr	r3, [r3, #28]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	f000 8087 	beq.w	8007902 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80077f4:	4b36      	ldr	r3, [pc, #216]	@ (80078d0 <HAL_RCC_OscConfig+0x4c4>)
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	f003 030c 	and.w	r3, r3, #12
 80077fc:	2b08      	cmp	r3, #8
 80077fe:	d061      	beq.n	80078c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	69db      	ldr	r3, [r3, #28]
 8007804:	2b02      	cmp	r3, #2
 8007806:	d146      	bne.n	8007896 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007808:	4b33      	ldr	r3, [pc, #204]	@ (80078d8 <HAL_RCC_OscConfig+0x4cc>)
 800780a:	2200      	movs	r2, #0
 800780c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800780e:	f7fd fb4f 	bl	8004eb0 <HAL_GetTick>
 8007812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007814:	e008      	b.n	8007828 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007816:	f7fd fb4b 	bl	8004eb0 <HAL_GetTick>
 800781a:	4602      	mov	r2, r0
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	1ad3      	subs	r3, r2, r3
 8007820:	2b02      	cmp	r3, #2
 8007822:	d901      	bls.n	8007828 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007824:	2303      	movs	r3, #3
 8007826:	e06d      	b.n	8007904 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007828:	4b29      	ldr	r3, [pc, #164]	@ (80078d0 <HAL_RCC_OscConfig+0x4c4>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007830:	2b00      	cmp	r3, #0
 8007832:	d1f0      	bne.n	8007816 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6a1b      	ldr	r3, [r3, #32]
 8007838:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800783c:	d108      	bne.n	8007850 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800783e:	4b24      	ldr	r3, [pc, #144]	@ (80078d0 <HAL_RCC_OscConfig+0x4c4>)
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	4921      	ldr	r1, [pc, #132]	@ (80078d0 <HAL_RCC_OscConfig+0x4c4>)
 800784c:	4313      	orrs	r3, r2
 800784e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007850:	4b1f      	ldr	r3, [pc, #124]	@ (80078d0 <HAL_RCC_OscConfig+0x4c4>)
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6a19      	ldr	r1, [r3, #32]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007860:	430b      	orrs	r3, r1
 8007862:	491b      	ldr	r1, [pc, #108]	@ (80078d0 <HAL_RCC_OscConfig+0x4c4>)
 8007864:	4313      	orrs	r3, r2
 8007866:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007868:	4b1b      	ldr	r3, [pc, #108]	@ (80078d8 <HAL_RCC_OscConfig+0x4cc>)
 800786a:	2201      	movs	r2, #1
 800786c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800786e:	f7fd fb1f 	bl	8004eb0 <HAL_GetTick>
 8007872:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007874:	e008      	b.n	8007888 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007876:	f7fd fb1b 	bl	8004eb0 <HAL_GetTick>
 800787a:	4602      	mov	r2, r0
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	1ad3      	subs	r3, r2, r3
 8007880:	2b02      	cmp	r3, #2
 8007882:	d901      	bls.n	8007888 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007884:	2303      	movs	r3, #3
 8007886:	e03d      	b.n	8007904 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007888:	4b11      	ldr	r3, [pc, #68]	@ (80078d0 <HAL_RCC_OscConfig+0x4c4>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007890:	2b00      	cmp	r3, #0
 8007892:	d0f0      	beq.n	8007876 <HAL_RCC_OscConfig+0x46a>
 8007894:	e035      	b.n	8007902 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007896:	4b10      	ldr	r3, [pc, #64]	@ (80078d8 <HAL_RCC_OscConfig+0x4cc>)
 8007898:	2200      	movs	r2, #0
 800789a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800789c:	f7fd fb08 	bl	8004eb0 <HAL_GetTick>
 80078a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80078a2:	e008      	b.n	80078b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078a4:	f7fd fb04 	bl	8004eb0 <HAL_GetTick>
 80078a8:	4602      	mov	r2, r0
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	1ad3      	subs	r3, r2, r3
 80078ae:	2b02      	cmp	r3, #2
 80078b0:	d901      	bls.n	80078b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80078b2:	2303      	movs	r3, #3
 80078b4:	e026      	b.n	8007904 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80078b6:	4b06      	ldr	r3, [pc, #24]	@ (80078d0 <HAL_RCC_OscConfig+0x4c4>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d1f0      	bne.n	80078a4 <HAL_RCC_OscConfig+0x498>
 80078c2:	e01e      	b.n	8007902 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	69db      	ldr	r3, [r3, #28]
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d107      	bne.n	80078dc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80078cc:	2301      	movs	r3, #1
 80078ce:	e019      	b.n	8007904 <HAL_RCC_OscConfig+0x4f8>
 80078d0:	40021000 	.word	0x40021000
 80078d4:	40007000 	.word	0x40007000
 80078d8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80078dc:	4b0b      	ldr	r3, [pc, #44]	@ (800790c <HAL_RCC_OscConfig+0x500>)
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6a1b      	ldr	r3, [r3, #32]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d106      	bne.n	80078fe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d001      	beq.n	8007902 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80078fe:	2301      	movs	r3, #1
 8007900:	e000      	b.n	8007904 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007902:	2300      	movs	r3, #0
}
 8007904:	4618      	mov	r0, r3
 8007906:	3718      	adds	r7, #24
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}
 800790c:	40021000 	.word	0x40021000

08007910 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d101      	bne.n	8007924 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007920:	2301      	movs	r3, #1
 8007922:	e0d0      	b.n	8007ac6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007924:	4b6a      	ldr	r3, [pc, #424]	@ (8007ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f003 0307 	and.w	r3, r3, #7
 800792c:	683a      	ldr	r2, [r7, #0]
 800792e:	429a      	cmp	r2, r3
 8007930:	d910      	bls.n	8007954 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007932:	4b67      	ldr	r3, [pc, #412]	@ (8007ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f023 0207 	bic.w	r2, r3, #7
 800793a:	4965      	ldr	r1, [pc, #404]	@ (8007ad0 <HAL_RCC_ClockConfig+0x1c0>)
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	4313      	orrs	r3, r2
 8007940:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007942:	4b63      	ldr	r3, [pc, #396]	@ (8007ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f003 0307 	and.w	r3, r3, #7
 800794a:	683a      	ldr	r2, [r7, #0]
 800794c:	429a      	cmp	r2, r3
 800794e:	d001      	beq.n	8007954 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007950:	2301      	movs	r3, #1
 8007952:	e0b8      	b.n	8007ac6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 0302 	and.w	r3, r3, #2
 800795c:	2b00      	cmp	r3, #0
 800795e:	d020      	beq.n	80079a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f003 0304 	and.w	r3, r3, #4
 8007968:	2b00      	cmp	r3, #0
 800796a:	d005      	beq.n	8007978 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800796c:	4b59      	ldr	r3, [pc, #356]	@ (8007ad4 <HAL_RCC_ClockConfig+0x1c4>)
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	4a58      	ldr	r2, [pc, #352]	@ (8007ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8007972:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007976:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f003 0308 	and.w	r3, r3, #8
 8007980:	2b00      	cmp	r3, #0
 8007982:	d005      	beq.n	8007990 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007984:	4b53      	ldr	r3, [pc, #332]	@ (8007ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	4a52      	ldr	r2, [pc, #328]	@ (8007ad4 <HAL_RCC_ClockConfig+0x1c4>)
 800798a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800798e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007990:	4b50      	ldr	r3, [pc, #320]	@ (8007ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	494d      	ldr	r1, [pc, #308]	@ (8007ad4 <HAL_RCC_ClockConfig+0x1c4>)
 800799e:	4313      	orrs	r3, r2
 80079a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f003 0301 	and.w	r3, r3, #1
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d040      	beq.n	8007a30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d107      	bne.n	80079c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079b6:	4b47      	ldr	r3, [pc, #284]	@ (8007ad4 <HAL_RCC_ClockConfig+0x1c4>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d115      	bne.n	80079ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80079c2:	2301      	movs	r3, #1
 80079c4:	e07f      	b.n	8007ac6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	2b02      	cmp	r3, #2
 80079cc:	d107      	bne.n	80079de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079ce:	4b41      	ldr	r3, [pc, #260]	@ (8007ad4 <HAL_RCC_ClockConfig+0x1c4>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d109      	bne.n	80079ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80079da:	2301      	movs	r3, #1
 80079dc:	e073      	b.n	8007ac6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079de:	4b3d      	ldr	r3, [pc, #244]	@ (8007ad4 <HAL_RCC_ClockConfig+0x1c4>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f003 0302 	and.w	r3, r3, #2
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d101      	bne.n	80079ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	e06b      	b.n	8007ac6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80079ee:	4b39      	ldr	r3, [pc, #228]	@ (8007ad4 <HAL_RCC_ClockConfig+0x1c4>)
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	f023 0203 	bic.w	r2, r3, #3
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	4936      	ldr	r1, [pc, #216]	@ (8007ad4 <HAL_RCC_ClockConfig+0x1c4>)
 80079fc:	4313      	orrs	r3, r2
 80079fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007a00:	f7fd fa56 	bl	8004eb0 <HAL_GetTick>
 8007a04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a06:	e00a      	b.n	8007a1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a08:	f7fd fa52 	bl	8004eb0 <HAL_GetTick>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	1ad3      	subs	r3, r2, r3
 8007a12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d901      	bls.n	8007a1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007a1a:	2303      	movs	r3, #3
 8007a1c:	e053      	b.n	8007ac6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a1e:	4b2d      	ldr	r3, [pc, #180]	@ (8007ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	f003 020c 	and.w	r2, r3, #12
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d1eb      	bne.n	8007a08 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007a30:	4b27      	ldr	r3, [pc, #156]	@ (8007ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f003 0307 	and.w	r3, r3, #7
 8007a38:	683a      	ldr	r2, [r7, #0]
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d210      	bcs.n	8007a60 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a3e:	4b24      	ldr	r3, [pc, #144]	@ (8007ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f023 0207 	bic.w	r2, r3, #7
 8007a46:	4922      	ldr	r1, [pc, #136]	@ (8007ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a4e:	4b20      	ldr	r3, [pc, #128]	@ (8007ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f003 0307 	and.w	r3, r3, #7
 8007a56:	683a      	ldr	r2, [r7, #0]
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d001      	beq.n	8007a60 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	e032      	b.n	8007ac6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f003 0304 	and.w	r3, r3, #4
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d008      	beq.n	8007a7e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007a6c:	4b19      	ldr	r3, [pc, #100]	@ (8007ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	68db      	ldr	r3, [r3, #12]
 8007a78:	4916      	ldr	r1, [pc, #88]	@ (8007ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f003 0308 	and.w	r3, r3, #8
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d009      	beq.n	8007a9e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007a8a:	4b12      	ldr	r3, [pc, #72]	@ (8007ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	691b      	ldr	r3, [r3, #16]
 8007a96:	00db      	lsls	r3, r3, #3
 8007a98:	490e      	ldr	r1, [pc, #56]	@ (8007ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007a9e:	f000 f821 	bl	8007ae4 <HAL_RCC_GetSysClockFreq>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8007ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	091b      	lsrs	r3, r3, #4
 8007aaa:	f003 030f 	and.w	r3, r3, #15
 8007aae:	490a      	ldr	r1, [pc, #40]	@ (8007ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8007ab0:	5ccb      	ldrb	r3, [r1, r3]
 8007ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ab6:	4a09      	ldr	r2, [pc, #36]	@ (8007adc <HAL_RCC_ClockConfig+0x1cc>)
 8007ab8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007aba:	4b09      	ldr	r3, [pc, #36]	@ (8007ae0 <HAL_RCC_ClockConfig+0x1d0>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f7fd f9b4 	bl	8004e2c <HAL_InitTick>

  return HAL_OK;
 8007ac4:	2300      	movs	r3, #0
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3710      	adds	r7, #16
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	40022000 	.word	0x40022000
 8007ad4:	40021000 	.word	0x40021000
 8007ad8:	0800a238 	.word	0x0800a238
 8007adc:	200007e4 	.word	0x200007e4
 8007ae0:	200007e8 	.word	0x200007e8

08007ae4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b087      	sub	sp, #28
 8007ae8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007aea:	2300      	movs	r3, #0
 8007aec:	60fb      	str	r3, [r7, #12]
 8007aee:	2300      	movs	r3, #0
 8007af0:	60bb      	str	r3, [r7, #8]
 8007af2:	2300      	movs	r3, #0
 8007af4:	617b      	str	r3, [r7, #20]
 8007af6:	2300      	movs	r3, #0
 8007af8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007afa:	2300      	movs	r3, #0
 8007afc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007afe:	4b1e      	ldr	r3, [pc, #120]	@ (8007b78 <HAL_RCC_GetSysClockFreq+0x94>)
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f003 030c 	and.w	r3, r3, #12
 8007b0a:	2b04      	cmp	r3, #4
 8007b0c:	d002      	beq.n	8007b14 <HAL_RCC_GetSysClockFreq+0x30>
 8007b0e:	2b08      	cmp	r3, #8
 8007b10:	d003      	beq.n	8007b1a <HAL_RCC_GetSysClockFreq+0x36>
 8007b12:	e027      	b.n	8007b64 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007b14:	4b19      	ldr	r3, [pc, #100]	@ (8007b7c <HAL_RCC_GetSysClockFreq+0x98>)
 8007b16:	613b      	str	r3, [r7, #16]
      break;
 8007b18:	e027      	b.n	8007b6a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	0c9b      	lsrs	r3, r3, #18
 8007b1e:	f003 030f 	and.w	r3, r3, #15
 8007b22:	4a17      	ldr	r2, [pc, #92]	@ (8007b80 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007b24:	5cd3      	ldrb	r3, [r2, r3]
 8007b26:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d010      	beq.n	8007b54 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007b32:	4b11      	ldr	r3, [pc, #68]	@ (8007b78 <HAL_RCC_GetSysClockFreq+0x94>)
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	0c5b      	lsrs	r3, r3, #17
 8007b38:	f003 0301 	and.w	r3, r3, #1
 8007b3c:	4a11      	ldr	r2, [pc, #68]	@ (8007b84 <HAL_RCC_GetSysClockFreq+0xa0>)
 8007b3e:	5cd3      	ldrb	r3, [r2, r3]
 8007b40:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4a0d      	ldr	r2, [pc, #52]	@ (8007b7c <HAL_RCC_GetSysClockFreq+0x98>)
 8007b46:	fb03 f202 	mul.w	r2, r3, r2
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b50:	617b      	str	r3, [r7, #20]
 8007b52:	e004      	b.n	8007b5e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	4a0c      	ldr	r2, [pc, #48]	@ (8007b88 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007b58:	fb02 f303 	mul.w	r3, r2, r3
 8007b5c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	613b      	str	r3, [r7, #16]
      break;
 8007b62:	e002      	b.n	8007b6a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007b64:	4b05      	ldr	r3, [pc, #20]	@ (8007b7c <HAL_RCC_GetSysClockFreq+0x98>)
 8007b66:	613b      	str	r3, [r7, #16]
      break;
 8007b68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b6a:	693b      	ldr	r3, [r7, #16]
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	371c      	adds	r7, #28
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bc80      	pop	{r7}
 8007b74:	4770      	bx	lr
 8007b76:	bf00      	nop
 8007b78:	40021000 	.word	0x40021000
 8007b7c:	007a1200 	.word	0x007a1200
 8007b80:	0800a250 	.word	0x0800a250
 8007b84:	0800a260 	.word	0x0800a260
 8007b88:	003d0900 	.word	0x003d0900

08007b8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b90:	4b02      	ldr	r3, [pc, #8]	@ (8007b9c <HAL_RCC_GetHCLKFreq+0x10>)
 8007b92:	681b      	ldr	r3, [r3, #0]
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bc80      	pop	{r7}
 8007b9a:	4770      	bx	lr
 8007b9c:	200007e4 	.word	0x200007e4

08007ba0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007ba4:	f7ff fff2 	bl	8007b8c <HAL_RCC_GetHCLKFreq>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	4b05      	ldr	r3, [pc, #20]	@ (8007bc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	0a1b      	lsrs	r3, r3, #8
 8007bb0:	f003 0307 	and.w	r3, r3, #7
 8007bb4:	4903      	ldr	r1, [pc, #12]	@ (8007bc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007bb6:	5ccb      	ldrb	r3, [r1, r3]
 8007bb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	bd80      	pop	{r7, pc}
 8007bc0:	40021000 	.word	0x40021000
 8007bc4:	0800a248 	.word	0x0800a248

08007bc8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b085      	sub	sp, #20
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8007bfc <RCC_Delay+0x34>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a0a      	ldr	r2, [pc, #40]	@ (8007c00 <RCC_Delay+0x38>)
 8007bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8007bda:	0a5b      	lsrs	r3, r3, #9
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	fb02 f303 	mul.w	r3, r2, r3
 8007be2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007be4:	bf00      	nop
  }
  while (Delay --);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	1e5a      	subs	r2, r3, #1
 8007bea:	60fa      	str	r2, [r7, #12]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d1f9      	bne.n	8007be4 <RCC_Delay+0x1c>
}
 8007bf0:	bf00      	nop
 8007bf2:	bf00      	nop
 8007bf4:	3714      	adds	r7, #20
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bc80      	pop	{r7}
 8007bfa:	4770      	bx	lr
 8007bfc:	200007e4 	.word	0x200007e4
 8007c00:	10624dd3 	.word	0x10624dd3

08007c04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d101      	bne.n	8007c16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	e041      	b.n	8007c9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d106      	bne.n	8007c30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f7fd f824 	bl	8004c78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2202      	movs	r2, #2
 8007c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	3304      	adds	r3, #4
 8007c40:	4619      	mov	r1, r3
 8007c42:	4610      	mov	r0, r2
 8007c44:	f000 fa5c 	bl	8008100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2201      	movs	r2, #1
 8007c54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2201      	movs	r2, #1
 8007c64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2201      	movs	r2, #1
 8007c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3708      	adds	r7, #8
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
	...

08007ca4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b085      	sub	sp, #20
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d001      	beq.n	8007cbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	e03a      	b.n	8007d32 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2202      	movs	r2, #2
 8007cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	68da      	ldr	r2, [r3, #12]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f042 0201 	orr.w	r2, r2, #1
 8007cd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a18      	ldr	r2, [pc, #96]	@ (8007d3c <HAL_TIM_Base_Start_IT+0x98>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d00e      	beq.n	8007cfc <HAL_TIM_Base_Start_IT+0x58>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ce6:	d009      	beq.n	8007cfc <HAL_TIM_Base_Start_IT+0x58>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a14      	ldr	r2, [pc, #80]	@ (8007d40 <HAL_TIM_Base_Start_IT+0x9c>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d004      	beq.n	8007cfc <HAL_TIM_Base_Start_IT+0x58>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a13      	ldr	r2, [pc, #76]	@ (8007d44 <HAL_TIM_Base_Start_IT+0xa0>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d111      	bne.n	8007d20 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	f003 0307 	and.w	r3, r3, #7
 8007d06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2b06      	cmp	r3, #6
 8007d0c:	d010      	beq.n	8007d30 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f042 0201 	orr.w	r2, r2, #1
 8007d1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d1e:	e007      	b.n	8007d30 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	681a      	ldr	r2, [r3, #0]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f042 0201 	orr.w	r2, r2, #1
 8007d2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007d30:	2300      	movs	r3, #0
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3714      	adds	r7, #20
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bc80      	pop	{r7}
 8007d3a:	4770      	bx	lr
 8007d3c:	40012c00 	.word	0x40012c00
 8007d40:	40000400 	.word	0x40000400
 8007d44:	40000800 	.word	0x40000800

08007d48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	68db      	ldr	r3, [r3, #12]
 8007d56:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	691b      	ldr	r3, [r3, #16]
 8007d5e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	f003 0302 	and.w	r3, r3, #2
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d020      	beq.n	8007dac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f003 0302 	and.w	r3, r3, #2
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d01b      	beq.n	8007dac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f06f 0202 	mvn.w	r2, #2
 8007d7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2201      	movs	r2, #1
 8007d82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	699b      	ldr	r3, [r3, #24]
 8007d8a:	f003 0303 	and.w	r3, r3, #3
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d003      	beq.n	8007d9a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 f998 	bl	80080c8 <HAL_TIM_IC_CaptureCallback>
 8007d98:	e005      	b.n	8007da6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 f98b 	bl	80080b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 f99a 	bl	80080da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	f003 0304 	and.w	r3, r3, #4
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d020      	beq.n	8007df8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f003 0304 	and.w	r3, r3, #4
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d01b      	beq.n	8007df8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f06f 0204 	mvn.w	r2, #4
 8007dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2202      	movs	r2, #2
 8007dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	699b      	ldr	r3, [r3, #24]
 8007dd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d003      	beq.n	8007de6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 f972 	bl	80080c8 <HAL_TIM_IC_CaptureCallback>
 8007de4:	e005      	b.n	8007df2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 f965 	bl	80080b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 f974 	bl	80080da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	f003 0308 	and.w	r3, r3, #8
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d020      	beq.n	8007e44 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f003 0308 	and.w	r3, r3, #8
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d01b      	beq.n	8007e44 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f06f 0208 	mvn.w	r2, #8
 8007e14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2204      	movs	r2, #4
 8007e1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	69db      	ldr	r3, [r3, #28]
 8007e22:	f003 0303 	and.w	r3, r3, #3
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d003      	beq.n	8007e32 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 f94c 	bl	80080c8 <HAL_TIM_IC_CaptureCallback>
 8007e30:	e005      	b.n	8007e3e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 f93f 	bl	80080b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f000 f94e 	bl	80080da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	f003 0310 	and.w	r3, r3, #16
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d020      	beq.n	8007e90 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f003 0310 	and.w	r3, r3, #16
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d01b      	beq.n	8007e90 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f06f 0210 	mvn.w	r2, #16
 8007e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2208      	movs	r2, #8
 8007e66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	69db      	ldr	r3, [r3, #28]
 8007e6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d003      	beq.n	8007e7e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 f926 	bl	80080c8 <HAL_TIM_IC_CaptureCallback>
 8007e7c:	e005      	b.n	8007e8a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 f919 	bl	80080b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 f928 	bl	80080da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	f003 0301 	and.w	r3, r3, #1
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d00c      	beq.n	8007eb4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	f003 0301 	and.w	r3, r3, #1
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d007      	beq.n	8007eb4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f06f 0201 	mvn.w	r2, #1
 8007eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f7fc f9a0 	bl	80041f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d00c      	beq.n	8007ed8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d007      	beq.n	8007ed8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 fa7f 	bl	80083d6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d00c      	beq.n	8007efc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d007      	beq.n	8007efc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 f8f8 	bl	80080ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	f003 0320 	and.w	r3, r3, #32
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d00c      	beq.n	8007f20 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f003 0320 	and.w	r3, r3, #32
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d007      	beq.n	8007f20 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f06f 0220 	mvn.w	r2, #32
 8007f18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 fa52 	bl	80083c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f20:	bf00      	nop
 8007f22:	3710      	adds	r7, #16
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f32:	2300      	movs	r3, #0
 8007f34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d101      	bne.n	8007f44 <HAL_TIM_ConfigClockSource+0x1c>
 8007f40:	2302      	movs	r3, #2
 8007f42:	e0b4      	b.n	80080ae <HAL_TIM_ConfigClockSource+0x186>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2201      	movs	r2, #1
 8007f48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2202      	movs	r2, #2
 8007f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007f62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007f6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	68ba      	ldr	r2, [r7, #8]
 8007f72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f7c:	d03e      	beq.n	8007ffc <HAL_TIM_ConfigClockSource+0xd4>
 8007f7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f82:	f200 8087 	bhi.w	8008094 <HAL_TIM_ConfigClockSource+0x16c>
 8007f86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f8a:	f000 8086 	beq.w	800809a <HAL_TIM_ConfigClockSource+0x172>
 8007f8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f92:	d87f      	bhi.n	8008094 <HAL_TIM_ConfigClockSource+0x16c>
 8007f94:	2b70      	cmp	r3, #112	@ 0x70
 8007f96:	d01a      	beq.n	8007fce <HAL_TIM_ConfigClockSource+0xa6>
 8007f98:	2b70      	cmp	r3, #112	@ 0x70
 8007f9a:	d87b      	bhi.n	8008094 <HAL_TIM_ConfigClockSource+0x16c>
 8007f9c:	2b60      	cmp	r3, #96	@ 0x60
 8007f9e:	d050      	beq.n	8008042 <HAL_TIM_ConfigClockSource+0x11a>
 8007fa0:	2b60      	cmp	r3, #96	@ 0x60
 8007fa2:	d877      	bhi.n	8008094 <HAL_TIM_ConfigClockSource+0x16c>
 8007fa4:	2b50      	cmp	r3, #80	@ 0x50
 8007fa6:	d03c      	beq.n	8008022 <HAL_TIM_ConfigClockSource+0xfa>
 8007fa8:	2b50      	cmp	r3, #80	@ 0x50
 8007faa:	d873      	bhi.n	8008094 <HAL_TIM_ConfigClockSource+0x16c>
 8007fac:	2b40      	cmp	r3, #64	@ 0x40
 8007fae:	d058      	beq.n	8008062 <HAL_TIM_ConfigClockSource+0x13a>
 8007fb0:	2b40      	cmp	r3, #64	@ 0x40
 8007fb2:	d86f      	bhi.n	8008094 <HAL_TIM_ConfigClockSource+0x16c>
 8007fb4:	2b30      	cmp	r3, #48	@ 0x30
 8007fb6:	d064      	beq.n	8008082 <HAL_TIM_ConfigClockSource+0x15a>
 8007fb8:	2b30      	cmp	r3, #48	@ 0x30
 8007fba:	d86b      	bhi.n	8008094 <HAL_TIM_ConfigClockSource+0x16c>
 8007fbc:	2b20      	cmp	r3, #32
 8007fbe:	d060      	beq.n	8008082 <HAL_TIM_ConfigClockSource+0x15a>
 8007fc0:	2b20      	cmp	r3, #32
 8007fc2:	d867      	bhi.n	8008094 <HAL_TIM_ConfigClockSource+0x16c>
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d05c      	beq.n	8008082 <HAL_TIM_ConfigClockSource+0x15a>
 8007fc8:	2b10      	cmp	r3, #16
 8007fca:	d05a      	beq.n	8008082 <HAL_TIM_ConfigClockSource+0x15a>
 8007fcc:	e062      	b.n	8008094 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007fde:	f000 f974 	bl	80082ca <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007ff0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	68ba      	ldr	r2, [r7, #8]
 8007ff8:	609a      	str	r2, [r3, #8]
      break;
 8007ffa:	e04f      	b.n	800809c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800800c:	f000 f95d 	bl	80082ca <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	689a      	ldr	r2, [r3, #8]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800801e:	609a      	str	r2, [r3, #8]
      break;
 8008020:	e03c      	b.n	800809c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800802e:	461a      	mov	r2, r3
 8008030:	f000 f8d4 	bl	80081dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	2150      	movs	r1, #80	@ 0x50
 800803a:	4618      	mov	r0, r3
 800803c:	f000 f92b 	bl	8008296 <TIM_ITRx_SetConfig>
      break;
 8008040:	e02c      	b.n	800809c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800804e:	461a      	mov	r2, r3
 8008050:	f000 f8f2 	bl	8008238 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	2160      	movs	r1, #96	@ 0x60
 800805a:	4618      	mov	r0, r3
 800805c:	f000 f91b 	bl	8008296 <TIM_ITRx_SetConfig>
      break;
 8008060:	e01c      	b.n	800809c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800806e:	461a      	mov	r2, r3
 8008070:	f000 f8b4 	bl	80081dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	2140      	movs	r1, #64	@ 0x40
 800807a:	4618      	mov	r0, r3
 800807c:	f000 f90b 	bl	8008296 <TIM_ITRx_SetConfig>
      break;
 8008080:	e00c      	b.n	800809c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4619      	mov	r1, r3
 800808c:	4610      	mov	r0, r2
 800808e:	f000 f902 	bl	8008296 <TIM_ITRx_SetConfig>
      break;
 8008092:	e003      	b.n	800809c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008094:	2301      	movs	r3, #1
 8008096:	73fb      	strb	r3, [r7, #15]
      break;
 8008098:	e000      	b.n	800809c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800809a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2201      	movs	r2, #1
 80080a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2200      	movs	r2, #0
 80080a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80080ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3710      	adds	r7, #16
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80080b6:	b480      	push	{r7}
 80080b8:	b083      	sub	sp, #12
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80080be:	bf00      	nop
 80080c0:	370c      	adds	r7, #12
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bc80      	pop	{r7}
 80080c6:	4770      	bx	lr

080080c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b083      	sub	sp, #12
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80080d0:	bf00      	nop
 80080d2:	370c      	adds	r7, #12
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bc80      	pop	{r7}
 80080d8:	4770      	bx	lr

080080da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80080da:	b480      	push	{r7}
 80080dc:	b083      	sub	sp, #12
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80080e2:	bf00      	nop
 80080e4:	370c      	adds	r7, #12
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bc80      	pop	{r7}
 80080ea:	4770      	bx	lr

080080ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80080f4:	bf00      	nop
 80080f6:	370c      	adds	r7, #12
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bc80      	pop	{r7}
 80080fc:	4770      	bx	lr
	...

08008100 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008100:	b480      	push	{r7}
 8008102:	b085      	sub	sp, #20
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	4a2f      	ldr	r2, [pc, #188]	@ (80081d0 <TIM_Base_SetConfig+0xd0>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d00b      	beq.n	8008130 <TIM_Base_SetConfig+0x30>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800811e:	d007      	beq.n	8008130 <TIM_Base_SetConfig+0x30>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	4a2c      	ldr	r2, [pc, #176]	@ (80081d4 <TIM_Base_SetConfig+0xd4>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d003      	beq.n	8008130 <TIM_Base_SetConfig+0x30>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	4a2b      	ldr	r2, [pc, #172]	@ (80081d8 <TIM_Base_SetConfig+0xd8>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d108      	bne.n	8008142 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008136:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	68fa      	ldr	r2, [r7, #12]
 800813e:	4313      	orrs	r3, r2
 8008140:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	4a22      	ldr	r2, [pc, #136]	@ (80081d0 <TIM_Base_SetConfig+0xd0>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d00b      	beq.n	8008162 <TIM_Base_SetConfig+0x62>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008150:	d007      	beq.n	8008162 <TIM_Base_SetConfig+0x62>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	4a1f      	ldr	r2, [pc, #124]	@ (80081d4 <TIM_Base_SetConfig+0xd4>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d003      	beq.n	8008162 <TIM_Base_SetConfig+0x62>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	4a1e      	ldr	r2, [pc, #120]	@ (80081d8 <TIM_Base_SetConfig+0xd8>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d108      	bne.n	8008174 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008168:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	68db      	ldr	r3, [r3, #12]
 800816e:	68fa      	ldr	r2, [r7, #12]
 8008170:	4313      	orrs	r3, r2
 8008172:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	695b      	ldr	r3, [r3, #20]
 800817e:	4313      	orrs	r3, r2
 8008180:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	68fa      	ldr	r2, [r7, #12]
 8008186:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	689a      	ldr	r2, [r3, #8]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	4a0d      	ldr	r2, [pc, #52]	@ (80081d0 <TIM_Base_SetConfig+0xd0>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d103      	bne.n	80081a8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	691a      	ldr	r2, [r3, #16]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2201      	movs	r2, #1
 80081ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	691b      	ldr	r3, [r3, #16]
 80081b2:	f003 0301 	and.w	r3, r3, #1
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d005      	beq.n	80081c6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	691b      	ldr	r3, [r3, #16]
 80081be:	f023 0201 	bic.w	r2, r3, #1
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	611a      	str	r2, [r3, #16]
  }
}
 80081c6:	bf00      	nop
 80081c8:	3714      	adds	r7, #20
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bc80      	pop	{r7}
 80081ce:	4770      	bx	lr
 80081d0:	40012c00 	.word	0x40012c00
 80081d4:	40000400 	.word	0x40000400
 80081d8:	40000800 	.word	0x40000800

080081dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081dc:	b480      	push	{r7}
 80081de:	b087      	sub	sp, #28
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	60f8      	str	r0, [r7, #12]
 80081e4:	60b9      	str	r1, [r7, #8]
 80081e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	6a1b      	ldr	r3, [r3, #32]
 80081ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	6a1b      	ldr	r3, [r3, #32]
 80081f2:	f023 0201 	bic.w	r2, r3, #1
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	699b      	ldr	r3, [r3, #24]
 80081fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008206:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	011b      	lsls	r3, r3, #4
 800820c:	693a      	ldr	r2, [r7, #16]
 800820e:	4313      	orrs	r3, r2
 8008210:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	f023 030a 	bic.w	r3, r3, #10
 8008218:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800821a:	697a      	ldr	r2, [r7, #20]
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	4313      	orrs	r3, r2
 8008220:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	693a      	ldr	r2, [r7, #16]
 8008226:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	697a      	ldr	r2, [r7, #20]
 800822c:	621a      	str	r2, [r3, #32]
}
 800822e:	bf00      	nop
 8008230:	371c      	adds	r7, #28
 8008232:	46bd      	mov	sp, r7
 8008234:	bc80      	pop	{r7}
 8008236:	4770      	bx	lr

08008238 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008238:	b480      	push	{r7}
 800823a:	b087      	sub	sp, #28
 800823c:	af00      	add	r7, sp, #0
 800823e:	60f8      	str	r0, [r7, #12]
 8008240:	60b9      	str	r1, [r7, #8]
 8008242:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	6a1b      	ldr	r3, [r3, #32]
 8008248:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	6a1b      	ldr	r3, [r3, #32]
 800824e:	f023 0210 	bic.w	r2, r3, #16
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	699b      	ldr	r3, [r3, #24]
 800825a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008262:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	031b      	lsls	r3, r3, #12
 8008268:	693a      	ldr	r2, [r7, #16]
 800826a:	4313      	orrs	r3, r2
 800826c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008274:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	011b      	lsls	r3, r3, #4
 800827a:	697a      	ldr	r2, [r7, #20]
 800827c:	4313      	orrs	r3, r2
 800827e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	693a      	ldr	r2, [r7, #16]
 8008284:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	697a      	ldr	r2, [r7, #20]
 800828a:	621a      	str	r2, [r3, #32]
}
 800828c:	bf00      	nop
 800828e:	371c      	adds	r7, #28
 8008290:	46bd      	mov	sp, r7
 8008292:	bc80      	pop	{r7}
 8008294:	4770      	bx	lr

08008296 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008296:	b480      	push	{r7}
 8008298:	b085      	sub	sp, #20
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
 800829e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80082ae:	683a      	ldr	r2, [r7, #0]
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	4313      	orrs	r3, r2
 80082b4:	f043 0307 	orr.w	r3, r3, #7
 80082b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	68fa      	ldr	r2, [r7, #12]
 80082be:	609a      	str	r2, [r3, #8]
}
 80082c0:	bf00      	nop
 80082c2:	3714      	adds	r7, #20
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bc80      	pop	{r7}
 80082c8:	4770      	bx	lr

080082ca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80082ca:	b480      	push	{r7}
 80082cc:	b087      	sub	sp, #28
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	60f8      	str	r0, [r7, #12]
 80082d2:	60b9      	str	r1, [r7, #8]
 80082d4:	607a      	str	r2, [r7, #4]
 80082d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80082e4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	021a      	lsls	r2, r3, #8
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	431a      	orrs	r2, r3
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	4313      	orrs	r3, r2
 80082f2:	697a      	ldr	r2, [r7, #20]
 80082f4:	4313      	orrs	r3, r2
 80082f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	697a      	ldr	r2, [r7, #20]
 80082fc:	609a      	str	r2, [r3, #8]
}
 80082fe:	bf00      	nop
 8008300:	371c      	adds	r7, #28
 8008302:	46bd      	mov	sp, r7
 8008304:	bc80      	pop	{r7}
 8008306:	4770      	bx	lr

08008308 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008308:	b480      	push	{r7}
 800830a:	b085      	sub	sp, #20
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008318:	2b01      	cmp	r3, #1
 800831a:	d101      	bne.n	8008320 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800831c:	2302      	movs	r3, #2
 800831e:	e046      	b.n	80083ae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2201      	movs	r2, #1
 8008324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2202      	movs	r2, #2
 800832c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	689b      	ldr	r3, [r3, #8]
 800833e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008346:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	68fa      	ldr	r2, [r7, #12]
 800834e:	4313      	orrs	r3, r2
 8008350:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	68fa      	ldr	r2, [r7, #12]
 8008358:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a16      	ldr	r2, [pc, #88]	@ (80083b8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d00e      	beq.n	8008382 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800836c:	d009      	beq.n	8008382 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a12      	ldr	r2, [pc, #72]	@ (80083bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d004      	beq.n	8008382 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a10      	ldr	r2, [pc, #64]	@ (80083c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d10c      	bne.n	800839c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008388:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	68ba      	ldr	r2, [r7, #8]
 8008390:	4313      	orrs	r3, r2
 8008392:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	68ba      	ldr	r2, [r7, #8]
 800839a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2201      	movs	r2, #1
 80083a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80083ac:	2300      	movs	r3, #0
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3714      	adds	r7, #20
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bc80      	pop	{r7}
 80083b6:	4770      	bx	lr
 80083b8:	40012c00 	.word	0x40012c00
 80083bc:	40000400 	.word	0x40000400
 80083c0:	40000800 	.word	0x40000800

080083c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b083      	sub	sp, #12
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80083cc:	bf00      	nop
 80083ce:	370c      	adds	r7, #12
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bc80      	pop	{r7}
 80083d4:	4770      	bx	lr

080083d6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80083d6:	b480      	push	{r7}
 80083d8:	b083      	sub	sp, #12
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80083de:	bf00      	nop
 80083e0:	370c      	adds	r7, #12
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bc80      	pop	{r7}
 80083e6:	4770      	bx	lr

080083e8 <memset>:
 80083e8:	4603      	mov	r3, r0
 80083ea:	4402      	add	r2, r0
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d100      	bne.n	80083f2 <memset+0xa>
 80083f0:	4770      	bx	lr
 80083f2:	f803 1b01 	strb.w	r1, [r3], #1
 80083f6:	e7f9      	b.n	80083ec <memset+0x4>

080083f8 <__libc_init_array>:
 80083f8:	b570      	push	{r4, r5, r6, lr}
 80083fa:	2600      	movs	r6, #0
 80083fc:	4d0c      	ldr	r5, [pc, #48]	@ (8008430 <__libc_init_array+0x38>)
 80083fe:	4c0d      	ldr	r4, [pc, #52]	@ (8008434 <__libc_init_array+0x3c>)
 8008400:	1b64      	subs	r4, r4, r5
 8008402:	10a4      	asrs	r4, r4, #2
 8008404:	42a6      	cmp	r6, r4
 8008406:	d109      	bne.n	800841c <__libc_init_array+0x24>
 8008408:	f000 f81a 	bl	8008440 <_init>
 800840c:	2600      	movs	r6, #0
 800840e:	4d0a      	ldr	r5, [pc, #40]	@ (8008438 <__libc_init_array+0x40>)
 8008410:	4c0a      	ldr	r4, [pc, #40]	@ (800843c <__libc_init_array+0x44>)
 8008412:	1b64      	subs	r4, r4, r5
 8008414:	10a4      	asrs	r4, r4, #2
 8008416:	42a6      	cmp	r6, r4
 8008418:	d105      	bne.n	8008426 <__libc_init_array+0x2e>
 800841a:	bd70      	pop	{r4, r5, r6, pc}
 800841c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008420:	4798      	blx	r3
 8008422:	3601      	adds	r6, #1
 8008424:	e7ee      	b.n	8008404 <__libc_init_array+0xc>
 8008426:	f855 3b04 	ldr.w	r3, [r5], #4
 800842a:	4798      	blx	r3
 800842c:	3601      	adds	r6, #1
 800842e:	e7f2      	b.n	8008416 <__libc_init_array+0x1e>
 8008430:	0800a264 	.word	0x0800a264
 8008434:	0800a264 	.word	0x0800a264
 8008438:	0800a264 	.word	0x0800a264
 800843c:	0800a268 	.word	0x0800a268

08008440 <_init>:
 8008440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008442:	bf00      	nop
 8008444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008446:	bc08      	pop	{r3}
 8008448:	469e      	mov	lr, r3
 800844a:	4770      	bx	lr

0800844c <_fini>:
 800844c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800844e:	bf00      	nop
 8008450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008452:	bc08      	pop	{r3}
 8008454:	469e      	mov	lr, r3
 8008456:	4770      	bx	lr
